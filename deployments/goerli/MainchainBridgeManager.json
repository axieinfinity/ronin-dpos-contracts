{
  "address": "0x073de79499a1C7D474241755af8aa47e091f0664",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roninChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bridgeContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "callbackRegisters",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "governors",
          "type": "address[]"
        },
        {
          "internalType": "uint96[]",
          "name": "voteWeights",
          "type": "uint96[]"
        },
        {
          "internalType": "enum GlobalProposal.TargetOption[]",
          "name": "targetOptions",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        }
      ],
      "name": "ErrBridgeOperatorAlreadyExisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        }
      ],
      "name": "ErrBridgeOperatorUpdateFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCurrentProposalIsNotCompleted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrDuplicated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ErrInsufficientGas",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidArguments",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ErrInvalidChainId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidExpiryTimestamp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidOrder",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidProposalNonce",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidVoteWeight",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrOnlySelfCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrRelayFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrUnsupportedInterface",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrUnsupportedVoteType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrVoteIsFinalized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromBridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toBridgeOperator",
          "type": "address"
        }
      ],
      "name": "BridgeOperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "uint96[]",
          "name": "voteWeights",
          "type": "uint96[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "governors",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "globalProposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "globalProposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GlobalProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "registers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "returnDatas",
          "type": "bytes[]"
        }
      ],
      "name": "Notified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "successCalls",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "returnDatas",
          "type": "bytes[]"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "ProposalExpiryDurationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Ballot.VoteType",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum GlobalProposal.TargetOption",
          "name": "targetOption",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "TargetOptionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96[]",
          "name": "voteWeights",
          "type": "uint96[]"
        },
        {
          "internalType": "address[]",
          "name": "governors",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "addBridgeOperators",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "addeds",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteWeight",
          "type": "uint256"
        }
      ],
      "name": "checkThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "governors",
          "type": "address[]"
        }
      ],
      "name": "getBridgeOperatorOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        }
      ],
      "name": "getBridgeOperatorWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallbackRegisters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "registers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFullBridgeOperatorInfos",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "governors",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "getGovernorWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "governors",
          "type": "address[]"
        }
      ],
      "name": "getGovernorWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "getGovernorsOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "governors",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalExpiryDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "num_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denom_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "globalProposalRelayed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isBridgeOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVoteWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "registers",
          "type": "address[]"
        }
      ],
      "name": "registerCallbacks",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "registereds",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "supports_",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "signatures",
          "type": "tuple[]"
        }
      ],
      "name": "relayGlobalProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "supports_",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "signatures",
          "type": "tuple[]"
        }
      ],
      "name": "relayProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "removeBridgeOperators",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "removeds",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum GlobalProposal.TargetOption[]",
          "name": "targetOptions",
          "type": "uint8[]"
        }
      ],
      "name": "resolveTargets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "governors",
          "type": "address[]"
        }
      ],
      "name": "sumGovernorsWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgeOperators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "registers",
          "type": "address[]"
        }
      ],
      "name": "unregisterCallbacks",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "unregistereds",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBridgeOperator",
          "type": "address"
        }
      ],
      "name": "updateBridgeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum GlobalProposal.TargetOption[]",
          "name": "targetOptions",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "name": "updateManyTargetOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "againstVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0bd91e99ca0f530503f8e50c5572ed569963a6a468b6fc043ff4c502d92729d",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x073de79499a1C7D474241755af8aa47e091f0664",
    "transactionIndex": 49,
    "gasUsed": "5075913",
    "logsBloom": "0x042200000000000000000000000000000000800000002000001000000000000000004000000400000000000000000000010100000000000102000000000c0000000000000000800000000000000000000000000000040005000400000000000000000000020000000000000000000800000100000000000000000000000000040000000000000200000000000000000000000000200000000000000400000000000000000000001000010100000008400000200000000000000000000000000040000000000000000000000000000000000000800000001000000000000060000000020000000000000001000000000000000000008000008000000000001000",
    "blockHash": "0x084fbc3b66b991eb525caf9a1b835173d0b1ded42229cbc611dd455bc56606a3",
    "transactionHash": "0xf0bd91e99ca0f530503f8e50c5572ed569963a6a468b6fc043ff4c502d92729d",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 9515689,
        "transactionHash": "0xf0bd91e99ca0f530503f8e50c5572ed569963a6a468b6fc043ff4c502d92729d",
        "address": "0x073de79499a1C7D474241755af8aa47e091f0664",
        "topics": [
          "0x976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f8",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000046",
          "0x0000000000000000000000000000000000000000000000000000000000000064"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 167,
        "blockHash": "0x084fbc3b66b991eb525caf9a1b835173d0b1ded42229cbc611dd455bc56606a3"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 9515689,
        "transactionHash": "0xf0bd91e99ca0f530503f8e50c5572ed569963a6a468b6fc043ff4c502d92729d",
        "address": "0x073de79499a1C7D474241755af8aa47e091f0664",
        "topics": [
          "0x865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c59",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000009e359f42cddc84a386a2ef1d9ae06623f3970d1d"
        ],
        "data": "0x",
        "logIndex": 168,
        "blockHash": "0x084fbc3b66b991eb525caf9a1b835173d0b1ded42229cbc611dd455bc56606a3"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 9515689,
        "transactionHash": "0xf0bd91e99ca0f530503f8e50c5572ed569963a6a468b6fc043ff4c502d92729d",
        "address": "0x073de79499a1C7D474241755af8aa47e091f0664",
        "topics": [
          "0x897810999654e525e272b5909785c4d0ceaee1bbf9c87d9091a37558b0423b78"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001cd24d87ddc1917165435b306aac68d99e0f49a3fa000000000000000000000000b033ba62ec622dc54d0abfe0254e79692147ca26000000000000000000000000087d08e3ba42e64e3948962dd1371f906d1278b900000000000000000000000052ec2e6bbce45afff8955da6410bb13812f4289f00000000000000000000000000000000000000000000000000000000000000040000000000000000000000002e82d2b56f858f79deef11b160bfc4631873da2b000000000000000000000000bcb61783dd2403fe8cc9b89b27b1a9bb03d040cb000000000000000000000000b266bf53cf7eac4e2065a404598dcb0e15e9462c000000000000000000000000cc5fc5b6c8595f56306da736f6cd02ed9141c84a",
        "logIndex": 169,
        "blockHash": "0x084fbc3b66b991eb525caf9a1b835173d0b1ded42229cbc611dd455bc56606a3"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 9515689,
        "transactionHash": "0xf0bd91e99ca0f530503f8e50c5572ed569963a6a468b6fc043ff4c502d92729d",
        "address": "0x073de79499a1C7D474241755af8aa47e091f0664",
        "topics": [
          "0xe5cd1c123a8cf63fa1b7229678db61fe8ae99dbbd27889370b6667c8cae97da1",
          "0x8000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 170,
        "blockHash": "0x084fbc3b66b991eb525caf9a1b835173d0b1ded42229cbc611dd455bc56606a3"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 9515689,
        "transactionHash": "0xf0bd91e99ca0f530503f8e50c5572ed569963a6a468b6fc043ff4c502d92729d",
        "address": "0x073de79499a1C7D474241755af8aa47e091f0664",
        "topics": [
          "0x356c8c57e9e84b99b1cb58b13c985b2c979f78cbdf4d0fa70fe2a98bb09a099d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000073de79499a1c7d474241755af8aa47e091f0664"
        ],
        "data": "0x",
        "logIndex": 171,
        "blockHash": "0x084fbc3b66b991eb525caf9a1b835173d0b1ded42229cbc611dd455bc56606a3"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 9515689,
        "transactionHash": "0xf0bd91e99ca0f530503f8e50c5572ed569963a6a468b6fc043ff4c502d92729d",
        "address": "0x073de79499a1C7D474241755af8aa47e091f0664",
        "topics": [
          "0x356c8c57e9e84b99b1cb58b13c985b2c979f78cbdf4d0fa70fe2a98bb09a099d",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000009e359f42cddc84a386a2ef1d9ae06623f3970d1d"
        ],
        "data": "0x",
        "logIndex": 172,
        "blockHash": "0x084fbc3b66b991eb525caf9a1b835173d0b1ded42229cbc611dd455bc56606a3"
      }
    ],
    "blockNumber": 9515689,
    "cumulativeGasUsed": "14562918",
    "status": 1,
    "byzantium": true
  },
  "args": [
    70,
    100,
    2021,
    "0x9e359F42cDDc84A386a2Ef1D9Ae06623f3970D1D",
    [],
    [
      "0x2e82D2b56f858f79DeeF11B160bFC4631873da2B",
      "0xBcb61783dd2403FE8cC9B89B27B1A9Bb03d040Cb",
      "0xB266Bf53Cf7EAc4E2065A404598DCB0E15E9462c",
      "0xcc5fc5b6c8595f56306da736f6cd02ed9141c84a"
    ],
    [
      "0xd24D87DDc1917165435b306aAC68D99e0F49A3Fa",
      "0xb033ba62EC622dC54D0ABFE0254e79692147CA26",
      "0x087D08e3ba42e64E3948962dd1371F906D1278b9",
      "0x52ec2e6BBcE45AfFF8955Da6410bb13812F4289F"
    ],
    [
      100,
      100,
      100,
      100
    ],
    [
      1
    ],
    [
      "0x9e359F42cDDc84A386a2Ef1D9Ae06623f3970D1D"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "91c86e27ca97788283e420647ecde76c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roninChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"callbackRegisters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"voteWeights\",\"type\":\"uint96[]\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"ErrBridgeOperatorAlreadyExisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"ErrBridgeOperatorUpdateFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCurrentProposalIsNotCompleted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrDuplicated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ErrInsufficientGas\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidArguments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidExpiryTimestamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidProposalNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidVoteWeight\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrOnlySelfCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRelayFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrUnsupportedInterface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrUnsupportedVoteType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrVoteIsFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toBridgeOperator\",\"type\":\"address\"}],\"name\":\"BridgeOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"uint96[]\",\"name\":\"voteWeights\",\"type\":\"uint96[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"globalProposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GlobalProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"registers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"Notified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ProposalExpiryDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum GlobalProposal.TargetOption\",\"name\":\"targetOption\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TargetOptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"voteWeights\",\"type\":\"uint96[]\"},{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"addBridgeOperators\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"addeds\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"}],\"name\":\"getBridgeOperatorOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"getBridgeOperatorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackRegisters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"registers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullBridgeOperatorInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"getGovernorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"}],\"name\":\"getGovernorWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"getGovernorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"globalProposalRelayed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBridgeOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"registers\",\"type\":\"address[]\"}],\"name\":\"registerCallbacks\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"registereds\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"supports_\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayGlobalProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"supports_\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"removeBridgeOperators\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"removeds\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"}],\"name\":\"resolveTargets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governors\",\"type\":\"address[]\"}],\"name\":\"sumGovernorsWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgeOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"registers\",\"type\":\"address[]\"}],\"name\":\"unregisterCallbacks\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"unregistereds\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBridgeOperator\",\"type\":\"address\"}],\"name\":\"updateBridgeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"updateManyTargetOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrBridgeOperatorAlreadyExisted(address)\":[{\"details\":\"Error thrown when attempting to add a bridge operator that already exists in the contract. This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\"}],\"ErrBridgeOperatorUpdateFailed(address)\":[{\"details\":\"Error raised when a bridge operator update operation fails.\",\"params\":{\"bridgeOperator\":\"The address of the bridge operator that failed to update.\"}}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrCurrentProposalIsNotCompleted()\":[{\"details\":\"Error thrown when the current proposal is not completed.\"}],\"ErrDuplicated(bytes4)\":[{\"details\":\"Error thrown when a duplicated element is detected in an array.\",\"params\":{\"msgSig\":\"The function signature that invoke the error.\"}}],\"ErrInsufficientGas(bytes32)\":[{\"details\":\"Error thrown when there is insufficient gas to execute a function.\"}],\"ErrInvalidArguments(bytes4)\":[{\"details\":\"Error indicating that arguments are invalid.\"}],\"ErrInvalidChainId(bytes4,uint256,uint256)\":[{\"details\":\"Error indicating that the chain ID is invalid.\",\"params\":{\"actual\":\"Current chain ID that executing function.\",\"expected\":\"Expected chain ID required for the tx to success.\",\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid chain ID.\"}}],\"ErrInvalidExpiryTimestamp()\":[{\"details\":\"Error thrown when an invalid expiry timestamp is provided.\"}],\"ErrInvalidOrder(bytes4)\":[{\"details\":\"Error indicating that an order is invalid.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid order.\"}}],\"ErrInvalidProposalNonce(bytes4)\":[{\"details\":\"Error indicating that the proposal nonce is invalid.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\"}}],\"ErrInvalidThreshold(bytes4)\":[{\"details\":\"Error indicating that the provided threshold is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the invalid threshold applies to.\"}}],\"ErrInvalidVoteWeight(bytes4)\":[{\"details\":\"Error indicating that a vote weight is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that encountered an invalid vote weight.\"}}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrOnlySelfCall(bytes4)\":[{\"details\":\"Error indicating that a function can only be called by the contract itself.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that can only be called by the contract itself.\"}}],\"ErrRelayFailed(bytes4)\":[{\"details\":\"Error indicating that a relay call has failed.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the relay call that failed.\"}}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnsupportedInterface(bytes4,address)\":[{\"details\":\"The error indicating an unsupported interface.\",\"params\":{\"addr\":\"The address where the unsupported interface was encountered.\",\"interfaceId\":\"The bytes4 interface identifier that is not supported.\"}}],\"ErrUnsupportedVoteType(bytes4)\":[{\"details\":\"Error indicating that a vote type is not supported.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an unsupported vote type.\"}}],\"ErrVoteIsFinalized()\":[{\"details\":\"Error thrown when attempting to interact with a finalized vote.\"}],\"ErrZeroAddress(bytes4)\":[{\"details\":\"Error indicating that given address is null when it should not.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"addBridgeOperators(uint96[],address[],address[])\":{\"details\":\"Adds multiple bridge operators.\",\"params\":{\"bridgeOperators\":\"An array of addresses representing the bridge operators to add.\",\"governors\":\"An array of addresses of hot/cold wallets for bridge operator to update their node address.\"},\"returns\":{\"addeds\":\"An array of booleans indicating whether each bridge operator was added successfully. Note: return boolean array `addeds` indicates whether a group (voteWeight, governor, operator) are recorded. It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly. Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not. Example Usage: Making an `eth_call` in ethers.js ``` const {addeds} = await bridgeManagerContract.callStatic.addBridgeOperators(  voteWeights,  governors,  bridgeOperators,  // overriding the caller to the contract itself since we use `onlySelfCall` guard  {from: bridgeManagerContract.address} ) const filteredOperators = bridgeOperators.filter((_, index) => addeds[index]); const filteredWeights = weights.filter((_, index) => addeds[index]); const filteredGovernors = governors.filter((_, index) => addeds[index]); // ... (Process or use the information as required) ... ```\"}},\"checkThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the threshold.\"},\"getBridgeOperatorOf(address[])\":{\"details\":\"Returns an array of bridge operators correspoding to governor addresses.\",\"returns\":{\"bridgeOperators\":\"An array containing the addresses of all bridge operators.\"}},\"getBridgeOperatorWeight(address)\":{\"details\":\"External function to retrieve the vote weight of a specific bridge operator.\",\"params\":{\"bridgeOperator\":\"The address of the bridge operator to get the vote weight for.\"},\"returns\":{\"weight\":\"The vote weight of the specified bridge operator.\"}},\"getBridgeOperators()\":{\"details\":\"Returns an array of all bridge operators.\",\"returns\":{\"_0\":\"An array containing the addresses of all bridge operators.\"}},\"getCallbackRegisters()\":{\"details\":\"Retrieves the addresses of registered callbacks.\",\"returns\":{\"registers\":\"An array containing the addresses of registered callbacks.\"}},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getFullBridgeOperatorInfos()\":{\"details\":\"Retrieves the full information of all registered bridge operators. This external function allows external callers to obtain the full information of all the registered bridge operators. The returned arrays include the addresses of governors, bridge operators, and their corresponding vote weights.\",\"returns\":{\"bridgeOperators\":\"An array of addresses representing the registered bridge operators.\",\"governors\":\"An array of addresses representing the governors of each bridge operator.\",\"weights\":\"An array of uint256 values representing the vote weights of each bridge operator. Note: The length of each array will be the same, and the order of elements corresponds to the same bridge operator. Example Usage: ``` (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights) = getFullBridgeOperatorInfos(); for (uint256 i = 0; i < bridgeOperators.length; i++) {     // Access individual information for each bridge operator.     address governor = governors[i];     address bridgeOperator = bridgeOperators[i];     uint256 weight = weights[i];     // ... (Process or use the information as required) ... } ```\"}},\"getGovernorWeight(address)\":{\"details\":\"External function to retrieve the vote weight of a specific governor.\",\"params\":{\"governor\":\"The address of the governor to get the vote weight for.\"},\"returns\":{\"weight\":\"voteWeight The vote weight of the specified governor.\"}},\"getGovernorWeights(address[])\":{\"details\":\"Returns the weights of a list of governor addresses.\"},\"getGovernors()\":{\"details\":\"Returns an array of all governors.\",\"returns\":{\"_0\":\"An array containing the addresses of all governors.\"}},\"getGovernorsOf(address[])\":{\"details\":\"Retrieves the governors corresponding to a given array of bridge operators. This external function allows external callers to obtain the governors associated with a given array of bridge operators. The function takes an input array `bridgeOperators` containing bridge operator addresses and returns an array of corresponding governors.\",\"params\":{\"bridgeOperators\":\"An array of bridge operator addresses for which governors are to be retrieved.\"},\"returns\":{\"governors\":\"An array of addresses representing the governors corresponding to the provided bridge operators.\"}},\"getProposalExpiryDuration()\":{\"details\":\"Returns the expiry duration for a new proposal.\"},\"getThreshold()\":{\"details\":\"Returns the threshold.\"},\"getTotalWeights()\":{\"details\":\"Returns total weights.\"},\"globalProposalRelayed(uint256)\":{\"details\":\"Returns whether the voter `_voter` casted vote for the proposal.\"},\"isBridgeOperator(address)\":{\"details\":\"Checks if the given address is a bridge operator.\",\"params\":{\"addr\":\"The address to check.\"},\"returns\":{\"_0\":\"A boolean indicating whether the address is a bridge operator.\"}},\"minimumVoteWeight()\":{\"details\":\"Returns the minimum vote weight to pass the threshold.\"},\"registerCallbacks(address[])\":{\"details\":\"Registers multiple callbacks with the bridge.\",\"params\":{\"registers\":\"The array of callback addresses to register.\"},\"returns\":{\"registereds\":\"An array indicating the success status of each registration.\"}},\"relayGlobalProposal((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceRelay-_relayGlobalProposal`.  Requirements: - The method caller is governor.\"},\"relayProposal((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceRelay-_relayProposal`. Requirements: - The method caller is governor.\"},\"removeBridgeOperators(address[])\":{\"details\":\"Removes multiple bridge operators.\",\"params\":{\"bridgeOperators\":\"An array of addresses representing the bridge operators to remove.\"},\"returns\":{\"removeds\":\"An array of booleans indicating whether each bridge operator was removed successfully. * Note: return boolean array `removeds` indicates whether a group (voteWeight, governor, operator) are recorded. It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly. Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not. Example Usage: Making an `eth_call` in ethers.js ``` const {removeds} = await bridgeManagerContract.callStatic.removeBridgeOperators(  bridgeOperators,  // overriding the caller to the contract itself since we use `onlySelfCall` guard  {from: bridgeManagerContract.address} ) const filteredOperators = bridgeOperators.filter((_, index) => removeds[index]); // ... (Process or use the information as required) ... ```\"}},\"resolveTargets(uint8[])\":{\"details\":\"Returns corresponding address of target options. Return address(0) on non-existent target.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setThreshold(uint256,uint256)\":{\"details\":\"Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event.\"},\"sumGovernorsWeight(address[])\":{\"details\":\"Returns total weights of the governor list.\"},\"totalBridgeOperators()\":{\"details\":\"Returns the total number of bridge operators.\",\"returns\":{\"_0\":\"The total number of bridge operators.\"}},\"unregisterCallbacks(address[])\":{\"details\":\"Unregisters multiple callbacks from the bridge.\",\"params\":{\"registers\":\"The array of callback addresses to unregister.\"},\"returns\":{\"unregistereds\":\"An array indicating the success status of each unregistration.\"}},\"updateBridgeOperator(address)\":{\"details\":\"Governor updates their corresponding governor and/or operator address. Requirements: - The caller must the governor of the operator that is requested changes.\",\"params\":{\"bridgeOperator\":\"The address of the bridge operator to update.\"}},\"updateManyTargetOption(uint8[],address[])\":{\"details\":\"Updates list of `targetOptions` to `targets`. Requirement: - Only allow self-call through proposal. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"round(uint256)\":{\"notice\":\"chain id = 0 for global proposal\"},\"updateBridgeOperator(address)\":{\"notice\":\"This method checks authorization by querying the corresponding operator of the msg.sender and then attempts to remove it from the `_bridgeOperatorSet` for gas optimization. In case we allow a governor can leave their operator address blank null `address(0)`, consider add authorization check.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mainchain/MainchainBridgeManager.sol\":\"MainchainBridgeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/bridge-operator-governance/BridgeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeManagerCallback, EnumerableSet, BridgeManagerCallbackRegister } from \\\"./BridgeManagerCallbackRegister.sol\\\";\\nimport { IHasContracts, HasContracts } from \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { IQuorum } from \\\"../../interfaces/IQuorum.sol\\\";\\nimport { IBridgeManager } from \\\"../../interfaces/bridge/IBridgeManager.sol\\\";\\nimport { AddressArrayUtils } from \\\"../../libraries/AddressArrayUtils.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\nimport { RoleAccess } from \\\"../../utils/RoleAccess.sol\\\";\\nimport { TUint256Slot } from \\\"../../types/Types.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract BridgeManager is IQuorum, IBridgeManager, BridgeManagerCallbackRegister, HasContracts {\\n  using AddressArrayUtils for address[];\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.governorToBridgeOperatorInfo.slot\\\") - 1\\n  bytes32 private constant GOVERNOR_TO_BRIDGE_OPERATOR_INFO_SLOT =\\n    0x88547008e60f5748911f2e59feb3093b7e4c2e87b2dd69d61f112fcc932de8e3;\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.govenorOf.slot\\\") - 1\\n  bytes32 private constant GOVENOR_OF_SLOT = 0x8400683eb2cb350596d73644c0c89fe45f108600003457374f4ab3e87b4f3aa3;\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.governors.slot\\\") - 1\\n  bytes32 private constant GOVERNOR_SET_SLOT = 0x546f6b46ab35b030b6816596b352aef78857377176c8b24baa2046a62cf1998c;\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.bridgeOperators.slot\\\") - 1\\n  bytes32 private constant BRIDGE_OPERATOR_SET_SLOT =\\n    0xd38c234075fde25875da8a6b7e36b58b86681d483271a99eeeee1d78e258a24d;\\n\\n  /**\\n   * @dev The numerator value used for calculations in the contract.\\n   * @notice value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.numerator.slot\\\") - 1\\n   */\\n  TUint256Slot internal constant NUMERATOR_SLOT =\\n    TUint256Slot.wrap(0xc55405a488814eaa0e2a685a0131142785b8d033d311c8c8244e34a7c12ca40f);\\n\\n  /**\\n   * @dev The denominator value used for calculations in the contract.\\n   * @notice value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.denominator.slot\\\") - 1\\n   */\\n  TUint256Slot internal constant DENOMINATOR_SLOT =\\n    TUint256Slot.wrap(0xac1ff16a4f04f2a37a9ba5252a69baa100b460e517d1f8019c054a5ad698f9ff);\\n\\n  /**\\n   * @dev The nonce value used for tracking nonces in the contract.\\n   * @notice value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.nonce.slot\\\") - 1\\n   */\\n  TUint256Slot internal constant NONCE_SLOT =\\n    TUint256Slot.wrap(0x92872d32822c9d44b36a2537d3e0d4c46fc4de1ce154ccfaed560a8a58445f1d);\\n\\n  /**\\n   * @dev The total weight value used for storing the cumulative weight in the contract.\\n   * @notice value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.totalWeights.slot\\\") - 1\\n   */\\n  TUint256Slot internal constant TOTAL_WEIGHTS_SLOT =\\n    TUint256Slot.wrap(0x6924fe71b0c8b61aea02ca498b5f53b29bd95726278b1fe4eb791bb24a42644c);\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n  modifier onlyGovernor() virtual {\\n    _requireGovernor(msg.sender);\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 num,\\n    uint256 denom,\\n    uint256 roninChainId,\\n    address bridgeContract,\\n    address[] memory callbackRegisters,\\n    address[] memory bridgeOperators,\\n    address[] memory governors,\\n    uint96[] memory voteWeights\\n  ) payable BridgeManagerCallbackRegister(callbackRegisters) {\\n    NONCE_SLOT.store(1);\\n\\n    _setThreshold(num, denom);\\n    _setContract(ContractType.BRIDGE, bridgeContract);\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n        keccak256(\\\"BridgeAdmin\\\"), // name hash\\n        keccak256(\\\"2\\\"), // version hash\\n        keccak256(abi.encode(\\\"BRIDGE_ADMIN\\\", roninChainId)) // salt\\n      )\\n    );\\n\\n    _addBridgeOperators(voteWeights, governors, bridgeOperators);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function addBridgeOperators(\\n    uint96[] calldata voteWeights,\\n    address[] calldata governors,\\n    address[] calldata bridgeOperators\\n  ) external onlySelfCall returns (bool[] memory addeds) {\\n    addeds = _addBridgeOperators(voteWeights, governors, bridgeOperators);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function removeBridgeOperators(\\n    address[] calldata bridgeOperators\\n  ) external onlySelfCall returns (bool[] memory removeds) {\\n    removeds = _removeBridgeOperators(bridgeOperators);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   * @notice This method checks authorization by querying the corresponding operator of the msg.sender and then\\n   * attempts to remove it from the `_bridgeOperatorSet` for gas optimization. In case we allow a governor can leave\\n   * their operator address blank null `address(0)`, consider add authorization check.\\n   */\\n  function updateBridgeOperator(address newBridgeOperator) external onlyGovernor {\\n    _requireNonZeroAddress(newBridgeOperator);\\n\\n    // Queries the previous bridge operator\\n    mapping(address => BridgeOperatorInfo) storage _gorvernorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n    address currentBridgeOperator = _gorvernorToBridgeOperatorInfo[msg.sender].addr;\\n    if (currentBridgeOperator == newBridgeOperator) {\\n      revert ErrBridgeOperatorAlreadyExisted(newBridgeOperator);\\n    }\\n\\n    // Tries replace the bridge operator\\n    EnumerableSet.AddressSet storage _bridgeOperatorSet = _getBridgeOperatorSet();\\n    bool updated = _bridgeOperatorSet.remove(currentBridgeOperator) && _bridgeOperatorSet.add(newBridgeOperator);\\n    if (!updated) revert ErrBridgeOperatorUpdateFailed(newBridgeOperator);\\n\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n    delete _governorOf[currentBridgeOperator];\\n    _governorOf[newBridgeOperator] = msg.sender;\\n    _gorvernorToBridgeOperatorInfo[msg.sender].addr = newBridgeOperator;\\n\\n    _notifyRegisters(\\n      IBridgeManagerCallback.onBridgeOperatorUpdated.selector,\\n      abi.encode(currentBridgeOperator, newBridgeOperator)\\n    );\\n\\n    emit BridgeOperatorUpdated(msg.sender, currentBridgeOperator, newBridgeOperator);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external override onlySelfCall {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function setThreshold(\\n    uint256 numerator,\\n    uint256 denominator\\n  ) external override onlySelfCall returns (uint256, uint256) {\\n    return _setThreshold(numerator, denominator);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getTotalWeights() public view returns (uint256) {\\n    return TOTAL_WEIGHTS_SLOT.load();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getGovernorWeights(address[] calldata governors) external view returns (uint256[] memory weights) {\\n    weights = _getGovernorWeights(governors);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256 weight) {\\n    weight = _getGovernorWeight(governor);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function sumGovernorsWeight(\\n    address[] calldata governors\\n  ) external view nonDuplicate(governors) returns (uint256 sum) {\\n    sum = _sumGovernorsWeight(governors);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function totalBridgeOperators() external view returns (uint256) {\\n    return _getBridgeOperatorSet().length();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function isBridgeOperator(address addr) external view returns (bool) {\\n    return _getBridgeOperatorSet().contains(addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getBridgeOperators() external view returns (address[] memory) {\\n    return _getBridgeOperators();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getGovernors() external view returns (address[] memory) {\\n    return _getGovernors();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getBridgeOperatorOf(address[] memory governors) public view returns (address[] memory bridgeOperators) {\\n    uint256 length = governors.length;\\n    bridgeOperators = new address[](length);\\n\\n    mapping(address => BridgeOperatorInfo) storage _gorvernorToBridgeOperator = _getGovernorToBridgeOperatorInfo();\\n    for (uint256 i; i < length; ) {\\n      bridgeOperators[i] = _gorvernorToBridgeOperator[governors[i]].addr;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getGovernorsOf(address[] calldata bridgeOperators) external view returns (address[] memory governors) {\\n    uint256 length = bridgeOperators.length;\\n    governors = new address[](length);\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n\\n    for (uint256 i; i < length; ) {\\n      governors[i] = _governorOf[bridgeOperators[i]];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getFullBridgeOperatorInfos()\\n    external\\n    view\\n    returns (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights)\\n  {\\n    governors = _getGovernors();\\n    bridgeOperators = getBridgeOperatorOf(governors);\\n    weights = _getGovernorWeights(governors);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManager\\n   */\\n  function getBridgeOperatorWeight(address bridgeOperator) external view returns (uint256 weight) {\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n    weight = _governorToBridgeOperatorInfo[_governorOf[bridgeOperator]].voteWeight;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function minimumVoteWeight() public view virtual returns (uint256) {\\n    return (NUMERATOR_SLOT.mul(TOTAL_WEIGHTS_SLOT.load()) + DENOMINATOR_SLOT.load() - 1) / DENOMINATOR_SLOT.load();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function getThreshold() external view virtual returns (uint256 num_, uint256 denom_) {\\n    return (NUMERATOR_SLOT.load(), DENOMINATOR_SLOT.load());\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * DENOMINATOR_SLOT.load() >= NUMERATOR_SLOT.mul(TOTAL_WEIGHTS_SLOT.load());\\n  }\\n\\n  /**\\n   * @dev Internal function to add bridge operators.\\n   *\\n   * This function adds the specified `bridgeOperators` to the bridge operator set and establishes the associated mappings.\\n   *\\n   * Requirements:\\n   * - The caller must have the necessary permission to add bridge operators.\\n   * - The lengths of `voteWeights`, `governors`, and `bridgeOperators` arrays must be equal.\\n   *\\n   * @param voteWeights An array of uint256 values representing the vote weights for each bridge operator.\\n   * @param governors An array of addresses representing the governors for each bridge operator.\\n   * @return addeds An array of boolean values indicating whether each bridge operator was successfully added.\\n   */\\n  function _addBridgeOperators(\\n    uint96[] memory voteWeights,\\n    address[] memory governors,\\n    address[] memory bridgeOperators\\n  ) internal nonDuplicate(governors.extend(bridgeOperators)) returns (bool[] memory addeds) {\\n    uint256 length = bridgeOperators.length;\\n    if (!(length == voteWeights.length && length == governors.length)) revert ErrLengthMismatch(msg.sig);\\n    addeds = new bool[](length);\\n    // simply skip add operations if inputs are empty.\\n    if (length == 0) return addeds;\\n\\n    EnumerableSet.AddressSet storage _governorSet = _getGovernorsSet();\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n    EnumerableSet.AddressSet storage _bridgeOperatorSet = _getBridgeOperatorSet();\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n\\n    address governor;\\n    address bridgeOperator;\\n    uint256 accumulatedWeight;\\n    BridgeOperatorInfo memory bridgeOperatorInfo;\\n\\n    for (uint256 i; i < length; ) {\\n      governor = governors[i];\\n      bridgeOperator = bridgeOperators[i];\\n\\n      _requireNonZeroAddress(governor);\\n      _requireNonZeroAddress(bridgeOperator);\\n      if (voteWeights[i] == 0) revert ErrInvalidVoteWeight(msg.sig);\\n\\n      addeds[i] = !(_governorSet.contains(governor) ||\\n        _governorSet.contains(bridgeOperator) ||\\n        _bridgeOperatorSet.contains(governor) ||\\n        _bridgeOperatorSet.contains(bridgeOperator));\\n\\n      if (addeds[i]) {\\n        _governorSet.add(governor);\\n        _bridgeOperatorSet.add(bridgeOperator);\\n        _governorOf[bridgeOperator] = governor;\\n        bridgeOperatorInfo.addr = bridgeOperator;\\n        accumulatedWeight += bridgeOperatorInfo.voteWeight = voteWeights[i];\\n        _governorToBridgeOperatorInfo[governor] = bridgeOperatorInfo;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    TOTAL_WEIGHTS_SLOT.addAssign(accumulatedWeight);\\n\\n    _notifyRegisters(IBridgeManagerCallback.onBridgeOperatorsAdded.selector, abi.encode(bridgeOperators, addeds));\\n\\n    emit BridgeOperatorsAdded(addeds, voteWeights, governors, bridgeOperators);\\n  }\\n\\n  /**\\n   * @dev Internal function to remove bridge operators.\\n   *\\n   * This function removes the specified `bridgeOperators` from the bridge operator set and related mappings.\\n   *\\n   * Requirements:\\n   * - The caller must have the necessary permission to remove bridge operators.\\n   *\\n   * @param bridgeOperators An array of addresses representing the bridge operators to be removed.\\n   * @return removeds An array of boolean values indicating whether each bridge operator was successfully removed.\\n   */\\n  function _removeBridgeOperators(\\n    address[] memory bridgeOperators\\n  ) internal nonDuplicate(bridgeOperators) returns (bool[] memory removeds) {\\n    uint256 length = bridgeOperators.length;\\n    removeds = new bool[](length);\\n    // simply skip remove operations if inputs are empty.\\n    if (length == 0) return removeds;\\n\\n    mapping(address => address) storage _governorOf = _getGovernorOf();\\n    EnumerableSet.AddressSet storage _governorSet = _getGovernorsSet();\\n    EnumerableSet.AddressSet storage _bridgeOperatorSet = _getBridgeOperatorSet();\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n\\n    address governor;\\n    address bridgeOperator;\\n    uint256 accumulatedWeight;\\n    BridgeOperatorInfo memory bridgeOperatorInfo;\\n\\n    for (uint256 i; i < length; ) {\\n      bridgeOperator = bridgeOperators[i];\\n      governor = _governorOf[bridgeOperator];\\n\\n      _requireNonZeroAddress(governor);\\n      _requireNonZeroAddress(bridgeOperator);\\n\\n      bridgeOperatorInfo = _governorToBridgeOperatorInfo[governor];\\n      if (bridgeOperatorInfo.addr != bridgeOperator) revert ErrInvalidArguments(msg.sig);\\n\\n      removeds[i] = _bridgeOperatorSet.contains(bridgeOperator) && _governorSet.contains(governor);\\n      if (removeds[i]) {\\n        _governorSet.remove(governor);\\n        _bridgeOperatorSet.remove(bridgeOperator);\\n\\n        delete _governorOf[bridgeOperator];\\n        delete _governorToBridgeOperatorInfo[governor];\\n        accumulatedWeight += bridgeOperatorInfo.voteWeight;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    TOTAL_WEIGHTS_SLOT.subAssign(accumulatedWeight);\\n\\n    _notifyRegisters(IBridgeManagerCallback.onBridgeOperatorsRemoved.selector, abi.encode(bridgeOperators, removeds));\\n\\n    emit BridgeOperatorsRemoved(removeds, bridgeOperators);\\n  }\\n\\n  /**\\n   * @dev Sets threshold and returns the old one.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function _setThreshold(\\n    uint256 numerator,\\n    uint256 denominator\\n  ) internal virtual returns (uint256 previousNum, uint256 previousDenom) {\\n    if (numerator > denominator) revert ErrInvalidThreshold(msg.sig);\\n\\n    previousNum = NUMERATOR_SLOT.load();\\n    previousDenom = DENOMINATOR_SLOT.load();\\n    NUMERATOR_SLOT.store(numerator);\\n    DENOMINATOR_SLOT.store(denominator);\\n\\n    emit ThresholdUpdated(NONCE_SLOT.postIncrement(), numerator, denominator, previousNum, previousDenom);\\n  }\\n\\n  /**\\n   * @dev Internal function to get all bridge operators.\\n   * @return bridgeOperators An array containing all the registered bridge operator addresses.\\n   */\\n  function _getBridgeOperators() internal view returns (address[] memory) {\\n    return _getBridgeOperatorSet().values();\\n  }\\n\\n  /**\\n   * @dev Internal function to get all governors.\\n   * @return governors An array containing all the registered governor addresses.\\n   */\\n  function _getGovernors() internal view returns (address[] memory) {\\n    return _getGovernorsSet().values();\\n  }\\n\\n  /**\\n   * @dev Internal function to get the vote weights of a given array of governors.\\n   * @param governors An array containing the addresses of governors.\\n   * @return weights An array containing the vote weights of the corresponding governors.\\n   */\\n  function _getGovernorWeights(address[] memory governors) internal view returns (uint256[] memory weights) {\\n    uint256 length = governors.length;\\n    weights = new uint256[](length);\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n    for (uint256 i; i < length; ) {\\n      weights[i] = _governorToBridgeOperatorInfo[governors[i]].voteWeight;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to calculate the sum of vote weights for a given array of governors.\\n   * @param governors An array containing the addresses of governors to calculate the sum of vote weights.\\n   * @return sum The total sum of vote weights for the provided governors.\\n   * @notice The input array `governors` must contain unique addresses to avoid duplicate calculations.\\n   */\\n  function _sumGovernorsWeight(address[] memory governors) internal view nonDuplicate(governors) returns (uint256 sum) {\\n    mapping(address => BridgeOperatorInfo) storage _governorToBridgeOperatorInfo = _getGovernorToBridgeOperatorInfo();\\n\\n    for (uint256 i; i < governors.length; ) {\\n      sum += _governorToBridgeOperatorInfo[governors[i]].voteWeight;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the caller has governor role access.\\n   * @param addr The address to check for governor role access.\\n   * @dev If the address does not have governor role access (vote weight is zero), a revert with the corresponding error message is triggered.\\n   */\\n  function _requireGovernor(address addr) internal view {\\n    if (_getGovernorWeight(addr) == 0) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.GOVERNOR);\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the vote weight of a specific governor.\\n   * @param governor The address of the governor to get the vote weight for.\\n   * @return voteWeight The vote weight of the specified governor.\\n   */\\n  function _getGovernorWeight(address governor) internal view returns (uint256) {\\n    return _getGovernorToBridgeOperatorInfo()[governor].voteWeight;\\n  }\\n\\n  /**\\n   * @dev Internal function to access the address set of bridge operators.\\n   * @return bridgeOperators the storage address set.\\n   */\\n  function _getBridgeOperatorSet() internal pure returns (EnumerableSet.AddressSet storage bridgeOperators) {\\n    assembly (\\\"memory-safe\\\") {\\n      bridgeOperators.slot := BRIDGE_OPERATOR_SET_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to access the address set of bridge operators.\\n   * @return governors the storage address set.\\n   */\\n  function _getGovernorsSet() internal pure returns (EnumerableSet.AddressSet storage governors) {\\n    assembly (\\\"memory-safe\\\") {\\n      governors.slot := GOVERNOR_SET_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping from governor => BridgeOperatorInfo.\\n   * @return governorToBridgeOperatorInfo the mapping from governor => BridgeOperatorInfo.\\n   */\\n  function _getGovernorToBridgeOperatorInfo()\\n    internal\\n    pure\\n    returns (mapping(address => BridgeOperatorInfo) storage governorToBridgeOperatorInfo)\\n  {\\n    assembly (\\\"memory-safe\\\") {\\n      governorToBridgeOperatorInfo.slot := GOVERNOR_TO_BRIDGE_OPERATOR_INFO_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping from bridge operator => governor.\\n   * @return governorOf the mapping from bridge operator => governor.\\n   */\\n  function _getGovernorOf() internal pure returns (mapping(address => address) storage governorOf) {\\n    assembly (\\\"memory-safe\\\") {\\n      governorOf.slot := GOVENOR_OF_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3e61b6d68e08b40d62a93b521433b4d8b6f724e8655f4efb4dd58c1967f17c3e\",\"license\":\"MIT\"},\"contracts/extensions/bridge-operator-governance/BridgeManagerCallbackRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IBridgeManagerCallbackRegister } from \\\"../../interfaces/bridge/IBridgeManagerCallbackRegister.sol\\\";\\nimport { IBridgeManagerCallback } from \\\"../../interfaces/bridge/IBridgeManagerCallback.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\n\\n/**\\n * @title BridgeManagerCallbackRegister\\n * @dev A contract that manages callback registrations and execution for a bridge.\\n */\\nabstract contract BridgeManagerCallbackRegister is IdentityGuard, IBridgeManagerCallbackRegister {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /**\\n   * @dev Storage slot for the address set of callback registers.\\n   * @dev Value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeAdmin.callbackRegisters.slot\\\") - 1.\\n   */\\n  bytes32 private constant CALLBACK_REGISTERS_SLOT = 0x5da136eb38f8d8e354915fc8a767c0dc81d49de5fb65d5477122a82ddd976240;\\n\\n  constructor(address[] memory callbackRegisters) payable {\\n    _registerCallbacks(callbackRegisters);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallbackRegister\\n   */\\n  function registerCallbacks(address[] calldata registers) external onlySelfCall returns (bool[] memory registereds) {\\n    registereds = _registerCallbacks(registers);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallbackRegister\\n   */\\n  function unregisterCallbacks(\\n    address[] calldata registers\\n  ) external onlySelfCall returns (bool[] memory unregistereds) {\\n    unregistereds = _unregisterCallbacks(registers);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallbackRegister\\n   */\\n  function getCallbackRegisters() external view returns (address[] memory registers) {\\n    registers = _getCallbackRegisters().values();\\n  }\\n\\n  /**\\n   * @dev Internal function to register multiple callbacks with the bridge.\\n   * @param registers The array of callback addresses to register.\\n   * @return registereds An array indicating the success status of each registration.\\n   */\\n  function _registerCallbacks(\\n    address[] memory registers\\n  ) internal nonDuplicate(registers) returns (bool[] memory registereds) {\\n    uint256 length = registers.length;\\n    registereds = new bool[](length);\\n    if (length == 0) return registereds;\\n\\n    EnumerableSet.AddressSet storage _callbackRegisters = _getCallbackRegisters();\\n    address register;\\n    bytes4 callbackInterface = type(IBridgeManagerCallback).interfaceId;\\n\\n    for (uint256 i; i < length; ) {\\n      register = registers[i];\\n\\n      _requireHasCode(register);\\n      _requireSupportsInterface(register, callbackInterface);\\n\\n      registereds[i] = _callbackRegisters.add(register);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to unregister multiple callbacks from the bridge.\\n   * @param registers The array of callback addresses to unregister.\\n   * @return unregistereds An array indicating the success status of each unregistration.\\n   */\\n  function _unregisterCallbacks(\\n    address[] memory registers\\n  ) internal nonDuplicate(registers) returns (bool[] memory unregistereds) {\\n    uint256 length = registers.length;\\n    unregistereds = new bool[](length);\\n    EnumerableSet.AddressSet storage _callbackRegisters = _getCallbackRegisters();\\n\\n    for (uint256 i; i < length; ) {\\n      unregistereds[i] = _callbackRegisters.remove(registers[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to notify all registered callbacks with the provided function signature and data.\\n   * @param callbackFnSig The function signature of the callback method.\\n   * @param inputs The data to pass to the callback method.\\n   */\\n  function _notifyRegisters(bytes4 callbackFnSig, bytes memory inputs) internal {\\n    address[] memory registers = _getCallbackRegisters().values();\\n    uint256 length = registers.length;\\n    if (length == 0) return;\\n\\n    bool[] memory statuses = new bool[](length);\\n    bytes[] memory returnDatas = new bytes[](length);\\n    bytes memory callData = abi.encodePacked(callbackFnSig, inputs);\\n\\n    for (uint256 i; i < length; ) {\\n      (statuses[i], returnDatas[i]) = registers[i].call(callData);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit Notified(callData, registers, statuses, returnDatas);\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the address set of callback registers.\\n   * @return callbackRegisters The storage reference to the callback registers.\\n   */\\n  function _getCallbackRegisters() internal pure returns (EnumerableSet.AddressSet storage callbackRegisters) {\\n    assembly (\\\"memory-safe\\\") {\\n      callbackRegisters.slot := CALLBACK_REGISTERS_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x604f39e11b8dc4ce6fb765c606f7b87bc0cad3540dbb291cccb809123724bdf3\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/CoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/ChainTypeConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer, ChainTypeConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n\\n  /**\\n   * @dev Error thrown when attempting to interact with a finalized vote.\\n   */\\n  error ErrVoteIsFinalized();\\n\\n  /**\\n   * @dev Error thrown when the current proposal is not completed.\\n   */\\n  error ErrCurrentProposalIsNotCompleted();\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    address[] forVoteds; // Array of addresses voting for\\n    address[] againstVoteds; // Array of addresses voting against\\n    uint256 expiryTimestamp;\\n    mapping(address => Signature) sig;\\n    mapping(address => bool) voted;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is expired\\n  event ProposalExpired(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n  /// @dev Emitted when the proposal expiry duration is changed.\\n  event ProposalExpiryDurationChanged(uint256 indexed duration);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  uint256 internal _proposalExpiryDuration;\\n\\n  constructor(uint256 _expiryDuration) {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Creates new voting round by calculating the `_round` number of chain `_chainId`.\\n   * Increases the `_round` number if the previous one is not expired. Delete the previous proposal\\n   * if it is expired and not increase the `_round`.\\n   */\\n  function _createVotingRound(uint256 _chainId) internal returns (uint256 _round) {\\n    _round = round[_chainId];\\n    // Skip checking for the first ever round\\n    if (_round == 0) {\\n      _round = round[_chainId] = 1;\\n    } else {\\n      ProposalVote storage _latestProposalVote = vote[_chainId][_round];\\n      bool _isExpired = _tryDeleteExpiredVotingRound(_latestProposalVote);\\n      // Skip increasing round number if the latest round is expired, allow the vote to be overridden\\n      if (!_isExpired) {\\n        if (_latestProposalVote.status == VoteStatus.Pending) revert ErrCurrentProposalIsNotCompleted();\\n        unchecked {\\n          _round = ++round[_chainId];\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Saves new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _saveVotingRound(ProposalVote storage _vote, bytes32 _proposalHash, uint256 _expiryTimestamp) internal {\\n    _vote.hash = _proposalHash;\\n    _vote.expiryTimestamp = _expiryTimestamp;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 chainId,\\n    uint256 expiryTimestamp,\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    uint256[] memory gasAmounts,\\n    address creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory proposal) {\\n    if (chainId == 0) revert ErrInvalidChainId(msg.sig, 0, block.chainid);\\n    uint256 round_ = _createVotingRound(chainId);\\n\\n    proposal = Proposal.ProposalDetail(round_, chainId, expiryTimestamp, targets, values, calldatas, gasAmounts);\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    _saveVotingRound(vote[chainId][round_], proposalHash, expiryTimestamp);\\n    emit ProposalCreated(chainId, round_, proposalHash, proposal, creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(\\n    Proposal.ProposalDetail memory proposal,\\n    address creator\\n  ) internal virtual returns (uint256 round_) {\\n    uint256 chainId = proposal.chainId;\\n    if (chainId == 0) revert ErrInvalidChainId(msg.sig, 0, block.chainid);\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    round_ = _createVotingRound(chainId);\\n    _saveVotingRound(vote[chainId][round_], proposalHash, proposal.expiryTimestamp);\\n    if (round_ != proposal.nonce) revert ErrInvalidProposalNonce(msg.sig);\\n    emit ProposalCreated(chainId, round_, proposalHash, proposal, creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory proposal,\\n    Ballot.VoteType support,\\n    uint256 minimumForVoteWeight,\\n    uint256 minimumAgainstVoteWeight,\\n    address voter,\\n    Signature memory signature,\\n    uint256 voterWeight\\n  ) internal virtual returns (bool done) {\\n    uint256 chainId = proposal.chainId;\\n    uint256 round_ = proposal.nonce;\\n    ProposalVote storage _vote = vote[chainId][round_];\\n\\n    if (_tryDeleteExpiredVotingRound(_vote)) {\\n      return true;\\n    }\\n\\n    if (round[proposal.chainId] != round_) revert ErrInvalidProposalNonce(msg.sig);\\n    if (_vote.status != VoteStatus.Pending) revert ErrVoteIsFinalized();\\n    if (_voted(_vote, voter)) revert ErrAlreadyVoted(voter);\\n\\n    _vote.voted[voter] = true;\\n    // Stores the signature if it is not empty\\n    if (signature.r > 0 || signature.s > 0 || signature.v > 0) {\\n      _vote.sig[voter] = signature;\\n    }\\n    emit ProposalVoted(_vote.hash, voter, support, voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (support == Ballot.VoteType.For) {\\n      _vote.forVoteds.push(voter);\\n      _forVoteWeight = _vote.forVoteWeight += voterWeight;\\n    } else if (support == Ballot.VoteType.Against) {\\n      _vote.againstVoteds.push(voter);\\n      _againstVoteWeight = _vote.againstVoteWeight += voterWeight;\\n    } else revert ErrUnsupportedVoteType(msg.sig);\\n\\n    if (_forVoteWeight >= minimumForVoteWeight) {\\n      done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, proposal);\\n    } else if (_againstVoteWeight >= minimumAgainstVoteWeight) {\\n      done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev When the contract is on Ronin chain, checks whether the proposal is expired and delete it if is expired.\\n   *\\n   * Emits the event `ProposalExpired` if the vote is expired.\\n   *\\n   * Note: This function assumes the vote `_proposalVote` is already created, consider verifying the vote's existence\\n   * before or it will emit an unexpected event of `ProposalExpired`.\\n   */\\n  function _tryDeleteExpiredVotingRound(ProposalVote storage proposalVote) internal returns (bool isExpired) {\\n    isExpired =\\n      _getChainType() == ChainType.RoninChain &&\\n      proposalVote.status == VoteStatus.Pending &&\\n      proposalVote.expiryTimestamp <= block.timestamp;\\n\\n    if (isExpired) {\\n      emit ProposalExpired(proposalVote.hash);\\n\\n      for (uint256 _i; _i < proposalVote.forVoteds.length; ) {\\n        delete proposalVote.voted[proposalVote.forVoteds[_i]];\\n        delete proposalVote.sig[proposalVote.forVoteds[_i]];\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n      for (uint256 _i; _i < proposalVote.againstVoteds.length; ) {\\n        delete proposalVote.voted[proposalVote.againstVoteds[_i]];\\n        delete proposalVote.sig[proposalVote.againstVoteds[_i]];\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n      delete proposalVote.status;\\n      delete proposalVote.hash;\\n      delete proposalVote.againstVoteWeight;\\n      delete proposalVote.forVoteWeight;\\n      delete proposalVote.forVoteds;\\n      delete proposalVote.againstVoteds;\\n      delete proposalVote.expiryTimestamp;\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage vote_, Proposal.ProposalDetail memory proposal) internal {\\n    if (proposal.executable()) {\\n      vote_.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = proposal.execute();\\n      emit ProposalExecuted(vote_.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   */\\n  function _setProposalExpiryDuration(uint256 expiryDuration) internal {\\n    _proposalExpiryDuration = expiryDuration;\\n    emit ProposalExpiryDurationChanged(expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function _getProposalExpiryDuration() internal view returns (uint256) {\\n    return _proposalExpiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(ProposalVote storage vote_, address voter) internal view returns (bool) {\\n    return vote_.voted[voter];\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeights() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns current context is running on whether Ronin chain or on mainchain.\\n   */\\n  function _getChainType() internal view virtual returns (ChainType);\\n}\\n\",\"keccak256\":\"0x141791e1ab3c89cac0af0240a497cf9562ddbb050561798b9c4565d86254b736\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/GlobalCoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"./CoreGovernance.sol\\\";\\n\\nabstract contract GlobalCoreGovernance is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  mapping(GlobalProposal.TargetOption => address) internal _targetOptionsMap;\\n\\n  /// @dev Emitted when a proposal is created\\n  event GlobalProposalCreated(\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    bytes32 globalProposalHash,\\n    GlobalProposal.GlobalProposalDetail globalProposal,\\n    address creator\\n  );\\n\\n  /// @dev Emitted when the target options are updated\\n  event TargetOptionUpdated(GlobalProposal.TargetOption indexed targetOption, address indexed addr);\\n\\n  constructor(GlobalProposal.TargetOption[] memory targetOptions, address[] memory addrs) {\\n    _updateTargetOption(GlobalProposal.TargetOption.BridgeManager, address(this));\\n    _updateManyTargetOption(targetOptions, addrs);\\n  }\\n\\n  /**\\n   * @dev Proposes for a global proposal.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobal(\\n    uint256 expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata targetOptions,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    uint256[] memory gasAmounts,\\n    address creator\\n  ) internal virtual {\\n    uint256 round_ = _createVotingRound(0);\\n    GlobalProposal.GlobalProposalDetail memory globalProposal = GlobalProposal.GlobalProposalDetail(\\n      round_,\\n      expiryTimestamp,\\n      targetOptions,\\n      values,\\n      calldatas,\\n      gasAmounts\\n    );\\n    Proposal.ProposalDetail memory proposal = globalProposal.intoProposalDetail(\\n      _resolveTargets({ targetOptions: targetOptions, strict: true })\\n    );\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    _saveVotingRound(vote[0][round_], proposalHash, expiryTimestamp);\\n    emit GlobalProposalCreated(round_, proposalHash, proposal, globalProposal.hash(), globalProposal, creator);\\n  }\\n\\n  /**\\n   * @dev Proposes global proposal struct.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobalStruct(\\n    GlobalProposal.GlobalProposalDetail memory globalProposal,\\n    address creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory proposal) {\\n    proposal = globalProposal.intoProposalDetail(\\n      _resolveTargets({ targetOptions: globalProposal.targetOptions, strict: true })\\n    );\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    uint256 round_ = _createVotingRound(0);\\n    _saveVotingRound(vote[0][round_], proposalHash, globalProposal.expiryTimestamp);\\n\\n    if (round_ != proposal.nonce) revert ErrInvalidProposalNonce(msg.sig);\\n    emit GlobalProposalCreated(round_, proposalHash, proposal, globalProposal.hash(), globalProposal, creator);\\n  }\\n\\n  /**\\n   * @dev Returns corresponding address of target options. Return address(0) on non-existent target.\\n   */\\n  function resolveTargets(\\n    GlobalProposal.TargetOption[] calldata targetOptions\\n  ) external view returns (address[] memory targets) {\\n    return _resolveTargets({ targetOptions: targetOptions, strict: false });\\n  }\\n\\n  /**\\n   * @dev Internal helper of {resolveTargets}.\\n   *\\n   * @param strict When the param is set to `true`, revert on non-existent target.\\n   */\\n  function _resolveTargets(\\n    GlobalProposal.TargetOption[] memory targetOptions,\\n    bool strict\\n  ) internal view returns (address[] memory targets) {\\n    targets = new address[](targetOptions.length);\\n\\n    for (uint256 i; i < targetOptions.length; ) {\\n      targets[i] = _targetOptionsMap[targetOptions[i]];\\n      if (strict && targets[i] == address(0)) revert ErrInvalidArguments(msg.sig);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates list of `targetOptions` to `targets`.\\n   *\\n   * Requirement:\\n   * - Only allow self-call through proposal.\\n   * */\\n  function updateManyTargetOption(\\n    GlobalProposal.TargetOption[] memory targetOptions,\\n    address[] memory targets\\n  ) external {\\n    // HACK: Cannot reuse the existing library due to too deep stack\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n    _updateManyTargetOption(targetOptions, targets);\\n  }\\n\\n  /**\\n   * @dev Updates list of `targetOptions` to `targets`.\\n   */\\n  function _updateManyTargetOption(\\n    GlobalProposal.TargetOption[] memory targetOptions,\\n    address[] memory targets\\n  ) internal {\\n    for (uint256 i; i < targetOptions.length; ) {\\n      if (targets[i] == address(this)) revert ErrInvalidArguments(msg.sig);\\n      _updateTargetOption(targetOptions[i], targets[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates `targetOption` to `target`.\\n   *\\n   * Requirement:\\n   * - Emit a `TargetOptionUpdated` event.\\n   */\\n  function _updateTargetOption(GlobalProposal.TargetOption targetOption, address target) internal {\\n    _targetOptionsMap[targetOption] = target;\\n    emit TargetOptionUpdated(targetOption, target);\\n  }\\n}\\n\",\"keccak256\":\"0x986444cade6313dd1ce4137f3338e4fc296769f5cf669f057cd2838e5ae0e54f\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/governance-relay/CommonGovernanceRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../CoreGovernance.sol\\\";\\n\\nabstract contract CommonGovernanceRelay is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Relays votes by signatures.\\n   *\\n   * @notice Does not store the voter signature into storage.\\n   *\\n   */\\n  function _relayVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    if (!(_supports.length > 0 && _supports.length == _signatures.length)) revert ErrLengthMismatch(msg.sig);\\n\\n    uint256 _forVoteCount;\\n    uint256 _againstVoteCount;\\n    address[] memory _forVoteSigners = new address[](_signatures.length);\\n    address[] memory _againstVoteSigners = new address[](_signatures.length);\\n\\n    {\\n      address _signer;\\n      address _lastSigner;\\n      Ballot.VoteType _support;\\n      Signature calldata _sig;\\n\\n      for (uint256 _i; _i < _signatures.length; ) {\\n        _sig = _signatures[_i];\\n        _support = _supports[_i];\\n\\n        if (_support == Ballot.VoteType.For) {\\n          _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n          _forVoteSigners[_forVoteCount++] = _signer;\\n        } else if (_support == Ballot.VoteType.Against) {\\n          _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n          _againstVoteSigners[_againstVoteCount++] = _signer;\\n        } else revert ErrUnsupportedVoteType(msg.sig);\\n\\n        if (_lastSigner >= _signer) revert ErrInvalidOrder(msg.sig);\\n        _lastSigner = _signer;\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_forVoteSigners, _forVoteCount)\\n      mstore(_againstVoteSigners, _againstVoteCount)\\n    }\\n\\n    ProposalVote storage _vote = vote[_proposal.chainId][_proposal.nonce];\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _totalForVoteWeight = _sumWeights(_forVoteSigners);\\n    if (_totalForVoteWeight >= _minimumForVoteWeight) {\\n      if (_totalForVoteWeight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n      return;\\n    }\\n\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n    uint256 _totalAgainstVoteWeight = _sumWeights(_againstVoteSigners);\\n    if (_totalAgainstVoteWeight >= _minimumAgainstVoteWeight) {\\n      if (_totalAgainstVoteWeight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n      return;\\n    }\\n\\n    revert ErrRelayFailed(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Returns the weight of the governor list.\\n   */\\n  function _sumWeights(address[] memory _governors) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe5fd7548f91d39df6c03aa1a2058ca255f0c2ff979b1cd57b82e7b3017670292\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/governance-relay/GlobalGovernanceRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GlobalCoreGovernance.sol\\\";\\nimport \\\"./CommonGovernanceRelay.sol\\\";\\n\\nabstract contract GlobalGovernanceRelay is CommonGovernanceRelay, GlobalCoreGovernance {\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for the proposal.\\n   */\\n  function globalProposalRelayed(uint256 _round) external view returns (bool) {\\n    return vote[0][_round].status != VoteStatus.Pending;\\n  }\\n\\n  /**\\n   * @dev Relays voted global proposal.\\n   *\\n   * Requirements:\\n   * - The relay proposal is finalized.\\n   *\\n   */\\n  function _relayGlobalProposal(\\n    GlobalProposal.GlobalProposalDetail calldata globalProposal,\\n    Ballot.VoteType[] calldata supports_,\\n    Signature[] calldata signatures,\\n    bytes32 domainSeparator,\\n    address creator\\n  ) internal {\\n    Proposal.ProposalDetail memory _proposal = _proposeGlobalStruct(globalProposal, creator);\\n    bytes32 globalProposalHash = globalProposal.hash();\\n    _relayVotesBySignatures(\\n      _proposal,\\n      supports_,\\n      signatures,\\n      ECDSA.toTypedDataHash(domainSeparator, Ballot.hash(globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(domainSeparator, Ballot.hash(globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xe2c192ec663e10953b2754fa154fef64e26b8c470d25272883a9c149623746c8\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/governance-relay/GovernanceRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../CoreGovernance.sol\\\";\\nimport \\\"./CommonGovernanceRelay.sol\\\";\\n\\nabstract contract GovernanceRelay is CoreGovernance, CommonGovernanceRelay {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Relays voted proposal.\\n   *\\n   * Requirements:\\n   * - The relay proposal is finalized.\\n   *\\n   */\\n  function _relayProposal(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _relayVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xb21d764010845c562d1554168cf103b332755764107f6510eeddc1f03c82bc33\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeManagerEvents } from \\\"./events/IBridgeManagerEvents.sol\\\";\\n\\n/**\\n * @title IBridgeManager\\n * @dev The interface for managing bridge operators.\\n */\\ninterface IBridgeManager is IBridgeManagerEvents {\\n  /**\\n   * @dev The domain separator used for computing hash digests in the contract.\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @dev Returns the total number of bridge operators.\\n   * @return The total number of bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Checks if the given address is a bridge operator.\\n   * @param addr The address to check.\\n   * @return A boolean indicating whether the address is a bridge operator.\\n   */\\n  function isBridgeOperator(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Retrieves the full information of all registered bridge operators.\\n   *\\n   * This external function allows external callers to obtain the full information of all the registered bridge operators.\\n   * The returned arrays include the addresses of governors, bridge operators, and their corresponding vote weights.\\n   *\\n   * @return governors An array of addresses representing the governors of each bridge operator.\\n   * @return bridgeOperators An array of addresses representing the registered bridge operators.\\n   * @return weights An array of uint256 values representing the vote weights of each bridge operator.\\n   *\\n   * Note: The length of each array will be the same, and the order of elements corresponds to the same bridge operator.\\n   *\\n   * Example Usage:\\n   * ```\\n   * (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights) = getFullBridgeOperatorInfos();\\n   * for (uint256 i = 0; i < bridgeOperators.length; i++) {\\n   *     // Access individual information for each bridge operator.\\n   *     address governor = governors[i];\\n   *     address bridgeOperator = bridgeOperators[i];\\n   *     uint256 weight = weights[i];\\n   *     // ... (Process or use the information as required) ...\\n   * }\\n   * ```\\n   *\\n   */\\n  function getFullBridgeOperatorInfos()\\n    external\\n    view\\n    returns (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorsWeight(address[] calldata governors) external view returns (uint256 sum);\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function getTotalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns an array of all bridge operators.\\n   * @return An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns an array of bridge operators correspoding to governor addresses.\\n   * @return bridgeOperators_ An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperatorOf(address[] calldata gorvernors) external view returns (address[] memory bridgeOperators_);\\n\\n  /**\\n   * @dev Retrieves the governors corresponding to a given array of bridge operators.\\n   * This external function allows external callers to obtain the governors associated with a given array of bridge operators.\\n   * The function takes an input array `bridgeOperators` containing bridge operator addresses and returns an array of corresponding governors.\\n   * @param bridgeOperators An array of bridge operator addresses for which governors are to be retrieved.\\n   * @return governors An array of addresses representing the governors corresponding to the provided bridge operators.\\n   */\\n  function getGovernorsOf(address[] calldata bridgeOperators) external view returns (address[] memory governors);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific governor.\\n   * @param governor The address of the governor to get the vote weight for.\\n   * @return voteWeight The vote weight of the specified governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific bridge operator.\\n   * @param bridgeOperator The address of the bridge operator to get the vote weight for.\\n   * @return weight The vote weight of the specified bridge operator.\\n   */\\n  function getBridgeOperatorWeight(address bridgeOperator) external view returns (uint256 weight);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata governors) external view returns (uint256[] memory weights);\\n\\n  /**\\n   * @dev Returns an array of all governors.\\n   * @return An array containing the addresses of all governors.\\n   */\\n  function getGovernors() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Adds multiple bridge operators.\\n   * @param governors An array of addresses of hot/cold wallets for bridge operator to update their node address.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to add.\\n   * @return addeds An array of booleans indicating whether each bridge operator was added successfully.\\n   *\\n   * Note: return boolean array `addeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {addeds} = await bridgeManagerContract.callStatic.addBridgeOperators(\\n   *  voteWeights,\\n   *  governors,\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => addeds[index]);\\n   * const filteredWeights = weights.filter((_, index) => addeds[index]);\\n   * const filteredGovernors = governors.filter((_, index) => addeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function addBridgeOperators(\\n    uint96[] calldata voteWeights,\\n    address[] calldata governors,\\n    address[] calldata bridgeOperators\\n  ) external returns (bool[] memory addeds);\\n\\n  /**\\n   * @dev Removes multiple bridge operators.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to remove.\\n   * @return removeds An array of booleans indicating whether each bridge operator was removed successfully.\\n   *\\n   * * Note: return boolean array `removeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {removeds} = await bridgeManagerContract.callStatic.removeBridgeOperators(\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => removeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function removeBridgeOperators(address[] calldata bridgeOperators) external returns (bool[] memory removeds);\\n\\n  /**\\n   * @dev Governor updates their corresponding governor and/or operator address.\\n   * Requirements:\\n   * - The caller must the governor of the operator that is requested changes.\\n   * @param bridgeOperator The address of the bridge operator to update.\\n   */\\n  function updateBridgeOperator(address bridgeOperator) external;\\n}\\n\",\"keccak256\":\"0x0ae26d2b1ed9b67b4eed4f1957ef3c399be7a944b6fa36ff9a0b476de5c3eb7a\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IBridgeManagerCallback\\n * @dev Interface for the callback functions to be implemented by the Bridge Manager contract.\\n */\\ninterface IBridgeManagerCallback is IERC165 {\\n  /**\\n   * @dev Handles the event when bridge operators are added.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @param addeds The corresponding boolean values indicating whether the operators were added or not.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorsAdded(\\n    address[] memory bridgeOperators,\\n    bool[] memory addeds\\n  ) external returns (bytes4 selector);\\n\\n  /**\\n   * @dev Handles the event when bridge operators are removed.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @param removeds The corresponding boolean values indicating whether the operators were removed or not.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorsRemoved(\\n    address[] memory bridgeOperators,\\n    bool[] memory removeds\\n  ) external returns (bytes4 selector);\\n\\n  /**\\n   * @dev Handles the event when a bridge operator is updated.\\n   * @param currentBridgeOperator The address of the current bridge operator.\\n   * @param newbridgeOperator The new address of the bridge operator.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorUpdated(\\n    address currentBridgeOperator,\\n    address newbridgeOperator\\n  ) external returns (bytes4 selector);\\n}\\n\",\"keccak256\":\"0xfd6868a1041577a463b6c96713edcb18063dc817154d09710abfd5783e4629ee\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeManagerCallbackRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeManagerCallbackRegister {\\n  /**\\n   * @dev Emitted when the contract notifies multiple registers with statuses and return data.\\n   */\\n  event Notified(bytes callData, address[] registers, bool[] statuses, bytes[] returnDatas);\\n\\n  /**\\n   * @dev Retrieves the addresses of registered callbacks.\\n   * @return registers An array containing the addresses of registered callbacks.\\n   */\\n  function getCallbackRegisters() external view returns (address[] memory registers);\\n\\n  /**\\n   * @dev Registers multiple callbacks with the bridge.\\n   * @param registers The array of callback addresses to register.\\n   * @return registereds An array indicating the success status of each registration.\\n   */\\n  function registerCallbacks(address[] calldata registers) external returns (bool[] memory registereds);\\n\\n  /**\\n   * @dev Unregisters multiple callbacks from the bridge.\\n   * @param registers The array of callback addresses to unregister.\\n   * @return unregistereds An array indicating the success status of each unregistration.\\n   */\\n  function unregisterCallbacks(address[] calldata registers) external returns (bool[] memory unregistereds);\\n}\\n\",\"keccak256\":\"0xadbcf65ee9d55f4aa037216d71a279fe41855fe572a4a8734e6f69954aea98f4\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/events/IBridgeManagerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeManagerEvents {\\n  /**\\n   * @dev The structure representing information about a bridge operator.\\n   * @param addr The address of the bridge operator.\\n   * @param voteWeight The vote weight assigned to the bridge operator.\\n   */\\n  struct BridgeOperatorInfo {\\n    address addr;\\n    uint96 voteWeight;\\n  }\\n\\n  /**\\n   * @dev Emitted when new bridge operators are added.\\n   * @param statuses The array of boolean values represents whether the corresponding bridge operator is added successfully.\\n   * @param voteWeights The array of vote weights assigned to the added bridge operators.\\n   * @param governors The array of addresses representing the governors associated with the added bridge operators.\\n   * @param bridgeOperators The array of addresses representing the added bridge operators.\\n   */\\n  event BridgeOperatorsAdded(bool[] statuses, uint96[] voteWeights, address[] governors, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when bridge operators are removed.\\n   * @param statuses The array of boolean values representing the statuses of the removed bridge operators.\\n   * @param bridgeOperators The array of addresses representing the removed bridge operators.\\n   */\\n  event BridgeOperatorsRemoved(bool[] statuses, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when a bridge operator is updated.\\n   * @param governor The address of the governor initiating the update.\\n   * @param fromBridgeOperator The address of the bridge operator being updated.\\n   * @param toBridgeOperator The updated address of the bridge operator.\\n   */\\n  event BridgeOperatorUpdated(\\n    address indexed governor,\\n    address indexed fromBridgeOperator,\\n    address indexed toBridgeOperator\\n  );\\n}\\n\",\"keccak256\":\"0x217fff41c4a9ca72d142c5a2120bb1b5e67bf5bf5aa0f6128450116aebc07b8d\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/ChainTypeConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainTypeConsumer {\\n  enum ChainType {\\n    RoninChain,\\n    Mainchain\\n  }\\n}\\n\",\"keccak256\":\"0xe0d20e00c8d237f8e0fb881abf1ff1ef114173bcb428f06f689c581666a22db7\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected,\\n    Expired\\n  }\\n}\\n\",\"keccak256\":\"0xa5045232c0c053fcf31fb3fe71942344444159c48d5f1b2063dbb06b6a1c9752\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 private constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32 digest) {\\n    // return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, BALLOT_TYPEHASH)\\n      mstore(add(ptr, 0x20), _proposalHash)\\n      mstore(add(ptr, 0x40), _support)\\n      digest := keccak256(ptr, 0x60)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaa1e66bcd86baa6f18c7c5e9b67496535f229cbd2e2ecb4c66bcbfed2b1365de\",\"license\":\"MIT\"},\"contracts/libraries/GlobalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  /**\\n   * @dev Error thrown when attempting to interact with an unsupported target.\\n   */\\n  error ErrUnsupportedTarget(bytes32 proposalHash, uint256 targetNumber);\\n\\n  enum TargetOption {\\n    /* 0 */ BridgeManager,\\n    /* 1 */ GatewayContract,\\n    /* 2 */ BridgeReward,\\n    /* 3 */ BridgeSlash\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    uint256 expiryTimestamp;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint256 expiryTimestamp,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory self) internal pure returns (bytes32 digest_) {\\n    uint256[] memory values = self.values;\\n    TargetOption[] memory targets = self.targetOptions;\\n    bytes32[] memory calldataHashList = new bytes32[](self.calldatas.length);\\n    uint256[] memory gasAmounts = self.gasAmounts;\\n\\n    for (uint256 i; i < calldataHashList.length; ) {\\n      calldataHashList[i] = keccak256(self.calldatas[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    /*\\n     * return\\n     *   keccak256(\\n     *     abi.encode(\\n     *       TYPE_HASH,\\n     *       _proposal.nonce,\\n     *       _proposal.expiryTimestamp,\\n     *       _targetsHash,\\n     *       _valuesHash,\\n     *       _calldatasHash,\\n     *       _gasAmountsHash\\n     *     )\\n     *   );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(self)) // _proposal.nonce\\n      mstore(add(ptr, 0x40), mload(add(self, 0x20))) // _proposal.expiryTimestamp\\n\\n      let arrayHashed\\n      arrayHashed := keccak256(add(targets, 32), mul(mload(targets), 32)) // targetsHash\\n      mstore(add(ptr, 0x60), arrayHashed)\\n      arrayHashed := keccak256(add(values, 32), mul(mload(values), 32)) // _valuesHash\\n      mstore(add(ptr, 0x80), arrayHashed)\\n      arrayHashed := keccak256(add(calldataHashList, 32), mul(mload(calldataHashList), 32)) // _calldatasHash\\n      mstore(add(ptr, 0xa0), arrayHashed)\\n      arrayHashed := keccak256(add(gasAmounts, 32), mul(mload(gasAmounts), 32)) // _gasAmountsHash\\n      mstore(add(ptr, 0xc0), arrayHashed)\\n      digest_ := keccak256(ptr, 0xe0)\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function intoProposalDetail(\\n    GlobalProposalDetail memory self,\\n    address[] memory targets\\n  ) internal pure returns (Proposal.ProposalDetail memory detail_) {\\n    detail_.nonce = self.nonce;\\n    detail_.expiryTimestamp = self.expiryTimestamp;\\n    detail_.chainId = 0;\\n    detail_.targets = new address[](self.targetOptions.length);\\n    detail_.values = self.values;\\n    detail_.calldatas = self.calldatas;\\n    detail_.gasAmounts = self.gasAmounts;\\n\\n    for (uint256 i; i < self.targetOptions.length; ) {\\n      detail_.targets[i] = targets[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9c5479df6c49da6ce1addc4779b4e5a1a203148062594f9f70a416dea20b83e1\",\"license\":\"MIT\"},\"contracts/libraries/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ErrInvalidChainId, ErrLengthMismatch } from \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary Proposal {\\n  /**\\n   * @dev Error thrown when there is insufficient gas to execute a function.\\n   */\\n  error ErrInsufficientGas(bytes32 proposalHash);\\n\\n  /**\\n   * @dev Error thrown when an invalid expiry timestamp is provided.\\n   */\\n  error ErrInvalidExpiryTimestamp();\\n\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    uint256 expiryTimestamp;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,uint256 expiryTimestamp,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal, uint256 _maxExpiryDuration) internal view {\\n    if (\\n      !(_proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length)\\n    ) {\\n      revert ErrLengthMismatch(msg.sig);\\n    }\\n\\n    if (_proposal.expiryTimestamp > block.timestamp + _maxExpiryDuration) {\\n      revert ErrInvalidExpiryTimestamp();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32 digest_) {\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; ) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    // return\\n    //   keccak256(\\n    //     abi.encode(\\n    //       TYPE_HASH,\\n    //       _proposal.nonce,\\n    //       _proposal.chainId,\\n    //       _targetsHash,\\n    //       _valuesHash,\\n    //       _calldatasHash,\\n    //       _gasAmountsHash\\n    //     )\\n    //   );\\n    // /\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_proposal)) // _proposal.nonce\\n      mstore(add(ptr, 0x40), mload(add(_proposal, 0x20))) // _proposal.chainId\\n      mstore(add(ptr, 0x60), mload(add(_proposal, 0x40))) // expiry timestamp\\n\\n      let arrayHashed\\n      arrayHashed := keccak256(add(_targets, 32), mul(mload(_targets), 32)) // targetsHash\\n      mstore(add(ptr, 0x80), arrayHashed)\\n      arrayHashed := keccak256(add(_values, 32), mul(mload(_values), 32)) // _valuesHash\\n      mstore(add(ptr, 0xa0), arrayHashed)\\n      arrayHashed := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32)) // _calldatasHash\\n      mstore(add(ptr, 0xc0), arrayHashed)\\n      arrayHashed := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32)) // _gasAmountsHash\\n      mstore(add(ptr, 0xe0), arrayHashed)\\n      digest_ := keccak256(ptr, 0x100)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(\\n    ProposalDetail memory _proposal\\n  ) internal returns (bool[] memory _successCalls, bytes[] memory _returnDatas) {\\n    if (!executable(_proposal)) revert ErrInvalidChainId(msg.sig, _proposal.chainId, block.chainid);\\n\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ) {\\n      if (gasleft() <= _proposal.gasAmounts[_i]) revert ErrInsufficientGas(hash(_proposal));\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbc29aa4e69db7eef0034fdb795181124f86bcf2bc07b5e4a202100dbdce7f7a1\",\"license\":\"MIT\"},\"contracts/mainchain/MainchainBridgeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { CoreGovernance } from \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport { GlobalCoreGovernance, GlobalGovernanceRelay } from \\\"../extensions/sequential-governance/governance-relay/GlobalGovernanceRelay.sol\\\";\\nimport { GovernanceRelay } from \\\"../extensions/sequential-governance/governance-relay/GovernanceRelay.sol\\\";\\nimport { ContractType, BridgeManager } from \\\"../extensions/bridge-operator-governance/BridgeManager.sol\\\";\\nimport { Ballot } from \\\"../libraries/Ballot.sol\\\";\\nimport { Proposal } from \\\"../libraries/Proposal.sol\\\";\\nimport { GlobalProposal } from \\\"../libraries/GlobalProposal.sol\\\";\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\ncontract MainchainBridgeManager is BridgeManager, GovernanceRelay, GlobalGovernanceRelay {\\n  uint256 private constant DEFAULT_EXPIRY_DURATION = 1 << 255;\\n\\n  constructor(\\n    uint256 num,\\n    uint256 denom,\\n    uint256 roninChainId,\\n    address bridgeContract,\\n    address[] memory callbackRegisters,\\n    address[] memory bridgeOperators,\\n    address[] memory governors,\\n    uint96[] memory voteWeights,\\n    GlobalProposal.TargetOption[] memory targetOptions,\\n    address[] memory targets\\n  )\\n    payable\\n    CoreGovernance(DEFAULT_EXPIRY_DURATION)\\n    GlobalCoreGovernance(targetOptions, targets)\\n    BridgeManager(num, denom, roninChainId, bridgeContract, callbackRegisters, bridgeOperators, governors, voteWeights)\\n  {}\\n\\n  /**\\n   * @dev See `GovernanceRelay-_relayProposal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   */\\n  function relayProposal(\\n    Proposal.ProposalDetail calldata proposal,\\n    Ballot.VoteType[] calldata supports_,\\n    Signature[] calldata signatures\\n  ) external onlyGovernor {\\n    _relayProposal(proposal, supports_, signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceRelay-_relayGlobalProposal`.\\n   *\\n   *  Requirements:\\n   * - The method caller is governor.\\n   */\\n  function relayGlobalProposal(\\n    GlobalProposal.GlobalProposalDetail calldata globalProposal,\\n    Ballot.VoteType[] calldata supports_,\\n    Signature[] calldata signatures\\n  ) external onlyGovernor {\\n    _relayGlobalProposal({\\n      globalProposal: globalProposal,\\n      supports_: supports_,\\n      signatures: signatures,\\n      domainSeparator: DOMAIN_SEPARATOR,\\n      creator: msg.sender\\n    });\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the minimum vote weight required for governance actions.\\n   * @return minimumVoteWeight The minimum vote weight required for governance actions.\\n   */\\n  function _getMinimumVoteWeight() internal view override returns (uint256) {\\n    return minimumVoteWeight();\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function getProposalExpiryDuration() external view returns (uint256) {\\n    return _getProposalExpiryDuration();\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the total weights of all governors.\\n   * @return totalWeights The total weights of all governors combined.\\n   */\\n  function _getTotalWeights() internal view override returns (uint256) {\\n    return getTotalWeights();\\n  }\\n\\n  /**\\n   * @dev Internal function to calculate the sum of weights for a given array of governors.\\n   * @param governors An array containing the addresses of governors to calculate the sum of weights.\\n   * @return sumWeights The sum of weights for the provided governors.\\n   */\\n  function _sumWeights(address[] memory governors) internal view override returns (uint256) {\\n    return _sumGovernorsWeight(governors);\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the chain type of the contract.\\n   * @return chainType The chain type, indicating the type of the chain the contract operates on (e.g., Mainchain).\\n   */\\n  function _getChainType() internal pure override returns (ChainType) {\\n    return ChainType.Mainchain;\\n  }\\n}\\n\",\"keccak256\":\"0x162f9d419b2c3f0b95c95d7bc9a47844d8fc487427d1c662be8974f361c10902\",\"license\":\"MIT\"},\"contracts/types/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { LibTUint256Slot } from \\\"./operations/LibTUint256Slot.sol\\\";\\n\\ntype TUint256Slot is bytes32;\\n\\nusing {\\n  LibTUint256Slot.add,\\n  LibTUint256Slot.sub,\\n  LibTUint256Slot.mul,\\n  LibTUint256Slot.div,\\n  LibTUint256Slot.load,\\n  LibTUint256Slot.store,\\n  LibTUint256Slot.addAssign,\\n  LibTUint256Slot.subAssign,\\n  LibTUint256Slot.preDecrement,\\n  LibTUint256Slot.postDecrement,\\n  LibTUint256Slot.preIncrement,\\n  LibTUint256Slot.postIncrement\\n} for TUint256Slot global;\\n\",\"keccak256\":\"0x20ab58f1c9ae4936f9dd9891d064301d78ef508c1dd2ce0c19a7b5b81d530e36\",\"license\":\"MIT\"},\"contracts/types/operations/LibTUint256Slot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { TUint256Slot } from \\\"../Types.sol\\\";\\n\\n/**\\n * @title LibTUint256Slot\\n * @dev Library for handling unsigned 256-bit integers.\\n */\\nlibrary LibTUint256Slot {\\n  /// @dev value is equal to bytes4(keccak256(\\\"Panic(uint256)\\\"))\\n  /// @dev see: https://github.com/foundry-rs/forge-std/blob/master/src/StdError.sol\\n  uint256 private constant PANIC_ERROR_SIGNATURE = 0x4e487b71;\\n  /// @dev error code for {Arithmetic over/underflow} error\\n  uint256 private constant ARITHMETIC_ERROR_CODE = 0x11;\\n  /// @dev error code for {Division or modulo by 0} error\\n  uint256 private constant DIVISION_ERROR_CODE = 0x12;\\n\\n  /**\\n   * @dev Loads the value of the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @return val The loaded value.\\n   */\\n  function load(TUint256Slot self) internal view returns (uint256 val) {\\n    assembly {\\n      val := sload(self)\\n    }\\n  }\\n\\n  /**\\n   * @dev Stores a value into the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to be stored.\\n   */\\n  function store(TUint256Slot self, uint256 other) internal {\\n    assembly {\\n      sstore(self, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Multiplies the TUint256Slot variable by a given value.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to multiply by.\\n   * @return res The resulting value after multiplication.\\n   */\\n  function mul(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      if iszero(iszero(storedVal)) {\\n        res := mul(storedVal, other)\\n\\n        // Overflow check\\n        if iszero(eq(other, div(res, storedVal))) {\\n          // Store 4 bytes the function selector of Panic(uint256)\\n          // Equivalent to revert Panic(uint256)\\n          mstore(0x00, PANIC_ERROR_SIGNATURE)\\n          // Store 4 bytes of division error code in the next slot\\n          mstore(0x20, ARITHMETIC_ERROR_CODE)\\n          // Revert 36 bytes of error starting from 0x1c\\n          revert(0x1c, 0x24)\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides the TUint256Slot variable by a given value.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to divide by.\\n   * @return res The resulting value after division.\\n   */\\n  function div(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      // revert if divide by zero\\n      if iszero(other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, DIVISION_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n      res := div(storedVal, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Subtracts a given value from the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to subtract.\\n   * @return res The resulting value after subtraction.\\n   */\\n  function sub(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n\\n      // Underflow check\\n      if lt(storedVal, other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, ARITHMETIC_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n\\n      res := sub(storedVal, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Adds a given value to the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to add.\\n   * @return res The resulting value after addition.\\n   */\\n  function add(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      res := add(storedVal, other)\\n\\n      // Overflow check\\n      if lt(res, other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, ARITHMETIC_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Increments the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value after incrementing.\\n   */\\n  function preIncrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = addAssign(self, 1);\\n  }\\n\\n  /**\\n   * @dev Increments the TUint256Slot variable by 1 and returns the original value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The original value before incrementing.\\n   */\\n  function postIncrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = load(self);\\n    store(self, res + 1);\\n  }\\n\\n  /**\\n   * @dev Decrements the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value after decrementing.\\n   */\\n  function preDecrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = subAssign(self, 1);\\n  }\\n\\n  /**\\n   * @dev Decrements the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value before decrementing.\\n   */\\n  function postDecrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = load(self);\\n    store(self, res - 1);\\n  }\\n\\n  /**\\n   * @dev Adds a given value to the TUint256Slot variable and stores the result.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to add.\\n   * @return res The resulting value after addition and storage.\\n   */\\n  function addAssign(TUint256Slot self, uint256 other) internal returns (uint256 res) {\\n    store(self, res = add(self, other));\\n  }\\n\\n  /**\\n   * @dev Subtracts a given value from the TUint256Slot variable and stores the result.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to subtract.\\n   * @return res The resulting value after subtraction and storage.\\n   */\\n  function subAssign(TUint256Slot self, uint256 other) internal returns (uint256 res) {\\n    store(self, res = sub(self, other));\\n  }\\n}\\n\",\"keccak256\":\"0xe10c089459baf373494d76b00e582d49f6e43c500ab0f1657d53afc2fa472cbb\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\",\"keccak256\":\"0x3914292a405307cba9e93085edcaf5f1203ca2d55abf998bf1d2af1e86f5a4c6\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD\\n}\\n\",\"keccak256\":\"0xf72feff9afafcb5cadc1b05c6e0b998ea5d66c7ece57c3e482e560d0a1bb4079\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xa98cec38c640c4e37f475debbcd366226f1188c3f5ea6e29de768bd33e021873\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052604051620063e3380380620063e38339810160408190526200002691620014f3565b8181600160ff1b8c8c8c8c8c8c8c8c836200004181620001bd565b5050620000706001600080516020620063c383398151915260001b620002da60201b62000ebe1790919060201c565b6200007c8888620002de565b506200008c90506002866200044e565b604080516020808201839052600c60608301526b212924a223a2afa0a226a4a760a11b6080808401919091528284018a905283518084038201815260a0840185528051908301207f599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf60c08501527f9d3fa1662ea89365eb7af36506f0ad5413bd7e078960d8481ff4718763aaa8e960e08501527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a561010085015261012080850191909152845180850390910181526101409093019093528151910120905262000177818385620004f8565b50505050505050505062000191816200098b60201b60201c565b506200019f600030620009be565b620001ab828262000a5a565b5050505050505050505050506200193c565b606081620001cb8162000b1d565b8251806001600160401b03811115620001e857620001e86200131e565b60405190808252806020026020018201604052801562000212578160200160208202803683370190505b50925080600003620002255750620002d4565b6000805160206200638383398151915260006314d72edb60e21b815b84811015620002ce578781815181106200025f576200025f6200162e565b602002602001015192506200027a8362000b6460201b60201c565b62000286838362000b9c565b620002a0838562000d7b60201b62000ec21790919060201c565b878281518110620002b557620002b56200162e565b9115156020928302919091019091015260010162000241565b50505050505b50919050565b9055565b6000808284111562000316576040516387f6f09560e01b81526001600160e01b03196000351660048201526024015b60405180910390fd5b6200033e600080516020620063a383398151915260001b62000d9b60201b62000ed71760201c565b9150620003797fac1ff16a4f04f2a37a9ba5252a69baa100b460e517d1f8019c054a5ad698f9ff60001b62000d9b60201b62000ed71760201c565b9050620003a784600080516020620063a383398151915260001b620002da60201b62000ebe1790919060201c565b620003e4837fac1ff16a4f04f2a37a9ba5252a69baa100b460e517d1f8019c054a5ad698f9ff60001b620002da60201b62000ebe1790919060201c565b82846200040e600080516020620063c383398151915260001b62000d9f60201b62000edb1760201c565b60408051868152602081018690527f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f8910160405180910390a49250929050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600d81111562000487576200048762001644565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600d811115620004cb57620004cb62001644565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b606062000514828462000dc360201b62000ef61790919060201c565b6200051f8162000b1d565b8251855181148015620005325750845181145b6200055f576040516306b5667560e21b81526001600160e01b03196000351660048201526024016200030d565b806001600160401b038111156200057a576200057a6200131e565b604051908082528060200260200182016040528015620005a4578160200160208202803683370190505b50925080600003620005b7575062000983565b604080518082019091526000808252602082018190527f546f6b46ab35b030b6816596b352aef78857377176c8b24baa2046a62cf1998c917f8400683eb2cb350596d73644c0c89fe45f108600003457374f4ab3e87b4f3aa3917fd38c234075fde25875da8a6b7e36b58b86681d483271a99eeeee1d78e258a24d917f88547008e60f5748911f2e59feb3093b7e4c2e87b2dd69d61f112fcc932de8e3919081908190815b89811015620008c4578d81815181106200067a576200067a6200162e565b602002602001015194508c81815181106200069957620006996200162e565b60200260200101519350620006b48562000ee160201b60201c565b620006bf8462000ee1565b8e8181518110620006d457620006d46200162e565b60200260200101516001600160601b03166000036200071557604051637f11b8a360e11b81526001600160e01b03196000351660048201526024016200030d565b6200072f858a62000f1860201b620010001790919060201c565b8062000750575062000750848a62000f1860201b620010001790919060201c565b8062000771575062000771858862000f1860201b620010001790919060201c565b8062000792575062000792848862000f1860201b620010001790919060201c565b158c8281518110620007a857620007a86200162e565b6020026020010190151590811515815250508b8181518110620007cf57620007cf6200162e565b602002602001015115620008bb57620007f7858a62000d7b60201b62000ec21790919060201c565b5062000812848862000d7b60201b62000ec21790919060201c565b506001600160a01b03848116600081815260208b90526040902080546001600160a01b0319169288169290921790915582528e518f90829081106200085b576200085b6200162e565b6020908102919091018101516001600160601b03169083018190526200088290846200165a565b6001600160a01b038087166000908152602089815260409091208551918601516001600160601b0316600160a01b029190921617905592505b6001016200065c565b5062000902827f6924fe71b0c8b61aea02ca498b5f53b29bd95726278b1fe4eb791bb24a42644c60001b62000f3b60201b620010221790919060201c565b506200093a635ebae8a060e01b8d8d60405160200162000924929190620016f6565b60408051601f1981840301815291905262000f55565b7f897810999654e525e272b5909785c4d0ceaee1bbf9c87d9091a37558b0423b788b8f8f8f60405162000971949392919062001728565b60405180910390a15050505050505050505b509392505050565b600281905560405181907fe5cd1c123a8cf63fa1b7229678db61fe8ae99dbbd27889370b6667c8cae97da190600090a250565b8060036000846003811115620009d857620009d862001644565b6003811115620009ec57620009ec62001644565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600381111562000a2d5762000a2d62001644565b6040517f356c8c57e9e84b99b1cb58b13c985b2c979f78cbdf4d0fa70fe2a98bb09a099d90600090a35050565b60005b825181101562000b1857306001600160a01b031682828151811062000a865762000a866200162e565b60200260200101516001600160a01b03160362000ac55760405163053265f160e01b81526001600160e01b03196000351660048201526024016200030d565b62000b0f83828151811062000ade5762000ade6200162e565b602002602001015183838151811062000afb5762000afb6200162e565b6020026020010151620009be60201b60201c565b60010162000a5d565b505050565b62000b33816200117560201b620010391760201c565b1562000b6157604051630d697db160e11b81526001600160e01b03196000351660048201526024016200030d565b50565b806001600160a01b03163b60000362000b6157604051630bfc64a360e21b81526001600160a01b03821660048201526024016200030d565b6040516001600160e01b03198216602482015260009060440160408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b1790525190915060009081906001600160a01b0386169062000c00908590620017de565b600060405180830381855afa9150503d806000811462000c3d576040519150601f19603f3d011682016040523d82523d6000602084013e62000c42565b606091505b50915091508162000d2457846001600160a01b03168360405160240162000c6a91906200182a565b60408051601f198184030181529181526020820180516001600160e01b03166325da93a560e11b1790525162000ca19190620017de565b600060405180830381855afa9150503d806000811462000cde576040519150601f19603f3d011682016040523d82523d6000602084013e62000ce3565b606091505b5090925090508162000d245760405163069d427960e11b81526001600160e01b0319851660048201526001600160a01b03861660248201526044016200030d565b8080602001905181019062000d3a91906200183f565b62000d745760405163069d427960e11b81526001600160e01b0319851660048201526001600160a01b03861660248201526044016200030d565b5050505050565b600062000d92836001600160a01b03841662001220565b90505b92915050565b5490565b600062000daa825490565b905062000dbe82620002da8360016200165a565b919050565b81518151606091908082016001600160401b0381111562000de85762000de86200131e565b60405190808252806020026020018201604052801562000e12578160200160208202803683370190505b50925060005b8281101562000e745785818151811062000e365762000e366200162e565b602002602001015184828151811062000e535762000e536200162e565b6001600160a01b039092166020928302919091019091015260010162000e18565b60005b8281101562000ed75785818151811062000e955762000e956200162e565b602002602001015185838151811062000eb25762000eb26200162e565b6001600160a01b03909216602092830291909101909101526001918201910162000e77565b5050505092915050565b6001600160a01b03811662000b615760405163104c66df60e31b81526001600160e01b03196000351660048201526024016200030d565b6001600160a01b0381166000908152600183016020526040812054151562000d92565b600062000d958362000f4e818562001272565b9250829055565b600062000f7c600080516020620063838339815191526200129260201b620010d81760201c565b8051909150600081900362000f915750505050565b6000816001600160401b0381111562000fae5762000fae6200131e565b60405190808252806020026020018201604052801562000fd8578160200160208202803683370190505b5090506000826001600160401b0381111562000ff85762000ff86200131e565b6040519080825280602002602001820160405280156200102d57816020015b6060815260200190600190039081620010175790505b509050600086866040516020016200104792919062001863565b604051602081830303815290604052905060005b848110156200112c578581815181106200107957620010796200162e565b60200260200101516001600160a01b0316826040516200109a9190620017de565b6000604051808303816000865af19150503d8060008114620010d9576040519150601f19603f3d011682016040523d82523d6000602084013e620010de565b606091505b50858381518110620010f457620010f46200162e565b602002602001018584815181106200111057620011106200162e565b602090810291909101019190915290151590526001016200105b565b507fc0b07a27e66788f39cc91405f012f34066b16f31b4bda9438c52f2dae0cc5b638186858560405162001164949392919062001896565b60405180910390a150505050505050565b600081516000036200118957506000919050565b60005b60018351038110156200121757600181015b83518110156200120d57838181518110620011bd57620011bd6200162e565b60200260200101516001600160a01b0316848381518110620011e357620011e36200162e565b60200260200101516001600160a01b03160362001204575060019392505050565b6001016200119e565b506001016200118c565b50600092915050565b6000818152600183016020526040812054620012695750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000d95565b50600062000d95565b815481018181101562000d9557634e487b7160005260116020526024601cfd5b60606000620012a183620012a8565b9392505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015620012fa57602002820191906000526020600020905b815481526020019060010190808311620012e5575b50505050509050919050565b80516001600160a01b038116811462000dbe57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200135f576200135f6200131e565b604052919050565b60006001600160401b038211156200138357620013836200131e565b5060051b60200190565b600082601f8301126200139f57600080fd5b81516020620013b8620013b28362001367565b62001334565b82815260059290921b84018101918181019086841115620013d857600080fd5b8286015b84811015620013fe57620013f08162001306565b8352918301918301620013dc565b509695505050505050565b600082601f8301126200141b57600080fd5b815160206200142e620013b28362001367565b82815260059290921b840181019181810190868411156200144e57600080fd5b8286015b84811015620013fe5780516001600160601b0381168114620014745760008081fd5b835291830191830162001452565b600082601f8301126200149457600080fd5b81516020620014a7620013b28362001367565b82815260059290921b84018101918181019086841115620014c757600080fd5b8286015b84811015620013fe57805160048110620014e55760008081fd5b8352918301918301620014cb565b6000806000806000806000806000806101408b8d0312156200151457600080fd5b8a51995060208b0151985060408b015197506200153460608c0162001306565b60808c01519097506001600160401b03808211156200155257600080fd5b620015608e838f016200138d565b975060a08d01519150808211156200157757600080fd5b620015858e838f016200138d565b965060c08d01519150808211156200159c57600080fd5b620015aa8e838f016200138d565b955060e08d0151915080821115620015c157600080fd5b620015cf8e838f0162001409565b94506101008d0151915080821115620015e757600080fd5b620015f58e838f0162001482565b93506101208d01519150808211156200160d57600080fd5b506200161c8d828e016200138d565b9150509295989b9194979a5092959850565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b8082018082111562000d9557634e487b7160e01b600052601160045260246000fd5b600081518084526020808501945080840160005b83811015620016b75781516001600160a01b03168752958201959082019060010162001690565b509495945050505050565b600081518084526020808501945080840160005b83811015620016b7578151151587529582019590820190600101620016d6565b6040815260006200170b60408301856200167c565b82810360208401526200171f8185620016c2565b95945050505050565b6080815260006200173d6080830187620016c2565b82810360208481019190915286518083528782019282019060005b818110156200177f5784516001600160601b03168352938301939183019160010162001758565b505084810360408601526200179581886200167c565b925050508281036060840152620017ad81856200167c565b979650505050505050565b60005b83811015620017d5578181015183820152602001620017bb565b50506000910152565b60008251620017f2818460208701620017b8565b9190910192915050565b6000815180845262001816816020860160208601620017b8565b601f01601f19169290920160200192915050565b60208152600062000d926020830184620017fc565b6000602082840312156200185257600080fd5b81518015158114620012a157600080fd5b6001600160e01b031983168152815160009062001888816004850160208701620017b8565b919091016004019392505050565b608081526000620018ab6080830187620017fc565b602083820381850152620018c082886200167c565b91508382036040850152620018d68287620016c2565b915083820360608501528185518084528284019150828160051b85010183880160005b838110156200192b57601f1987840301855262001918838351620017fc565b94860194925090850190600101620018f9565b50909b9a5050505050505050505050565b608051614a1d62001966600039600081816102bd015281816107ae015261083a0152614a1d6000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80639b19dbfd1161011a578063c441c4a8116100ad578063de981f1b1161007c578063de981f1b146104f4578063e75235b81461051f578063e9c0349814610527578063f80b53521461053a578063fdc4fa471461054257600080fd5b8063c441c4a814610497578063cc7e6b3b146104ae578063d78392f8146104ce578063dafae408146104e157600080fd5b8063b405aaf2116100e9578063b405aaf214610441578063b9c3620914610454578063bc9182fd1461047c578063bc96180b1461048f57600080fd5b80639b19dbfd146103c35780639b2ee437146103cb578063ada86b24146103de578063b384abef146103e657600080fd5b8063562d5304116101925780637de5dedd116101615780637de5dedd14610332578063800eaab31461033a578063865e6fd31461034d578063901979d51461036057600080fd5b8063562d5304146102df5780635e05cf9e146102e7578063776fb1ec146102fc5780637d465f791461031f57600080fd5b80632d6d7d73116101ce5780632d6d7d731461027257806334d5f37b1461028557806335da8121146102a55780633644e515146102b857600080fd5b806301a5f43f146102005780630a44fa43146102295780630f7c31891461024a5780631f4253381461025f575b600080fd5b61021361020e366004613a45565b610555565b6040516102209190613b1b565b60405180910390f35b61023c610237366004613b2e565b610608565b604051908152602001610220565b61025261068d565b6040516102209190613ba8565b61021361026d366004613b2e565b6106ab565b610252610280366004613b2e565b6106f8565b61023c610293366004613bbb565b60006020819052908152604090205481565b6102136102b3366004613b2e565b61073c565b61023c7f000000000000000000000000000000000000000000000000000000000000000081565b61023c610782565b6102fa6102f5366004613c18565b61079b565b005b61030f61030a366004613bbb565b6107da565b6040519015158152602001610220565b6102fa61032d366004613cb4565b610827565b61023c61085f565b6102fa610348366004613e9c565b6108db565b6102fa61035b366004613f0e565b610920565b61023c61036e366004613f41565b6001600160a01b0390811660009081526000805160206149b18339815191526020908152604080832054909316825260008051602061499183398151915290522054600160a01b90046001600160601b031690565b61025261093b565b6102fa6103d9366004613f41565b610945565b61023c610adc565b6104306103f4366004613f5c565b600160208181526000938452604080852090915291835291208054918101546002820154600383015460069093015460ff909416939192909185565b604051610220959493929190613f94565b61030f61044f366004613f41565b610af4565b610467610462366004613f5c565b610b0e565b60408051928352602083019190915201610220565b61025261048a366004613fc9565b610b2f565b61023c610c20565b61049f610c2b565b6040516102209392919061402d565b6104c16104bc366004613b2e565b610c55565b6040516102209190614070565b61023c6104dc366004613f41565b610c93565b61030f6104ef366004613bbb565b610c9e565b610507610502366004614083565b610cdb565b6040516001600160a01b039091168152602001610220565b610467610d56565b610213610535366004613b2e565b610d87565b610252610dcd565b610252610550366004613b2e565b610dd7565b606061055f6110e5565b6105fd87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061111592505050565b979650505050505050565b600082828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061064992508391506114919050565b6106858484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506114c992505050565b949350505050565b60606106a66000805160206149318339815191526110d8565b905090565b60606106b56110e5565b6106f183838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061154d92505050565b9392505050565b60606106f183838080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509250611618915050565b92915050565b60606107466110e5565b6106f183838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061177292505050565b60006106a66000805160206149d1833981519152611864565b6107a43361186e565b6107d385858585857f0000000000000000000000000000000000000000000000000000000000000000336118a7565b5050505050565b60008060008381527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff16600481111561081f5761081f613f7e565b141592915050565b6108303361186e565b6107d385858585857f00000000000000000000000000000000000000000000000000000000000000003361194c565b60006108776000805160206149518339815191525490565b600161088f6000805160206149518339815191525490565b6108bd6108a86000805160206149f18339815191525490565b600080516020614971833981519152906119a8565b6108c791906140b4565b6108d191906140c7565b6106a691906140da565b333014610912576000356001600160e01b0319166040516307337e1960e41b815260040161090991906140fc565b60405180910390fd5b61091c82826119d3565b5050565b6109286110e5565b61093181611a81565b61091c8282611ab7565b60606106a6611b5b565b61094e3361186e565b61095781611b74565b33600090815260008051602061499183398151915260208190526040909120546001600160a01b0390811690831681036109af57604051630669b93360e31b81526001600160a01b0384166004820152602401610909565b6000805160206149d183398151915260006109ca8284611ba9565b80156109db57506109db8286610ec2565b905080610a065760405163080fab4b60e31b81526001600160a01b0386166004820152602401610909565b6001600160a01b0383811660008181526000805160206149b18339815191526020818152604080842080546001600160a01b0319908116909155958b16808552818520805488163390811790915585528a8352938190208054909616841790955584519081019390935292820152610a99906364b18d0960e11b906060015b604051602081830303815290604052611bbe565b6040516001600160a01b03808816919086169033907fcef34cd748f30a1b7a2f214fd1651779f79bc6c1be02785cad5c1f0ee877213d90600090a4505050505050565b60006106a66000805160206149f18339815191525490565b60006107366000805160206149d183398151915283611000565b600080610b196110e5565b610b238484611db3565b915091505b9250929050565b8051606090806001600160401b03811115610b4c57610b4c613cf7565b604051908082528060200260200182016040528015610b75578160200160208202803683370190505b50915060008051602061499183398151915260005b82811015610c1857816000868381518110610ba757610ba7614111565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160009054906101000a90046001600160a01b0316848281518110610bf857610bf8614111565b6001600160a01b0390921660209283029190910190910152600101610b8a565b505050919050565b60006106a660025490565b6060806060610c38611ea8565b9250610c4383610b2f565b9150610c4e83611ed3565b9050909192565b60606106f1838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ed392505050565b600061073682611fb8565b6000610cb96108a86000805160206149f18339815191525490565b60008051602061495183398151915254610cd39084614127565b101592915050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600d811115610d1257610d12613f7e565b60ff1681526020810191909152604001600020546001600160a01b0316905080610d51578160405163409140df60e11b8152600401610909919061413e565b919050565b600080610d6f6000805160206149718339815191525490565b60008051602061495183398151915254915091509091565b6060610d916110e5565b6106f1838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ff092505050565b60606106a6611ea8565b606081806001600160401b03811115610df257610df2613cf7565b604051908082528060200260200182016040528015610e1b578160200160208202803683370190505b5091506000805160206149b183398151915260005b82811015610eb557816000878784818110610e4d57610e4d614111565b9050602002016020810190610e629190613f41565b6001600160a01b0390811682526020820192909252604001600020548551911690859083908110610e9557610e95614111565b6001600160a01b0390921660209283029190910190910152600101610e30565b50505092915050565b9055565b60006106f1836001600160a01b0384166122d5565b5490565b6000610ee5825490565b9050610d5182610ebe8360016140b4565b81518151606091908082016001600160401b03811115610f1857610f18613cf7565b604051908082528060200260200182016040528015610f41578160200160208202803683370190505b50925060005b82811015610f9b57858181518110610f6157610f61614111565b6020026020010151848281518110610f7b57610f7b614111565b6001600160a01b0390921660209283029190910190910152600101610f47565b60005b82811015610ff657858181518110610fb857610fb8614111565b6020026020010151858381518110610fd257610fd2614111565b6001600160a01b039092166020928302919091019091015260019182019101610f9e565b5050505092915050565b6001600160a01b038116600090815260018301602052604081205415156106f1565b6000610736836110328585612324565b9250829055565b6000815160000361104c57506000919050565b60005b60018351038110156110cf57600181015b83518110156110c65783818151811061107b5761107b614111565b60200260200101516001600160a01b031684838151811061109e5761109e614111565b60200260200101516001600160a01b0316036110be575060019392505050565b600101611060565b5060010161104f565b50600092915050565b606060006106f183612343565b333014611113576000356001600160e01b0319166040516307337e1960e41b815260040161090991906140fc565b565b60606111218383610ef6565b61112a81611491565b825185518114801561113c5750845181145b611167576000356001600160e01b0319166040516306b5667560e21b815260040161090991906140fc565b806001600160401b0381111561117f5761117f613cf7565b6040519080825280602002602001820160405280156111a8578160200160208202803683370190505b509250806000036111b95750611489565b604080518082019091526000808252602082018190527f546f6b46ab35b030b6816596b352aef78857377176c8b24baa2046a62cf1998c916000805160206149b1833981519152916000805160206149d183398151915291600080516020614991833981519152919081908190815b8981101561140a578d818151811061124257611242614111565b602002602001015194508c818151811061125e5761125e614111565b6020026020010151935061127185611b74565b61127a84611b74565b8e818151811061128c5761128c614111565b60200260200101516001600160601b03166000036112cb576000356001600160e01b031916604051637f11b8a360e11b815260040161090991906140fc565b6112d58986611000565b806112e557506112e58985611000565b806112f557506112f58786611000565b8061130557506113058785611000565b158c828151811061131857611318614111565b6020026020010190151590811515815250508b818151811061133c5761133c614111565b602002602001015115611402576113538986610ec2565b5061135e8785610ec2565b506001600160a01b03848116600081815260208b90526040902080546001600160a01b0319169288169290921790915582528e518f90829081106113a4576113a4614111565b6020908102919091018101516001600160601b03169083018190526113c990846140b4565b6001600160a01b038087166000908152602089815260409091208551918601516001600160601b0316600160a01b029190921617905592505b600101611228565b506114236000805160206149f183398151915283611022565b50611442635ebae8a060e01b8d8d604051602001610a85929190614158565b7f897810999654e525e272b5909785c4d0ceaee1bbf9c87d9091a37558b0423b788b8f8f8f6040516114779493929190614186565b60405180910390a15050505050505050505b509392505050565b61149a81611039565b156114c6576000356001600160e01b031916604051630d697db160e11b815260040161090991906140fc565b50565b6000816114d581611491565b60008051602061499183398151915260005b8451811015610c185781600086838151811061150557611505614111565b6020908102919091018101516001600160a01b031682528101919091526040016000205461154390600160a01b90046001600160601b0316856140b4565b93506001016114e7565b60608161155981611491565b8251806001600160401b0381111561157357611573613cf7565b60405190808252806020026020018201604052801561159c578160200160208202803683370190505b50925060008051602061493183398151915260005b8281101561160f576115e58682815181106115ce576115ce614111565b602002602001015183611ba990919063ffffffff16565b8582815181106115f7576115f7614111565b911515602092830291909101909101526001016115b1565b50505050919050565b606082516001600160401b0381111561163357611633613cf7565b60405190808252806020026020018201604052801561165c578160200160208202803683370190505b50905060005b835181101561176b576003600085838151811061168157611681614111565b6020026020010151600381111561169a5761169a613f7e565b60038111156116ab576116ab613f7e565b815260200190815260200160002060009054906101000a90046001600160a01b03168282815181106116df576116df614111565b60200260200101906001600160a01b031690816001600160a01b031681525050828015611737575060006001600160a01b031682828151811061172457611724614111565b60200260200101516001600160a01b0316145b15611763576000356001600160e01b03191660405163053265f160e01b815260040161090991906140fc565b600101611662565b5092915050565b60608161177e81611491565b8251806001600160401b0381111561179857611798613cf7565b6040519080825280602002602001820160405280156117c1578160200160208202803683370190505b509250806000036117d2575061185e565b60008051602061493183398151915260006314d72edb60e21b815b848110156118585787818151811061180757611807614111565b6020026020010151925061181a83611a81565b611824838361239f565b61182e8484610ec2565b87828151811061184057611840614111565b911515602092830291909101909101526001016117ed565b50505050505b50919050565b6000610736825490565b61187781611fb8565b6000036114c6576000356001600160e01b0319166003604051620f948f60ea1b8152600401610909929190614203565b6118b96118b38861436f565b82612532565b5060006118cd6118c88961436f565b612638565b90506119426118db8961436f565b8888888861192e896118ee896000612777565b60405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b61193d8a6118ee8a6001612777565b6127b0565b5050505050505050565b600061196061195a89614443565b83612ba7565b905060006119756119708a614443565b612cf1565b905061199d828989898961198e8a6118ee896000612777565b61193d8b6118ee8a6001612777565b505050505050505050565b60008254801561176b578281029150808204831461176b57634e487b7160005260116020526024601cfd5b60005b8251811015611a7c57306001600160a01b03168282815181106119fb576119fb614111565b60200260200101516001600160a01b031603611a38576000356001600160e01b03191660405163053265f160e01b815260040161090991906140fc565b611a74838281518110611a4d57611a4d614111565b6020026020010151838381518110611a6757611a67614111565b6020026020010151612e28565b6001016119d6565b505050565b806001600160a01b03163b6000036114c657604051630bfc64a360e21b81526001600160a01b0382166004820152602401610909565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600d811115611aed57611aed613f7e565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600d811115611b2e57611b2e613f7e565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b60606106a66000805160206149d18339815191526110d8565b6001600160a01b0381166114c6576000356001600160e01b03191660405163104c66df60e31b815260040161090991906140fc565b60006106f1836001600160a01b038416612ebb565b6000611bd76000805160206149318339815191526110d8565b80519091506000819003611beb5750505050565b6000816001600160401b03811115611c0557611c05613cf7565b604051908082528060200260200182016040528015611c2e578160200160208202803683370190505b5090506000826001600160401b03811115611c4b57611c4b613cf7565b604051908082528060200260200182016040528015611c7e57816020015b6060815260200190600190039081611c695790505b50905060008686604051602001611c96929190614531565b604051602081830303815290604052905060005b84811015611d6c57858181518110611cc457611cc4614111565b60200260200101516001600160a01b031682604051611ce39190614562565b6000604051808303816000865af19150503d8060008114611d20576040519150601f19603f3d011682016040523d82523d6000602084013e611d25565b606091505b50858381518110611d3857611d38614111565b60200260200101858481518110611d5157611d51614111565b60209081029190910101919091529015159052600101611caa565b507fc0b07a27e66788f39cc91405f012f34066b16f31b4bda9438c52f2dae0cc5b6381868585604051611da294939291906145fc565b60405180910390a150505050505050565b60008082841115611de5576000356001600160e01b0319166040516387f6f09560e01b815260040161090991906140fc565b600080516020614971833981519152549150611e0d6000805160206149518339815191525490565b9050611e26600080516020614971833981519152859055565b611e3d600080516020614951833981519152849055565b8284611e687f92872d32822c9d44b36a2537d3e0d4c46fc4de1ce154ccfaed560a8a58445f1d610edb565b60408051868152602081018690527f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f8910160405180910390a49250929050565b60606106a67f546f6b46ab35b030b6816596b352aef78857377176c8b24baa2046a62cf1998c6110d8565b8051606090806001600160401b03811115611ef057611ef0613cf7565b604051908082528060200260200182016040528015611f19578160200160208202803683370190505b50915060008051602061499183398151915260005b82811015610c1857816000868381518110611f4b57611f4b614111565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160149054906101000a90046001600160601b03166001600160601b0316848281518110611fa557611fa5614111565b6020908102919091010152600101611f2e565b6001600160a01b031660009081526000805160206149918339815191526020526040902054600160a01b90046001600160601b031690565b606081611ffc81611491565b8251806001600160401b0381111561201657612016613cf7565b60405190808252806020026020018201604052801561203f578160200160208202803683370190505b50925080600003612050575061185e565b604080518082019091526000808252602082018190526000805160206149b1833981519152917f546f6b46ab35b030b6816596b352aef78857377176c8b24baa2046a62cf1998c916000805160206149d183398151915291600080516020614991833981519152919081908190815b89811015612255578c81815181106120d9576120d9614111565b6020908102919091018101516001600160a01b038082166000908152928c90526040909220549091169550935061210f85611b74565b61211884611b74565b6001600160a01b0385811660009081526020888152604091829020825180840190935254808416808452600160a01b9091046001600160601b0316918301919091529093509085161461218c576000356001600160e01b03191660405163053265f160e01b815260040161090991906140fc565b6121968785611000565b80156121a757506121a78886611000565b8c82815181106121b9576121b9614111565b6020026020010190151590811515815250508b81815181106121dd576121dd614111565b60200260200101511561224d576121f48886611ba9565b506121ff8785611ba9565b506001600160a01b03808516600090815260208b8152604080832080546001600160a01b031916905592881682528881529181205582015161224a906001600160601b0316846140b4565b92505b6001016120bf565b5061226e6000805160206149f183398151915283612fae565b5061228d63c48549de60e01b8d8d604051602001610a85929190614158565b7fdf3dcd7987202f64648f3acdbf12401e3a2bb23e77e19f99826b5475cbb863698b8d6040516122be929190614649565b60405180910390a150505050505050505050919050565b600081815260018301602052604081205461231c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610736565b506000610736565b815481018181101561073657634e487b7160005260116020526024601cfd5b60608160000180548060200260200160405190810160405280929190818152602001828054801561239357602002820191906000526020600020905b81548152602001906001019080831161237f575b50505050509050919050565b6000816040516024016123b291906140fc565b60408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b1790525190915060009081906001600160a01b038616906123fb908590614562565b600060405180830381855afa9150503d8060008114612436576040519150601f19603f3d011682016040523d82523d6000602084013e61243b565b606091505b5091509150816124fd57846001600160a01b031683604051602401612460919061466e565b60408051601f198184030181529181526020820180516001600160e01b03166325da93a560e11b179052516124959190614562565b600060405180830381855afa9150503d80600081146124d0576040519150601f19603f3d011682016040523d82523d6000602084013e6124d5565b606091505b509092509050816124fd57838560405163069d427960e11b8152600401610909929190614681565b8080602001905181019061251191906146a4565b6107d357838560405163069d427960e11b8152600401610909929190614681565b60208201516000908082036125745760405163092048d160e11b8152600080356001600160e01b03191660048301526024820152466044820152606401610909565b600254612582908590612fbe565b600061258d85612638565b90506125988261305f565b600083815260016020818152604080842085855290915291829020918801519082018490556006909101559250845183146125f4576000356001600160e01b03191660405163d4cec26960e01b815260040161090991906140fc565b8083837fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98888604051612628929190614780565b60405180910390a4505092915050565b6080810151606082015160a083015151600092919083906001600160401b0381111561266657612666613cf7565b60405190808252806020026020018201604052801561268f578160200160208202803683370190505b5060c086015190915060005b82518110156126ee578660a0015181815181106126ba576126ba614111565b6020026020010151805190602001208382815181106126db576126db614111565b602090810291909101015260010161269b565b50604080517fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a8152875160208083019190915280890151828401529790910151606082015283518702938701939093206080840152835186029386019390932060a0830152805185029085012060c082015281518402919093012060e083015250610100902090565b604080517fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2815260208101939093528201526060902090565b84158015906127be57508483145b6127e9576000356001600160e01b0319166040516306b5667560e21b815260040161090991906140fc565b60008080856001600160401b0381111561280557612805613cf7565b60405190808252806020026020018201604052801561282e578160200160208202803683370190505b5090506000866001600160401b0381111561284b5761284b613cf7565b604051908082528060200260200182016040528015612874578160200160208202803683370190505b50905060008060003660005b8b811015612a05578c8c8281811061289a5761289a614111565b90506060020191508e8e828181106128b4576128b4614111565b90506020020160208101906128c991906147aa565b925060008360018111156128df576128df613f7e565b03612949576129048b6128f560208501856147cb565b846020013585604001356130fb565b945084878a612912816147ee565b9b508151811061292457612924614111565b60200260200101906001600160a01b031690816001600160a01b0316815250506129ba565b600183600181111561295d5761295d613f7e565b03612993576129738a6128f560208501856147cb565b9450848689612981816147ee565b9a508151811061292457612924614111565b6000356001600160e01b031916604051630612418f60e11b815260040161090991906140fc565b846001600160a01b0316846001600160a01b0316106129fa576000356001600160e01b031916604051635d3dcd3160e01b815260040161090991906140fc565b849350600101612880565b50505085845250508281526020808c015160009081526001825260408082208e51835290925290812090612a37613123565b90506000612a448561312d565b9050818110612acb5780600003612a7c576000356001600160e01b031916604051637f11b8a360e11b815260040161090991906140fc565b825460ff1916600190811784558301546040517f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a2612abf838f613138565b50505050505050612b9e565b600082612ad66131a5565b612ae091906140c7565b612aeb9060016140b4565b90506000612af88661312d565b9050818110612b775780600003612b30576000356001600160e01b031916604051637f11b8a360e11b815260040161090991906140fc565b845460ff1916600317855560018501546040517f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a2505050505050505050612b9e565b6000356001600160e01b031916604051634ccfe64360e11b815260040161090991906140fc565b50505050505050565b612be76040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b612c00612bf984604001516001611618565b84906131af565b9050612c1760025482612fbe90919063ffffffff16565b6000612c2282612638565b90506000612c30600061305f565b60008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602090815260409091209087015160018201859055600690910155905082518114612ca2576000356001600160e01b03191660405163d4cec26960e01b815260040161090991906140fc565b81817f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca85612ccf89612cf1565b8989604051612ce19493929190614807565b60405180910390a3505092915050565b60608101516040820151608083015151600092919083906001600160401b03811115612d1f57612d1f613cf7565b604051908082528060200260200182016040528015612d48578160200160208202803683370190505b5060a086015190915060005b8251811015612da75786608001518181518110612d7357612d73614111565b602002602001015180519060200120838281518110612d9457612d94614111565b6020908102919091010152600101612d54565b50604080517f1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee911413508152875160208083019190915297880151918101919091528351870293870193909320606084015283518602938601939093206080830152805185029085012060a082015281518402919093012060c08301525060e0902090565b8060036000846003811115612e3f57612e3f613f7e565b6003811115612e5057612e50613f7e565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b039283161790558116826003811115612e8e57612e8e613f7e565b6040517f356c8c57e9e84b99b1cb58b13c985b2c979f78cbdf4d0fa70fe2a98bb09a099d90600090a35050565b60008181526001830160205260408120548015612fa4576000612edf6001836140c7565b8554909150600090612ef3906001906140c7565b9050818114612f58576000866000018281548110612f1357612f13614111565b9060005260206000200154905080876000018481548110612f3657612f36614111565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612f6957612f696148f5565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610736565b6000915050610736565b60006107368361103285856132d9565b6000826060015151118015612fdc5750816080015151826060015151145b8015612ff157508160a0015151826060015151145b801561300657508160c0015151826060015151145b613031576000356001600160e01b0319166040516306b5667560e21b815260040161090991906140fc565b61303b81426140b4565b8260400151111561091c5760405163ad89be9d60e01b815260040160405180910390fd5b6000818152602081905260408120549081900361308e5750600090815260208190526040902060019081905590565b60008281526001602090815260408083208484529091528120906000825460ff1660048111156130c0576130c0613f7e565b036130de5760405163757a436360e01b815260040160405180910390fd5b505050600090815260208190526040902080546001019081905590565b600080600061310c878787876134b4565b91509150613119816135a1565b5095945050505050565b60006106a661085f565b6000610736826114c9565b61314181613757565b1561091c57815460ff1916600217825560008061315d83613771565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba838360405161319792919061490b565b60405180910390a250505050565b60006106a6610adc565b6131ef6040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b82518152602080840151604080840191909152600091830191909152830151516001600160401b0381111561322657613226613cf7565b60405190808252806020026020018201604052801561324f578160200160208202803683370190505b5060608083019190915283015160808083019190915283015160a08083019190915283015160c082015260005b83604001515181101561176b5782818151811061329b5761329b614111565b6020026020010151826060015182815181106132b9576132b9614111565b6001600160a01b039092166020928302919091019091015260010161327c565b60008254828110156132f857634e487b7160005260116020526024601cfd5b9190910392915050565b60048301548110156133b55782600801600084600401838154811061332957613329614111565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600484018054600786019291908490811061337257613372614111565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181810183905560029091019190915501613302565b5060005b600583015481101561346c578260080160008460050183815481106133e0576133e0614111565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600584018054600786019291908490811061342957613429614111565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191681556001818101839055600290910191909155016133b9565b50815460ff19168255600060018301819055600283018190556003830181905561349a9060048401906139cf565b6134a86005830160006139cf565b60006006830155919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156134eb5750600090506003613598565b8460ff16601b1415801561350357508460ff16601c14155b156135145750600090506004613598565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613568573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661359157600060019250925050613598565b9150600090505b94509492505050565b60008160048111156135b5576135b5613f7e565b036135bd5750565b60018160048111156135d1576135d1613f7e565b0361361e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610909565b600281600481111561363257613632613f7e565b0361367f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610909565b600381600481111561369357613693613f7e565b036136eb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610909565b60048160048111156136ff576136ff613f7e565b036114c65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610909565b600081602001516000148061073657505060200151461490565b60608061377d83613757565b6137bb57602083015160405163092048d160e11b81526000356001600160e01b03191660048201526024810191909152466044820152606401610909565b8260600151516001600160401b038111156137d8576137d8613cf7565b604051908082528060200260200182016040528015613801578160200160208202803683370190505b5091508260600151516001600160401b0381111561382157613821613cf7565b60405190808252806020026020018201604052801561385457816020015b606081526020019060019003908161383f5790505b50905060005b8360600151518110156139c9578360c00151818151811061387d5761387d614111565b60200260200101515a116138b05761389484612638565b6040516307aec4ab60e21b815260040161090991815260200190565b836060015181815181106138c6576138c6614111565b60200260200101516001600160a01b0316846080015182815181106138ed576138ed614111565b60200260200101518560c00151838151811061390b5761390b614111565b6020026020010151908660a00151848151811061392a5761392a614111565b602002602001015160405161393f9190614562565b600060405180830381858888f193505050503d806000811461397d576040519150601f19603f3d011682016040523d82523d6000602084013e613982565b606091505b5084838151811061399557613995614111565b602002602001018484815181106139ae576139ae614111565b6020908102919091010191909152901515905260010161385a565b50915091565b50805460008255906000526020600020908101906114c691905b808211156139fd57600081556001016139e9565b5090565b60008083601f840112613a1357600080fd5b5081356001600160401b03811115613a2a57600080fd5b6020830191508360208260051b8501011115610b2857600080fd5b60008060008060008060608789031215613a5e57600080fd5b86356001600160401b0380821115613a7557600080fd5b613a818a838b01613a01565b90985096506020890135915080821115613a9a57600080fd5b613aa68a838b01613a01565b90965094506040890135915080821115613abf57600080fd5b50613acc89828a01613a01565b979a9699509497509295939492505050565b600081518084526020808501945080840160005b83811015613b10578151151587529582019590820190600101613af2565b509495945050505050565b6020815260006106f16020830184613ade565b60008060208385031215613b4157600080fd5b82356001600160401b03811115613b5757600080fd5b613b6385828601613a01565b90969095509350505050565b600081518084526020808501945080840160005b83811015613b105781516001600160a01b031687529582019590820190600101613b83565b6020815260006106f16020830184613b6f565b600060208284031215613bcd57600080fd5b5035919050565b60008083601f840112613be657600080fd5b5081356001600160401b03811115613bfd57600080fd5b602083019150836020606083028501011115610b2857600080fd5b600080600080600060608688031215613c3057600080fd5b85356001600160401b0380821115613c4757600080fd5b9087019060e0828a031215613c5b57600080fd5b90955060208701359080821115613c7157600080fd5b613c7d89838a01613a01565b90965094506040880135915080821115613c9657600080fd5b50613ca388828901613bd4565b969995985093965092949392505050565b600080600080600060608688031215613ccc57600080fd5b85356001600160401b0380821115613ce357600080fd5b9087019060c0828a031215613c5b57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715613d2f57613d2f613cf7565b60405290565b60405160c081016001600160401b0381118282101715613d2f57613d2f613cf7565b604051601f8201601f191681016001600160401b0381118282101715613d7f57613d7f613cf7565b604052919050565b60006001600160401b03821115613da057613da0613cf7565b5060051b60200190565b600082601f830112613dbb57600080fd5b81356020613dd0613dcb83613d87565b613d57565b82815260059290921b84018101918181019086841115613def57600080fd5b8286015b84811015613e1857803560048110613e0b5760008081fd5b8352918301918301613df3565b509695505050505050565b80356001600160a01b0381168114610d5157600080fd5b600082601f830112613e4b57600080fd5b81356020613e5b613dcb83613d87565b82815260059290921b84018101918181019086841115613e7a57600080fd5b8286015b84811015613e1857613e8f81613e23565b8352918301918301613e7e565b60008060408385031215613eaf57600080fd5b82356001600160401b0380821115613ec657600080fd5b613ed286838701613daa565b93506020850135915080821115613ee857600080fd5b50613ef585828601613e3a565b9150509250929050565b8035600e8110610d5157600080fd5b60008060408385031215613f2157600080fd5b613f2a83613eff565b9150613f3860208401613e23565b90509250929050565b600060208284031215613f5357600080fd5b6106f182613e23565b60008060408385031215613f6f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60a0810160058710613fa857613fa8613f7e565b95815260208101949094526040840192909252606083015260809091015290565b600060208284031215613fdb57600080fd5b81356001600160401b03811115613ff157600080fd5b61068584828501613e3a565b600081518084526020808501945080840160005b83811015613b1057815187529582019590820190600101614011565b6060815260006140406060830186613b6f565b82810360208401526140528186613b6f565b905082810360408401526140668185613ffd565b9695505050505050565b6020815260006106f16020830184613ffd565b60006020828403121561409557600080fd5b6106f182613eff565b634e487b7160e01b600052601160045260246000fd5b808201808211156107365761073661409e565b818103818111156107365761073661409e565b6000826140f757634e487b7160e01b600052601260045260246000fd5b500490565b6001600160e01b031991909116815260200190565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176107365761073661409e565b60208101600e831061415257614152613f7e565b91905290565b60408152600061416b6040830185613b6f565b828103602084015261417d8185613ade565b95945050505050565b6080815260006141996080830187613ade565b82810360208481019190915286518083528782019282019060005b818110156141d95784516001600160601b0316835293830193918301916001016141b4565b505084810360408601526141ed8188613b6f565b9250505082810360608401526105fd8185613b6f565b6001600160e01b031983168152604081016009831061422457614224613f7e565b8260208301529392505050565b600082601f83011261424257600080fd5b81356020614252613dcb83613d87565b82815260059290921b8401810191818101908684111561427157600080fd5b8286015b84811015613e185780358352918301918301614275565b6000601f838184011261429e57600080fd5b823560206142ae613dcb83613d87565b82815260059290921b850181019181810190878411156142cd57600080fd5b8287015b848110156143635780356001600160401b03808211156142f15760008081fd5b818a0191508a603f8301126143065760008081fd5b8582013560408282111561431c5761431c613cf7565b61432d828b01601f19168901613d57565b92508183528c818386010111156143445760008081fd5b81818501898501375060009082018701528452509183019183016142d1565b50979650505050505050565b600060e0823603121561438157600080fd5b614389613d0d565b82358152602083013560208201526040830135604082015260608301356001600160401b03808211156143bb57600080fd5b6143c736838701613e3a565b606084015260808501359150808211156143e057600080fd5b6143ec36838701614231565b608084015260a085013591508082111561440557600080fd5b6144113683870161428c565b60a084015260c085013591508082111561442a57600080fd5b5061443736828601614231565b60c08301525092915050565b600060c0823603121561445557600080fd5b61445d613d35565b823581526020830135602082015260408301356001600160401b038082111561448557600080fd5b61449136838701613daa565b604084015260608501359150808211156144aa57600080fd5b6144b636838701614231565b606084015260808501359150808211156144cf57600080fd5b6144db3683870161428c565b608084015260a08501359150808211156144f457600080fd5b5061450136828601614231565b60a08301525092915050565b60005b83811015614528578181015183820152602001614510565b50506000910152565b6001600160e01b031983168152815160009061455481600485016020870161450d565b919091016004019392505050565b6000825161457481846020870161450d565b9190910192915050565b6000815180845261459681602086016020860161450d565b601f01601f19169290920160200192915050565b6000815180845260208085019450848260051b860182860160005b858110156145ef5783830389526145dd83835161457e565b988501989250908401906001016145c5565b5090979650505050505050565b60808152600061460f608083018761457e565b82810360208401526146218187613b6f565b905082810360408401526146358186613ade565b905082810360608401526105fd81856145aa565b60408152600061465c6040830185613ade565b828103602084015261417d8185613b6f565b6020815260006106f1602083018461457e565b6001600160e01b03199290921682526001600160a01b0316602082015260400190565b6000602082840312156146b657600080fd5b815180151581146106f157600080fd5b600060e08301825184526020808401518186015260408401516040860152606084015160e06060870152828151808552610100880191508383019450600092505b808310156147305784516001600160a01b03168252938301936001929092019190830190614707565b5060808601519350868103608088015261474a8185613ffd565b935050505060a083015184820360a086015261476682826145aa565b91505060c083015184820360c086015261417d8282613ffd565b60408152600061479360408301856146c6565b905060018060a01b03831660208301529392505050565b6000602082840312156147bc57600080fd5b8135600281106106f157600080fd5b6000602082840312156147dd57600080fd5b813560ff811681146106f157600080fd5b6000600182016148005761480061409e565b5060010190565b60808152600061481a60808301876146c6565b60208681850152838203604085015260c08201865183528187015182840152604087015160c0604085015281815180845260e0860191508483019350600092505b8083101561488b5783516004811061487557614875613f7e565b825292840192600192909201919084019061485b565b506060890151935084810360608601526148a58185613ffd565b9350505050608086015182820360808401526148c182826145aa565b91505060a086015182820360a08401526148db8282613ffd565b935050505061417d60608301846001600160a01b03169052565b634e487b7160e01b600052603160045260246000fd5b60408152600061491e6040830185613ade565b828103602084015261417d81856145aa56fe5da136eb38f8d8e354915fc8a767c0dc81d49de5fb65d5477122a82ddd976240ac1ff16a4f04f2a37a9ba5252a69baa100b460e517d1f8019c054a5ad698f9ffc55405a488814eaa0e2a685a0131142785b8d033d311c8c8244e34a7c12ca40f88547008e60f5748911f2e59feb3093b7e4c2e87b2dd69d61f112fcc932de8e38400683eb2cb350596d73644c0c89fe45f108600003457374f4ab3e87b4f3aa3d38c234075fde25875da8a6b7e36b58b86681d483271a99eeeee1d78e258a24d6924fe71b0c8b61aea02ca498b5f53b29bd95726278b1fe4eb791bb24a42644ca164736f6c6343000811000a5da136eb38f8d8e354915fc8a767c0dc81d49de5fb65d5477122a82ddd976240c55405a488814eaa0e2a685a0131142785b8d033d311c8c8244e34a7c12ca40f92872d32822c9d44b36a2537d3e0d4c46fc4de1ce154ccfaed560a8a58445f1d",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ErrBridgeOperatorAlreadyExisted(address)": [
        {
          "details": "Error thrown when attempting to add a bridge operator that already exists in the contract. This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract."
        }
      ],
      "ErrBridgeOperatorUpdateFailed(address)": [
        {
          "details": "Error raised when a bridge operator update operation fails.",
          "params": {
            "bridgeOperator": "The address of the bridge operator that failed to update."
          }
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrCurrentProposalIsNotCompleted()": [
        {
          "details": "Error thrown when the current proposal is not completed."
        }
      ],
      "ErrDuplicated(bytes4)": [
        {
          "details": "Error thrown when a duplicated element is detected in an array.",
          "params": {
            "msgSig": "The function signature that invoke the error."
          }
        }
      ],
      "ErrInsufficientGas(bytes32)": [
        {
          "details": "Error thrown when there is insufficient gas to execute a function."
        }
      ],
      "ErrInvalidArguments(bytes4)": [
        {
          "details": "Error indicating that arguments are invalid."
        }
      ],
      "ErrInvalidChainId(bytes4,uint256,uint256)": [
        {
          "details": "Error indicating that the chain ID is invalid.",
          "params": {
            "actual": "Current chain ID that executing function.",
            "expected": "Expected chain ID required for the tx to success.",
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid chain ID."
          }
        }
      ],
      "ErrInvalidExpiryTimestamp()": [
        {
          "details": "Error thrown when an invalid expiry timestamp is provided."
        }
      ],
      "ErrInvalidOrder(bytes4)": [
        {
          "details": "Error indicating that an order is invalid.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid order."
          }
        }
      ],
      "ErrInvalidProposalNonce(bytes4)": [
        {
          "details": "Error indicating that the proposal nonce is invalid.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid proposal nonce."
          }
        }
      ],
      "ErrInvalidThreshold(bytes4)": [
        {
          "details": "Error indicating that the provided threshold is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that the invalid threshold applies to."
          }
        }
      ],
      "ErrInvalidVoteWeight(bytes4)": [
        {
          "details": "Error indicating that a vote weight is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that encountered an invalid vote weight."
          }
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrOnlySelfCall(bytes4)": [
        {
          "details": "Error indicating that a function can only be called by the contract itself.",
          "params": {
            "msgSig": "The function signature (bytes4) that can only be called by the contract itself."
          }
        }
      ],
      "ErrRelayFailed(bytes4)": [
        {
          "details": "Error indicating that a relay call has failed.",
          "params": {
            "msgSig": "The function signature (bytes4) of the relay call that failed."
          }
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnsupportedInterface(bytes4,address)": [
        {
          "details": "The error indicating an unsupported interface.",
          "params": {
            "addr": "The address where the unsupported interface was encountered.",
            "interfaceId": "The bytes4 interface identifier that is not supported."
          }
        }
      ],
      "ErrUnsupportedVoteType(bytes4)": [
        {
          "details": "Error indicating that a vote type is not supported.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an unsupported vote type."
          }
        }
      ],
      "ErrVoteIsFinalized()": [
        {
          "details": "Error thrown when attempting to interact with a finalized vote."
        }
      ],
      "ErrZeroAddress(bytes4)": [
        {
          "details": "Error indicating that given address is null when it should not."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addBridgeOperators(uint96[],address[],address[])": {
        "details": "Adds multiple bridge operators.",
        "params": {
          "bridgeOperators": "An array of addresses representing the bridge operators to add.",
          "governors": "An array of addresses of hot/cold wallets for bridge operator to update their node address."
        },
        "returns": {
          "addeds": "An array of booleans indicating whether each bridge operator was added successfully. Note: return boolean array `addeds` indicates whether a group (voteWeight, governor, operator) are recorded. It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly. Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not. Example Usage: Making an `eth_call` in ethers.js ``` const {addeds} = await bridgeManagerContract.callStatic.addBridgeOperators(  voteWeights,  governors,  bridgeOperators,  // overriding the caller to the contract itself since we use `onlySelfCall` guard  {from: bridgeManagerContract.address} ) const filteredOperators = bridgeOperators.filter((_, index) => addeds[index]); const filteredWeights = weights.filter((_, index) => addeds[index]); const filteredGovernors = governors.filter((_, index) => addeds[index]); // ... (Process or use the information as required) ... ```"
        }
      },
      "checkThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the threshold."
      },
      "getBridgeOperatorOf(address[])": {
        "details": "Returns an array of bridge operators correspoding to governor addresses.",
        "returns": {
          "bridgeOperators": "An array containing the addresses of all bridge operators."
        }
      },
      "getBridgeOperatorWeight(address)": {
        "details": "External function to retrieve the vote weight of a specific bridge operator.",
        "params": {
          "bridgeOperator": "The address of the bridge operator to get the vote weight for."
        },
        "returns": {
          "weight": "The vote weight of the specified bridge operator."
        }
      },
      "getBridgeOperators()": {
        "details": "Returns an array of all bridge operators.",
        "returns": {
          "_0": "An array containing the addresses of all bridge operators."
        }
      },
      "getCallbackRegisters()": {
        "details": "Retrieves the addresses of registered callbacks.",
        "returns": {
          "registers": "An array containing the addresses of registered callbacks."
        }
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getFullBridgeOperatorInfos()": {
        "details": "Retrieves the full information of all registered bridge operators. This external function allows external callers to obtain the full information of all the registered bridge operators. The returned arrays include the addresses of governors, bridge operators, and their corresponding vote weights.",
        "returns": {
          "bridgeOperators": "An array of addresses representing the registered bridge operators.",
          "governors": "An array of addresses representing the governors of each bridge operator.",
          "weights": "An array of uint256 values representing the vote weights of each bridge operator. Note: The length of each array will be the same, and the order of elements corresponds to the same bridge operator. Example Usage: ``` (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights) = getFullBridgeOperatorInfos(); for (uint256 i = 0; i < bridgeOperators.length; i++) {     // Access individual information for each bridge operator.     address governor = governors[i];     address bridgeOperator = bridgeOperators[i];     uint256 weight = weights[i];     // ... (Process or use the information as required) ... } ```"
        }
      },
      "getGovernorWeight(address)": {
        "details": "External function to retrieve the vote weight of a specific governor.",
        "params": {
          "governor": "The address of the governor to get the vote weight for."
        },
        "returns": {
          "weight": "voteWeight The vote weight of the specified governor."
        }
      },
      "getGovernorWeights(address[])": {
        "details": "Returns the weights of a list of governor addresses."
      },
      "getGovernors()": {
        "details": "Returns an array of all governors.",
        "returns": {
          "_0": "An array containing the addresses of all governors."
        }
      },
      "getGovernorsOf(address[])": {
        "details": "Retrieves the governors corresponding to a given array of bridge operators. This external function allows external callers to obtain the governors associated with a given array of bridge operators. The function takes an input array `bridgeOperators` containing bridge operator addresses and returns an array of corresponding governors.",
        "params": {
          "bridgeOperators": "An array of bridge operator addresses for which governors are to be retrieved."
        },
        "returns": {
          "governors": "An array of addresses representing the governors corresponding to the provided bridge operators."
        }
      },
      "getProposalExpiryDuration()": {
        "details": "Returns the expiry duration for a new proposal."
      },
      "getThreshold()": {
        "details": "Returns the threshold."
      },
      "getTotalWeights()": {
        "details": "Returns total weights."
      },
      "globalProposalRelayed(uint256)": {
        "details": "Returns whether the voter `_voter` casted vote for the proposal."
      },
      "isBridgeOperator(address)": {
        "details": "Checks if the given address is a bridge operator.",
        "params": {
          "addr": "The address to check."
        },
        "returns": {
          "_0": "A boolean indicating whether the address is a bridge operator."
        }
      },
      "minimumVoteWeight()": {
        "details": "Returns the minimum vote weight to pass the threshold."
      },
      "registerCallbacks(address[])": {
        "details": "Registers multiple callbacks with the bridge.",
        "params": {
          "registers": "The array of callback addresses to register."
        },
        "returns": {
          "registereds": "An array indicating the success status of each registration."
        }
      },
      "relayGlobalProposal((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceRelay-_relayGlobalProposal`.  Requirements: - The method caller is governor."
      },
      "relayProposal((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceRelay-_relayProposal`. Requirements: - The method caller is governor."
      },
      "removeBridgeOperators(address[])": {
        "details": "Removes multiple bridge operators.",
        "params": {
          "bridgeOperators": "An array of addresses representing the bridge operators to remove."
        },
        "returns": {
          "removeds": "An array of booleans indicating whether each bridge operator was removed successfully. * Note: return boolean array `removeds` indicates whether a group (voteWeight, governor, operator) are recorded. It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly. Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not. Example Usage: Making an `eth_call` in ethers.js ``` const {removeds} = await bridgeManagerContract.callStatic.removeBridgeOperators(  bridgeOperators,  // overriding the caller to the contract itself since we use `onlySelfCall` guard  {from: bridgeManagerContract.address} ) const filteredOperators = bridgeOperators.filter((_, index) => removeds[index]); // ... (Process or use the information as required) ... ```"
        }
      },
      "resolveTargets(uint8[])": {
        "details": "Returns corresponding address of target options. Return address(0) on non-existent target."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setThreshold(uint256,uint256)": {
        "details": "Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event."
      },
      "sumGovernorsWeight(address[])": {
        "details": "Returns total weights of the governor list."
      },
      "totalBridgeOperators()": {
        "details": "Returns the total number of bridge operators.",
        "returns": {
          "_0": "The total number of bridge operators."
        }
      },
      "unregisterCallbacks(address[])": {
        "details": "Unregisters multiple callbacks from the bridge.",
        "params": {
          "registers": "The array of callback addresses to unregister."
        },
        "returns": {
          "unregistereds": "An array indicating the success status of each unregistration."
        }
      },
      "updateBridgeOperator(address)": {
        "details": "Governor updates their corresponding governor and/or operator address. Requirements: - The caller must the governor of the operator that is requested changes.",
        "params": {
          "bridgeOperator": "The address of the bridge operator to update."
        }
      },
      "updateManyTargetOption(uint8[],address[])": {
        "details": "Updates list of `targetOptions` to `targets`. Requirement: - Only allow self-call through proposal. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "round(uint256)": {
        "notice": "chain id = 0 for global proposal"
      },
      "updateBridgeOperator(address)": {
        "notice": "This method checks authorization by querying the corresponding operator of the msg.sender and then attempts to remove it from the `_bridgeOperatorSet` for gas optimization. In case we allow a governor can leave their operator address blank null `address(0)`, consider add authorization check."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8149,
        "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
        "label": "round",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8157,
        "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
        "label": "vote",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)8087_storage))"
      },
      {
        "astId": 8159,
        "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
        "label": "_proposalExpiryDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8896,
        "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
        "label": "_targetOptionsMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(TargetOption)15051,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TargetOption)15051": {
        "encoding": "inplace",
        "label": "enum GlobalProposal.TargetOption",
        "numberOfBytes": "1"
      },
      "t_enum(VoteStatus)12738": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Signature)12729_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignatureConsumer.Signature)",
        "numberOfBytes": "32",
        "value": "t_struct(Signature)12729_storage"
      },
      "t_mapping(t_enum(TargetOption)15051,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(TargetOption)15051",
        "label": "mapping(enum GlobalProposal.TargetOption => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)8087_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalVote)8087_storage)"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)8087_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreGovernance.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)8087_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ProposalVote)8087_storage": {
        "encoding": "inplace",
        "label": "struct CoreGovernance.ProposalVote",
        "members": [
          {
            "astId": 8063,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)12738"
          },
          {
            "astId": 8065,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8067,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "againstVoteWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8069,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "forVoteWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8072,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "forVoteds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8075,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "againstVoteds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8077,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "expiryTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8082,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "sig",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Signature)12729_storage)"
          },
          {
            "astId": 8086,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "voted",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Signature)12729_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConsumer.Signature",
        "members": [
          {
            "astId": 12724,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "v",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 12726,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "r",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 12728,
            "contract": "contracts/mainchain/MainchainBridgeManager.sol:MainchainBridgeManager",
            "label": "s",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}