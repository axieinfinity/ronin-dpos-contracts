{
  "address": "0x60fb445De9Cb26Df5fdC175c0801C5E29bf4eB64",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrERC20MintingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrERC721MintingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrEmptyArray",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ErrInvalidChainId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidInfo",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidReceipt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidReceiptKind",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidTokenStandard",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForApprovedWithdrawal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForInsufficientVoteWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForProcessedWithdrawal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrReachedDailyWithdrawalLimit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Token.Standard",
              "name": "erc",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Token.Info",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ErrTokenCouldNotTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Token.Standard",
              "name": "erc",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Token.Info",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ErrTokenCouldNotTransferFrom",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnsupportedStandard",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnsupportedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "limits",
          "type": "uint256[]"
        }
      ],
      "name": "DailyWithdrawalLimitsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "DepositRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "HighTierThresholdsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "HighTierVoteWeightThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "LockedThresholdsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "mainchainTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "roninTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "enum Token.Standard[]",
          "name": "standards",
          "type": "uint8[]"
        }
      ],
      "name": "TokenMapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "name": "UnlockFeePercentagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "WithdrawalLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "WithdrawalUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "Withdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IWETH",
          "name": "weth",
          "type": "address"
        }
      ],
      "name": "WrappedNativeTokenContractUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_UNLOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_MAX_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteWeight",
          "type": "uint256"
        }
      ],
      "name": "checkHighTierVoteWeightThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteWeight",
          "type": "uint256"
        }
      ],
      "name": "checkThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dailyWithdrawalLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighTierVoteWeightThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainchainToken",
          "type": "address"
        }
      ],
      "name": "getRoninToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Token.Standard",
              "name": "erc",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct MappedTokenConsumer.MappedToken",
          "name": "_token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "num_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denom_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "highTierThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleSetter",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "_wrappedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_roninChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_highTierVWNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        },
        {
          "internalType": "address[][3]",
          "name": "_addresses",
          "type": "address[][3]"
        },
        {
          "internalType": "uint256[][4]",
          "name": "_thresholds",
          "type": "uint256[][4]"
        },
        {
          "internalType": "enum Token.Standard[]",
          "name": "_standards",
          "type": "uint8[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeManagerContract",
          "type": "address"
        }
      ],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDateSynced",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastSyncedWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_mainchainTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_roninTokens",
          "type": "address[]"
        },
        {
          "internalType": "enum Token.Standard[]",
          "name": "_standards",
          "type": "uint8[]"
        }
      ],
      "name": "mapTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_mainchainTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_roninTokens",
          "type": "address[]"
        },
        {
          "internalType": "enum Token.Standard[]",
          "name": "_standards",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[][4]",
          "name": "_thresholds",
          "type": "uint256[][4]"
        }
      ],
      "name": "mapTokensAndThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVoteWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "reachedWithdrawalLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiveEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Request",
          "name": "_request",
          "type": "tuple"
        }
      ],
      "name": "requestDepositFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_limits",
          "type": "uint256[]"
        }
      ],
      "name": "setDailyWithdrawalLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setEmergencyPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setHighTierThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setHighTierVoteWeightThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_previousNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_previousDenom",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setLockedThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_previousNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_previousDenom",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_percentages",
          "type": "uint256[]"
        }
      ],
      "name": "setUnlockFeePercentages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWETH",
          "name": "_wrappedToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeTokenContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Receipt",
          "name": "_receipt",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "submitWithdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unlockFeePercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Receipt",
          "name": "_receipt",
          "type": "tuple"
        }
      ],
      "name": "unlockWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawalHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawalLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfa51d53e412297b619d609e0ca97f6269e9b8173cde915f25a0e5d881baa9ec5",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x60fb445De9Cb26Df5fdC175c0801C5E29bf4eB64",
    "transactionIndex": 28,
    "gasUsed": "3970274",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x834612dbb5c70dbc2a553280c7aeeafff427da46d0512410257832b6786dd3d2",
    "transactionHash": "0xfa51d53e412297b619d609e0ca97f6269e9b8173cde915f25a0e5d881baa9ec5",
    "logs": [],
    "blockNumber": 9443702,
    "cumulativeGasUsed": "9812577",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "6c219cc499cc18168de5a543cc795d09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrERC20MintingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrERC721MintingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEmptyArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidInfo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidReceipt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidReceiptKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidTokenStandard\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForApprovedWithdrawal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForInsufficientVoteWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForProcessedWithdrawal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrReachedDailyWithdrawalLimit\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ErrTokenCouldNotTransfer\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ErrTokenCouldNotTransferFrom\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnsupportedStandard\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"}],\"name\":\"DailyWithdrawalLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"DepositRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"}],\"name\":\"HighTierThresholdsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"HighTierVoteWeightThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"}],\"name\":\"LockedThresholdsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"roninTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"enum Token.Standard[]\",\"name\":\"standards\",\"type\":\"uint8[]\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"UnlockFeePercentagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"WithdrawalLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"WithdrawalUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"WrappedNativeTokenContractUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_UNLOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkHighTierVoteWeightThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dailyWithdrawalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighTierVoteWeightThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainchainToken\",\"type\":\"address\"}],\"name\":\"getRoninToken\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct MappedTokenConsumer.MappedToken\",\"name\":\"_token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"highTierThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleSetter\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roninChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highTierVWNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"address[][3]\",\"name\":\"_addresses\",\"type\":\"address[][3]\"},{\"internalType\":\"uint256[][4]\",\"name\":\"_thresholds\",\"type\":\"uint256[][4]\"},{\"internalType\":\"enum Token.Standard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeManagerContract\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDateSynced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSyncedWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_roninTokens\",\"type\":\"address[]\"},{\"internalType\":\"enum Token.Standard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"}],\"name\":\"mapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_roninTokens\",\"type\":\"address[]\"},{\"internalType\":\"enum Token.Standard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[][4]\",\"name\":\"_thresholds\",\"type\":\"uint256[][4]\"}],\"name\":\"mapTokensAndThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"reachedWithdrawalLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Request\",\"name\":\"_request\",\"type\":\"tuple\"}],\"name\":\"requestDepositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"name\":\"setDailyWithdrawalLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEmergencyPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setHighTierThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setHighTierVoteWeightThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_previousNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_previousDenom\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setLockedThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_previousNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_previousDenom\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"}],\"name\":\"setUnlockFeePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"_wrappedToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Receipt\",\"name\":\"_receipt\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"submitWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockFeePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Receipt\",\"name\":\"_receipt\",\"type\":\"tuple\"}],\"name\":\"unlockWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrERC20MintingFailed()\":[{\"details\":\"Error indicating that the minting of ERC20 tokens has failed.\"}],\"ErrERC721MintingFailed()\":[{\"details\":\"Error indicating that the minting of ERC721 tokens has failed.\"}],\"ErrEmptyArray()\":[{\"details\":\"Error indicating that an array is empty when it should contain elements.\"}],\"ErrInvalidChainId(bytes4,uint256,uint256)\":[{\"details\":\"Error indicating that the chain ID is invalid.\",\"params\":{\"actual\":\"Current chain ID that executing function.\",\"expected\":\"Expected chain ID required for the tx to success.\",\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid chain ID.\"}}],\"ErrInvalidInfo()\":[{\"details\":\"Error indicating that the provided information is invalid.\"}],\"ErrInvalidOrder(bytes4)\":[{\"details\":\"Error indicating that an order is invalid.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid order.\"}}],\"ErrInvalidPercentage()\":[{\"details\":\"Error of invalid percentage.\"}],\"ErrInvalidReceipt()\":[{\"details\":\"Error indicating that a receipt is invalid.\"}],\"ErrInvalidReceiptKind()\":[{\"details\":\"Error indicating that a receipt kind is invalid.\"}],\"ErrInvalidRequest()\":[{\"details\":\"Error indicating that a request is invalid.\"}],\"ErrInvalidThreshold(bytes4)\":[{\"details\":\"Error indicating that the provided threshold is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the invalid threshold applies to.\"}}],\"ErrInvalidTokenStandard()\":[{\"details\":\"Error indicating that a token standard is invalid.\"}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrQueryForApprovedWithdrawal()\":[{\"details\":\"Error indicating that a query was made for an approved withdrawal.\"}],\"ErrQueryForInsufficientVoteWeight()\":[{\"details\":\"Error indicating that a query was made for insufficient vote weight.\"}],\"ErrQueryForProcessedWithdrawal()\":[{\"details\":\"Error indicating that a query was made for a processed withdrawal.\"}],\"ErrReachedDailyWithdrawalLimit()\":[{\"details\":\"Error indicating that the daily withdrawal limit has been reached.\"}],\"ErrTokenCouldNotTransfer((uint8,uint256,uint256),address,address)\":[{\"details\":\"Error indicating that the `transfer` has failed.\",\"params\":{\"to\":\"Receiver of the token value.\",\"token\":\"Address of the token.\",\"tokenInfo\":\"Info of the token including ERC standard, id or quantity.\"}}],\"ErrTokenCouldNotTransferFrom((uint8,uint256,uint256),address,address,address)\":[{\"details\":\"Error indicating that the `transferFrom` has failed.\",\"params\":{\"from\":\"Owner of the token value.\",\"to\":\"Receiver of the token value.\",\"token\":\"Address of the token.\",\"tokenInfo\":\"Info of the token including ERC standard, id or quantity.\"}}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnsupportedStandard()\":[{\"details\":\"Error indicating that an unsupported standard is encountered.\"}],\"ErrUnsupportedToken()\":[{\"details\":\"Error indicating that a token is not supported.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain seperator.\"},\"checkHighTierVoteWeightThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the high-tier vote weight threshold.\"},\"checkThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the threshold.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getHighTierVoteWeightThreshold()\":{\"details\":\"Returns the high-tier vote weight threshold.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoninToken(address)\":{\"details\":\"Returns token address on Ronin network. Note: Reverts for unsupported token.\"},\"getThreshold()\":{\"details\":\"Returns the threshold.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,uint256,uint256,address[][3],uint256[][4],uint8[])\":{\"details\":\"Initializes contract storage.\"},\"mapTokens(address[],address[],uint8[])\":{\"details\":\"Maps mainchain tokens to Ronin network. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event.\"},\"mapTokensAndThresholds(address[],address[],uint8[],uint256[][4])\":{\"details\":\"Maps mainchain tokens to Ronin network and sets thresholds. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event.\"},\"minimumVoteWeight()\":{\"details\":\"Returns the minimum vote weight to pass the threshold.\"},\"pause()\":{\"details\":\"Triggers paused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"reachedWithdrawalLimit(address,uint256)\":{\"details\":\"Checks whether the withdrawal reaches the limitation.\"},\"receiveEther()\":{\"details\":\"Receives ether without doing anything. Use this function to topup native token.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"requestDepositFor((address,address,(uint8,uint256,uint256)))\":{\"details\":\"Locks the assets and request deposit.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setDailyWithdrawalLimits(address[],uint256[])\":{\"details\":\"Sets daily limit amounts for the withdrawals. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `DailyWithdrawalLimitsUpdated` event.\"},\"setEmergencyPauser(address)\":{\"details\":\"Grant emergency pauser role for `_addr`.\"},\"setHighTierThresholds(address[],uint256[])\":{\"details\":\"Sets the thresholds for high-tier withdrawals that requires high-tier vote weights. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `HighTierThresholdsUpdated` event.\"},\"setHighTierVoteWeightThreshold(uint256,uint256)\":{\"details\":\"Sets high-tier vote weight threshold and returns the old one. Requirements: - The method caller is admin. - The high-tier vote weight threshold must equal to or larger than the normal threshold. Emits the `HighTierVoteWeightThresholdUpdated` event.\"},\"setLockedThresholds(address[],uint256[])\":{\"details\":\"Sets the amount thresholds to lock withdrawal. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `LockedThresholdsUpdated` event.\"},\"setThreshold(uint256,uint256)\":{\"details\":\"Override `GatewayV2-setThreshold`. Requirements: - The high-tier vote weight threshold must equal to or larger than the normal threshold.\"},\"setUnlockFeePercentages(address[],uint256[])\":{\"details\":\"Sets fee percentages to unlock withdrawal. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `UnlockFeePercentagesUpdated` event.\"},\"setWrappedNativeTokenContract(address)\":{\"details\":\"Sets the wrapped native token contract. Requirements: - The method caller is admin. Emits the `WrappedNativeTokenContractUpdated` event.\"},\"submitWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)),(uint8,bytes32,bytes32)[])\":{\"details\":\"Withdraws based on the receipt and the validator signatures. Returns whether the withdrawal is locked. Emits the `Withdrew` once the assets are released.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unlockWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"details\":\"Approves a specific withdrawal. Requirements: - The method caller is a validator. Emits the `Withdrew` once the assets are released.\"},\"unpause()\":{\"details\":\"Triggers unpaused state.\"}},\"stateVariables\":{\"WITHDRAWAL_UNLOCKER_ROLE\":{\"details\":\"Withdrawal unlocker role hash\"},\"______deprecatedBridgeOperatorAddedBlock\":{\"custom:deprecated\":\"Previously `_bridgeOperatorAddedBlock` (mapping(address => uint256))\"},\"______deprecatedBridgeOperators\":{\"custom:deprecated\":\"Previously `_bridgeOperators` (uint256[])\"},\"_domainSeparator\":{\"details\":\"Domain seperator\"},\"_roninToken\":{\"details\":\"Mapping from mainchain token => token address on Ronin network\"},\"depositCount\":{\"details\":\"Total deposit\"},\"roninChainId\":{\"details\":\"Ronin network id\"},\"withdrawalHash\":{\"details\":\"Mapping from withdrawal id => withdrawal hash\"},\"withdrawalLocked\":{\"details\":\"Mapping from withdrawal id => locked\"},\"wrappedNativeToken\":{\"details\":\"Wrapped native token address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"unlockFeePercentages(address)\":{\"notice\":\"Values 0-1,000,000 map to 0%-100%\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mainchain/MainchainGatewayV2.sol\":\"MainchainGatewayV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/extensions/GatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../interfaces/IQuorum.sol\\\";\\nimport \\\"./collections/HasProxyAdmin.sol\\\";\\n\\nabstract contract GatewayV2 is HasProxyAdmin, Pausable, IQuorum {\\n  uint256 internal _num;\\n  uint256 internal _denom;\\n\\n  address private ______deprecated;\\n  uint256 public nonce;\\n\\n  address public emergencyPauser;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  /**\\n   * @dev Grant emergency pauser role for `_addr`.\\n   */\\n  function setEmergencyPauser(address _addr) external onlyAdmin {\\n    emergencyPauser = _addr;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function getThreshold() external view virtual returns (uint256 num_, uint256 denom_) {\\n    return (_num, _denom);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _denom >= _num * _getTotalWeight();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external virtual onlyAdmin returns (uint256, uint256) {\\n    return _setThreshold(_numerator, _denominator);\\n  }\\n\\n  /**\\n   * @dev Triggers paused state.\\n   */\\n  function pause() external {\\n    _requireAuth();\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Triggers unpaused state.\\n   */\\n  function unpause() external {\\n    _requireAuth();\\n    _unpause();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function minimumVoteWeight() public view virtual returns (uint256) {\\n    return _minimumVoteWeight(_getTotalWeight());\\n  }\\n\\n  /**\\n   * @dev Sets threshold and returns the old one.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function _setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) internal virtual returns (uint256 _previousNum, uint256 _previousDenom) {\\n    if (_numerator > _denominator) revert ErrInvalidThreshold(msg.sig);\\n    _previousNum = _num;\\n    _previousDenom = _denom;\\n    _num = _numerator;\\n    _denom = _denominator;\\n    unchecked {\\n      emit ThresholdUpdated(nonce++, _numerator, _denominator, _previousNum, _previousDenom);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns minimum vote weight.\\n   */\\n  function _minimumVoteWeight(uint256 _totalWeight) internal view virtual returns (uint256) {\\n    return (_num * _totalWeight + _denom - 1) / _denom;\\n  }\\n\\n  /**\\n   * @dev Internal method to check method caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The method caller must be admin or pauser.\\n   *\\n   */\\n  function _requireAuth() private view {\\n    if (!(msg.sender == _getAdmin() || msg.sender == emergencyPauser)) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total weight.\\n   */\\n  function _getTotalWeight() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe1a266c579dfaf71786765c210e4998285ec9034dc4193c460844da0b8e5fc87\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/WithdrawalLimitation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GatewayV2.sol\\\";\\n\\nabstract contract WithdrawalLimitation is GatewayV2 {\\n  /// @dev Error of invalid percentage.\\n  error ErrInvalidPercentage();\\n\\n  /// @dev Emitted when the high-tier vote weight threshold is updated\\n  event HighTierVoteWeightThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n  /// @dev Emitted when the thresholds for high-tier withdrawals that requires high-tier vote weights are updated\\n  event HighTierThresholdsUpdated(address[] tokens, uint256[] thresholds);\\n  /// @dev Emitted when the thresholds for locked withdrawals are updated\\n  event LockedThresholdsUpdated(address[] tokens, uint256[] thresholds);\\n  /// @dev Emitted when the fee percentages to unlock withdraw are updated\\n  event UnlockFeePercentagesUpdated(address[] tokens, uint256[] percentages);\\n  /// @dev Emitted when the daily limit thresholds are updated\\n  event DailyWithdrawalLimitsUpdated(address[] tokens, uint256[] limits);\\n\\n  uint256 public constant _MAX_PERCENTAGE = 1_000_000;\\n\\n  uint256 internal _highTierVWNum;\\n  uint256 internal _highTierVWDenom;\\n\\n  /// @dev Mapping from mainchain token => the amount thresholds for high-tier withdrawals that requires high-tier vote weights\\n  mapping(address => uint256) public highTierThreshold;\\n  /// @dev Mapping from mainchain token => the amount thresholds to lock withdrawal\\n  mapping(address => uint256) public lockedThreshold;\\n  /// @dev Mapping from mainchain token => unlock fee percentages for unlocker\\n  /// @notice Values 0-1,000,000 map to 0%-100%\\n  mapping(address => uint256) public unlockFeePercentages;\\n  /// @dev Mapping from mainchain token => daily limit amount for withdrawal\\n  mapping(address => uint256) public dailyWithdrawalLimit;\\n  /// @dev Mapping from token address => today withdrawal amount\\n  mapping(address => uint256) public lastSyncedWithdrawal;\\n  /// @dev Mapping from token address => last date synced to record the `lastSyncedWithdrawal`\\n  mapping(address => uint256) public lastDateSynced;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @dev Override `GatewayV2-setThreshold`.\\n   *\\n   * Requirements:\\n   * - The high-tier vote weight threshold must equal to or larger than the normal threshold.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external virtual override onlyAdmin returns (uint256 _previousNum, uint256 _previousDenom) {\\n    (_previousNum, _previousDenom) = _setThreshold(_numerator, _denominator);\\n    _verifyThresholds();\\n  }\\n\\n  /**\\n   * @dev Returns the high-tier vote weight threshold.\\n   */\\n  function getHighTierVoteWeightThreshold() external view virtual returns (uint256, uint256) {\\n    return (_highTierVWNum, _highTierVWDenom);\\n  }\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the high-tier vote weight threshold.\\n   */\\n  function checkHighTierVoteWeightThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _highTierVWDenom >= _highTierVWNum * _getTotalWeight();\\n  }\\n\\n  /**\\n   * @dev Sets high-tier vote weight threshold and returns the old one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The high-tier vote weight threshold must equal to or larger than the normal threshold.\\n   *\\n   * Emits the `HighTierVoteWeightThresholdUpdated` event.\\n   *\\n   */\\n  function setHighTierVoteWeightThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external virtual onlyAdmin returns (uint256 _previousNum, uint256 _previousDenom) {\\n    (_previousNum, _previousDenom) = _setHighTierVoteWeightThreshold(_numerator, _denominator);\\n    _verifyThresholds();\\n  }\\n\\n  /**\\n   * @dev Sets the thresholds for high-tier withdrawals that requires high-tier vote weights.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `HighTierThresholdsUpdated` event.\\n   *\\n   */\\n  function setHighTierThresholds(\\n    address[] calldata _tokens,\\n    uint256[] calldata _thresholds\\n  ) external virtual onlyAdmin {\\n    if (_tokens.length == 0) revert ErrEmptyArray();\\n    _setHighTierThresholds(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets the amount thresholds to lock withdrawal.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `LockedThresholdsUpdated` event.\\n   *\\n   */\\n  function setLockedThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external virtual onlyAdmin {\\n    if (_tokens.length == 0) revert ErrEmptyArray();\\n    _setLockedThresholds(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets fee percentages to unlock withdrawal.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `UnlockFeePercentagesUpdated` event.\\n   *\\n   */\\n  function setUnlockFeePercentages(\\n    address[] calldata _tokens,\\n    uint256[] calldata _percentages\\n  ) external virtual onlyAdmin {\\n    if (_tokens.length == 0) revert ErrEmptyArray();\\n    _setUnlockFeePercentages(_tokens, _percentages);\\n  }\\n\\n  /**\\n   * @dev Sets daily limit amounts for the withdrawals.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `DailyWithdrawalLimitsUpdated` event.\\n   *\\n   */\\n  function setDailyWithdrawalLimits(address[] calldata _tokens, uint256[] calldata _limits) external virtual onlyAdmin {\\n    if (_tokens.length == 0) revert ErrEmptyArray();\\n    _setDailyWithdrawalLimits(_tokens, _limits);\\n  }\\n\\n  /**\\n   * @dev Checks whether the withdrawal reaches the limitation.\\n   */\\n  function reachedWithdrawalLimit(address _token, uint256 _quantity) external view virtual returns (bool) {\\n    return _reachedWithdrawalLimit(_token, _quantity);\\n  }\\n\\n  /**\\n   * @dev Sets high-tier vote weight threshold and returns the old one.\\n   *\\n   * Emits the `HighTierVoteWeightThresholdUpdated` event.\\n   *\\n   */\\n  function _setHighTierVoteWeightThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) internal returns (uint256 _previousNum, uint256 _previousDenom) {\\n    if (_numerator > _denominator) revert ErrInvalidThreshold(msg.sig);\\n\\n    _previousNum = _highTierVWNum;\\n    _previousDenom = _highTierVWDenom;\\n    _highTierVWNum = _numerator;\\n    _highTierVWDenom = _denominator;\\n\\n    unchecked {\\n      emit HighTierVoteWeightThresholdUpdated(nonce++, _numerator, _denominator, _previousNum, _previousDenom);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the thresholds for high-tier withdrawals that requires high-tier vote weights.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   *\\n   * Emits the `HighTierThresholdsUpdated` event.\\n   *\\n   */\\n  function _setHighTierThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) internal virtual {\\n    if (_tokens.length == _thresholds.length) revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _tokens.length; ) {\\n      highTierThreshold[_tokens[_i]] = _thresholds[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit HighTierThresholdsUpdated(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets the amount thresholds to lock withdrawal.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   *\\n   * Emits the `LockedThresholdsUpdated` event.\\n   *\\n   */\\n  function _setLockedThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) internal virtual {\\n    if (_tokens.length != _thresholds.length) revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _tokens.length; ) {\\n      lockedThreshold[_tokens[_i]] = _thresholds[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit LockedThresholdsUpdated(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets fee percentages to unlock withdrawal.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   * - The percentage is equal to or less than 100_000.\\n   *\\n   * Emits the `UnlockFeePercentagesUpdated` event.\\n   *\\n   */\\n  function _setUnlockFeePercentages(address[] calldata _tokens, uint256[] calldata _percentages) internal virtual {\\n    if (_tokens.length != _percentages.length) revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _tokens.length; ) {\\n      if (_percentages[_i] > _MAX_PERCENTAGE) revert ErrInvalidPercentage();\\n\\n      unlockFeePercentages[_tokens[_i]] = _percentages[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit UnlockFeePercentagesUpdated(_tokens, _percentages);\\n  }\\n\\n  /**\\n   * @dev Sets daily limit amounts for the withdrawals.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   *\\n   * Emits the `DailyWithdrawalLimitsUpdated` event.\\n   *\\n   */\\n  function _setDailyWithdrawalLimits(address[] calldata _tokens, uint256[] calldata _limits) internal virtual {\\n    if (_tokens.length != _limits.length) revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _tokens.length; ) {\\n      dailyWithdrawalLimit[_tokens[_i]] = _limits[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit DailyWithdrawalLimitsUpdated(_tokens, _limits);\\n  }\\n\\n  /**\\n   * @dev Checks whether the withdrawal reaches the daily limitation.\\n   *\\n   * Requirements:\\n   * - The daily withdrawal threshold should not apply for locked withdrawals.\\n   *\\n   */\\n  function _reachedWithdrawalLimit(address _token, uint256 _quantity) internal view virtual returns (bool) {\\n    if (_lockedWithdrawalRequest(_token, _quantity)) {\\n      return false;\\n    }\\n\\n    uint256 _currentDate = block.timestamp / 1 days;\\n    if (_currentDate > lastDateSynced[_token]) {\\n      return dailyWithdrawalLimit[_token] <= _quantity;\\n    } else {\\n      return dailyWithdrawalLimit[_token] <= lastSyncedWithdrawal[_token] + _quantity;\\n    }\\n  }\\n\\n  /**\\n   * @dev Record withdrawal token.\\n   */\\n  function _recordWithdrawal(address _token, uint256 _quantity) internal virtual {\\n    uint256 _currentDate = block.timestamp / 1 days;\\n    if (_currentDate > lastDateSynced[_token]) {\\n      lastDateSynced[_token] = _currentDate;\\n      lastSyncedWithdrawal[_token] = _quantity;\\n    } else {\\n      lastSyncedWithdrawal[_token] += _quantity;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the withdrawal request is locked or not.\\n   */\\n  function _lockedWithdrawalRequest(address _token, uint256 _quantity) internal view virtual returns (bool) {\\n    return lockedThreshold[_token] <= _quantity;\\n  }\\n\\n  /**\\n   * @dev Computes fee percentage.\\n   */\\n  function _computeFeePercentage(uint256 _amount, uint256 _percentage) internal view virtual returns (uint256) {\\n    return (_amount * _percentage) / _MAX_PERCENTAGE;\\n  }\\n\\n  /**\\n   * @dev Returns high-tier vote weight.\\n   */\\n  function _highTierVoteWeight(uint256 _totalWeight) internal view virtual returns (uint256) {\\n    return (_highTierVWNum * _totalWeight + _highTierVWDenom - 1) / _highTierVWDenom;\\n  }\\n\\n  /**\\n   * @dev Validates whether the high-tier vote weight threshold is larger than the normal threshold.\\n   */\\n  function _verifyThresholds() internal view {\\n    if (_num * _highTierVWDenom > _highTierVWNum * _denom) revert ErrInvalidThreshold(msg.sig);\\n  }\\n}\\n\",\"keccak256\":\"0x794514005c43528e5444a8b82d22f4a98119cc0d365fc8049588fa3ede90d87b\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/interfaces/IMainchainGatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./consumers/SignatureConsumer.sol\\\";\\nimport \\\"./consumers/MappedTokenConsumer.sol\\\";\\nimport \\\"../libraries/Transfer.sol\\\";\\n\\ninterface IMainchainGatewayV2 is SignatureConsumer, MappedTokenConsumer {\\n  /**\\n   * @dev Error indicating that a query was made for an approved withdrawal.\\n   */\\n  error ErrQueryForApprovedWithdrawal();\\n\\n  /**\\n   * @dev Error indicating that the daily withdrawal limit has been reached.\\n   */\\n  error ErrReachedDailyWithdrawalLimit();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a processed withdrawal.\\n   */\\n  error ErrQueryForProcessedWithdrawal();\\n\\n  /**\\n   * @dev Error indicating that a query was made for insufficient vote weight.\\n   */\\n  error ErrQueryForInsufficientVoteWeight();\\n\\n  /// @dev Emitted when the deposit is requested\\n  event DepositRequested(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the assets are withdrawn\\n  event Withdrew(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the tokens are mapped\\n  event TokenMapped(address[] mainchainTokens, address[] roninTokens, Token.Standard[] standards);\\n  /// @dev Emitted when the wrapped native token contract is updated\\n  event WrappedNativeTokenContractUpdated(IWETH weth);\\n  /// @dev Emitted when the withdrawal is locked\\n  event WithdrawalLocked(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the withdrawal is unlocked\\n  event WithdrawalUnlocked(bytes32 receiptHash, Transfer.Receipt receipt);\\n\\n  /**\\n   * @dev Returns the domain seperator.\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @dev Returns deposit count.\\n   */\\n  function depositCount() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the wrapped native token contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `WrappedNativeTokenContractUpdated` event.\\n   *\\n   */\\n  function setWrappedNativeTokenContract(IWETH _wrappedToken) external;\\n\\n  /**\\n   * @dev Returns whether the withdrawal is locked.\\n   */\\n  function withdrawalLocked(uint256 withdrawalId) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the withdrawal hash.\\n   */\\n  function withdrawalHash(uint256 withdrawalId) external view returns (bytes32);\\n\\n  /**\\n   * @dev Locks the assets and request deposit.\\n   */\\n  function requestDepositFor(Transfer.Request calldata _request) external payable;\\n\\n  /**\\n   * @dev Withdraws based on the receipt and the validator signatures.\\n   * Returns whether the withdrawal is locked.\\n   *\\n   * Emits the `Withdrew` once the assets are released.\\n   *\\n   */\\n  function submitWithdrawal(\\n    Transfer.Receipt memory _receipt,\\n    Signature[] memory _signatures\\n  ) external returns (bool _locked);\\n\\n  /**\\n   * @dev Approves a specific withdrawal.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   * Emits the `Withdrew` once the assets are released.\\n   *\\n   */\\n  function unlockWithdrawal(Transfer.Receipt calldata _receipt) external;\\n\\n  /**\\n   * @dev Maps mainchain tokens to Ronin network.\\n   *\\n   * Requirement:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function mapTokens(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards\\n  ) external;\\n\\n  /**\\n   * @dev Maps mainchain tokens to Ronin network and sets thresholds.\\n   *\\n   * Requirement:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function mapTokensAndThresholds(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards,\\n    uint256[][4] calldata _thresholds\\n  ) external;\\n\\n  /**\\n   * @dev Returns token address on Ronin network.\\n   * Note: Reverts for unsupported token.\\n   */\\n  function getRoninToken(address _mainchainToken) external view returns (MappedToken memory _token);\\n}\\n\",\"keccak256\":\"0x5c44c2a720a283038b91c9022f6d6f60c9c1f394d1c965519096688cf5fba32d\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 _wad) external;\\n\\n  function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8acead2ae4364dee80c9bc76d52cc04d3763105e1743728e67d237f816155142\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeManagerEvents } from \\\"./events/IBridgeManagerEvents.sol\\\";\\n\\n/**\\n * @title IBridgeManager\\n * @dev The interface for managing bridge operators.\\n */\\ninterface IBridgeManager is IBridgeManagerEvents {\\n  /**\\n   * @dev The domain separator used for computing hash digests in the contract.\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @dev Returns the total number of bridge operators.\\n   * @return The total number of bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Checks if the given address is a bridge operator.\\n   * @param addr The address to check.\\n   * @return A boolean indicating whether the address is a bridge operator.\\n   */\\n  function isBridgeOperator(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Retrieves the full information of all registered bridge operators.\\n   *\\n   * This external function allows external callers to obtain the full information of all the registered bridge operators.\\n   * The returned arrays include the addresses of governors, bridge operators, and their corresponding vote weights.\\n   *\\n   * @return governors An array of addresses representing the governors of each bridge operator.\\n   * @return bridgeOperators An array of addresses representing the registered bridge operators.\\n   * @return weights An array of uint256 values representing the vote weights of each bridge operator.\\n   *\\n   * Note: The length of each array will be the same, and the order of elements corresponds to the same bridge operator.\\n   *\\n   * Example Usage:\\n   * ```\\n   * (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights) = getFullBridgeOperatorInfos();\\n   * for (uint256 i = 0; i < bridgeOperators.length; i++) {\\n   *     // Access individual information for each bridge operator.\\n   *     address governor = governors[i];\\n   *     address bridgeOperator = bridgeOperators[i];\\n   *     uint256 weight = weights[i];\\n   *     // ... (Process or use the information as required) ...\\n   * }\\n   * ```\\n   *\\n   */\\n  function getFullBridgeOperatorInfos()\\n    external\\n    view\\n    returns (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorsWeight(address[] calldata governors) external view returns (uint256 sum);\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function getTotalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns an array of all bridge operators.\\n   * @return An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns an array of bridge operators correspoding to governor addresses.\\n   * @return bridgeOperators_ An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperatorOf(address[] calldata gorvernors) external view returns (address[] memory bridgeOperators_);\\n\\n  /**\\n   * @dev Retrieves the governors corresponding to a given array of bridge operators.\\n   * This external function allows external callers to obtain the governors associated with a given array of bridge operators.\\n   * The function takes an input array `bridgeOperators` containing bridge operator addresses and returns an array of corresponding governors.\\n   * @param bridgeOperators An array of bridge operator addresses for which governors are to be retrieved.\\n   * @return governors An array of addresses representing the governors corresponding to the provided bridge operators.\\n   */\\n  function getGovernorsOf(address[] calldata bridgeOperators) external view returns (address[] memory governors);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific governor.\\n   * @param governor The address of the governor to get the vote weight for.\\n   * @return voteWeight The vote weight of the specified governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific bridge operator.\\n   * @param bridgeOperator The address of the bridge operator to get the vote weight for.\\n   * @return weight The vote weight of the specified bridge operator.\\n   */\\n  function getBridgeOperatorWeight(address bridgeOperator) external view returns (uint256 weight);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata governors) external view returns (uint256[] memory weights);\\n\\n  /**\\n   * @dev Returns an array of all governors.\\n   * @return An array containing the addresses of all governors.\\n   */\\n  function getGovernors() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Adds multiple bridge operators.\\n   * @param governors An array of addresses of hot/cold wallets for bridge operator to update their node address.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to add.\\n   * @return addeds An array of booleans indicating whether each bridge operator was added successfully.\\n   *\\n   * Note: return boolean array `addeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {addeds} = await bridgeManagerContract.callStatic.addBridgeOperators(\\n   *  voteWeights,\\n   *  governors,\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => addeds[index]);\\n   * const filteredWeights = weights.filter((_, index) => addeds[index]);\\n   * const filteredGovernors = governors.filter((_, index) => addeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function addBridgeOperators(\\n    uint96[] calldata voteWeights,\\n    address[] calldata governors,\\n    address[] calldata bridgeOperators\\n  ) external returns (bool[] memory addeds);\\n\\n  /**\\n   * @dev Removes multiple bridge operators.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to remove.\\n   * @return removeds An array of booleans indicating whether each bridge operator was removed successfully.\\n   *\\n   * * Note: return boolean array `removeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {removeds} = await bridgeManagerContract.callStatic.removeBridgeOperators(\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => removeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function removeBridgeOperators(address[] calldata bridgeOperators) external returns (bool[] memory removeds);\\n\\n  /**\\n   * @dev Governor updates their corresponding governor and/or operator address.\\n   * Requirements:\\n   * - The caller must the governor of the operator that is requested changes.\\n   * @param bridgeOperator The address of the bridge operator to update.\\n   */\\n  function updateBridgeOperator(address bridgeOperator) external;\\n}\\n\",\"keccak256\":\"0x0ae26d2b1ed9b67b4eed4f1957ef3c399be7a944b6fa36ff9a0b476de5c3eb7a\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IBridgeManagerCallback\\n * @dev Interface for the callback functions to be implemented by the Bridge Manager contract.\\n */\\ninterface IBridgeManagerCallback is IERC165 {\\n  /**\\n   * @dev Handles the event when bridge operators are added.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @param addeds The corresponding boolean values indicating whether the operators were added or not.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorsAdded(\\n    address[] memory bridgeOperators,\\n    bool[] memory addeds\\n  ) external returns (bytes4 selector);\\n\\n  /**\\n   * @dev Handles the event when bridge operators are removed.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @param removeds The corresponding boolean values indicating whether the operators were removed or not.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorsRemoved(\\n    address[] memory bridgeOperators,\\n    bool[] memory removeds\\n  ) external returns (bytes4 selector);\\n\\n  /**\\n   * @dev Handles the event when a bridge operator is updated.\\n   * @param currentBridgeOperator The address of the current bridge operator.\\n   * @param newbridgeOperator The new address of the bridge operator.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorUpdated(\\n    address currentBridgeOperator,\\n    address newbridgeOperator\\n  ) external returns (bytes4 selector);\\n}\\n\",\"keccak256\":\"0xfd6868a1041577a463b6c96713edcb18063dc817154d09710abfd5783e4629ee\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/events/IBridgeManagerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeManagerEvents {\\n  /**\\n   * @dev The structure representing information about a bridge operator.\\n   * @param addr The address of the bridge operator.\\n   * @param voteWeight The vote weight assigned to the bridge operator.\\n   */\\n  struct BridgeOperatorInfo {\\n    address addr;\\n    uint96 voteWeight;\\n  }\\n\\n  /**\\n   * @dev Emitted when new bridge operators are added.\\n   * @param statuses The array of boolean values represents whether the corresponding bridge operator is added successfully.\\n   * @param voteWeights The array of vote weights assigned to the added bridge operators.\\n   * @param governors The array of addresses representing the governors associated with the added bridge operators.\\n   * @param bridgeOperators The array of addresses representing the added bridge operators.\\n   */\\n  event BridgeOperatorsAdded(bool[] statuses, uint96[] voteWeights, address[] governors, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when bridge operators are removed.\\n   * @param statuses The array of boolean values representing the statuses of the removed bridge operators.\\n   * @param bridgeOperators The array of addresses representing the removed bridge operators.\\n   */\\n  event BridgeOperatorsRemoved(bool[] statuses, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when a bridge operator is updated.\\n   * @param governor The address of the governor initiating the update.\\n   * @param fromBridgeOperator The address of the bridge operator being updated.\\n   * @param toBridgeOperator The updated address of the bridge operator.\\n   */\\n  event BridgeOperatorUpdated(\\n    address indexed governor,\\n    address indexed fromBridgeOperator,\\n    address indexed toBridgeOperator\\n  );\\n}\\n\",\"keccak256\":\"0x217fff41c4a9ca72d142c5a2120bb1b5e67bf5bf5aa0f6128450116aebc07b8d\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/MappedTokenConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/Token.sol\\\";\\n\\ninterface MappedTokenConsumer {\\n  struct MappedToken {\\n    Token.Standard erc;\\n    address tokenAddr;\\n  }\\n}\\n\",\"keccak256\":\"0xfa220e968221af9b789e6c1dc4133631e90600c4a2bd63b7f01e96cb01f13e9b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nlibrary Token {\\n  /// @dev Error indicating that the provided information is invalid.\\n  error ErrInvalidInfo();\\n\\n  /// @dev Error indicating that the minting of ERC20 tokens has failed.\\n  error ErrERC20MintingFailed();\\n\\n  /// @dev Error indicating that the minting of ERC721 tokens has failed.\\n  error ErrERC721MintingFailed();\\n\\n  /// @dev Error indicating that an unsupported standard is encountered.\\n  error ErrUnsupportedStandard();\\n\\n  /**\\n   * @dev Error indicating that the `transfer` has failed.\\n   * @param tokenInfo Info of the token including ERC standard, id or quantity.\\n   * @param to Receiver of the token value.\\n   * @param token Address of the token.\\n   */\\n  error ErrTokenCouldNotTransfer(Info tokenInfo, address to, address token);\\n\\n  /**\\n   * @dev Error indicating that the `transferFrom` has failed.\\n   * @param tokenInfo Info of the token including ERC standard, id or quantity.\\n   * @param from Owner of the token value.\\n   * @param to Receiver of the token value.\\n   * @param token Address of the token.\\n   */\\n  error ErrTokenCouldNotTransferFrom(Info tokenInfo, address from, address to, address token);\\n\\n  enum Standard {\\n    ERC20,\\n    ERC721\\n  }\\n\\n  struct Info {\\n    Standard erc;\\n    // For ERC20:  the id must be 0 and the quantity is larger than 0.\\n    // For ERC721: the quantity must be 0.\\n    uint256 id;\\n    uint256 quantity;\\n  }\\n\\n  // keccak256(\\\"TokenInfo(uint8 erc,uint256 id,uint256 quantity)\\\");\\n  bytes32 public constant INFO_TYPE_HASH = 0x1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d;\\n\\n  /**\\n   * @dev Returns token info struct hash.\\n   */\\n  function hash(Info memory _info) internal pure returns (bytes32 digest) {\\n    // keccak256(abi.encode(INFO_TYPE_HASH, _info.erc, _info.id, _info.quantity))\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, INFO_TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_info)) // _info.erc\\n      mstore(add(ptr, 0x40), mload(add(_info, 0x20))) // _info.id\\n      mstore(add(ptr, 0x60), mload(add(_info, 0x40))) // _info.quantity\\n      digest := keccak256(ptr, 0x80)\\n    }\\n  }\\n\\n  /**\\n   * @dev Validates the token info.\\n   */\\n  function validate(Info memory _info) internal pure {\\n    if (\\n      !((_info.erc == Standard.ERC20 && _info.quantity > 0 && _info.id == 0) ||\\n        (_info.erc == Standard.ERC721 && _info.quantity == 0))\\n    ) revert ErrInvalidInfo();\\n  }\\n\\n  /**\\n   * @dev Transfer asset from.\\n   *\\n   * Requirements:\\n   * - The `_from` address must approve for the contract using this library.\\n   *\\n   */\\n  function transferFrom(Info memory _info, address _from, address _to, address _token) internal {\\n    bool _success;\\n    bytes memory _data;\\n    if (_info.erc == Standard.ERC20) {\\n      (_success, _data) = _token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, _from, _to, _info.quantity));\\n      _success = _success && (_data.length == 0 || abi.decode(_data, (bool)));\\n    } else if (_info.erc == Standard.ERC721) {\\n      // bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n      (_success, ) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _info.id));\\n    } else revert ErrUnsupportedStandard();\\n\\n    if (!_success) revert ErrTokenCouldNotTransferFrom(_info, _from, _to, _token);\\n  }\\n\\n  /**\\n   * @dev Transfers ERC721 token and returns the result.\\n   */\\n  function tryTransferERC721(address _token, address _to, uint256 _id) internal returns (bool _success) {\\n    (_success, ) = _token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, address(this), _to, _id));\\n  }\\n\\n  /**\\n   * @dev Transfers ERC20 token and returns the result.\\n   */\\n  function tryTransferERC20(address _token, address _to, uint256 _quantity) internal returns (bool _success) {\\n    bytes memory _data;\\n    (_success, _data) = _token.call(abi.encodeWithSelector(IERC20.transfer.selector, _to, _quantity));\\n    _success = _success && (_data.length == 0 || abi.decode(_data, (bool)));\\n  }\\n\\n  /**\\n   * @dev Transfer assets from current address to `_to` address.\\n   */\\n  function transfer(Info memory _info, address _to, address _token) internal {\\n    bool _success;\\n    if (_info.erc == Standard.ERC20) {\\n      _success = tryTransferERC20(_token, _to, _info.quantity);\\n    } else if (_info.erc == Standard.ERC721) {\\n      _success = tryTransferERC721(_token, _to, _info.id);\\n    } else revert ErrUnsupportedStandard();\\n\\n    if (!_success) revert ErrTokenCouldNotTransfer(_info, _to, _token);\\n  }\\n\\n  /**\\n   * @dev Tries minting and transfering assets.\\n   *\\n   * @notice Prioritizes transfer native token if the token is wrapped.\\n   *\\n   */\\n  function handleAssetTransfer(\\n    Info memory _info,\\n    address payable _to,\\n    address _token,\\n    IWETH _wrappedNativeToken\\n  ) internal {\\n    bool _success;\\n    if (_token == address(_wrappedNativeToken)) {\\n      // Try sending the native token before transferring the wrapped token\\n      if (!_to.send(_info.quantity)) {\\n        _wrappedNativeToken.deposit{ value: _info.quantity }();\\n        transfer(_info, _to, _token);\\n      }\\n    } else if (_info.erc == Token.Standard.ERC20) {\\n      uint256 _balance = IERC20(_token).balanceOf(address(this));\\n\\n      if (_balance < _info.quantity) {\\n        // bytes4(keccak256(\\\"mint(address,uint256)\\\"))\\n        (_success, ) = _token.call(abi.encodeWithSelector(0x40c10f19, address(this), _info.quantity - _balance));\\n        if (!_success) revert ErrERC20MintingFailed();\\n      }\\n\\n      transfer(_info, _to, _token);\\n    } else if (_info.erc == Token.Standard.ERC721) {\\n      if (!tryTransferERC721(_token, _to, _info.id)) {\\n        // bytes4(keccak256(\\\"mint(address,uint256)\\\"))\\n        (_success, ) = _token.call(abi.encodeWithSelector(0x40c10f19, _to, _info.id));\\n        if (!_success) revert ErrERC721MintingFailed();\\n      }\\n    } else revert ErrUnsupportedStandard();\\n  }\\n\\n  struct Owner {\\n    address addr;\\n    address tokenAddr;\\n    uint256 chainId;\\n  }\\n\\n  // keccak256(\\\"TokenOwner(address addr,address tokenAddr,uint256 chainId)\\\");\\n  bytes32 public constant OWNER_TYPE_HASH = 0x353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e8764;\\n\\n  /**\\n   * @dev Returns ownership struct hash.\\n   */\\n  function hash(Owner memory _owner) internal pure returns (bytes32 digest) {\\n    // keccak256(abi.encode(OWNER_TYPE_HASH, _owner.addr, _owner.tokenAddr, _owner.chainId))\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, OWNER_TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_owner)) // _owner.addr\\n      mstore(add(ptr, 0x40), mload(add(_owner, 0x20))) // _owner.tokenAddr\\n      mstore(add(ptr, 0x60), mload(add(_owner, 0x40))) // _owner.chainId\\n      digest := keccak256(ptr, 0x80)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8d11e48d878ba37ea2ca7395dceaa5591bb9ba2d4e5fdac1565760456e104991\",\"license\":\"MIT\"},\"contracts/libraries/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\n\\nlibrary Transfer {\\n  using ECDSA for bytes32;\\n\\n  enum Kind {\\n    Deposit,\\n    Withdrawal\\n  }\\n\\n  struct Request {\\n    // For deposit request: Recipient address on Ronin network\\n    // For withdrawal request: Recipient address on mainchain network\\n    address recipientAddr;\\n    // Token address to deposit/withdraw\\n    // Value 0: native token\\n    address tokenAddr;\\n    Token.Info info;\\n  }\\n\\n  /**\\n   * @dev Converts the transfer request into the deposit receipt.\\n   */\\n  function into_deposit_receipt(\\n    Request memory _request,\\n    address _requester,\\n    uint256 _id,\\n    address _roninTokenAddr,\\n    uint256 _roninChainId\\n  ) internal view returns (Receipt memory _receipt) {\\n    _receipt.id = _id;\\n    _receipt.kind = Kind.Deposit;\\n    _receipt.mainchain.addr = _requester;\\n    _receipt.mainchain.tokenAddr = _request.tokenAddr;\\n    _receipt.mainchain.chainId = block.chainid;\\n    _receipt.ronin.addr = _request.recipientAddr;\\n    _receipt.ronin.tokenAddr = _roninTokenAddr;\\n    _receipt.ronin.chainId = _roninChainId;\\n    _receipt.info = _request.info;\\n  }\\n\\n  /**\\n   * @dev Converts the transfer request into the withdrawal receipt.\\n   */\\n  function into_withdrawal_receipt(\\n    Request memory _request,\\n    address _requester,\\n    uint256 _id,\\n    address _mainchainTokenAddr,\\n    uint256 _mainchainId\\n  ) internal view returns (Receipt memory _receipt) {\\n    _receipt.id = _id;\\n    _receipt.kind = Kind.Withdrawal;\\n    _receipt.ronin.addr = _requester;\\n    _receipt.ronin.tokenAddr = _request.tokenAddr;\\n    _receipt.ronin.chainId = block.chainid;\\n    _receipt.mainchain.addr = _request.recipientAddr;\\n    _receipt.mainchain.tokenAddr = _mainchainTokenAddr;\\n    _receipt.mainchain.chainId = _mainchainId;\\n    _receipt.info = _request.info;\\n  }\\n\\n  struct Receipt {\\n    uint256 id;\\n    Kind kind;\\n    Token.Owner mainchain;\\n    Token.Owner ronin;\\n    Token.Info info;\\n  }\\n\\n  // keccak256(\\\"Receipt(uint256 id,uint8 kind,TokenOwner mainchain,TokenOwner ronin,TokenInfo info)TokenInfo(uint8 erc,uint256 id,uint256 quantity)TokenOwner(address addr,address tokenAddr,uint256 chainId)\\\");\\n  bytes32 public constant TYPE_HASH = 0xb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea;\\n\\n  /**\\n   * @dev Returns token info struct hash.\\n   */\\n  function hash(Receipt memory _receipt) internal pure returns (bytes32 digest) {\\n    bytes32 hashedReceiptMainchain = Token.hash(_receipt.mainchain);\\n    bytes32 hashedReceiptRonin = Token.hash(_receipt.ronin);\\n    bytes32 hashedReceiptInfo = Token.hash(_receipt.info);\\n\\n    /*\\n     * return\\n     *   keccak256(\\n     *     abi.encode(\\n     *       TYPE_HASH,\\n     *       _receipt.id,\\n     *       _receipt.kind,\\n     *       Token.hash(_receipt.mainchain),\\n     *       Token.hash(_receipt.ronin),\\n     *       Token.hash(_receipt.info)\\n     *     )\\n     *   );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_receipt)) // _receipt.id\\n      mstore(add(ptr, 0x40), mload(add(_receipt, 0x20))) // _receipt.kind\\n      mstore(add(ptr, 0x60), hashedReceiptMainchain)\\n      mstore(add(ptr, 0x80), hashedReceiptRonin)\\n      mstore(add(ptr, 0xa0), hashedReceiptInfo)\\n      digest := keccak256(ptr, 0xc0)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the receipt digest.\\n   */\\n  function receiptDigest(bytes32 _domainSeparator, bytes32 _receiptHash) internal pure returns (bytes32) {\\n    return _domainSeparator.toTypedDataHash(_receiptHash);\\n  }\\n}\\n\",\"keccak256\":\"0xe73e11942bcae9034abc2058e9976a583e3518bdfeefa863e97cb6e51edf4522\",\"license\":\"MIT\"},\"contracts/mainchain/MainchainGatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../extensions/GatewayV2.sol\\\";\\nimport { IBridgeManager } from \\\"../interfaces/bridge/IBridgeManager.sol\\\";\\nimport { IBridgeManagerCallback } from \\\"../interfaces/bridge/IBridgeManagerCallback.sol\\\";\\nimport { HasContracts, ContractType } from \\\"../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../extensions/WithdrawalLimitation.sol\\\";\\nimport \\\"../libraries/Transfer.sol\\\";\\nimport \\\"../interfaces/IMainchainGatewayV2.sol\\\";\\n\\ncontract MainchainGatewayV2 is\\n  WithdrawalLimitation,\\n  Initializable,\\n  AccessControlEnumerable,\\n  IMainchainGatewayV2,\\n  HasContracts\\n{\\n  using Token for Token.Info;\\n  using Transfer for Transfer.Request;\\n  using Transfer for Transfer.Receipt;\\n\\n  /// @dev Withdrawal unlocker role hash\\n  bytes32 public constant WITHDRAWAL_UNLOCKER_ROLE = keccak256(\\\"WITHDRAWAL_UNLOCKER_ROLE\\\");\\n\\n  /// @dev Wrapped native token address\\n  IWETH public wrappedNativeToken;\\n  /// @dev Ronin network id\\n  uint256 public roninChainId;\\n  /// @dev Total deposit\\n  uint256 public depositCount;\\n  /// @dev Domain seperator\\n  bytes32 internal _domainSeparator;\\n  /// @dev Mapping from mainchain token => token address on Ronin network\\n  mapping(address => MappedToken) internal _roninToken;\\n  /// @dev Mapping from withdrawal id => withdrawal hash\\n  mapping(uint256 => bytes32) public withdrawalHash;\\n  /// @dev Mapping from withdrawal id => locked\\n  mapping(uint256 => bool) public withdrawalLocked;\\n\\n  /// @custom:deprecated Previously `_bridgeOperatorAddedBlock` (mapping(address => uint256))\\n  uint256 private ______deprecatedBridgeOperatorAddedBlock;\\n  /// @custom:deprecated Previously `_bridgeOperators` (uint256[])\\n  uint256 private ______deprecatedBridgeOperators;\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Initializes contract storage.\\n   */\\n  function initialize(\\n    address _roleSetter,\\n    IWETH _wrappedToken,\\n    uint256 _roninChainId,\\n    uint256 _numerator,\\n    uint256 _highTierVWNumerator,\\n    uint256 _denominator,\\n    // _addresses[0]: mainchainTokens\\n    // _addresses[1]: roninTokens\\n    // _addresses[2]: withdrawalUnlockers\\n    address[][3] calldata _addresses,\\n    // _thresholds[0]: highTierThreshold\\n    // _thresholds[1]: lockedThreshold\\n    // _thresholds[2]: unlockFeePercentages\\n    // _thresholds[3]: dailyWithdrawalLimit\\n    uint256[][4] calldata _thresholds,\\n    Token.Standard[] calldata _standards\\n  ) external payable virtual initializer {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roleSetter);\\n    roninChainId = _roninChainId;\\n\\n    _setWrappedNativeTokenContract(_wrappedToken);\\n    _updateDomainSeparator();\\n    _setThreshold(_numerator, _denominator);\\n    _setHighTierVoteWeightThreshold(_highTierVWNumerator, _denominator);\\n    _verifyThresholds();\\n\\n    if (_addresses[0].length > 0) {\\n      // Map mainchain tokens to ronin tokens\\n      _mapTokens(_addresses[0], _addresses[1], _standards);\\n      // Sets thresholds based on the mainchain tokens\\n      _setHighTierThresholds(_addresses[0], _thresholds[0]);\\n      _setLockedThresholds(_addresses[0], _thresholds[1]);\\n      _setUnlockFeePercentages(_addresses[0], _thresholds[2]);\\n      _setDailyWithdrawalLimits(_addresses[0], _thresholds[3]);\\n    }\\n\\n    // Grant role for withdrawal unlocker\\n    for (uint256 _i; _i < _addresses[2].length; ) {\\n      _grantRole(WITHDRAWAL_UNLOCKER_ROLE, _addresses[2][_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  function initializeV2(address bridgeManagerContract) external reinitializer(2) {\\n    _setContract(ContractType.BRIDGE_MANAGER, bridgeManagerContract);\\n  }\\n\\n  /**\\n   * @dev Receives ether without doing anything. Use this function to topup native token.\\n   */\\n  function receiveEther() external payable {}\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n    return _domainSeparator;\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function setWrappedNativeTokenContract(IWETH _wrappedToken) external virtual onlyAdmin {\\n    _setWrappedNativeTokenContract(_wrappedToken);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function requestDepositFor(Transfer.Request calldata _request) external payable virtual whenNotPaused {\\n    _requestDepositFor(_request, msg.sender);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function submitWithdrawal(\\n    Transfer.Receipt calldata _receipt,\\n    Signature[] calldata _signatures\\n  ) external virtual whenNotPaused returns (bool _locked) {\\n    return _submitWithdrawal(_receipt, _signatures);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function unlockWithdrawal(Transfer.Receipt calldata _receipt) external onlyRole(WITHDRAWAL_UNLOCKER_ROLE) {\\n    bytes32 _receiptHash = _receipt.hash();\\n    if (withdrawalHash[_receipt.id] != _receipt.hash()) {\\n      revert ErrInvalidReceipt();\\n    }\\n    if (!withdrawalLocked[_receipt.id]) {\\n      revert ErrQueryForApprovedWithdrawal();\\n    }\\n    delete withdrawalLocked[_receipt.id];\\n    emit WithdrawalUnlocked(_receiptHash, _receipt);\\n\\n    address _token = _receipt.mainchain.tokenAddr;\\n    if (_receipt.info.erc == Token.Standard.ERC20) {\\n      Token.Info memory _feeInfo = _receipt.info;\\n      _feeInfo.quantity = _computeFeePercentage(_receipt.info.quantity, unlockFeePercentages[_token]);\\n      Token.Info memory _withdrawInfo = _receipt.info;\\n      _withdrawInfo.quantity = _receipt.info.quantity - _feeInfo.quantity;\\n\\n      _feeInfo.handleAssetTransfer(payable(msg.sender), _token, wrappedNativeToken);\\n      _withdrawInfo.handleAssetTransfer(payable(_receipt.mainchain.addr), _token, wrappedNativeToken);\\n    } else {\\n      _receipt.info.handleAssetTransfer(payable(_receipt.mainchain.addr), _token, wrappedNativeToken);\\n    }\\n\\n    emit Withdrew(_receiptHash, _receipt);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function mapTokens(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards\\n  ) external virtual onlyAdmin {\\n    if (_mainchainTokens.length == 0) revert ErrEmptyArray();\\n    _mapTokens(_mainchainTokens, _roninTokens, _standards);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function mapTokensAndThresholds(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards,\\n    // _thresholds[0]: highTierThreshold\\n    // _thresholds[1]: lockedThreshold\\n    // _thresholds[2]: unlockFeePercentages\\n    // _thresholds[3]: dailyWithdrawalLimit\\n    uint256[][4] calldata _thresholds\\n  ) external virtual onlyAdmin {\\n    if (_mainchainTokens.length == 0) revert ErrEmptyArray();\\n    _mapTokens(_mainchainTokens, _roninTokens, _standards);\\n    _setHighTierThresholds(_mainchainTokens, _thresholds[0]);\\n    _setLockedThresholds(_mainchainTokens, _thresholds[1]);\\n    _setUnlockFeePercentages(_mainchainTokens, _thresholds[2]);\\n    _setDailyWithdrawalLimits(_mainchainTokens, _thresholds[3]);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function getRoninToken(address _mainchainToken) public view returns (MappedToken memory _token) {\\n    _token = _roninToken[_mainchainToken];\\n    if (_token.tokenAddr == address(0)) revert ErrUnsupportedToken();\\n  }\\n\\n  /**\\n   * @dev Maps mainchain tokens to Ronin network.\\n   *\\n   * Requirement:\\n   * - The arrays have the same length.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function _mapTokens(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards\\n  ) internal virtual {\\n    if (!(_mainchainTokens.length == _roninTokens.length && _mainchainTokens.length == _standards.length))\\n      revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _mainchainTokens.length; ) {\\n      _roninToken[_mainchainTokens[_i]].tokenAddr = _roninTokens[_i];\\n      _roninToken[_mainchainTokens[_i]].erc = _standards[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    emit TokenMapped(_mainchainTokens, _roninTokens, _standards);\\n  }\\n\\n  /**\\n   * @dev Submits withdrawal receipt.\\n   *\\n   * Requirements:\\n   * - The receipt kind is withdrawal.\\n   * - The receipt is to withdraw on this chain.\\n   * - The receipt is not used to withdraw before.\\n   * - The withdrawal is not reached the limit threshold.\\n   * - The signer weight total is larger than or equal to the minimum threshold.\\n   * - The signature signers are in order.\\n   *\\n   * Emits the `Withdrew` once the assets are released.\\n   *\\n   */\\n  function _submitWithdrawal(\\n    Transfer.Receipt calldata _receipt,\\n    Signature[] memory _signatures\\n  ) internal virtual returns (bool _locked) {\\n    uint256 _id = _receipt.id;\\n    uint256 _quantity = _receipt.info.quantity;\\n    address _tokenAddr = _receipt.mainchain.tokenAddr;\\n\\n    _receipt.info.validate();\\n    if (_receipt.kind != Transfer.Kind.Withdrawal) revert ErrInvalidReceiptKind();\\n\\n    if (_receipt.mainchain.chainId != block.chainid) {\\n      revert ErrInvalidChainId(msg.sig, _receipt.mainchain.chainId, block.chainid);\\n    }\\n\\n    MappedToken memory _token = getRoninToken(_receipt.mainchain.tokenAddr);\\n\\n    if (!(_token.erc == _receipt.info.erc && _token.tokenAddr == _receipt.ronin.tokenAddr)) revert ErrInvalidReceipt();\\n\\n    if (withdrawalHash[_id] != 0) revert ErrQueryForProcessedWithdrawal();\\n\\n    if (!(_receipt.info.erc == Token.Standard.ERC721 || !_reachedWithdrawalLimit(_tokenAddr, _quantity))) {\\n      revert ErrReachedDailyWithdrawalLimit();\\n    }\\n\\n    bytes32 _receiptHash = _receipt.hash();\\n    bytes32 _receiptDigest = Transfer.receiptDigest(_domainSeparator, _receiptHash);\\n\\n    uint256 _minimumVoteWeight;\\n    (_minimumVoteWeight, _locked) = _computeMinVoteWeight(_receipt.info.erc, _tokenAddr, _quantity);\\n\\n    {\\n      bool _passed;\\n      address _signer;\\n      address _lastSigner;\\n      Signature memory _sig;\\n      uint256 _weight;\\n      for (uint256 _i; _i < _signatures.length; ) {\\n        _sig = _signatures[_i];\\n        _signer = ecrecover(_receiptDigest, _sig.v, _sig.r, _sig.s);\\n        if (_lastSigner >= _signer) revert ErrInvalidOrder(msg.sig);\\n\\n        _lastSigner = _signer;\\n\\n        _weight += _getWeight(_signer);\\n        if (_weight >= _minimumVoteWeight) {\\n          _passed = true;\\n          break;\\n        }\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n\\n      if (!_passed) revert ErrQueryForInsufficientVoteWeight();\\n      withdrawalHash[_id] = _receiptHash;\\n    }\\n\\n    if (_locked) {\\n      withdrawalLocked[_id] = true;\\n      emit WithdrawalLocked(_receiptHash, _receipt);\\n      return _locked;\\n    }\\n\\n    _recordWithdrawal(_tokenAddr, _quantity);\\n    _receipt.info.handleAssetTransfer(payable(_receipt.mainchain.addr), _tokenAddr, wrappedNativeToken);\\n    emit Withdrew(_receiptHash, _receipt);\\n  }\\n\\n  /**\\n   * @dev Requests deposit made by `_requester` address.\\n   *\\n   * Requirements:\\n   * - The token info is valid.\\n   * - The `msg.value` is 0 while depositing ERC20 token.\\n   * - The `msg.value` is equal to deposit quantity while depositing native token.\\n   *\\n   * Emits the `DepositRequested` event.\\n   *\\n   */\\n  function _requestDepositFor(Transfer.Request memory _request, address _requester) internal virtual {\\n    MappedToken memory _token;\\n    address _weth = address(wrappedNativeToken);\\n\\n    _request.info.validate();\\n    if (_request.tokenAddr == address(0)) {\\n      if (_request.info.quantity != msg.value) revert ErrInvalidRequest();\\n\\n      _token = getRoninToken(_weth);\\n      if (_token.erc != _request.info.erc) revert ErrInvalidTokenStandard();\\n\\n      _request.tokenAddr = _weth;\\n    } else {\\n      if (msg.value != 0) revert ErrInvalidRequest();\\n\\n      _token = getRoninToken(_request.tokenAddr);\\n      if (_token.erc != _request.info.erc) revert ErrInvalidTokenStandard();\\n\\n      _request.info.transferFrom(_requester, address(this), _request.tokenAddr);\\n      // Withdraw if token is WETH\\n      if (_weth == _request.tokenAddr) {\\n        IWETH(_weth).withdraw(_request.info.quantity);\\n      }\\n    }\\n\\n    uint256 _depositId = depositCount++;\\n    Transfer.Receipt memory _receipt = _request.into_deposit_receipt(\\n      _requester,\\n      _depositId,\\n      _token.tokenAddr,\\n      roninChainId\\n    );\\n\\n    emit DepositRequested(_receipt.hash(), _receipt);\\n  }\\n\\n  /**\\n   * @dev Returns the minimum vote weight for the token.\\n   */\\n  function _computeMinVoteWeight(\\n    Token.Standard _erc,\\n    address _token,\\n    uint256 _quantity\\n  ) internal virtual returns (uint256 _weight, bool _locked) {\\n    uint256 _totalWeight = _getTotalWeight();\\n    _weight = _minimumVoteWeight(_totalWeight);\\n    if (_erc == Token.Standard.ERC20) {\\n      if (highTierThreshold[_token] <= _quantity) {\\n        _weight = _highTierVoteWeight(_totalWeight);\\n      }\\n      _locked = _lockedWithdrawalRequest(_token, _quantity);\\n    }\\n  }\\n\\n  /**\\n   * @dev Update domain seperator.\\n   */\\n  function _updateDomainSeparator() internal {\\n    /*\\n     * _domainSeparator = keccak256(\\n     *   abi.encode(\\n     *     keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n     *     keccak256(\\\"MainchainGatewayV2\\\"),\\n     *     keccak256(\\\"2\\\"),\\n     *     block.chainid,\\n     *     address(this)\\n     *   )\\n     * );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n      mstore(ptr, 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f)\\n      // keccak256(\\\"MainchainGatewayV2\\\")\\n      mstore(add(ptr, 0x20), 0x159f52c1e3a2b6a6aad3950adf713516211484e0516dad685ea662a094b7c43b)\\n      // keccak256(\\\"2\\\")\\n      mstore(add(ptr, 0x40), 0xad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5)\\n      mstore(add(ptr, 0x60), chainid())\\n      mstore(add(ptr, 0x80), address())\\n      sstore(_domainSeparator.slot, keccak256(ptr, 0xa0))\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the WETH contract.\\n   *\\n   * Emits the `WrappedNativeTokenContractUpdated` event.\\n   *\\n   */\\n  function _setWrappedNativeTokenContract(IWETH _wrapedToken) internal {\\n    wrappedNativeToken = _wrapedToken;\\n    emit WrappedNativeTokenContractUpdated(_wrapedToken);\\n  }\\n\\n  /**\\n   * @dev Receives ETH from WETH or creates deposit request.\\n   */\\n  function _fallback() internal virtual whenNotPaused {\\n    if (msg.sender != address(wrappedNativeToken)) {\\n      Transfer.Request memory _request;\\n      _request.recipientAddr = msg.sender;\\n      _request.info.quantity = msg.value;\\n      _requestDepositFor(_request, _request.recipientAddr);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc GatewayV2\\n   */\\n  function _getTotalWeight() internal view override returns (uint256) {\\n    return IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).getTotalWeights();\\n  }\\n\\n  /**\\n   * @dev Returns the weight of an address.\\n   */\\n  function _getWeight(address _addr) internal view returns (uint256) {\\n    return IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).getBridgeOperatorWeight(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x70d8c5d7088940eed60e4a1cbc7a6455a5ffffccacec6da8f33120520ce98453\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\",\"keccak256\":\"0x3914292a405307cba9e93085edcaf5f1203ca2d55abf998bf1d2af1e86f5a4c6\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD\\n}\\n\",\"keccak256\":\"0xf72feff9afafcb5cadc1b05c6e0b998ea5d66c7ece57c3e482e560d0a1bb4079\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xa98cec38c640c4e37f475debbcd366226f1188c3f5ea6e29de768bd33e021873\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrERC20MintingFailed()": [
        {
          "details": "Error indicating that the minting of ERC20 tokens has failed."
        }
      ],
      "ErrERC721MintingFailed()": [
        {
          "details": "Error indicating that the minting of ERC721 tokens has failed."
        }
      ],
      "ErrEmptyArray()": [
        {
          "details": "Error indicating that an array is empty when it should contain elements."
        }
      ],
      "ErrInvalidChainId(bytes4,uint256,uint256)": [
        {
          "details": "Error indicating that the chain ID is invalid.",
          "params": {
            "actual": "Current chain ID that executing function.",
            "expected": "Expected chain ID required for the tx to success.",
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid chain ID."
          }
        }
      ],
      "ErrInvalidInfo()": [
        {
          "details": "Error indicating that the provided information is invalid."
        }
      ],
      "ErrInvalidOrder(bytes4)": [
        {
          "details": "Error indicating that an order is invalid.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid order."
          }
        }
      ],
      "ErrInvalidPercentage()": [
        {
          "details": "Error of invalid percentage."
        }
      ],
      "ErrInvalidReceipt()": [
        {
          "details": "Error indicating that a receipt is invalid."
        }
      ],
      "ErrInvalidReceiptKind()": [
        {
          "details": "Error indicating that a receipt kind is invalid."
        }
      ],
      "ErrInvalidRequest()": [
        {
          "details": "Error indicating that a request is invalid."
        }
      ],
      "ErrInvalidThreshold(bytes4)": [
        {
          "details": "Error indicating that the provided threshold is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that the invalid threshold applies to."
          }
        }
      ],
      "ErrInvalidTokenStandard()": [
        {
          "details": "Error indicating that a token standard is invalid."
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrQueryForApprovedWithdrawal()": [
        {
          "details": "Error indicating that a query was made for an approved withdrawal."
        }
      ],
      "ErrQueryForInsufficientVoteWeight()": [
        {
          "details": "Error indicating that a query was made for insufficient vote weight."
        }
      ],
      "ErrQueryForProcessedWithdrawal()": [
        {
          "details": "Error indicating that a query was made for a processed withdrawal."
        }
      ],
      "ErrReachedDailyWithdrawalLimit()": [
        {
          "details": "Error indicating that the daily withdrawal limit has been reached."
        }
      ],
      "ErrTokenCouldNotTransfer((uint8,uint256,uint256),address,address)": [
        {
          "details": "Error indicating that the `transfer` has failed.",
          "params": {
            "to": "Receiver of the token value.",
            "token": "Address of the token.",
            "tokenInfo": "Info of the token including ERC standard, id or quantity."
          }
        }
      ],
      "ErrTokenCouldNotTransferFrom((uint8,uint256,uint256),address,address,address)": [
        {
          "details": "Error indicating that the `transferFrom` has failed.",
          "params": {
            "from": "Owner of the token value.",
            "to": "Receiver of the token value.",
            "token": "Address of the token.",
            "tokenInfo": "Info of the token including ERC standard, id or quantity."
          }
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnsupportedStandard()": [
        {
          "details": "Error indicating that an unsupported standard is encountered."
        }
      ],
      "ErrUnsupportedToken()": [
        {
          "details": "Error indicating that a token is not supported."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain seperator."
      },
      "checkHighTierVoteWeightThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the high-tier vote weight threshold."
      },
      "checkThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the threshold."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getHighTierVoteWeightThreshold()": {
        "details": "Returns the high-tier vote weight threshold."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoninToken(address)": {
        "details": "Returns token address on Ronin network. Note: Reverts for unsupported token."
      },
      "getThreshold()": {
        "details": "Returns the threshold."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address[][3],uint256[][4],uint8[])": {
        "details": "Initializes contract storage."
      },
      "mapTokens(address[],address[],uint8[])": {
        "details": "Maps mainchain tokens to Ronin network. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event."
      },
      "mapTokensAndThresholds(address[],address[],uint8[],uint256[][4])": {
        "details": "Maps mainchain tokens to Ronin network and sets thresholds. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event."
      },
      "minimumVoteWeight()": {
        "details": "Returns the minimum vote weight to pass the threshold."
      },
      "pause()": {
        "details": "Triggers paused state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "reachedWithdrawalLimit(address,uint256)": {
        "details": "Checks whether the withdrawal reaches the limitation."
      },
      "receiveEther()": {
        "details": "Receives ether without doing anything. Use this function to topup native token."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "requestDepositFor((address,address,(uint8,uint256,uint256)))": {
        "details": "Locks the assets and request deposit."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setDailyWithdrawalLimits(address[],uint256[])": {
        "details": "Sets daily limit amounts for the withdrawals. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `DailyWithdrawalLimitsUpdated` event."
      },
      "setEmergencyPauser(address)": {
        "details": "Grant emergency pauser role for `_addr`."
      },
      "setHighTierThresholds(address[],uint256[])": {
        "details": "Sets the thresholds for high-tier withdrawals that requires high-tier vote weights. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `HighTierThresholdsUpdated` event."
      },
      "setHighTierVoteWeightThreshold(uint256,uint256)": {
        "details": "Sets high-tier vote weight threshold and returns the old one. Requirements: - The method caller is admin. - The high-tier vote weight threshold must equal to or larger than the normal threshold. Emits the `HighTierVoteWeightThresholdUpdated` event."
      },
      "setLockedThresholds(address[],uint256[])": {
        "details": "Sets the amount thresholds to lock withdrawal. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `LockedThresholdsUpdated` event."
      },
      "setThreshold(uint256,uint256)": {
        "details": "Override `GatewayV2-setThreshold`. Requirements: - The high-tier vote weight threshold must equal to or larger than the normal threshold."
      },
      "setUnlockFeePercentages(address[],uint256[])": {
        "details": "Sets fee percentages to unlock withdrawal. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `UnlockFeePercentagesUpdated` event."
      },
      "setWrappedNativeTokenContract(address)": {
        "details": "Sets the wrapped native token contract. Requirements: - The method caller is admin. Emits the `WrappedNativeTokenContractUpdated` event."
      },
      "submitWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)),(uint8,bytes32,bytes32)[])": {
        "details": "Withdraws based on the receipt and the validator signatures. Returns whether the withdrawal is locked. Emits the `Withdrew` once the assets are released."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unlockWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "details": "Approves a specific withdrawal. Requirements: - The method caller is a validator. Emits the `Withdrew` once the assets are released."
      },
      "unpause()": {
        "details": "Triggers unpaused state."
      }
    },
    "stateVariables": {
      "WITHDRAWAL_UNLOCKER_ROLE": {
        "details": "Withdrawal unlocker role hash"
      },
      "______deprecatedBridgeOperatorAddedBlock": {
        "custom:deprecated": "Previously `_bridgeOperatorAddedBlock` (mapping(address => uint256))"
      },
      "______deprecatedBridgeOperators": {
        "custom:deprecated": "Previously `_bridgeOperators` (uint256[])"
      },
      "_domainSeparator": {
        "details": "Domain seperator"
      },
      "_roninToken": {
        "details": "Mapping from mainchain token => token address on Ronin network"
      },
      "depositCount": {
        "details": "Total deposit"
      },
      "roninChainId": {
        "details": "Ronin network id"
      },
      "withdrawalHash": {
        "details": "Mapping from withdrawal id => withdrawal hash"
      },
      "withdrawalLocked": {
        "details": "Mapping from withdrawal id => locked"
      },
      "wrappedNativeToken": {
        "details": "Wrapped native token address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "unlockFeePercentages(address)": {
        "notice": "Values 0-1,000,000 map to 0%-100%"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1535,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4326,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_num",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4328,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_denom",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4330,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "______deprecated",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4332,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4334,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "emergencyPauser",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4339,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "______gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5194,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_highTierVWNum",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 5196,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_highTierVWDenom",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 5201,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "highTierThreshold",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5206,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "lockedThreshold",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5211,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "unlockFeePercentages",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5216,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "dailyWithdrawalLimit",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5221,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "lastSyncedWithdrawal",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5226,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "lastDateSynced",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5231,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "______gap",
        "offset": 0,
        "slot": "63",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "113",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "113",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_roles",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4026_storage)"
      },
      {
        "astId": 16919,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "116",
        "type": "t_contract(IWETH)12074"
      },
      {
        "astId": 16922,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "roninChainId",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      },
      {
        "astId": 16925,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "depositCount",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 16928,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_domainSeparator",
        "offset": 0,
        "slot": "119",
        "type": "t_bytes32"
      },
      {
        "astId": 16934,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_roninToken",
        "offset": 0,
        "slot": "120",
        "type": "t_mapping(t_address,t_struct(MappedToken)12724_storage)"
      },
      {
        "astId": 16939,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "withdrawalHash",
        "offset": 0,
        "slot": "121",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 16944,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "withdrawalLocked",
        "offset": 0,
        "slot": "122",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 16947,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "______deprecatedBridgeOperatorAddedBlock",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      },
      {
        "astId": 16950,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "______deprecatedBridgeOperators",
        "offset": 0,
        "slot": "124",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IWETH)12074": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_enum(Standard)15941": {
        "encoding": "inplace",
        "label": "enum Token.Standard",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(MappedToken)12724_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MappedTokenConsumer.MappedToken)",
        "numberOfBytes": "32",
        "value": "t_struct(MappedToken)12724_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4026_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4026_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(AddressSet)4026_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4025,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3725_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MappedToken)12724_storage": {
        "encoding": "inplace",
        "label": "struct MappedTokenConsumer.MappedToken",
        "members": [
          {
            "astId": 12721,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "erc",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Standard)15941"
          },
          {
            "astId": 12723,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "tokenAddr",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3725_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3720,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3724,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}