{
  "address": "0x631CadF9267a7784D690AFa0Bd9128760CF555Cf",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorsReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "limits",
          "type": "uint256[]"
        }
      ],
      "name": "DailyWithdrawalLimitsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "DepositRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "HighTierThresholdsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "HighTierVoteWeightThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "LockedThresholdsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "mainchainTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "roninTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "enum Token.Standard[]",
          "name": "standards",
          "type": "uint8[]"
        }
      ],
      "name": "TokenMapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "name": "UnlockFeePercentagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "WithdrawalLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "WithdrawalUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "Withdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IWETH",
          "name": "weth",
          "type": "address"
        }
      ],
      "name": "WrappedNativeTokenContractUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_UNLOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_MAX_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteWeight",
          "type": "uint256"
        }
      ],
      "name": "checkHighTierVoteWeightThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteWeight",
          "type": "uint256"
        }
      ],
      "name": "checkThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dailyWithdrawalLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHighTierVoteWeightThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainchainToken",
          "type": "address"
        }
      ],
      "name": "getRoninToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Token.Standard",
              "name": "erc",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct MappedTokenConsumer.MappedToken",
          "name": "_token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "highTierThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleSetter",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "_wrappedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_roninChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_highTierVWNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        },
        {
          "internalType": "address[][3]",
          "name": "_addresses",
          "type": "address[][3]"
        },
        {
          "internalType": "uint256[][4]",
          "name": "_thresholds",
          "type": "uint256[][4]"
        },
        {
          "internalType": "enum Token.Standard[]",
          "name": "_standards",
          "type": "uint8[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDateSynced",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastSyncedWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_mainchainTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_roninTokens",
          "type": "address[]"
        },
        {
          "internalType": "enum Token.Standard[]",
          "name": "_standards",
          "type": "uint8[]"
        }
      ],
      "name": "mapTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_mainchainTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_roninTokens",
          "type": "address[]"
        },
        {
          "internalType": "enum Token.Standard[]",
          "name": "_standards",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[][4]",
          "name": "_thresholds",
          "type": "uint256[][4]"
        }
      ],
      "name": "mapTokensAndThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVoteWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "reachedWithdrawalLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiveEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "replaceBridgeOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Request",
          "name": "_request",
          "type": "tuple"
        }
      ],
      "name": "requestDepositFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_limits",
          "type": "uint256[]"
        }
      ],
      "name": "setDailyWithdrawalLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setHighTierThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setHighTierVoteWeightThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_previousNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_previousDenom",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setLockedThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_previousNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_previousDenom",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_percentages",
          "type": "uint256[]"
        }
      ],
      "name": "setUnlockFeePercentages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWETH",
          "name": "_wrappedToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeTokenContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Receipt",
          "name": "_receipt",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "submitWithdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unlockFeePercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Receipt",
          "name": "_receipt",
          "type": "tuple"
        }
      ],
      "name": "unlockWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawalHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawalLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x74da446460b9b62cfd76282a32194123edbcd09e4c982caf31be6d0ab3831162",
  "receipt": {
    "to": null,
    "from": "0xC37b5d7891D73F2064B0eE044844e053872Ef941",
    "contractAddress": "0x631CadF9267a7784D690AFa0Bd9128760CF555Cf",
    "transactionIndex": 50,
    "gasUsed": "4475429",
    "logsBloom": "0x
    "blockHash": "0x98c5771b7afe264f5252c57e615544ac83b784e5e12c0985239c00e7c910bc07",
    "transactionHash": "0x74da446460b9b62cfd76282a32194123edbcd09e4c982caf31be6d0ab3831162",
    "logs": [],
    "blockNumber": 8248734,
    "cumulativeGasUsed": "12996766",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d00a46919a8595a1f6b347cca5808c82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"}],\"name\":\"DailyWithdrawalLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"DepositRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"}],\"name\":\"HighTierThresholdsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"HighTierVoteWeightThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"}],\"name\":\"LockedThresholdsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"roninTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"enum Token.Standard[]\",\"name\":\"standards\",\"type\":\"uint8[]\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"name\":\"UnlockFeePercentagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"WithdrawalLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"WithdrawalUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"WrappedNativeTokenContractUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_UNLOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkHighTierVoteWeightThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dailyWithdrawalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighTierVoteWeightThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainchainToken\",\"type\":\"address\"}],\"name\":\"getRoninToken\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct MappedTokenConsumer.MappedToken\",\"name\":\"_token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"highTierThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleSetter\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roninChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highTierVWNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"address[][3]\",\"name\":\"_addresses\",\"type\":\"address[][3]\"},{\"internalType\":\"uint256[][4]\",\"name\":\"_thresholds\",\"type\":\"uint256[][4]\"},{\"internalType\":\"enum Token.Standard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDateSynced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSyncedWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_roninTokens\",\"type\":\"address[]\"},{\"internalType\":\"enum Token.Standard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"}],\"name\":\"mapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_roninTokens\",\"type\":\"address[]\"},{\"internalType\":\"enum Token.Standard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[][4]\",\"name\":\"_thresholds\",\"type\":\"uint256[][4]\"}],\"name\":\"mapTokensAndThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"reachedWithdrawalLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"replaceBridgeOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Request\",\"name\":\"_request\",\"type\":\"tuple\"}],\"name\":\"requestDepositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"name\":\"setDailyWithdrawalLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setHighTierThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setHighTierVoteWeightThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_previousNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_previousDenom\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setLockedThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_previousNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_previousDenom\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"}],\"name\":\"setUnlockFeePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"_wrappedToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Receipt\",\"name\":\"_receipt\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"submitWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockFeePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Receipt\",\"name\":\"_receipt\",\"type\":\"tuple\"}],\"name\":\"unlockWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"BridgeOperatorsReplaced(address[])\":{\"details\":\"Emitted when the bridge operators are replaced\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain seperator.\"},\"checkHighTierVoteWeightThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the high-tier vote weight threshold.\"},\"checkThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the threshold.\"},\"getBridgeOperators()\":{\"details\":\"Returns the bridge operator list.\"},\"getHighTierVoteWeightThreshold()\":{\"details\":\"Returns the high-tier vote weight threshold.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoninToken(address)\":{\"details\":\"Returns token address on Ronin network. Note: Reverts for unsupported token.\"},\"getThreshold()\":{\"details\":\"Returns the threshold.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,uint256,uint256,address[][3],uint256[][4],uint8[])\":{\"details\":\"Initializes contract storage.\"},\"mapTokens(address[],address[],uint8[])\":{\"details\":\"Maps mainchain tokens to Ronin network. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event.\"},\"mapTokensAndThresholds(address[],address[],uint8[],uint256[][4])\":{\"details\":\"Maps mainchain tokens to Ronin network and sets thresholds. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event.\"},\"minimumVoteWeight()\":{\"details\":\"Returns the minimum vote weight to pass the threshold.\"},\"pause()\":{\"details\":\"Triggers paused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"reachedWithdrawalLimit(address,uint256)\":{\"details\":\"Checks whether the withdrawal reaches the limitation.\"},\"receiveEther()\":{\"details\":\"Receives ether without doing anything. Use this function to topup native token.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"replaceBridgeOperators(address[])\":{\"details\":\"Replaces the old bridge operator list by the new one. Requirements: - The method caller is admin. Emitted the event `BridgeOperatorsReplaced`.\"},\"requestDepositFor((address,address,(uint8,uint256,uint256)))\":{\"details\":\"Locks the assets and request deposit.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setDailyWithdrawalLimits(address[],uint256[])\":{\"details\":\"Sets daily limit amounts for the withdrawals. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `DailyWithdrawalLimitsUpdated` event.\"},\"setHighTierThresholds(address[],uint256[])\":{\"details\":\"Sets the thresholds for high-tier withdrawals that requires high-tier vote weights. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `HighTierThresholdsUpdated` event.\"},\"setHighTierVoteWeightThreshold(uint256,uint256)\":{\"details\":\"Sets high-tier vote weight threshold and returns the old one. Requirements: - The method caller is admin. - The high-tier vote weight threshold must equal to or larger than the normal threshold. Emits the `HighTierVoteWeightThresholdUpdated` event.\"},\"setLockedThresholds(address[],uint256[])\":{\"details\":\"Sets the amount thresholds to lock withdrawal. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `LockedThresholdsUpdated` event.\"},\"setThreshold(uint256,uint256)\":{\"details\":\"Override `GatewayV2-setThreshold`. Requirements: - The high-tier vote weight threshold must equal to or larger than the normal threshold.\"},\"setUnlockFeePercentages(address[],uint256[])\":{\"details\":\"Sets fee percentages to unlock withdrawal. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `UnlockFeePercentagesUpdated` event.\"},\"setWrappedNativeTokenContract(address)\":{\"details\":\"Sets the wrapped native token contract. Requirements: - The method caller is admin. Emits the `WrappedNativeTokenContractUpdated` event.\"},\"submitWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)),(uint8,bytes32,bytes32)[])\":{\"details\":\"Withdraws based on the receipt and the validator signatures. Returns whether the withdrawal is locked. Emits the `Withdrew` once the assets are released.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unlockWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"details\":\"Approves a specific withdrawal. Requirements: - The method caller is a validator. Emits the `Withdrew` once the assets are released.\"},\"unpause()\":{\"details\":\"Triggers unpaused state.\"}},\"stateVariables\":{\"WITHDRAWAL_UNLOCKER_ROLE\":{\"details\":\"Withdrawal unlocker role hash\"},\"_bridgeOperatorAddedBlock\":{\"details\":\"Mapping from validator address => last block that the bridge operator is added\"},\"_bridgeOperators\":{\"details\":\"Bridge operators array\"},\"_domainSeparator\":{\"details\":\"Domain seperator\"},\"_roninToken\":{\"details\":\"Mapping from mainchain token => token address on Ronin network\"},\"depositCount\":{\"details\":\"Total deposit\"},\"roninChainId\":{\"details\":\"Ronin network id\"},\"withdrawalHash\":{\"details\":\"Mapping from withdrawal id => withdrawal hash\"},\"withdrawalLocked\":{\"details\":\"Mapping from withdrawal id => locked\"},\"wrappedNativeToken\":{\"details\":\"Wrapped native token address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"unlockFeePercentages(address)\":{\"notice\":\"Values 0-1,000,000 map to 0%-100%\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mainchain/MainchainGatewayV2.sol\":\"MainchainGatewayV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/extensions/GatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../interfaces/IQuorum.sol\\\";\\nimport \\\"./collections/HasProxyAdmin.sol\\\";\\n\\nabstract contract GatewayV2 is HasProxyAdmin, Pausable, IQuorum {\\n  uint256 internal _num;\\n  uint256 internal _denom;\\n\\n  address private ______deprecated;\\n  uint256 public nonce;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function getThreshold() external view virtual returns (uint256, uint256) {\\n    return (_num, _denom);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _denom >= _num * _getTotalWeight();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    virtual\\n    onlyAdmin\\n    returns (uint256, uint256)\\n  {\\n    return _setThreshold(_numerator, _denominator);\\n  }\\n\\n  /**\\n   * @dev Triggers paused state.\\n   */\\n  function pause() external onlyAdmin {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Triggers unpaused state.\\n   */\\n  function unpause() external onlyAdmin {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function minimumVoteWeight() public view virtual returns (uint256) {\\n    return _minimumVoteWeight(_getTotalWeight());\\n  }\\n\\n  /**\\n   * @dev Sets threshold and returns the old one.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function _setThreshold(uint256 _numerator, uint256 _denominator)\\n    internal\\n    virtual\\n    returns (uint256 _previousNum, uint256 _previousDenom)\\n  {\\n    require(_numerator <= _denominator, \\\"GatewayV2: invalid threshold\\\");\\n    _previousNum = _num;\\n    _previousDenom = _denom;\\n    _num = _numerator;\\n    _denom = _denominator;\\n    emit ThresholdUpdated(nonce++, _numerator, _denominator, _previousNum, _previousDenom);\\n  }\\n\\n  /**\\n   * @dev Returns minimum vote weight.\\n   */\\n  function _minimumVoteWeight(uint256 _totalWeight) internal view virtual returns (uint256) {\\n    return (_num * _totalWeight + _denom - 1) / _denom;\\n  }\\n\\n  /**\\n   * @dev Returns the total weight.\\n   */\\n  function _getTotalWeight() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x88d6f5d5fcad6d53c6b83da2dc5b4dacfbee8318c3d1788bd4bd93a06a7550eb\",\"license\":\"MIT\"},\"contracts/extensions/WithdrawalLimitation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GatewayV2.sol\\\";\\n\\nabstract contract WithdrawalLimitation is GatewayV2 {\\n  /// @dev Emitted when the high-tier vote weight threshold is updated\\n  event HighTierVoteWeightThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n  /// @dev Emitted when the thresholds for high-tier withdrawals that requires high-tier vote weights are updated\\n  event HighTierThresholdsUpdated(address[] tokens, uint256[] thresholds);\\n  /// @dev Emitted when the thresholds for locked withdrawals are updated\\n  event LockedThresholdsUpdated(address[] tokens, uint256[] thresholds);\\n  /// @dev Emitted when the fee percentages to unlock withdraw are updated\\n  event UnlockFeePercentagesUpdated(address[] tokens, uint256[] percentages);\\n  /// @dev Emitted when the daily limit thresholds are updated\\n  event DailyWithdrawalLimitsUpdated(address[] tokens, uint256[] limits);\\n\\n  uint256 public constant _MAX_PERCENTAGE = 1_000_000;\\n\\n  uint256 internal _highTierVWNum;\\n  uint256 internal _highTierVWDenom;\\n\\n  /// @dev Mapping from mainchain token => the amount thresholds for high-tier withdrawals that requires high-tier vote weights\\n  mapping(address => uint256) public highTierThreshold;\\n  /// @dev Mapping from mainchain token => the amount thresholds to lock withdrawal\\n  mapping(address => uint256) public lockedThreshold;\\n  /// @dev Mapping from mainchain token => unlock fee percentages for unlocker\\n  /// @notice Values 0-1,000,000 map to 0%-100%\\n  mapping(address => uint256) public unlockFeePercentages;\\n  /// @dev Mapping from mainchain token => daily limit amount for withdrawal\\n  mapping(address => uint256) public dailyWithdrawalLimit;\\n  /// @dev Mapping from token address => today withdrawal amount\\n  mapping(address => uint256) public lastSyncedWithdrawal;\\n  /// @dev Mapping from token address => last date synced to record the `lastSyncedWithdrawal`\\n  mapping(address => uint256) public lastDateSynced;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @dev Override `GatewayV2-setThreshold`.\\n   *\\n   * Requirements:\\n   * - The high-tier vote weight threshold must equal to or larger than the normal threshold.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    virtual\\n    override\\n    onlyAdmin\\n    returns (uint256 _previousNum, uint256 _previousDenom)\\n  {\\n    (_previousNum, _previousDenom) = _setThreshold(_numerator, _denominator);\\n    _verifyThresholds();\\n  }\\n\\n  /**\\n   * @dev Returns the high-tier vote weight threshold.\\n   */\\n  function getHighTierVoteWeightThreshold() external view virtual returns (uint256, uint256) {\\n    return (_highTierVWNum, _highTierVWDenom);\\n  }\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the high-tier vote weight threshold.\\n   */\\n  function checkHighTierVoteWeightThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _highTierVWDenom >= _highTierVWNum * _getTotalWeight();\\n  }\\n\\n  /**\\n   * @dev Sets high-tier vote weight threshold and returns the old one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The high-tier vote weight threshold must equal to or larger than the normal threshold.\\n   *\\n   * Emits the `HighTierVoteWeightThresholdUpdated` event.\\n   *\\n   */\\n  function setHighTierVoteWeightThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    virtual\\n    onlyAdmin\\n    returns (uint256 _previousNum, uint256 _previousDenom)\\n  {\\n    (_previousNum, _previousDenom) = _setHighTierVoteWeightThreshold(_numerator, _denominator);\\n    _verifyThresholds();\\n  }\\n\\n  /**\\n   * @dev Sets the thresholds for high-tier withdrawals that requires high-tier vote weights.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `HighTierThresholdsUpdated` event.\\n   *\\n   */\\n  function setHighTierThresholds(address[] calldata _tokens, uint256[] calldata _thresholds)\\n    external\\n    virtual\\n    onlyAdmin\\n  {\\n    require(_tokens.length > 0, \\\"WithdrawalLimitation: invalid array length\\\");\\n    _setHighTierThresholds(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets the amount thresholds to lock withdrawal.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `LockedThresholdsUpdated` event.\\n   *\\n   */\\n  function setLockedThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external virtual onlyAdmin {\\n    require(_tokens.length > 0, \\\"WithdrawalLimitation: invalid array length\\\");\\n    _setLockedThresholds(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets fee percentages to unlock withdrawal.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `UnlockFeePercentagesUpdated` event.\\n   *\\n   */\\n  function setUnlockFeePercentages(address[] calldata _tokens, uint256[] calldata _percentages)\\n    external\\n    virtual\\n    onlyAdmin\\n  {\\n    require(_tokens.length > 0, \\\"WithdrawalLimitation: invalid array length\\\");\\n    _setUnlockFeePercentages(_tokens, _percentages);\\n  }\\n\\n  /**\\n   * @dev Sets daily limit amounts for the withdrawals.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `DailyWithdrawalLimitsUpdated` event.\\n   *\\n   */\\n  function setDailyWithdrawalLimits(address[] calldata _tokens, uint256[] calldata _limits) external virtual onlyAdmin {\\n    require(_tokens.length > 0, \\\"WithdrawalLimitation: invalid array length\\\");\\n    _setDailyWithdrawalLimits(_tokens, _limits);\\n  }\\n\\n  /**\\n   * @dev Checks whether the withdrawal reaches the limitation.\\n   */\\n  function reachedWithdrawalLimit(address _token, uint256 _quantity) external view virtual returns (bool) {\\n    return _reachedWithdrawalLimit(_token, _quantity);\\n  }\\n\\n  /**\\n   * @dev Sets high-tier vote weight threshold and returns the old one.\\n   *\\n   * Emits the `HighTierVoteWeightThresholdUpdated` event.\\n   *\\n   */\\n  function _setHighTierVoteWeightThreshold(uint256 _numerator, uint256 _denominator)\\n    internal\\n    returns (uint256 _previousNum, uint256 _previousDenom)\\n  {\\n    require(_numerator <= _denominator, \\\"WithdrawalLimitation: invalid threshold\\\");\\n    _previousNum = _highTierVWNum;\\n    _previousDenom = _highTierVWDenom;\\n    _highTierVWNum = _numerator;\\n    _highTierVWDenom = _denominator;\\n    emit HighTierVoteWeightThresholdUpdated(nonce++, _numerator, _denominator, _previousNum, _previousDenom);\\n  }\\n\\n  /**\\n   * @dev Sets the thresholds for high-tier withdrawals that requires high-tier vote weights.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   *\\n   * Emits the `HighTierThresholdsUpdated` event.\\n   *\\n   */\\n  function _setHighTierThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) internal virtual {\\n    require(_tokens.length == _thresholds.length, \\\"WithdrawalLimitation: invalid array length\\\");\\n    for (uint256 _i; _i < _tokens.length; _i++) {\\n      highTierThreshold[_tokens[_i]] = _thresholds[_i];\\n    }\\n    emit HighTierThresholdsUpdated(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets the amount thresholds to lock withdrawal.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   *\\n   * Emits the `LockedThresholdsUpdated` event.\\n   *\\n   */\\n  function _setLockedThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) internal virtual {\\n    require(_tokens.length == _thresholds.length, \\\"WithdrawalLimitation: invalid array length\\\");\\n    for (uint256 _i; _i < _tokens.length; _i++) {\\n      lockedThreshold[_tokens[_i]] = _thresholds[_i];\\n    }\\n    emit LockedThresholdsUpdated(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets fee percentages to unlock withdrawal.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   * - The percentage is equal to or less than 100_000.\\n   *\\n   * Emits the `UnlockFeePercentagesUpdated` event.\\n   *\\n   */\\n  function _setUnlockFeePercentages(address[] calldata _tokens, uint256[] calldata _percentages) internal virtual {\\n    require(_tokens.length == _percentages.length, \\\"WithdrawalLimitation: invalid array length\\\");\\n    for (uint256 _i; _i < _tokens.length; _i++) {\\n      require(_percentages[_i] <= _MAX_PERCENTAGE, \\\"WithdrawalLimitation: invalid percentage\\\");\\n      unlockFeePercentages[_tokens[_i]] = _percentages[_i];\\n    }\\n    emit UnlockFeePercentagesUpdated(_tokens, _percentages);\\n  }\\n\\n  /**\\n   * @dev Sets daily limit amounts for the withdrawals.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   *\\n   * Emits the `DailyWithdrawalLimitsUpdated` event.\\n   *\\n   */\\n  function _setDailyWithdrawalLimits(address[] calldata _tokens, uint256[] calldata _limits) internal virtual {\\n    require(_tokens.length == _limits.length, \\\"WithdrawalLimitation: invalid array length\\\");\\n    for (uint256 _i; _i < _tokens.length; _i++) {\\n      dailyWithdrawalLimit[_tokens[_i]] = _limits[_i];\\n    }\\n    emit DailyWithdrawalLimitsUpdated(_tokens, _limits);\\n  }\\n\\n  /**\\n   * @dev Checks whether the withdrawal reaches the daily limitation.\\n   *\\n   * Requirements:\\n   * - The daily withdrawal threshold should not apply for locked withdrawals.\\n   *\\n   */\\n  function _reachedWithdrawalLimit(address _token, uint256 _quantity) internal view virtual returns (bool) {\\n    if (_lockedWithdrawalRequest(_token, _quantity)) {\\n      return false;\\n    }\\n\\n    uint256 _currentDate = block.timestamp / 1 days;\\n    if (_currentDate > lastDateSynced[_token]) {\\n      return dailyWithdrawalLimit[_token] <= _quantity;\\n    } else {\\n      return dailyWithdrawalLimit[_token] <= lastSyncedWithdrawal[_token] + _quantity;\\n    }\\n  }\\n\\n  /**\\n   * @dev Record withdrawal token.\\n   */\\n  function _recordWithdrawal(address _token, uint256 _quantity) internal virtual {\\n    uint256 _currentDate = block.timestamp / 1 days;\\n    if (_currentDate > lastDateSynced[_token]) {\\n      lastDateSynced[_token] = _currentDate;\\n      lastSyncedWithdrawal[_token] = _quantity;\\n    } else {\\n      lastSyncedWithdrawal[_token] += _quantity;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the withdrawal request is locked or not.\\n   */\\n  function _lockedWithdrawalRequest(address _token, uint256 _quantity) internal view virtual returns (bool) {\\n    return lockedThreshold[_token] <= _quantity;\\n  }\\n\\n  /**\\n   * @dev Computes fee percentage.\\n   */\\n  function _computeFeePercentage(uint256 _amount, uint256 _percentage) internal view virtual returns (uint256) {\\n    return (_amount * _percentage) / _MAX_PERCENTAGE;\\n  }\\n\\n  /**\\n   * @dev Returns high-tier vote weight.\\n   */\\n  function _highTierVoteWeight(uint256 _totalWeight) internal view virtual returns (uint256) {\\n    return (_highTierVWNum * _totalWeight + _highTierVWDenom - 1) / _highTierVWDenom;\\n  }\\n\\n  /**\\n   * @dev Validates whether the high-tier vote weight threshold is larger than the normal threshold.\\n   */\\n  function _verifyThresholds() internal view {\\n    require(_num * _highTierVWDenom <= _highTierVWNum * _denom, \\\"WithdrawalLimitation: invalid thresholds\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x1a9abfcc966d59e8a04cc40b9a4802140999d7e147877d0a1538f34f87f8f03c\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IMainchainGatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBridge.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./consumers/SignatureConsumer.sol\\\";\\nimport \\\"./consumers/MappedTokenConsumer.sol\\\";\\nimport \\\"../libraries/Transfer.sol\\\";\\n\\ninterface IMainchainGatewayV2 is SignatureConsumer, MappedTokenConsumer, IBridge {\\n  /// @dev Emitted when the deposit is requested\\n  event DepositRequested(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the assets are withdrawn\\n  event Withdrew(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the tokens are mapped\\n  event TokenMapped(address[] mainchainTokens, address[] roninTokens, Token.Standard[] standards);\\n  /// @dev Emitted when the wrapped native token contract is updated\\n  event WrappedNativeTokenContractUpdated(IWETH weth);\\n  /// @dev Emitted when the withdrawal is locked\\n  event WithdrawalLocked(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the withdrawal is unlocked\\n  event WithdrawalUnlocked(bytes32 receiptHash, Transfer.Receipt receipt);\\n\\n  /**\\n   * @dev Returns the domain seperator.\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @dev Returns deposit count.\\n   */\\n  function depositCount() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the wrapped native token contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `WrappedNativeTokenContractUpdated` event.\\n   *\\n   */\\n  function setWrappedNativeTokenContract(IWETH _wrappedToken) external;\\n\\n  /**\\n   * @dev Returns whether the withdrawal is locked.\\n   */\\n  function withdrawalLocked(uint256 withdrawalId) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the withdrawal hash.\\n   */\\n  function withdrawalHash(uint256 withdrawalId) external view returns (bytes32);\\n\\n  /**\\n   * @dev Locks the assets and request deposit.\\n   */\\n  function requestDepositFor(Transfer.Request calldata _request) external payable;\\n\\n  /**\\n   * @dev Withdraws based on the receipt and the validator signatures.\\n   * Returns whether the withdrawal is locked.\\n   *\\n   * Emits the `Withdrew` once the assets are released.\\n   *\\n   */\\n  function submitWithdrawal(Transfer.Receipt memory _receipt, Signature[] memory _signatures)\\n    external\\n    returns (bool _locked);\\n\\n  /**\\n   * @dev Approves a specific withdrawal.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   * Emits the `Withdrew` once the assets are released.\\n   *\\n   */\\n  function unlockWithdrawal(Transfer.Receipt calldata _receipt) external;\\n\\n  /**\\n   * @dev Maps mainchain tokens to Ronin network.\\n   *\\n   * Requirement:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function mapTokens(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards\\n  ) external;\\n\\n  /**\\n   * @dev Maps mainchain tokens to Ronin network and sets thresholds.\\n   *\\n   * Requirement:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function mapTokensAndThresholds(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards,\\n    uint256[][4] calldata _thresholds\\n  ) external;\\n\\n  /**\\n   * @dev Returns token address on Ronin network.\\n   * Note: Reverts for unsupported token.\\n   */\\n  function getRoninToken(address _mainchainToken) external view returns (MappedToken memory _token);\\n}\\n\",\"keccak256\":\"0x785e21897dd07ff3d2f9486ecd03f96c7d41af075f78a663f0a5520b964c247d\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 _wad) external;\\n\\n  function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8acead2ae4364dee80c9bc76d52cc04d3763105e1743728e67d237f816155142\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/MappedTokenConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/Token.sol\\\";\\n\\ninterface MappedTokenConsumer {\\n  struct MappedToken {\\n    Token.Standard erc;\\n    address tokenAddr;\\n  }\\n}\\n\",\"keccak256\":\"0xfa220e968221af9b789e6c1dc4133631e90600c4a2bd63b7f01e96cb01f13e9b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/libraries/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nlibrary Token {\\n  enum Standard {\\n    ERC20,\\n    ERC721\\n  }\\n  struct Info {\\n    Standard erc;\\n    // For ERC20:  the id must be 0 and the quantity is larger than 0.\\n    // For ERC721: the quantity must be 0.\\n    uint256 id;\\n    uint256 quantity;\\n  }\\n\\n  // keccak256(\\\"TokenInfo(uint8 erc,uint256 id,uint256 quantity)\\\");\\n  bytes32 public constant INFO_TYPE_HASH = 0x1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d;\\n\\n  /**\\n   * @dev Returns token info struct hash.\\n   */\\n  function hash(Info memory _info) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(INFO_TYPE_HASH, _info.erc, _info.id, _info.quantity));\\n  }\\n\\n  /**\\n   * @dev Validates the token info.\\n   */\\n  function validate(Info memory _info) internal pure {\\n    require(\\n      (_info.erc == Standard.ERC20 && _info.quantity > 0 && _info.id == 0) ||\\n        (_info.erc == Standard.ERC721 && _info.quantity == 0),\\n      \\\"Token: invalid info\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Transfer asset from.\\n   *\\n   * Requirements:\\n   * - The `_from` address must approve for the contract using this library.\\n   *\\n   */\\n  function transferFrom(\\n    Info memory _info,\\n    address _from,\\n    address _to,\\n    address _token\\n  ) internal {\\n    bool _success;\\n    bytes memory _data;\\n    if (_info.erc == Standard.ERC20) {\\n      (_success, _data) = _token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, _from, _to, _info.quantity));\\n      _success = _success && (_data.length == 0 || abi.decode(_data, (bool)));\\n    } else if (_info.erc == Standard.ERC721) {\\n      // bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n      (_success, ) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _info.id));\\n    } else {\\n      revert(\\\"Token: unsupported token standard\\\");\\n    }\\n\\n    if (!_success) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"Token: could not transfer \\\",\\n            toString(_info),\\n            \\\" from \\\",\\n            Strings.toHexString(uint160(_from), 20),\\n            \\\" to \\\",\\n            Strings.toHexString(uint160(_to), 20),\\n            \\\" token \\\",\\n            Strings.toHexString(uint160(_token), 20)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfers ERC721 token and returns the result.\\n   */\\n  function tryTransferERC721(\\n    address _token,\\n    address _to,\\n    uint256 _id\\n  ) internal returns (bool _success) {\\n    (_success, ) = _token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, address(this), _to, _id));\\n  }\\n\\n  /**\\n   * @dev Transfers ERC20 token and returns the result.\\n   */\\n  function tryTransferERC20(\\n    address _token,\\n    address _to,\\n    uint256 _quantity\\n  ) internal returns (bool _success) {\\n    bytes memory _data;\\n    (_success, _data) = _token.call(abi.encodeWithSelector(IERC20.transfer.selector, _to, _quantity));\\n    _success = _success && (_data.length == 0 || abi.decode(_data, (bool)));\\n  }\\n\\n  /**\\n   * @dev Transfer assets from current address to `_to` address.\\n   */\\n  function transfer(\\n    Info memory _info,\\n    address _to,\\n    address _token\\n  ) internal {\\n    bool _success;\\n    if (_info.erc == Standard.ERC20) {\\n      _success = tryTransferERC20(_token, _to, _info.quantity);\\n    } else if (_info.erc == Standard.ERC721) {\\n      _success = tryTransferERC721(_token, _to, _info.id);\\n    } else {\\n      revert(\\\"Token: unsupported token standard\\\");\\n    }\\n\\n    if (!_success) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"Token: could not transfer \\\",\\n            toString(_info),\\n            \\\" to \\\",\\n            Strings.toHexString(uint160(_to), 20),\\n            \\\" token \\\",\\n            Strings.toHexString(uint160(_token), 20)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Tries minting and transfering assets.\\n   *\\n   * @notice Prioritizes transfer native token if the token is wrapped.\\n   *\\n   */\\n  function handleAssetTransfer(\\n    Info memory _info,\\n    address payable _to,\\n    address _token,\\n    IWETH _wrappedNativeToken\\n  ) internal {\\n    bool _success;\\n    if (_token == address(_wrappedNativeToken)) {\\n      // Try sending the native token before transferring the wrapped token\\n      if (!_to.send(_info.quantity)) {\\n        _wrappedNativeToken.deposit{ value: _info.quantity }();\\n        transfer(_info, _to, _token);\\n      }\\n    } else if (_info.erc == Token.Standard.ERC20) {\\n      uint256 _balance = IERC20(_token).balanceOf(address(this));\\n\\n      if (_balance < _info.quantity) {\\n        // bytes4(keccak256(\\\"mint(address,uint256)\\\"))\\n        (_success, ) = _token.call(abi.encodeWithSelector(0x40c10f19, address(this), _info.quantity - _balance));\\n        require(_success, \\\"Token: ERC20 minting failed\\\");\\n      }\\n\\n      transfer(_info, _to, _token);\\n    } else if (_info.erc == Token.Standard.ERC721) {\\n      if (!tryTransferERC721(_token, _to, _info.id)) {\\n        // bytes4(keccak256(\\\"mint(address,uint256)\\\"))\\n        (_success, ) = _token.call(abi.encodeWithSelector(0x40c10f19, _to, _info.id));\\n        require(_success, \\\"Token: ERC721 minting failed\\\");\\n      }\\n    } else {\\n      revert(\\\"Token: unsupported token standard\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns readable string.\\n   */\\n  function toString(Info memory _info) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"TokenInfo(\\\",\\n          Strings.toHexString(uint160(_info.erc), 1),\\n          \\\",\\\",\\n          Strings.toHexString(_info.id),\\n          \\\",\\\",\\n          Strings.toHexString(_info.quantity),\\n          \\\")\\\"\\n        )\\n      );\\n  }\\n\\n  struct Owner {\\n    address addr;\\n    address tokenAddr;\\n    uint256 chainId;\\n  }\\n\\n  // keccak256(\\\"TokenOwner(address addr,address tokenAddr,uint256 chainId)\\\");\\n  bytes32 public constant OWNER_TYPE_HASH = 0x353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e8764;\\n\\n  /**\\n   * @dev Returns ownership struct hash.\\n   */\\n  function hash(Owner memory _owner) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(OWNER_TYPE_HASH, _owner.addr, _owner.tokenAddr, _owner.chainId));\\n  }\\n}\\n\",\"keccak256\":\"0xea68c5ccbd75695a7fb43bdbbec5636f63d1d3aabf36801b36a5ef0c43118c76\",\"license\":\"MIT\"},\"contracts/libraries/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./Token.sol\\\";\\n\\nlibrary Transfer {\\n  using ECDSA for bytes32;\\n\\n  enum Kind {\\n    Deposit,\\n    Withdrawal\\n  }\\n\\n  struct Request {\\n    // For deposit request: Recipient address on Ronin network\\n    // For withdrawal request: Recipient address on mainchain network\\n    address recipientAddr;\\n    // Token address to deposit/withdraw\\n    // Value 0: native token\\n    address tokenAddr;\\n    Token.Info info;\\n  }\\n\\n  /**\\n   * @dev Converts the transfer request into the deposit receipt.\\n   */\\n  function into_deposit_receipt(\\n    Request memory _request,\\n    address _requester,\\n    uint256 _id,\\n    address _roninTokenAddr,\\n    uint256 _roninChainId\\n  ) internal view returns (Receipt memory _receipt) {\\n    _receipt.id = _id;\\n    _receipt.kind = Kind.Deposit;\\n    _receipt.mainchain.addr = _requester;\\n    _receipt.mainchain.tokenAddr = _request.tokenAddr;\\n    _receipt.mainchain.chainId = block.chainid;\\n    _receipt.ronin.addr = _request.recipientAddr;\\n    _receipt.ronin.tokenAddr = _roninTokenAddr;\\n    _receipt.ronin.chainId = _roninChainId;\\n    _receipt.info = _request.info;\\n  }\\n\\n  /**\\n   * @dev Converts the transfer request into the withdrawal receipt.\\n   */\\n  function into_withdrawal_receipt(\\n    Request memory _request,\\n    address _requester,\\n    uint256 _id,\\n    address _mainchainTokenAddr,\\n    uint256 _mainchainId\\n  ) internal view returns (Receipt memory _receipt) {\\n    _receipt.id = _id;\\n    _receipt.kind = Kind.Withdrawal;\\n    _receipt.ronin.addr = _requester;\\n    _receipt.ronin.tokenAddr = _request.tokenAddr;\\n    _receipt.ronin.chainId = block.chainid;\\n    _receipt.mainchain.addr = _request.recipientAddr;\\n    _receipt.mainchain.tokenAddr = _mainchainTokenAddr;\\n    _receipt.mainchain.chainId = _mainchainId;\\n    _receipt.info = _request.info;\\n  }\\n\\n  struct Receipt {\\n    uint256 id;\\n    Kind kind;\\n    Token.Owner mainchain;\\n    Token.Owner ronin;\\n    Token.Info info;\\n  }\\n\\n  // keccak256(\\\"Receipt(uint256 id,uint8 kind,TokenOwner mainchain,TokenOwner ronin,TokenInfo info)TokenInfo(uint8 erc,uint256 id,uint256 quantity)TokenOwner(address addr,address tokenAddr,uint256 chainId)\\\");\\n  bytes32 public constant TYPE_HASH = 0xb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea;\\n\\n  /**\\n   * @dev Returns token info struct hash.\\n   */\\n  function hash(Receipt memory _receipt) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _receipt.id,\\n          _receipt.kind,\\n          Token.hash(_receipt.mainchain),\\n          Token.hash(_receipt.ronin),\\n          Token.hash(_receipt.info)\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the receipt digest.\\n   */\\n  function receiptDigest(bytes32 _domainSeparator, bytes32 _receiptHash) internal pure returns (bytes32) {\\n    return _domainSeparator.toTypedDataHash(_receiptHash);\\n  }\\n}\\n\",\"keccak256\":\"0x377ec9931ffb0bc1a9b958aceb28c6afb735c5c04f961ee424ac7da5f2c30402\",\"license\":\"MIT\"},\"contracts/mainchain/MainchainGatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../extensions/GatewayV2.sol\\\";\\nimport \\\"../extensions/WithdrawalLimitation.sol\\\";\\nimport \\\"../libraries/Transfer.sol\\\";\\nimport \\\"../interfaces/IMainchainGatewayV2.sol\\\";\\n\\ncontract MainchainGatewayV2 is WithdrawalLimitation, Initializable, AccessControlEnumerable, IMainchainGatewayV2 {\\n  using Token for Token.Info;\\n  using Transfer for Transfer.Request;\\n  using Transfer for Transfer.Receipt;\\n\\n  /// @dev Emitted when the bridge operators are replaced\\n  event BridgeOperatorsReplaced(address[] operators);\\n\\n  /// @dev Withdrawal unlocker role hash\\n  bytes32 public constant WITHDRAWAL_UNLOCKER_ROLE = keccak256(\\\"WITHDRAWAL_UNLOCKER_ROLE\\\");\\n\\n  /// @dev Wrapped native token address\\n  IWETH public wrappedNativeToken;\\n  /// @dev Ronin network id\\n  uint256 public roninChainId;\\n  /// @dev Total deposit\\n  uint256 public depositCount;\\n  /// @dev Domain seperator\\n  bytes32 internal _domainSeparator;\\n  /// @dev Mapping from mainchain token => token address on Ronin network\\n  mapping(address => MappedToken) internal _roninToken;\\n  /// @dev Mapping from withdrawal id => withdrawal hash\\n  mapping(uint256 => bytes32) public withdrawalHash;\\n  /// @dev Mapping from withdrawal id => locked\\n  mapping(uint256 => bool) public withdrawalLocked;\\n\\n  /// @dev Mapping from validator address => last block that the bridge operator is added\\n  mapping(address => uint256) internal _bridgeOperatorAddedBlock;\\n  /// @dev Bridge operators array\\n  address[] internal _bridgeOperators;\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Initializes contract storage.\\n   */\\n  function initialize(\\n    address _roleSetter,\\n    IWETH _wrappedToken,\\n    uint256 _roninChainId,\\n    uint256 _numerator,\\n    uint256 _highTierVWNumerator,\\n    uint256 _denominator,\\n    // _addresses[0]: mainchainTokens\\n    // _addresses[1]: roninTokens\\n    // _addresses[2]: withdrawalUnlockers\\n    address[][3] calldata _addresses,\\n    // _thresholds[0]: highTierThreshold\\n    // _thresholds[1]: lockedThreshold\\n    // _thresholds[2]: unlockFeePercentages\\n    // _thresholds[3]: dailyWithdrawalLimit\\n    uint256[][4] calldata _thresholds,\\n    Token.Standard[] calldata _standards\\n  ) external payable virtual initializer {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roleSetter);\\n    roninChainId = _roninChainId;\\n\\n    _setWrappedNativeTokenContract(_wrappedToken);\\n    _updateDomainSeparator();\\n    _setThreshold(_numerator, _denominator);\\n    _setHighTierVoteWeightThreshold(_highTierVWNumerator, _denominator);\\n    _verifyThresholds();\\n\\n    if (_addresses[0].length > 0) {\\n      // Map mainchain tokens to ronin tokens\\n      _mapTokens(_addresses[0], _addresses[1], _standards);\\n      // Sets thresholds based on the mainchain tokens\\n      _setHighTierThresholds(_addresses[0], _thresholds[0]);\\n      _setLockedThresholds(_addresses[0], _thresholds[1]);\\n      _setUnlockFeePercentages(_addresses[0], _thresholds[2]);\\n      _setDailyWithdrawalLimits(_addresses[0], _thresholds[3]);\\n    }\\n\\n    // Grant role for withdrawal unlocker\\n    for (uint256 _i; _i < _addresses[2].length; _i++) {\\n      _grantRole(WITHDRAWAL_UNLOCKER_ROLE, _addresses[2][_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridge\\n   */\\n  function replaceBridgeOperators(address[] calldata _list) external onlyAdmin {\\n    address _addr;\\n    for (uint256 _i = 0; _i < _list.length; _i++) {\\n      _addr = _list[_i];\\n      if (_bridgeOperatorAddedBlock[_addr] == 0) {\\n        _bridgeOperators.push(_addr);\\n      }\\n      _bridgeOperatorAddedBlock[_addr] = block.number;\\n    }\\n\\n    {\\n      uint256 _i;\\n      while (_i < _bridgeOperators.length) {\\n        _addr = _bridgeOperators[_i];\\n        if (_bridgeOperatorAddedBlock[_addr] < block.number) {\\n          delete _bridgeOperatorAddedBlock[_addr];\\n          _bridgeOperators[_i] = _bridgeOperators[_bridgeOperators.length - 1];\\n          _bridgeOperators.pop();\\n          continue;\\n        }\\n        _i++;\\n      }\\n    }\\n\\n    emit BridgeOperatorsReplaced(_list);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridge\\n   */\\n  function getBridgeOperators() external view returns (address[] memory) {\\n    return _bridgeOperators;\\n  }\\n\\n  /**\\n   * @dev Receives ether without doing anything. Use this function to topup native token.\\n   */\\n  function receiveEther() external payable {}\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n    return _domainSeparator;\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function setWrappedNativeTokenContract(IWETH _wrappedToken) external virtual onlyAdmin {\\n    _setWrappedNativeTokenContract(_wrappedToken);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function requestDepositFor(Transfer.Request calldata _request) external payable virtual whenNotPaused {\\n    _requestDepositFor(_request, msg.sender);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function submitWithdrawal(Transfer.Receipt calldata _receipt, Signature[] calldata _signatures)\\n    external\\n    virtual\\n    whenNotPaused\\n    returns (bool _locked)\\n  {\\n    return _submitWithdrawal(_receipt, _signatures);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function unlockWithdrawal(Transfer.Receipt calldata _receipt) external onlyRole(WITHDRAWAL_UNLOCKER_ROLE) {\\n    bytes32 _receiptHash = _receipt.hash();\\n    require(withdrawalHash[_receipt.id] == _receipt.hash(), \\\"MainchainGatewayV2: invalid receipt\\\");\\n    require(withdrawalLocked[_receipt.id], \\\"MainchainGatewayV2: query for approved withdrawal\\\");\\n    delete withdrawalLocked[_receipt.id];\\n    emit WithdrawalUnlocked(_receiptHash, _receipt);\\n\\n    address _token = _receipt.mainchain.tokenAddr;\\n    if (_receipt.info.erc == Token.Standard.ERC20) {\\n      Token.Info memory _feeInfo = _receipt.info;\\n      _feeInfo.quantity = _computeFeePercentage(_receipt.info.quantity, unlockFeePercentages[_token]);\\n      Token.Info memory _withdrawInfo = _receipt.info;\\n      _withdrawInfo.quantity = _receipt.info.quantity - _feeInfo.quantity;\\n\\n      _feeInfo.handleAssetTransfer(payable(msg.sender), _token, wrappedNativeToken);\\n      _withdrawInfo.handleAssetTransfer(payable(_receipt.mainchain.addr), _token, wrappedNativeToken);\\n    } else {\\n      _receipt.info.handleAssetTransfer(payable(_receipt.mainchain.addr), _token, wrappedNativeToken);\\n    }\\n\\n    emit Withdrew(_receiptHash, _receipt);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function mapTokens(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards\\n  ) external virtual onlyAdmin {\\n    require(_mainchainTokens.length > 0, \\\"MainchainGatewayV2: query for empty array\\\");\\n    _mapTokens(_mainchainTokens, _roninTokens, _standards);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function mapTokensAndThresholds(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards,\\n    // _thresholds[0]: highTierThreshold\\n    // _thresholds[1]: lockedThreshold\\n    // _thresholds[2]: unlockFeePercentages\\n    // _thresholds[3]: dailyWithdrawalLimit\\n    uint256[][4] calldata _thresholds\\n  ) external virtual onlyAdmin {\\n    require(_mainchainTokens.length > 0, \\\"MainchainGatewayV2: query for empty array\\\");\\n    _mapTokens(_mainchainTokens, _roninTokens, _standards);\\n    _setHighTierThresholds(_mainchainTokens, _thresholds[0]);\\n    _setLockedThresholds(_mainchainTokens, _thresholds[1]);\\n    _setUnlockFeePercentages(_mainchainTokens, _thresholds[2]);\\n    _setDailyWithdrawalLimits(_mainchainTokens, _thresholds[3]);\\n  }\\n\\n  /**\\n   * @inheritdoc IMainchainGatewayV2\\n   */\\n  function getRoninToken(address _mainchainToken) public view returns (MappedToken memory _token) {\\n    _token = _roninToken[_mainchainToken];\\n    require(_token.tokenAddr != address(0), \\\"MainchainGatewayV2: unsupported token\\\");\\n  }\\n\\n  /**\\n   * @dev Maps mainchain tokens to Ronin network.\\n   *\\n   * Requirement:\\n   * - The arrays have the same length.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function _mapTokens(\\n    address[] calldata _mainchainTokens,\\n    address[] calldata _roninTokens,\\n    Token.Standard[] calldata _standards\\n  ) internal virtual {\\n    require(\\n      _mainchainTokens.length == _roninTokens.length && _mainchainTokens.length == _standards.length,\\n      \\\"MainchainGatewayV2: invalid array length\\\"\\n    );\\n\\n    for (uint256 _i; _i < _mainchainTokens.length; _i++) {\\n      _roninToken[_mainchainTokens[_i]].tokenAddr = _roninTokens[_i];\\n      _roninToken[_mainchainTokens[_i]].erc = _standards[_i];\\n    }\\n\\n    emit TokenMapped(_mainchainTokens, _roninTokens, _standards);\\n  }\\n\\n  /**\\n   * @dev Submits withdrawal receipt.\\n   *\\n   * Requirements:\\n   * - The receipt kind is withdrawal.\\n   * - The receipt is to withdraw on this chain.\\n   * - The receipt is not used to withdraw before.\\n   * - The withdrawal is not reached the limit threshold.\\n   * - The signer weight total is larger than or equal to the minimum threshold.\\n   * - The signature signers are in order.\\n   *\\n   * Emits the `Withdrew` once the assets are released.\\n   *\\n   */\\n  function _submitWithdrawal(Transfer.Receipt calldata _receipt, Signature[] memory _signatures)\\n    internal\\n    virtual\\n    returns (bool _locked)\\n  {\\n    uint256 _id = _receipt.id;\\n    uint256 _quantity = _receipt.info.quantity;\\n    address _tokenAddr = _receipt.mainchain.tokenAddr;\\n\\n    _receipt.info.validate();\\n    require(_receipt.kind == Transfer.Kind.Withdrawal, \\\"MainchainGatewayV2: invalid receipt kind\\\");\\n    require(_receipt.mainchain.chainId == block.chainid, \\\"MainchainGatewayV2: invalid chain id\\\");\\n    MappedToken memory _token = getRoninToken(_receipt.mainchain.tokenAddr);\\n    require(\\n      _token.erc == _receipt.info.erc && _token.tokenAddr == _receipt.ronin.tokenAddr,\\n      \\\"MainchainGatewayV2: invalid receipt\\\"\\n    );\\n    require(withdrawalHash[_id] == bytes32(0), \\\"MainchainGatewayV2: query for processed withdrawal\\\");\\n    require(\\n      _receipt.info.erc == Token.Standard.ERC721 || !_reachedWithdrawalLimit(_tokenAddr, _quantity),\\n      \\\"MainchainGatewayV2: reached daily withdrawal limit\\\"\\n    );\\n\\n    bytes32 _receiptHash = _receipt.hash();\\n    bytes32 _receiptDigest = Transfer.receiptDigest(_domainSeparator, _receiptHash);\\n\\n    uint256 _minimumVoteWeight;\\n    (_minimumVoteWeight, _locked) = _computeMinVoteWeight(_receipt.info.erc, _tokenAddr, _quantity);\\n\\n    {\\n      bool _passed;\\n      address _signer;\\n      address _lastSigner;\\n      Signature memory _sig;\\n      uint256 _weight;\\n      for (uint256 _i; _i < _signatures.length; _i++) {\\n        _sig = _signatures[_i];\\n        _signer = ecrecover(_receiptDigest, _sig.v, _sig.r, _sig.s);\\n        require(_lastSigner < _signer, \\\"MainchainGatewayV2: invalid order\\\");\\n        _lastSigner = _signer;\\n\\n        _weight += _getWeight(_signer);\\n        if (_weight >= _minimumVoteWeight) {\\n          _passed = true;\\n          break;\\n        }\\n      }\\n      require(_passed, \\\"MainchainGatewayV2: query for insufficient vote weight\\\");\\n      withdrawalHash[_id] = _receiptHash;\\n    }\\n\\n    if (_locked) {\\n      withdrawalLocked[_id] = true;\\n      emit WithdrawalLocked(_receiptHash, _receipt);\\n      return _locked;\\n    }\\n\\n    _recordWithdrawal(_tokenAddr, _quantity);\\n    _receipt.info.handleAssetTransfer(payable(_receipt.mainchain.addr), _tokenAddr, wrappedNativeToken);\\n    emit Withdrew(_receiptHash, _receipt);\\n  }\\n\\n  /**\\n   * @dev Requests deposit made by `_requester` address.\\n   *\\n   * Requirements:\\n   * - The token info is valid.\\n   * - The `msg.value` is 0 while depositing ERC20 token.\\n   * - The `msg.value` is equal to deposit quantity while depositing native token.\\n   *\\n   * Emits the `DepositRequested` event.\\n   *\\n   */\\n  function _requestDepositFor(Transfer.Request memory _request, address _requester) internal virtual {\\n    MappedToken memory _token;\\n    address _weth = address(wrappedNativeToken);\\n\\n    _request.info.validate();\\n    if (_request.tokenAddr == address(0)) {\\n      require(_request.info.quantity == msg.value, \\\"MainchainGatewayV2: invalid request\\\");\\n      _token = getRoninToken(_weth);\\n      require(_token.erc == _request.info.erc, \\\"MainchainGatewayV2: invalid token standard\\\");\\n      _request.tokenAddr = _weth;\\n    } else {\\n      require(msg.value == 0, \\\"MainchainGatewayV2: invalid request\\\");\\n      _token = getRoninToken(_request.tokenAddr);\\n      require(_token.erc == _request.info.erc, \\\"MainchainGatewayV2: invalid token standard\\\");\\n      _request.info.transferFrom(_requester, address(this), _request.tokenAddr);\\n      // Withdraw if token is WETH\\n      if (_weth == _request.tokenAddr) {\\n        IWETH(_weth).withdraw(_request.info.quantity);\\n      }\\n    }\\n\\n    uint256 _depositId = depositCount++;\\n    Transfer.Receipt memory _receipt = _request.into_deposit_receipt(\\n      _requester,\\n      _depositId,\\n      _token.tokenAddr,\\n      roninChainId\\n    );\\n\\n    emit DepositRequested(_receipt.hash(), _receipt);\\n  }\\n\\n  /**\\n   * @dev Returns the minimum vote weight for the token.\\n   */\\n  function _computeMinVoteWeight(\\n    Token.Standard _erc,\\n    address _token,\\n    uint256 _quantity\\n  ) internal virtual returns (uint256 _weight, bool _locked) {\\n    uint256 _totalWeight = _getTotalWeight();\\n    _weight = _minimumVoteWeight(_totalWeight);\\n    if (_erc == Token.Standard.ERC20) {\\n      if (highTierThreshold[_token] <= _quantity) {\\n        _weight = _highTierVoteWeight(_totalWeight);\\n      }\\n      _locked = _lockedWithdrawalRequest(_token, _quantity);\\n    }\\n  }\\n\\n  /**\\n   * @dev Update domain seperator.\\n   */\\n  function _updateDomainSeparator() internal {\\n    _domainSeparator = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(\\\"MainchainGatewayV2\\\"),\\n        keccak256(\\\"2\\\"),\\n        block.chainid,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @dev Sets the WETH contract.\\n   *\\n   * Emits the `WrappedNativeTokenContractUpdated` event.\\n   *\\n   */\\n  function _setWrappedNativeTokenContract(IWETH _wrapedToken) internal {\\n    wrappedNativeToken = _wrapedToken;\\n    emit WrappedNativeTokenContractUpdated(_wrapedToken);\\n  }\\n\\n  /**\\n   * @dev Receives ETH from WETH or creates deposit request.\\n   */\\n  function _fallback() internal virtual whenNotPaused {\\n    if (msg.sender != address(wrappedNativeToken)) {\\n      Transfer.Request memory _request;\\n      _request.recipientAddr = msg.sender;\\n      _request.info.quantity = msg.value;\\n      _requestDepositFor(_request, _request.recipientAddr);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc GatewayV2\\n   */\\n  function _getTotalWeight() internal view override returns (uint256) {\\n    return _bridgeOperators.length;\\n  }\\n\\n  /**\\n   * @dev Returns the weight of an address.\\n   */\\n  function _getWeight(address _addr) internal view returns (uint256) {\\n    return _bridgeOperatorAddedBlock[_addr] > 0 ? 1 : 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ee2eab821731fc334298aece7ab5e250eb49f04ec7a1c9cd84e776e296ec0e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff19169055614ff28061002a6000396000f3fe6080604052600436106102cd5760003560e01c8063901d627711610175578063b1d08a03116100dc578063d547741f11610095578063dafae4081161006f578063dafae408146108ea578063dff525e11461090a578063e400327c1461092a578063e75235b81461094a576102dc565b8063d547741f1461087d578063d55ed1031461089d578063d64af2a6146108ca576102dc565b8063b1d08a031461079e578063b2975794146107cb578063b9c36209146107f8578063ca15c87314610818578063cdb6744414610838578063d19773d214610850576102dc565b8063a217fddf1161012e578063a217fddf14610706578063a3912ec8146102da578063ab7965661461071b578063ac78dfe814610748578063affed0e014610768578063b1a2567e1461077e576102dc565b8063901d62771461062f5780639157921c1461064f57806391d148541461066f57806393c5678f1461068f5780639b19dbfd146106af5780639dcc4da3146106d1576102dc565b80633f4ba83a116102345780635c975abb116101ed5780637de5dedd116101c75780637de5dedd146105b15780638456cb59146105c65780638f34e347146105db5780639010d07c1461060f576102dc565b80635c975abb1461054c5780636932be98146105645780636c1ce67014610591576102dc565b80633f4ba83a146104945780634b14557e146104a95780634d0d6673146104bc5780634d493f4e146104dc578063504af48c1461050c57806359122f6b1461051f576102dc565b8063248a9ca311610286578063248a9ca3146103e25780632dfdf0b5146104125780632f2ff15d14610428578063302d12db146104485780633644e5151461045f57806336568abe14610474576102dc565b806301ffc9a7146102e457806317ce2dd41461031957806317fcb39b1461033d5780631a8e55b0146103755780631b6e7594146103955780631d4a7210146103b5576102dc565b366102dc576102da610962565b005b6102da610962565b3480156102f057600080fd5b506103046102ff366004613ebf565b6109a2565b60405190151581526020015b60405180910390f35b34801561032557600080fd5b5061032f60755481565b604051908152602001610310565b34801561034957600080fd5b5060745461035d906001600160a01b031681565b6040516001600160a01b039091168152602001610310565b34801561038157600080fd5b506102da610390366004613f2e565b6109cd565b3480156103a157600080fd5b506102da6103b0366004613f9a565b610a3d565b3480156103c157600080fd5b5061032f6103d0366004614054565b603e6020526000908152604090205481565b3480156103ee57600080fd5b5061032f6103fd366004614071565b60009081526072602052604090206001015490565b34801561041e57600080fd5b5061032f60765481565b34801561043457600080fd5b506102da61044336600461408a565b610aa8565b34801561045457600080fd5b5061032f620f424081565b34801561046b57600080fd5b5060775461032f565b34801561048057600080fd5b506102da61048f36600461408a565b610ad2565b3480156104a057600080fd5b506102da610b50565b6102da6104b73660046140ba565b610b90565b3480156104c857600080fd5b506103046104d73660046140e5565b610bb0565b3480156104e857600080fd5b506103046104f7366004614071565b607a6020526000908152604090205460ff1681565b6102da61051a366004614190565b610c1e565b34801561052b57600080fd5b5061032f61053a366004614054565b603a6020526000908152604090205481565b34801561055857600080fd5b5060005460ff16610304565b34801561057057600080fd5b5061032f61057f366004614071565b60796020526000908152604090205481565b34801561059d57600080fd5b506103046105ac36600461426b565b610f65565b3480156105bd57600080fd5b5061032f610f78565b3480156105d257600080fd5b506102da610f90565b3480156105e757600080fd5b5061032f7f5e5712e902fff5e704bc4d506ad976718319e019e9d2a872528a01a85db433e481565b34801561061b57600080fd5b5061035d61062a366004614297565b610fd0565b34801561063b57600080fd5b506102da61064a3660046142b9565b610fe8565b34801561065b57600080fd5b506102da61066a3660046142fb565b611259565b34801561067b57600080fd5b5061030461068a36600461408a565b611525565b34801561069b57600080fd5b506102da6106aa366004613f2e565b611550565b3480156106bb57600080fd5b506106c46115b1565b6040516103109190614318565b3480156106dd57600080fd5b506106f16106ec366004614297565b611613565b60408051928352602083019190915201610310565b34801561071257600080fd5b5061032f600081565b34801561072757600080fd5b5061032f610736366004614054565b603c6020526000908152604090205481565b34801561075457600080fd5b50610304610763366004614071565b61166c565b34801561077457600080fd5b5061032f60045481565b34801561078a57600080fd5b506102da610799366004613f2e565b611699565b3480156107aa57600080fd5b5061032f6107b9366004614054565b60396020526000908152604090205481565b3480156107d757600080fd5b506107eb6107e6366004614054565b6116fa565b6040516103109190614399565b34801561080457600080fd5b506106f1610813366004614297565b6117da565b34801561082457600080fd5b5061032f610833366004614071565b61181f565b34801561084457600080fd5b506037546038546106f1565b34801561085c57600080fd5b5061032f61086b366004614054565b603b6020526000908152604090205481565b34801561088957600080fd5b506102da61089836600461408a565b611836565b3480156108a957600080fd5b5061032f6108b8366004614054565b603d6020526000908152604090205481565b3480156108d657600080fd5b506102da6108e5366004614054565b61185b565b3480156108f657600080fd5b50610304610905366004614071565b61189c565b34801561091657600080fd5b506102da6109253660046143c5565b6118c1565b34801561093657600080fd5b506102da610945366004613f2e565b611961565b34801561095657600080fd5b506001546002546106f1565b61096a6119c2565b6074546001600160a01b031633146109a057610984613e7e565b33815260408082015134910152805161099e908290611a08565b505b565b60006001600160e01b03198216635a05180f60e01b14806109c757506109c782611c67565b92915050565b6109d5611c9c565b6001600160a01b0316336001600160a01b031614610a0e5760405162461bcd60e51b8152600401610a0590614483565b60405180910390fd5b82610a2b5760405162461bcd60e51b8152600401610a05906144c5565b610a3784848484611cca565b50505050565b610a45611c9c565b6001600160a01b0316336001600160a01b031614610a755760405162461bcd60e51b8152600401610a0590614483565b84610a925760405162461bcd60e51b8152600401610a059061450f565b610aa0868686868686611d9a565b505050505050565b600082815260726020526040902060010154610ac381611f6d565b610acd8383611f77565b505050565b6001600160a01b0381163314610b425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a05565b610b4c8282611f99565b5050565b610b58611c9c565b6001600160a01b0316336001600160a01b031614610b885760405162461bcd60e51b8152600401610a0590614483565b6109a0611fbb565b610b986119c2565b61099e610baa368390038301836145f7565b33611a08565b6000610bba6119c2565b610c16848484808060200260200160405190810160405280939291908181526020016000905b82821015610c0c57610bfd6060830286013681900381019061464a565b81526020019060010190610be0565b505050505061200d565b949350505050565b607154610100900460ff1615808015610c3e5750607154600160ff909116105b80610c585750303b158015610c58575060715460ff166001145b610cbb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a05565b6071805460ff191660011790558015610cde576071805461ff0019166101001790555b610ce960008c6125ea565b6075899055610cf78a6125f4565b610d9e604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f159f52c1e3a2b6a6aad3950adf713516211484e0516dad685ea662a094b7c43b918101919091527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a560608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120607755565b610da88887612648565b5050610db48787612708565b5050610dbe6127cd565b6000610dca86806146d6565b90501115610e8b57610df3610ddf86806146d6565b610dec60208901896146d6565b8787611d9a565b610e19610e0086806146d6565b8660005b602002810190610e1491906146d6565b61284c565b610e3f610e2686806146d6565b8660015b602002810190610e3a91906146d6565b611cca565b610e65610e4c86806146d6565b8660025b602002810190610e6091906146d6565b61291c565b610e8b610e7286806146d6565b8660035b602002810190610e8691906146d6565b612a68565b60005b610e9b60408701876146d6565b9050811015610f1157610eff7f5e5712e902fff5e704bc4d506ad976718319e019e9d2a872528a01a85db433e4610ed560408901896146d6565b84818110610ee557610ee56146c0565b9050602002016020810190610efa9190614054565b611f77565b80610f0981614736565b915050610e8e565b508015610f58576071805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6000610f718383612b38565b9392505050565b6000610f8b610f86607c5490565b612bfc565b905090565b610f98611c9c565b6001600160a01b0316336001600160a01b031614610fc85760405162461bcd60e51b8152600401610a0590614483565b6109a0612c32565b6000828152607360205260408120610f719083612c6f565b610ff0611c9c565b6001600160a01b0316336001600160a01b0316146110205760405162461bcd60e51b8152600401610a0590614483565b6000805b828110156110ed5783838281811061103e5761103e6146c0565b90506020020160208101906110539190614054565b6001600160a01b0381166000908152607b6020526040812054919350036110c057607c80546001810182556000919091527f9222cbf5d0ddc505a6f2f04716e22c226cee16a955fef88c618922096dae2fd00180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0382166000908152607b60205260409020439055806110e581614736565b915050611024565b5060005b607c5481101561121a57607c818154811061110e5761110e6146c0565b60009182526020808320909101546001600160a01b0316808352607b909152604090912054909250431115611208576001600160a01b0382166000908152607b6020526040812055607c80546111669060019061474f565b81548110611176576111766146c0565b600091825260209091200154607c80546001600160a01b0390921691839081106111a2576111a26146c0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550607c8054806111e1576111e1614762565b600082815260209020810160001990810180546001600160a01b03191690550190556110f1565b8061121281614736565b9150506110f1565b507f13d4eff010663e07d8228b8c8d1c4788eb5d5d58be5cce74fd3eca72402d86dc838360405161124c9291906147c1565b60405180910390a1505050565b7f5e5712e902fff5e704bc4d506ad976718319e019e9d2a872528a01a85db433e461128381611f6d565b600061129c61129736859003850185614823565b612c7b565b90506112b061129736859003850185614823565b8335600090815260796020526040902054146112de5760405162461bcd60e51b8152600401610a05906148bf565b82356000908152607a602052604090205460ff166113585760405162461bcd60e51b815260206004820152603160248201527f4d61696e636861696e4761746577617956323a20717565727920666f722061706044820152701c1c9bdd9959081dda5d1a191c985dd85b607a1b6064820152608401610a05565b82356000908152607a602052604090819020805460ff19169055517fd639511b37b3b002cca6cfe6bca0d833945a5af5a045578a0627fc43b79b2630906113a2908390869061493a565b60405180910390a160006113bc6080850160608601614054565b905060006113d2610120860161010087016149c7565b60018111156113e3576113e3614365565b036114aa5760006113fd36869003860161010087016149e4565b6001600160a01b0383166000908152603b60205260409020549091506114299061014087013590612d04565b6040820152600061144336879003870161010088016149e4565b604083015190915061145a9061014088013561474f565b604082015260745461147a908390339086906001600160a01b0316612d1e565b6114a361148d6060880160408901614054565b60745483919086906001600160a01b0316612d1e565b50506114e6565b6114e66114bd6060860160408701614054565b60745483906001600160a01b03166114de3689900389016101008a016149e4565b929190612d1e565b7f21e88e956aa3e086f6388e899965cef814688f99ad8bb29b08d396571016372d828560405161151792919061493a565b60405180910390a150505050565b60009182526072602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611558611c9c565b6001600160a01b0316336001600160a01b0316146115885760405162461bcd60e51b8152600401610a0590614483565b826115a55760405162461bcd60e51b8152600401610a05906144c5565b610a378484848461284c565b6060607c80548060200260200160405190810160405280929190818152602001828054801561160957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115eb575b5050505050905090565b60008061161e611c9c565b6001600160a01b0316336001600160a01b03161461164e5760405162461bcd60e51b8152600401610a0590614483565b6116588484612708565b90925090506116656127cd565b9250929050565b6000611677607c5490565b6037546116849190614a00565b6038546116919084614a00565b101592915050565b6116a1611c9c565b6001600160a01b0316336001600160a01b0316146116d15760405162461bcd60e51b8152600401610a0590614483565b826116ee5760405162461bcd60e51b8152600401610a05906144c5565b610a378484848461291c565b60408051808201909152600080825260208201526001600160a01b0382166000908152607860205260409081902081518083019092528054829060ff16600181111561174857611748614365565b600181111561175957611759614365565b815290546001600160a01b03610100909104811660209283015290820151919250166117d55760405162461bcd60e51b815260206004820152602560248201527f4d61696e636861696e4761746577617956323a20756e737570706f72746564206044820152643a37b5b2b760d91b6064820152608401610a05565b919050565b6000806117e5611c9c565b6001600160a01b0316336001600160a01b0316146118155760405162461bcd60e51b8152600401610a0590614483565b6116588484612648565b60008181526073602052604081206109c7906130f1565b60008281526072602052604090206001015461185181611f6d565b610acd8383611f99565b611863611c9c565b6001600160a01b0316336001600160a01b0316146118935760405162461bcd60e51b8152600401610a0590614483565b61099e816125f4565b60006118a7607c5490565b6001546118b49190614a00565b6002546116919084614a00565b6118c9611c9c565b6001600160a01b0316336001600160a01b0316146118f95760405162461bcd60e51b8152600401610a0590614483565b856119165760405162461bcd60e51b8152600401610a059061450f565b611924878787878787611d9a565b6119318787836000610e04565b61193e8787836001610e2a565b61194b8787836002610e50565b6119588787836003610e76565b50505050505050565b611969611c9c565b6001600160a01b0316336001600160a01b0316146119995760405162461bcd60e51b8152600401610a0590614483565b826119b65760405162461bcd60e51b8152600401610a05906144c5565b610a3784848484612a68565b60005460ff16156109a05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a05565b604080518082018252600080825260208201526074549184015190916001600160a01b031690611a37906130fb565b60208401516001600160a01b0316611ad7573484604001516040015114611a705760405162461bcd60e51b8152600401610a0590614a17565b611a79816116fa565b6040850151519092506001811115611a9357611a93614365565b82516001811115611aa657611aa6614365565b14611ac35760405162461bcd60e51b8152600401610a0590614a5a565b6001600160a01b0381166020850152611be4565b3415611af55760405162461bcd60e51b8152600401610a0590614a17565b611b0284602001516116fa565b6040850151519092506001811115611b1c57611b1c614365565b82516001811115611b2f57611b2f614365565b14611b4c5760405162461bcd60e51b8152600401610a0590614a5a565b60208401516040850151611b63918590309061319b565b83602001516001600160a01b0316816001600160a01b031603611be4576040848101518101519051632e1a7d4d60e01b815260048101919091526001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b158015611bcb57600080fd5b505af1158015611bdf573d6000803e3d6000fd5b505050505b6076805460009182611bf583614736565b9190505590506000611c1c858386602001516075548a6133d990949392919063ffffffff16565b90507fd7b25068d9dc8d00765254cfb7f5070f98d263c8d68931d937c7362fa738048b611c4882612c7b565b82604051611c57929190614aa4565b60405180910390a1505050505050565b60006001600160e01b03198216637965db0b60e01b14806109c757506301ffc9a760e01b6001600160e01b03198316146109c7565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b828114611ce95760405162461bcd60e51b8152600401610a05906144c5565b60005b83811015611d6457828282818110611d0657611d066146c0565b90506020020135603a6000878785818110611d2357611d236146c0565b9050602002016020810190611d389190614054565b6001600160a01b0316815260208101919091526040016000205580611d5c81614736565b915050611cec565b507f64557254143204d91ba2d95acb9fda1e5fea55f77efd028685765bc1e94dd4b5848484846040516115179493929190614b5c565b8483148015611da857508481145b611e055760405162461bcd60e51b815260206004820152602860248201527f4d61696e636861696e4761746577617956323a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b6064820152608401610a05565b60005b85811015611f3357848482818110611e2257611e226146c0565b9050602002016020810190611e379190614054565b60786000898985818110611e4d57611e4d6146c0565b9050602002016020810190611e629190614054565b6001600160a01b03908116825260208201929092526040016000208054610100600160a81b0319166101009390921692909202179055828282818110611eaa57611eaa6146c0565b9050602002016020810190611ebf91906149c7565b60786000898985818110611ed557611ed56146c0565b9050602002016020810190611eea9190614054565b6001600160a01b031681526020810191909152604001600020805460ff191660018381811115611f1c57611f1c614365565b021790555080611f2b81614736565b915050611e08565b507fa4f03cc9c0e0aeb5b71b4ec800702753f65748c2cf3064695ba8e8b46be70444868686868686604051611c5796959493929190614ba8565b61099e81336134ae565b611f8182826134ec565b6000828152607360205260409020610acd9082613572565b611fa38282613587565b6000828152607360205260409020610acd90826135ee565b611fc3613603565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008235610140840135826120286080870160608801614054565b905061204561204036889003880161010089016149e4565b6130fb565b600161205760408801602089016149c7565b600181111561206857612068614365565b146120c65760405162461bcd60e51b815260206004820152602860248201527f4d61696e636861696e4761746577617956323a20696e76616c696420726563656044820152671a5c1d081ada5b9960c21b6064820152608401610a05565b608086013546146121255760405162461bcd60e51b8152602060048201526024808201527f4d61696e636861696e4761746577617956323a20696e76616c696420636861696044820152631b881a5960e21b6064820152608401610a05565b600061213a6107e66080890160608a01614054565b905061214e610120880161010089016149c7565b600181111561215f5761215f614365565b8151600181111561217257612172614365565b1480156121a3575061218a60e0880160c08901614054565b6001600160a01b031681602001516001600160a01b0316145b6121bf5760405162461bcd60e51b8152600401610a05906148bf565b600084815260796020526040902054156122365760405162461bcd60e51b815260206004820152603260248201527f4d61696e636861696e4761746577617956323a20717565727920666f722070726044820152711bd8d95cdcd959081dda5d1a191c985dd85b60721b6064820152608401610a05565b600161224a61012089016101008a016149c7565b600181111561225b5761225b614365565b148061226e575061226c8284612b38565b155b6122d55760405162461bcd60e51b815260206004820152603260248201527f4d61696e636861696e4761746577617956323a2072656163686564206461696c6044820152711e481dda5d1a191c985dd85b081b1a5b5a5d60721b6064820152608401610a05565b60006122e9611297368a90038a018a614823565b905060006122f96077548361364c565b905060006123196123126101208c016101008d016149c7565b868861368d565b60408051606081018252600080825260208201819052918101829052919a50919250819081906000805b8e51811015612473578e818151811061235e5761235e6146c0565b6020908102919091018101518051818301516040808401518151600081529586018083528e905260ff9093169085015260608401526080830152935060019060a0016020604051602081039080840390855afa1580156123c2573d6000803e3d6000fd5b505050602060405103519450846001600160a01b0316846001600160a01b0316106124395760405162461bcd60e51b815260206004820152602160248201527f4d61696e636861696e4761746577617956323a20696e76616c6964206f7264656044820152603960f91b6064820152608401610a05565b84935061244585613714565b61244f9083614c20565b91508682106124615760019550612473565b8061246b81614736565b915050612343565b50846124e05760405162461bcd60e51b815260206004820152603660248201527f4d61696e636861696e4761746577617956323a20717565727920666f7220696e6044820152751cdd59999a58da595b9d081d9bdd19481dd95a59da1d60521b6064820152608401610a05565b50505060008981526079602052604090208590555050871561255b576000878152607a602052604090819020805460ff19166001179055517f89e52969465b1f1866fc5d46fd62de953962e9cb33552443cd999eba05bd20dc906125479085908d9061493a565b60405180910390a1505050505050506109c7565b6125658587613744565b6125a461257860608c0160408d01614054565b86607460009054906101000a90046001600160a01b03168d610100018036038101906114de91906149e4565b7f21e88e956aa3e086f6388e899965cef814688f99ad8bb29b08d396571016372d838b6040516125d592919061493a565b60405180910390a15050505050505092915050565b610b4c8282611f77565b607480546001600160a01b0319166001600160a01b0383169081179091556040519081527f9d2334c23be647e994f27a72c5eee42a43d5bdcfe15bb88e939103c2b114cbaf9060200160405180910390a150565b6000808284111561269b5760405162461bcd60e51b815260206004820152601c60248201527f4761746577617956323a20696e76616c6964207468726573686f6c64000000006044820152606401610a05565b505060018054600280549285905583905560048054919291849186919060006126c383614736565b9091555060408051868152602081018690527f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f891015b60405180910390a49250929050565b6000808284111561276b5760405162461bcd60e51b815260206004820152602760248201527f5769746864726177616c4c696d69746174696f6e3a20696e76616c69642074686044820152661c995cda1bdb1960ca1b6064820152608401610a05565b5050603780546038805492859055839055600480549192918491869190600061279383614736565b9091555060408051868152602081018690527f31312c97b89cc751b832d98fd459b967a2c3eef3b49757d1cf5ebaa12bb6eee191016126f9565b6002546037546127dd9190614a00565b6038546001546127ed9190614a00565b11156109a05760405162461bcd60e51b815260206004820152602860248201527f5769746864726177616c4c696d69746174696f6e3a20696e76616c6964207468604482015267726573686f6c647360c01b6064820152608401610a05565b82811461286b5760405162461bcd60e51b8152600401610a05906144c5565b60005b838110156128e657828282818110612888576128886146c0565b90506020020135603960008787858181106128a5576128a56146c0565b90506020020160208101906128ba9190614054565b6001600160a01b03168152602081019190915260400160002055806128de81614736565b91505061286e565b507f80bc635c452ae67f12f9b6f12ad4daa6dbbc04eeb9ebb87d354ce10c0e210dc0848484846040516115179493929190614b5c565b82811461293b5760405162461bcd60e51b8152600401610a05906144c5565b60005b83811015612a3257620f424083838381811061295c5761295c6146c0565b9050602002013511156129c25760405162461bcd60e51b815260206004820152602860248201527f5769746864726177616c4c696d69746174696f6e3a20696e76616c69642070656044820152677263656e7461676560c01b6064820152608401610a05565b8282828181106129d4576129d46146c0565b90506020020135603b60008787858181106129f1576129f16146c0565b9050602002016020810190612a069190614054565b6001600160a01b0316815260208101919091526040016000205580612a2a81614736565b91505061293e565b507fb05f5de88ae0294ebb6f67c5af2fcbbd593cc6bdfe543e2869794a4c8ce3ea50848484846040516115179493929190614b5c565b828114612a875760405162461bcd60e51b8152600401610a05906144c5565b60005b83811015612b0257828282818110612aa457612aa46146c0565b90506020020135603c6000878785818110612ac157612ac16146c0565b9050602002016020810190612ad69190614054565b6001600160a01b0316815260208101919091526040016000205580612afa81614736565b915050612a8a565b507fb5d2963614d72181b4df1f993d45b83edf42fa19710f0204217ba1b3e183bb73848484846040516115179493929190614b5c565b6001600160a01b0382166000908152603a60205260408120548210612b5f575060006109c7565b6000612b6e6201518042614c33565b6001600160a01b0385166000908152603e6020526040902054909150811115612bb45750506001600160a01b0382166000908152603c60205260409020548110156109c7565b6001600160a01b0384166000908152603d6020526040902054612bd8908490614c20565b6001600160a01b0385166000908152603c6020526040902054111591506109c79050565b6000600254600160025484600154612c149190614a00565b612c1e9190614c20565b612c28919061474f565b6109c79190614c33565b612c3a6119c2565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ff03390565b6000610f7183836137d4565b60007fb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea60001b82600001518360200151612cb885604001516137fe565b612cc586606001516137fe565b612cd28760800151613861565b604051602001612ce796959493929190614c55565b604051602081830303815290604052805190602001209050919050565b6000620f4240612d148385614a00565b610f719190614c33565b6000816001600160a01b0316836001600160a01b031603612dcd5760408086015190516001600160a01b0386169180156108fc02916000818181858888f19350505050612dc857816001600160a01b031663d0e30db086604001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612da457600080fd5b505af1158015612db8573d6000803e3d6000fd5b5050505050612dc88585856138a4565b6130ea565b600085516001811115612de257612de2614365565b03612f7a576040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e529190614c8f565b90508560400151811015612f6957836001600160a01b03166340c10f1930838960400151612e80919061474f565b6040516001600160a01b03909216602483015260448201526064016040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612ed49190614ccc565b6000604051808303816000865af19150503d8060008114612f11576040519150601f19603f3d011682016040523d82523d6000602084013e612f16565b606091505b50508092505081612f695760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a204552433230206d696e74696e67206661696c656400000000006044820152606401610a05565b612f748686866138a4565b506130ea565b600185516001811115612f8f57612f8f614365565b0361309857612fa383858760200151613946565b612dc857602085810151604080516001600160a01b038881166024830152604480830194909452825180830390940184526064909101825292820180516001600160e01b03166340c10f1960e01b17905251918516916130039190614ccc565b6000604051808303816000865af19150503d8060008114613040576040519150601f19603f3d011682016040523d82523d6000602084013e613045565b606091505b50508091505080612dc85760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e3a20455243373231206d696e74696e67206661696c6564000000006044820152606401610a05565b60405162461bcd60e51b815260206004820152602160248201527f546f6b656e3a20756e737570706f7274656420746f6b656e207374616e6461726044820152601960fa1b6064820152608401610a05565b5050505050565b60006109c7825490565b60008151600181111561311057613110614365565b148015613121575060008160400151115b801561312f57506020810151155b80613159575060018151600181111561314a5761314a614365565b14801561315957506040810151155b61099e5760405162461bcd60e51b8152602060048201526013602482015272546f6b656e3a20696e76616c696420696e666f60681b6044820152606401610a05565b6000606081865160018111156131b3576131b3614365565b036132905760408681015181516001600160a01b038881166024830152878116604483015260648083019390935283518083039093018352608490910183526020820180516001600160e01b03166323b872dd60e01b17905291519185169161321c9190614ccc565b6000604051808303816000865af19150503d8060008114613259576040519150601f19603f3d011682016040523d82523d6000602084013e61325e565b606091505b5090925090508180156132895750805115806132895750808060200190518101906132899190614ce8565b9150613356565b6001865160018111156132a5576132a5614365565b0361309857602086810151604080516001600160a01b0389811660248301528881166044830152606480830194909452825180830390940184526084909101825292820180516001600160e01b03166323b872dd60e01b179052519185169161330e9190614ccc565b6000604051808303816000865af19150503d806000811461334b576040519150601f19603f3d011682016040523d82523d6000602084013e613350565b606091505b50909250505b81610aa057613364866139f1565b613378866001600160a01b03166014613a5e565b61338c866001600160a01b03166014613a5e565b6133a0866001600160a01b03166014613a5e565b6040516020016133b39493929190614d0a565b60408051601f198184030181529082905262461bcd60e51b8252610a0591600401614dc3565b6134496040805160a08101825260008082526020808301829052835160608082018652838252818301849052818601849052848601919091528451808201865283815280830184905280860184905281850152845190810185528281529081018290529283015290608082015290565b83815260006020820181905250604080820180516001600160a01b039788169052602080890151825190891690820152905146908301528751606084018051918916909152805195909716940193909352935182015292909201516080820152919050565b6134b88282611525565b610b4c576134d0816001600160a01b03166014613a5e565b6134db836020613a5e565b6040516020016133b3929190614df6565b6134f68282611525565b610b4c5760008281526072602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561352e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f71836001600160a01b038416613bfa565b6135918282611525565b15610b4c5760008281526072602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f71836001600160a01b038416613c49565b60005460ff166109a05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a05565b6040805161190160f01b6020808301919091526022820185905260428083018590528351808403909101815260629092019092528051910120600090610f71565b600080600061369b607c5490565b90506136a681612bfc565b925060008660018111156136bc576136bc614365565b0361370b576001600160a01b03851660009081526039602052604090205484106136ec576136e981613d3c565b92505b6001600160a01b0385166000908152603a602052604090205484101591505b50935093915050565b6001600160a01b0381166000908152607b602052604081205461373857600061373b565b60015b60ff1692915050565b60006137536201518042614c33565b6001600160a01b0384166000908152603e60205260409020549091508111156137a2576001600160a01b03929092166000908152603e6020908152604080832094909455603d90529190912055565b6001600160a01b0383166000908152603d6020526040812080548492906137ca908490614c20565b9091555050505050565b60008260000182815481106137eb576137eb6146c0565b9060005260206000200154905092915050565b80516020808301516040808501519051600094612ce7947f353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e87649491939192019384526001600160a01b03928316602085015291166040830152606082015260800190565b80516020808301516040808501519051600094612ce7947f1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d949193919201614e6b565b600080845160018111156138ba576138ba614365565b036138d5576138ce82848660400151613d54565b90506138fe565b6001845160018111156138ea576138ea614365565b03613098576138ce82848660200151613946565b80610a375761390c846139f1565b613920846001600160a01b03166014613a5e565b613934846001600160a01b03166014613a5e565b6040516020016133b393929190614e96565b604080513060248201526001600160a01b038481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928616916139a491614ccc565b6000604051808303816000865af19150503d80600081146139e1576040519150601f19603f3d011682016040523d82523d6000602084013e6139e6565b606091505b509095945050505050565b6060613a1c82600001516001811115613a0c57613a0c614365565b6001600160a01b03166001613a5e565b613a298360200151613e27565b613a368460400151613e27565b604051602001613a4893929190614f27565b6040516020818303038152906040529050919050565b60606000613a6d836002614a00565b613a78906002614c20565b67ffffffffffffffff811115613a9057613a90614558565b6040519080825280601f01601f191660200182016040528015613aba576020820181803683370190505b509050600360fc1b81600081518110613ad557613ad56146c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b0457613b046146c0565b60200101906001600160f81b031916908160001a9053506000613b28846002614a00565b613b33906001614c20565b90505b6001811115613bab576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b6757613b676146c0565b1a60f81b828281518110613b7d57613b7d6146c0565b60200101906001600160f81b031916908160001a90535060049490941c93613ba481614fa5565b9050613b36565b508315610f715760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a05565b6000818152600183016020526040812054613c41575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109c7565b5060006109c7565b60008181526001830160205260408120548015613d32576000613c6d60018361474f565b8554909150600090613c819060019061474f565b9050818114613ce6576000866000018281548110613ca157613ca16146c0565b9060005260206000200154905080876000018481548110613cc457613cc46146c0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613cf757613cf7614762565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109c7565b60009150506109c7565b6000603854600160385484603754612c149190614a00565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009260609290871691613db19190614ccc565b6000604051808303816000865af19150503d8060008114613dee576040519150601f19603f3d011682016040523d82523d6000602084013e613df3565b606091505b509092509050818015613e1e575080511580613e1e575080806020019051810190613e1e9190614ce8565b95945050505050565b606081600003613e515750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115613e745780613e6581614736565b915050600882901c9150613e55565b610c168482613a5e565b6040805160608101825260008082526020820152908101613eba6040805160608101909152806000815260200160008152602001600081525090565b905290565b600060208284031215613ed157600080fd5b81356001600160e01b031981168114610f7157600080fd5b60008083601f840112613efb57600080fd5b50813567ffffffffffffffff811115613f1357600080fd5b6020830191508360208260051b850101111561166557600080fd5b60008060008060408587031215613f4457600080fd5b843567ffffffffffffffff80821115613f5c57600080fd5b613f6888838901613ee9565b90965094506020870135915080821115613f8157600080fd5b50613f8e87828801613ee9565b95989497509550505050565b60008060008060008060608789031215613fb357600080fd5b863567ffffffffffffffff80821115613fcb57600080fd5b613fd78a838b01613ee9565b90985096506020890135915080821115613ff057600080fd5b613ffc8a838b01613ee9565b9096509450604089013591508082111561401557600080fd5b5061402289828a01613ee9565b979a9699509497509295939492505050565b6001600160a01b038116811461099e57600080fd5b80356117d581614034565b60006020828403121561406657600080fd5b8135610f7181614034565b60006020828403121561408357600080fd5b5035919050565b6000806040838503121561409d57600080fd5b8235915060208301356140af81614034565b809150509250929050565b600060a082840312156140cc57600080fd5b50919050565b600061016082840312156140cc57600080fd5b600080600061018084860312156140fb57600080fd5b61410585856140d2565b925061016084013567ffffffffffffffff8082111561412357600080fd5b818601915086601f83011261413757600080fd5b81358181111561414657600080fd5b87602060608302850101111561415b57600080fd5b6020830194508093505050509250925092565b80606081018310156109c757600080fd5b80608081018310156109c757600080fd5b6000806000806000806000806000806101208b8d0312156141b057600080fd5b6141b98b614049565b99506141c760208c01614049565b985060408b0135975060608b0135965060808b0135955060a08b0135945060c08b013567ffffffffffffffff8082111561420057600080fd5b61420c8e838f0161416e565b955060e08d013591508082111561422257600080fd5b61422e8e838f0161417f565b94506101008d013591508082111561424557600080fd5b506142528d828e01613ee9565b915080935050809150509295989b9194979a5092959850565b6000806040838503121561427e57600080fd5b823561428981614034565b946020939093013593505050565b600080604083850312156142aa57600080fd5b50508035926020909101359150565b600080602083850312156142cc57600080fd5b823567ffffffffffffffff8111156142e357600080fd5b6142ef85828601613ee9565b90969095509350505050565b6000610160828403121561430e57600080fd5b610f7183836140d2565b6020808252825182820181905260009190848201906040850190845b818110156143595783516001600160a01b031683529284019291840191600101614334565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6002811061099e57634e487b7160e01b600052602160045260246000fd5b815160408201906143a98161437b565b82526020928301516001600160a01b0316929091019190915290565b60008060008060008060006080888a0312156143e057600080fd5b873567ffffffffffffffff808211156143f857600080fd5b6144048b838c01613ee9565b909950975060208a013591508082111561441d57600080fd5b6144298b838c01613ee9565b909750955060408a013591508082111561444257600080fd5b61444e8b838c01613ee9565b909550935060608a013591508082111561446757600080fd5b506144748a828b0161417f565b91505092959891949750929550565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b6020808252602a908201527f5769746864726177616c4c696d69746174696f6e3a20696e76616c69642061726040820152690e4c2f240d8cadccee8d60b31b606082015260800190565b60208082526029908201527f4d61696e636861696e4761746577617956323a20717565727920666f7220656d60408201526870747920617272617960b81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561459f57634e487b7160e01b600052604160045260246000fd5b60405290565b6002811061099e57600080fd5b6000606082840312156145c457600080fd5b6145cc61456e565b905081356145d9816145a5565b80825250602082013560208201526040820135604082015292915050565b600060a0828403121561460957600080fd5b61461161456e565b823561461c81614034565b8152602083013561462c81614034565b602082015261463e84604085016145b2565b60408201529392505050565b60006060828403121561465c57600080fd5b6040516060810181811067ffffffffffffffff8211171561468d57634e487b7160e01b600052604160045260246000fd5b604052823560ff811681146146a157600080fd5b8152602083810135908201526040928301359281019290925250919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126146ed57600080fd5b83018035915067ffffffffffffffff82111561470857600080fd5b6020019150600581901b360382131561166557600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161474857614748614720565b5060010190565b818103818111156109c7576109c7614720565b634e487b7160e01b600052603160045260246000fd5b8183526000602080850194508260005b858110156147b657813561479b81614034565b6001600160a01b031687529582019590820190600101614788565b509495945050505050565b602081526000610c16602083018486614778565b6000606082840312156147e757600080fd5b6147ef61456e565b905081356147fc81614034565b8152602082013561480c81614034565b806020830152506040820135604082015292915050565b6000610160828403121561483657600080fd5b60405160a0810181811067ffffffffffffffff8211171561486757634e487b7160e01b600052604160045260246000fd5b60405282358152602083013561487c816145a5565b602082015261488e84604085016147d5565b60408201526148a08460a085016147d5565b60608201526148b38461010085016145b2565b60808201529392505050565b60208082526023908201527f4d61696e636861696e4761746577617956323a20696e76616c696420726563656040820152621a5c1d60ea1b606082015260800190565b803561490d81614034565b6001600160a01b03908116835260208201359061492982614034565b166020830152604090810135910152565b60006101808201905083825282356020830152602083013561495b816145a5565b6149648161437b565b8060408401525061497b6060830160408501614902565b61498b60c0830160a08501614902565b61012061010084013561499d816145a5565b6149a68161437b565b81840152830135610140808401919091529092013561016090910152919050565b6000602082840312156149d957600080fd5b8135610f71816145a5565b6000606082840312156149f657600080fd5b610f7183836145b2565b80820281158282048414176109c7576109c7614720565b60208082526023908201527f4d61696e636861696e4761746577617956323a20696e76616c69642072657175604082015262195cdd60ea1b606082015260800190565b6020808252602a908201527f4d61696e636861696e4761746577617956323a20696e76616c696420746f6b656040820152691b881cdd185b99185c9960b21b606082015260800190565b600061018082019050838252825160208301526020830151614ac58161437b565b6040838101919091528381015180516001600160a01b03908116606086015260208201511660808501529081015160a084015250606083015180516001600160a01b0390811660c085015260208201511660e084015260408101516101008401525060808301518051614b378161437b565b6101208401526020810151610140840152604001516101609092019190915292915050565b604081526000614b70604083018688614778565b82810360208401528381526001600160fb1b03841115614b8f57600080fd5b8360051b80866020840137016020019695505050505050565b606081526000614bbc60608301888a614778565b602083820381850152614bd082888a614778565b8481036040860152858152869250810160005b86811015614c11578335614bf6816145a5565b614bff8161437b565b82529282019290820190600101614be3565b509a9950505050505050505050565b808201808211156109c7576109c7614720565b600082614c5057634e487b7160e01b600052601260045260246000fd5b500490565b8681526020810186905260c08101614c6c8661437b565b8560408301528460608301528360808301528260a0830152979650505050505050565b600060208284031215614ca157600080fd5b5051919050565b60005b83811015614cc3578181015183820152602001614cab565b50506000910152565b60008251614cde818460208701614ca8565b9190910192915050565b600060208284031215614cfa57600080fd5b81518015158114610f7157600080fd5b7f546f6b656e3a20636f756c64206e6f74207472616e73666572200000000000008152600085516020614d4382601a8601838b01614ca8565b65010333937b6960d51b601a928501928301528651614d6781838501848b01614ca8565b630103a37960e51b9201818101929092528551614d8a8160248501898501614ca8565b660103a37b5b2b7160cd1b602493909101928301528451614db181602b8501848901614ca8565b91909101602b01979650505050505050565b6020815260008251806020840152614de2816040850160208701614ca8565b601f01601f19169190910160400192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e2e816017850160208801614ca8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614e5f816028840160208801614ca8565b01602801949350505050565b84815260808101614e7b8561437b565b84602083015283604083015282606083015295945050505050565b7f546f6b656e3a20636f756c64206e6f74207472616e7366657220000000000000815260008451614ece81601a850160208901614ca8565b630103a37960e51b601a918401918201528451614ef281601e840160208901614ca8565b660103a37b5b2b7160cd1b601e92909101918201528351614f1a816025840160208801614ca8565b0160250195945050505050565b690a8ded6cadc92dcccde560b31b815260008451614f4c81600a850160208901614ca8565b8083019050600b60fa1b80600a8301528551614f6f81600b850160208a01614ca8565b600b9201918201528351614f8a81600c840160208801614ca8565b602960f81b600c9290910191820152600d0195945050505050565b600081614fb457614fb4614720565b50600019019056fea26469706673582212207e51a6de127cdfd84db2c7836d5277334eab2eb05bdf39811127a9a78544c9bf64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102cd5760003560e01c8063901d627711610175578063b1d08a03116100dc578063d547741f11610095578063dafae4081161006f578063dafae408146108ea578063dff525e11461090a578063e400327c1461092a578063e75235b81461094a576102dc565b8063d547741f1461087d578063d55ed1031461089d578063d64af2a6146108ca576102dc565b8063b1d08a031461079e578063b2975794146107cb578063b9c36209146107f8578063ca15c87314610818578063cdb6744414610838578063d19773d214610850576102dc565b8063a217fddf1161012e578063a217fddf14610706578063a3912ec8146102da578063ab7965661461071b578063ac78dfe814610748578063affed0e014610768578063b1a2567e1461077e576102dc565b8063901d62771461062f5780639157921c1461064f57806391d148541461066f57806393c5678f1461068f5780639b19dbfd146106af5780639dcc4da3146106d1576102dc565b80633f4ba83a116102345780635c975abb116101ed5780637de5dedd116101c75780637de5dedd146105b15780638456cb59146105c65780638f34e347146105db5780639010d07c1461060f576102dc565b80635c975abb1461054c5780636932be98146105645780636c1ce67014610591576102dc565b80633f4ba83a146104945780634b14557e146104a95780634d0d6673146104bc5780634d493f4e146104dc578063504af48c1461050c57806359122f6b1461051f576102dc565b8063248a9ca311610286578063248a9ca3146103e25780632dfdf0b5146104125780632f2ff15d14610428578063302d12db146104485780633644e5151461045f57806336568abe14610474576102dc565b806301ffc9a7146102e457806317ce2dd41461031957806317fcb39b1461033d5780631a8e55b0146103755780631b6e7594146103955780631d4a7210146103b5576102dc565b366102dc576102da610962565b005b6102da610962565b3480156102f057600080fd5b506103046102ff366004613ebf565b6109a2565b60405190151581526020015b60405180910390f35b34801561032557600080fd5b5061032f60755481565b604051908152602001610310565b34801561034957600080fd5b5060745461035d906001600160a01b031681565b6040516001600160a01b039091168152602001610310565b34801561038157600080fd5b506102da610390366004613f2e565b6109cd565b3480156103a157600080fd5b506102da6103b0366004613f9a565b610a3d565b3480156103c157600080fd5b5061032f6103d0366004614054565b603e6020526000908152604090205481565b3480156103ee57600080fd5b5061032f6103fd366004614071565b60009081526072602052604090206001015490565b34801561041e57600080fd5b5061032f60765481565b34801561043457600080fd5b506102da61044336600461408a565b610aa8565b34801561045457600080fd5b5061032f620f424081565b34801561046b57600080fd5b5060775461032f565b34801561048057600080fd5b506102da61048f36600461408a565b610ad2565b3480156104a057600080fd5b506102da610b50565b6102da6104b73660046140ba565b610b90565b3480156104c857600080fd5b506103046104d73660046140e5565b610bb0565b3480156104e857600080fd5b506103046104f7366004614071565b607a6020526000908152604090205460ff1681565b6102da61051a366004614190565b610c1e565b34801561052b57600080fd5b5061032f61053a366004614054565b603a6020526000908152604090205481565b34801561055857600080fd5b5060005460ff16610304565b34801561057057600080fd5b5061032f61057f366004614071565b60796020526000908152604090205481565b34801561059d57600080fd5b506103046105ac36600461426b565b610f65565b3480156105bd57600080fd5b5061032f610f78565b3480156105d257600080fd5b506102da610f90565b3480156105e757600080fd5b5061032f7f5e5712e902fff5e704bc4d506ad976718319e019e9d2a872528a01a85db433e481565b34801561061b57600080fd5b5061035d61062a366004614297565b610fd0565b34801561063b57600080fd5b506102da61064a3660046142b9565b610fe8565b34801561065b57600080fd5b506102da61066a3660046142fb565b611259565b34801561067b57600080fd5b5061030461068a36600461408a565b611525565b34801561069b57600080fd5b506102da6106aa366004613f2e565b611550565b3480156106bb57600080fd5b506106c46115b1565b6040516103109190614318565b3480156106dd57600080fd5b506106f16106ec366004614297565b611613565b60408051928352602083019190915201610310565b34801561071257600080fd5b5061032f600081565b34801561072757600080fd5b5061032f610736366004614054565b603c6020526000908152604090205481565b34801561075457600080fd5b50610304610763366004614071565b61166c565b34801561077457600080fd5b5061032f60045481565b34801561078a57600080fd5b506102da610799366004613f2e565b611699565b3480156107aa57600080fd5b5061032f6107b9366004614054565b60396020526000908152604090205481565b3480156107d757600080fd5b506107eb6107e6366004614054565b6116fa565b6040516103109190614399565b34801561080457600080fd5b506106f1610813366004614297565b6117da565b34801561082457600080fd5b5061032f610833366004614071565b61181f565b34801561084457600080fd5b506037546038546106f1565b34801561085c57600080fd5b5061032f61086b366004614054565b603b6020526000908152604090205481565b34801561088957600080fd5b506102da61089836600461408a565b611836565b3480156108a957600080fd5b5061032f6108b8366004614054565b603d6020526000908152604090205481565b3480156108d657600080fd5b506102da6108e5366004614054565b61185b565b3480156108f657600080fd5b50610304610905366004614071565b61189c565b34801561091657600080fd5b506102da6109253660046143c5565b6118c1565b34801561093657600080fd5b506102da610945366004613f2e565b611961565b34801561095657600080fd5b506001546002546106f1565b61096a6119c2565b6074546001600160a01b031633146109a057610984613e7e565b33815260408082015134910152805161099e908290611a08565b505b565b60006001600160e01b03198216635a05180f60e01b14806109c757506109c782611c67565b92915050565b6109d5611c9c565b6001600160a01b0316336001600160a01b031614610a0e5760405162461bcd60e51b8152600401610a0590614483565b60405180910390fd5b82610a2b5760405162461bcd60e51b8152600401610a05906144c5565b610a3784848484611cca565b50505050565b610a45611c9c565b6001600160a01b0316336001600160a01b031614610a755760405162461bcd60e51b8152600401610a0590614483565b84610a925760405162461bcd60e51b8152600401610a059061450f565b610aa0868686868686611d9a565b505050505050565b600082815260726020526040902060010154610ac381611f6d565b610acd8383611f77565b505050565b6001600160a01b0381163314610b425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a05565b610b4c8282611f99565b5050565b610b58611c9c565b6001600160a01b0316336001600160a01b031614610b885760405162461bcd60e51b8152600401610a0590614483565b6109a0611fbb565b610b986119c2565b61099e610baa368390038301836145f7565b33611a08565b6000610bba6119c2565b610c16848484808060200260200160405190810160405280939291908181526020016000905b82821015610c0c57610bfd6060830286013681900381019061464a565b81526020019060010190610be0565b505050505061200d565b949350505050565b607154610100900460ff1615808015610c3e5750607154600160ff909116105b80610c585750303b158015610c58575060715460ff166001145b610cbb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a05565b6071805460ff191660011790558015610cde576071805461ff0019166101001790555b610ce960008c6125ea565b6075899055610cf78a6125f4565b610d9e604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f159f52c1e3a2b6a6aad3950adf713516211484e0516dad685ea662a094b7c43b918101919091527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a560608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120607755565b610da88887612648565b5050610db48787612708565b5050610dbe6127cd565b6000610dca86806146d6565b90501115610e8b57610df3610ddf86806146d6565b610dec60208901896146d6565b8787611d9a565b610e19610e0086806146d6565b8660005b602002810190610e1491906146d6565b61284c565b610e3f610e2686806146d6565b8660015b602002810190610e3a91906146d6565b611cca565b610e65610e4c86806146d6565b8660025b602002810190610e6091906146d6565b61291c565b610e8b610e7286806146d6565b8660035b602002810190610e8691906146d6565b612a68565b60005b610e9b60408701876146d6565b9050811015610f1157610eff7f5e5712e902fff5e704bc4d506ad976718319e019e9d2a872528a01a85db433e4610ed560408901896146d6565b84818110610ee557610ee56146c0565b9050602002016020810190610efa9190614054565b611f77565b80610f0981614736565b915050610e8e565b508015610f58576071805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6000610f718383612b38565b9392505050565b6000610f8b610f86607c5490565b612bfc565b905090565b610f98611c9c565b6001600160a01b0316336001600160a01b031614610fc85760405162461bcd60e51b8152600401610a0590614483565b6109a0612c32565b6000828152607360205260408120610f719083612c6f565b610ff0611c9c565b6001600160a01b0316336001600160a01b0316146110205760405162461bcd60e51b8152600401610a0590614483565b6000805b828110156110ed5783838281811061103e5761103e6146c0565b90506020020160208101906110539190614054565b6001600160a01b0381166000908152607b6020526040812054919350036110c057607c80546001810182556000919091527f9222cbf5d0ddc505a6f2f04716e22c226cee16a955fef88c618922096dae2fd00180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0382166000908152607b60205260409020439055806110e581614736565b915050611024565b5060005b607c5481101561121a57607c818154811061110e5761110e6146c0565b60009182526020808320909101546001600160a01b0316808352607b909152604090912054909250431115611208576001600160a01b0382166000908152607b6020526040812055607c80546111669060019061474f565b81548110611176576111766146c0565b600091825260209091200154607c80546001600160a01b0390921691839081106111a2576111a26146c0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550607c8054806111e1576111e1614762565b600082815260209020810160001990810180546001600160a01b03191690550190556110f1565b8061121281614736565b9150506110f1565b507f13d4eff010663e07d8228b8c8d1c4788eb5d5d58be5cce74fd3eca72402d86dc838360405161124c9291906147c1565b60405180910390a1505050565b7f5e5712e902fff5e704bc4d506ad976718319e019e9d2a872528a01a85db433e461128381611f6d565b600061129c61129736859003850185614823565b612c7b565b90506112b061129736859003850185614823565b8335600090815260796020526040902054146112de5760405162461bcd60e51b8152600401610a05906148bf565b82356000908152607a602052604090205460ff166113585760405162461bcd60e51b815260206004820152603160248201527f4d61696e636861696e4761746577617956323a20717565727920666f722061706044820152701c1c9bdd9959081dda5d1a191c985dd85b607a1b6064820152608401610a05565b82356000908152607a602052604090819020805460ff19169055517fd639511b37b3b002cca6cfe6bca0d833945a5af5a045578a0627fc43b79b2630906113a2908390869061493a565b60405180910390a160006113bc6080850160608601614054565b905060006113d2610120860161010087016149c7565b60018111156113e3576113e3614365565b036114aa5760006113fd36869003860161010087016149e4565b6001600160a01b0383166000908152603b60205260409020549091506114299061014087013590612d04565b6040820152600061144336879003870161010088016149e4565b604083015190915061145a9061014088013561474f565b604082015260745461147a908390339086906001600160a01b0316612d1e565b6114a361148d6060880160408901614054565b60745483919086906001600160a01b0316612d1e565b50506114e6565b6114e66114bd6060860160408701614054565b60745483906001600160a01b03166114de3689900389016101008a016149e4565b929190612d1e565b7f21e88e956aa3e086f6388e899965cef814688f99ad8bb29b08d396571016372d828560405161151792919061493a565b60405180910390a150505050565b60009182526072602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611558611c9c565b6001600160a01b0316336001600160a01b0316146115885760405162461bcd60e51b8152600401610a0590614483565b826115a55760405162461bcd60e51b8152600401610a05906144c5565b610a378484848461284c565b6060607c80548060200260200160405190810160405280929190818152602001828054801561160957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115eb575b5050505050905090565b60008061161e611c9c565b6001600160a01b0316336001600160a01b03161461164e5760405162461bcd60e51b8152600401610a0590614483565b6116588484612708565b90925090506116656127cd565b9250929050565b6000611677607c5490565b6037546116849190614a00565b6038546116919084614a00565b101592915050565b6116a1611c9c565b6001600160a01b0316336001600160a01b0316146116d15760405162461bcd60e51b8152600401610a0590614483565b826116ee5760405162461bcd60e51b8152600401610a05906144c5565b610a378484848461291c565b60408051808201909152600080825260208201526001600160a01b0382166000908152607860205260409081902081518083019092528054829060ff16600181111561174857611748614365565b600181111561175957611759614365565b815290546001600160a01b03610100909104811660209283015290820151919250166117d55760405162461bcd60e51b815260206004820152602560248201527f4d61696e636861696e4761746577617956323a20756e737570706f72746564206044820152643a37b5b2b760d91b6064820152608401610a05565b919050565b6000806117e5611c9c565b6001600160a01b0316336001600160a01b0316146118155760405162461bcd60e51b8152600401610a0590614483565b6116588484612648565b60008181526073602052604081206109c7906130f1565b60008281526072602052604090206001015461185181611f6d565b610acd8383611f99565b611863611c9c565b6001600160a01b0316336001600160a01b0316146118935760405162461bcd60e51b8152600401610a0590614483565b61099e816125f4565b60006118a7607c5490565b6001546118b49190614a00565b6002546116919084614a00565b6118c9611c9c565b6001600160a01b0316336001600160a01b0316146118f95760405162461bcd60e51b8152600401610a0590614483565b856119165760405162461bcd60e51b8152600401610a059061450f565b611924878787878787611d9a565b6119318787836000610e04565b61193e8787836001610e2a565b61194b8787836002610e50565b6119588787836003610e76565b50505050505050565b611969611c9c565b6001600160a01b0316336001600160a01b0316146119995760405162461bcd60e51b8152600401610a0590614483565b826119b65760405162461bcd60e51b8152600401610a05906144c5565b610a3784848484612a68565b60005460ff16156109a05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a05565b604080518082018252600080825260208201526074549184015190916001600160a01b031690611a37906130fb565b60208401516001600160a01b0316611ad7573484604001516040015114611a705760405162461bcd60e51b8152600401610a0590614a17565b611a79816116fa565b6040850151519092506001811115611a9357611a93614365565b82516001811115611aa657611aa6614365565b14611ac35760405162461bcd60e51b8152600401610a0590614a5a565b6001600160a01b0381166020850152611be4565b3415611af55760405162461bcd60e51b8152600401610a0590614a17565b611b0284602001516116fa565b6040850151519092506001811115611b1c57611b1c614365565b82516001811115611b2f57611b2f614365565b14611b4c5760405162461bcd60e51b8152600401610a0590614a5a565b60208401516040850151611b63918590309061319b565b83602001516001600160a01b0316816001600160a01b031603611be4576040848101518101519051632e1a7d4d60e01b815260048101919091526001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b158015611bcb57600080fd5b505af1158015611bdf573d6000803e3d6000fd5b505050505b6076805460009182611bf583614736565b9190505590506000611c1c858386602001516075548a6133d990949392919063ffffffff16565b90507fd7b25068d9dc8d00765254cfb7f5070f98d263c8d68931d937c7362fa738048b611c4882612c7b565b82604051611c57929190614aa4565b60405180910390a1505050505050565b60006001600160e01b03198216637965db0b60e01b14806109c757506301ffc9a760e01b6001600160e01b03198316146109c7565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b828114611ce95760405162461bcd60e51b8152600401610a05906144c5565b60005b83811015611d6457828282818110611d0657611d066146c0565b90506020020135603a6000878785818110611d2357611d236146c0565b9050602002016020810190611d389190614054565b6001600160a01b0316815260208101919091526040016000205580611d5c81614736565b915050611cec565b507f64557254143204d91ba2d95acb9fda1e5fea55f77efd028685765bc1e94dd4b5848484846040516115179493929190614b5c565b8483148015611da857508481145b611e055760405162461bcd60e51b815260206004820152602860248201527f4d61696e636861696e4761746577617956323a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b6064820152608401610a05565b60005b85811015611f3357848482818110611e2257611e226146c0565b9050602002016020810190611e379190614054565b60786000898985818110611e4d57611e4d6146c0565b9050602002016020810190611e629190614054565b6001600160a01b03908116825260208201929092526040016000208054610100600160a81b0319166101009390921692909202179055828282818110611eaa57611eaa6146c0565b9050602002016020810190611ebf91906149c7565b60786000898985818110611ed557611ed56146c0565b9050602002016020810190611eea9190614054565b6001600160a01b031681526020810191909152604001600020805460ff191660018381811115611f1c57611f1c614365565b021790555080611f2b81614736565b915050611e08565b507fa4f03cc9c0e0aeb5b71b4ec800702753f65748c2cf3064695ba8e8b46be70444868686868686604051611c5796959493929190614ba8565b61099e81336134ae565b611f8182826134ec565b6000828152607360205260409020610acd9082613572565b611fa38282613587565b6000828152607360205260409020610acd90826135ee565b611fc3613603565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008235610140840135826120286080870160608801614054565b905061204561204036889003880161010089016149e4565b6130fb565b600161205760408801602089016149c7565b600181111561206857612068614365565b146120c65760405162461bcd60e51b815260206004820152602860248201527f4d61696e636861696e4761746577617956323a20696e76616c696420726563656044820152671a5c1d081ada5b9960c21b6064820152608401610a05565b608086013546146121255760405162461bcd60e51b8152602060048201526024808201527f4d61696e636861696e4761746577617956323a20696e76616c696420636861696044820152631b881a5960e21b6064820152608401610a05565b600061213a6107e66080890160608a01614054565b905061214e610120880161010089016149c7565b600181111561215f5761215f614365565b8151600181111561217257612172614365565b1480156121a3575061218a60e0880160c08901614054565b6001600160a01b031681602001516001600160a01b0316145b6121bf5760405162461bcd60e51b8152600401610a05906148bf565b600084815260796020526040902054156122365760405162461bcd60e51b815260206004820152603260248201527f4d61696e636861696e4761746577617956323a20717565727920666f722070726044820152711bd8d95cdcd959081dda5d1a191c985dd85b60721b6064820152608401610a05565b600161224a61012089016101008a016149c7565b600181111561225b5761225b614365565b148061226e575061226c8284612b38565b155b6122d55760405162461bcd60e51b815260206004820152603260248201527f4d61696e636861696e4761746577617956323a2072656163686564206461696c6044820152711e481dda5d1a191c985dd85b081b1a5b5a5d60721b6064820152608401610a05565b60006122e9611297368a90038a018a614823565b905060006122f96077548361364c565b905060006123196123126101208c016101008d016149c7565b868861368d565b60408051606081018252600080825260208201819052918101829052919a50919250819081906000805b8e51811015612473578e818151811061235e5761235e6146c0565b6020908102919091018101518051818301516040808401518151600081529586018083528e905260ff9093169085015260608401526080830152935060019060a0016020604051602081039080840390855afa1580156123c2573d6000803e3d6000fd5b505050602060405103519450846001600160a01b0316846001600160a01b0316106124395760405162461bcd60e51b815260206004820152602160248201527f4d61696e636861696e4761746577617956323a20696e76616c6964206f7264656044820152603960f91b6064820152608401610a05565b84935061244585613714565b61244f9083614c20565b91508682106124615760019550612473565b8061246b81614736565b915050612343565b50846124e05760405162461bcd60e51b815260206004820152603660248201527f4d61696e636861696e4761746577617956323a20717565727920666f7220696e6044820152751cdd59999a58da595b9d081d9bdd19481dd95a59da1d60521b6064820152608401610a05565b50505060008981526079602052604090208590555050871561255b576000878152607a602052604090819020805460ff19166001179055517f89e52969465b1f1866fc5d46fd62de953962e9cb33552443cd999eba05bd20dc906125479085908d9061493a565b60405180910390a1505050505050506109c7565b6125658587613744565b6125a461257860608c0160408d01614054565b86607460009054906101000a90046001600160a01b03168d610100018036038101906114de91906149e4565b7f21e88e956aa3e086f6388e899965cef814688f99ad8bb29b08d396571016372d838b6040516125d592919061493a565b60405180910390a15050505050505092915050565b610b4c8282611f77565b607480546001600160a01b0319166001600160a01b0383169081179091556040519081527f9d2334c23be647e994f27a72c5eee42a43d5bdcfe15bb88e939103c2b114cbaf9060200160405180910390a150565b6000808284111561269b5760405162461bcd60e51b815260206004820152601c60248201527f4761746577617956323a20696e76616c6964207468726573686f6c64000000006044820152606401610a05565b505060018054600280549285905583905560048054919291849186919060006126c383614736565b9091555060408051868152602081018690527f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f891015b60405180910390a49250929050565b6000808284111561276b5760405162461bcd60e51b815260206004820152602760248201527f5769746864726177616c4c696d69746174696f6e3a20696e76616c69642074686044820152661c995cda1bdb1960ca1b6064820152608401610a05565b5050603780546038805492859055839055600480549192918491869190600061279383614736565b9091555060408051868152602081018690527f31312c97b89cc751b832d98fd459b967a2c3eef3b49757d1cf5ebaa12bb6eee191016126f9565b6002546037546127dd9190614a00565b6038546001546127ed9190614a00565b11156109a05760405162461bcd60e51b815260206004820152602860248201527f5769746864726177616c4c696d69746174696f6e3a20696e76616c6964207468604482015267726573686f6c647360c01b6064820152608401610a05565b82811461286b5760405162461bcd60e51b8152600401610a05906144c5565b60005b838110156128e657828282818110612888576128886146c0565b90506020020135603960008787858181106128a5576128a56146c0565b90506020020160208101906128ba9190614054565b6001600160a01b03168152602081019190915260400160002055806128de81614736565b91505061286e565b507f80bc635c452ae67f12f9b6f12ad4daa6dbbc04eeb9ebb87d354ce10c0e210dc0848484846040516115179493929190614b5c565b82811461293b5760405162461bcd60e51b8152600401610a05906144c5565b60005b83811015612a3257620f424083838381811061295c5761295c6146c0565b9050602002013511156129c25760405162461bcd60e51b815260206004820152602860248201527f5769746864726177616c4c696d69746174696f6e3a20696e76616c69642070656044820152677263656e7461676560c01b6064820152608401610a05565b8282828181106129d4576129d46146c0565b90506020020135603b60008787858181106129f1576129f16146c0565b9050602002016020810190612a069190614054565b6001600160a01b0316815260208101919091526040016000205580612a2a81614736565b91505061293e565b507fb05f5de88ae0294ebb6f67c5af2fcbbd593cc6bdfe543e2869794a4c8ce3ea50848484846040516115179493929190614b5c565b828114612a875760405162461bcd60e51b8152600401610a05906144c5565b60005b83811015612b0257828282818110612aa457612aa46146c0565b90506020020135603c6000878785818110612ac157612ac16146c0565b9050602002016020810190612ad69190614054565b6001600160a01b0316815260208101919091526040016000205580612afa81614736565b915050612a8a565b507fb5d2963614d72181b4df1f993d45b83edf42fa19710f0204217ba1b3e183bb73848484846040516115179493929190614b5c565b6001600160a01b0382166000908152603a60205260408120548210612b5f575060006109c7565b6000612b6e6201518042614c33565b6001600160a01b0385166000908152603e6020526040902054909150811115612bb45750506001600160a01b0382166000908152603c60205260409020548110156109c7565b6001600160a01b0384166000908152603d6020526040902054612bd8908490614c20565b6001600160a01b0385166000908152603c6020526040902054111591506109c79050565b6000600254600160025484600154612c149190614a00565b612c1e9190614c20565b612c28919061474f565b6109c79190614c33565b612c3a6119c2565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ff03390565b6000610f7183836137d4565b60007fb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea60001b82600001518360200151612cb885604001516137fe565b612cc586606001516137fe565b612cd28760800151613861565b604051602001612ce796959493929190614c55565b604051602081830303815290604052805190602001209050919050565b6000620f4240612d148385614a00565b610f719190614c33565b6000816001600160a01b0316836001600160a01b031603612dcd5760408086015190516001600160a01b0386169180156108fc02916000818181858888f19350505050612dc857816001600160a01b031663d0e30db086604001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612da457600080fd5b505af1158015612db8573d6000803e3d6000fd5b5050505050612dc88585856138a4565b6130ea565b600085516001811115612de257612de2614365565b03612f7a576040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e529190614c8f565b90508560400151811015612f6957836001600160a01b03166340c10f1930838960400151612e80919061474f565b6040516001600160a01b03909216602483015260448201526064016040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612ed49190614ccc565b6000604051808303816000865af19150503d8060008114612f11576040519150601f19603f3d011682016040523d82523d6000602084013e612f16565b606091505b50508092505081612f695760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e3a204552433230206d696e74696e67206661696c656400000000006044820152606401610a05565b612f748686866138a4565b506130ea565b600185516001811115612f8f57612f8f614365565b0361309857612fa383858760200151613946565b612dc857602085810151604080516001600160a01b038881166024830152604480830194909452825180830390940184526064909101825292820180516001600160e01b03166340c10f1960e01b17905251918516916130039190614ccc565b6000604051808303816000865af19150503d8060008114613040576040519150601f19603f3d011682016040523d82523d6000602084013e613045565b606091505b50508091505080612dc85760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e3a20455243373231206d696e74696e67206661696c6564000000006044820152606401610a05565b60405162461bcd60e51b815260206004820152602160248201527f546f6b656e3a20756e737570706f7274656420746f6b656e207374616e6461726044820152601960fa1b6064820152608401610a05565b5050505050565b60006109c7825490565b60008151600181111561311057613110614365565b148015613121575060008160400151115b801561312f57506020810151155b80613159575060018151600181111561314a5761314a614365565b14801561315957506040810151155b61099e5760405162461bcd60e51b8152602060048201526013602482015272546f6b656e3a20696e76616c696420696e666f60681b6044820152606401610a05565b6000606081865160018111156131b3576131b3614365565b036132905760408681015181516001600160a01b038881166024830152878116604483015260648083019390935283518083039093018352608490910183526020820180516001600160e01b03166323b872dd60e01b17905291519185169161321c9190614ccc565b6000604051808303816000865af19150503d8060008114613259576040519150601f19603f3d011682016040523d82523d6000602084013e61325e565b606091505b5090925090508180156132895750805115806132895750808060200190518101906132899190614ce8565b9150613356565b6001865160018111156132a5576132a5614365565b0361309857602086810151604080516001600160a01b0389811660248301528881166044830152606480830194909452825180830390940184526084909101825292820180516001600160e01b03166323b872dd60e01b179052519185169161330e9190614ccc565b6000604051808303816000865af19150503d806000811461334b576040519150601f19603f3d011682016040523d82523d6000602084013e613350565b606091505b50909250505b81610aa057613364866139f1565b613378866001600160a01b03166014613a5e565b61338c866001600160a01b03166014613a5e565b6133a0866001600160a01b03166014613a5e565b6040516020016133b39493929190614d0a565b60408051601f198184030181529082905262461bcd60e51b8252610a0591600401614dc3565b6134496040805160a08101825260008082526020808301829052835160608082018652838252818301849052818601849052848601919091528451808201865283815280830184905280860184905281850152845190810185528281529081018290529283015290608082015290565b83815260006020820181905250604080820180516001600160a01b039788169052602080890151825190891690820152905146908301528751606084018051918916909152805195909716940193909352935182015292909201516080820152919050565b6134b88282611525565b610b4c576134d0816001600160a01b03166014613a5e565b6134db836020613a5e565b6040516020016133b3929190614df6565b6134f68282611525565b610b4c5760008281526072602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561352e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f71836001600160a01b038416613bfa565b6135918282611525565b15610b4c5760008281526072602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f71836001600160a01b038416613c49565b60005460ff166109a05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a05565b6040805161190160f01b6020808301919091526022820185905260428083018590528351808403909101815260629092019092528051910120600090610f71565b600080600061369b607c5490565b90506136a681612bfc565b925060008660018111156136bc576136bc614365565b0361370b576001600160a01b03851660009081526039602052604090205484106136ec576136e981613d3c565b92505b6001600160a01b0385166000908152603a602052604090205484101591505b50935093915050565b6001600160a01b0381166000908152607b602052604081205461373857600061373b565b60015b60ff1692915050565b60006137536201518042614c33565b6001600160a01b0384166000908152603e60205260409020549091508111156137a2576001600160a01b03929092166000908152603e6020908152604080832094909455603d90529190912055565b6001600160a01b0383166000908152603d6020526040812080548492906137ca908490614c20565b9091555050505050565b60008260000182815481106137eb576137eb6146c0565b9060005260206000200154905092915050565b80516020808301516040808501519051600094612ce7947f353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e87649491939192019384526001600160a01b03928316602085015291166040830152606082015260800190565b80516020808301516040808501519051600094612ce7947f1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d949193919201614e6b565b600080845160018111156138ba576138ba614365565b036138d5576138ce82848660400151613d54565b90506138fe565b6001845160018111156138ea576138ea614365565b03613098576138ce82848660200151613946565b80610a375761390c846139f1565b613920846001600160a01b03166014613a5e565b613934846001600160a01b03166014613a5e565b6040516020016133b393929190614e96565b604080513060248201526001600160a01b038481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928616916139a491614ccc565b6000604051808303816000865af19150503d80600081146139e1576040519150601f19603f3d011682016040523d82523d6000602084013e6139e6565b606091505b509095945050505050565b6060613a1c82600001516001811115613a0c57613a0c614365565b6001600160a01b03166001613a5e565b613a298360200151613e27565b613a368460400151613e27565b604051602001613a4893929190614f27565b6040516020818303038152906040529050919050565b60606000613a6d836002614a00565b613a78906002614c20565b67ffffffffffffffff811115613a9057613a90614558565b6040519080825280601f01601f191660200182016040528015613aba576020820181803683370190505b509050600360fc1b81600081518110613ad557613ad56146c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b0457613b046146c0565b60200101906001600160f81b031916908160001a9053506000613b28846002614a00565b613b33906001614c20565b90505b6001811115613bab576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b6757613b676146c0565b1a60f81b828281518110613b7d57613b7d6146c0565b60200101906001600160f81b031916908160001a90535060049490941c93613ba481614fa5565b9050613b36565b508315610f715760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a05565b6000818152600183016020526040812054613c41575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109c7565b5060006109c7565b60008181526001830160205260408120548015613d32576000613c6d60018361474f565b8554909150600090613c819060019061474f565b9050818114613ce6576000866000018281548110613ca157613ca16146c0565b9060005260206000200154905080876000018481548110613cc457613cc46146c0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613cf757613cf7614762565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109c7565b60009150506109c7565b6000603854600160385484603754612c149190614a00565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009260609290871691613db19190614ccc565b6000604051808303816000865af19150503d8060008114613dee576040519150601f19603f3d011682016040523d82523d6000602084013e613df3565b606091505b509092509050818015613e1e575080511580613e1e575080806020019051810190613e1e9190614ce8565b95945050505050565b606081600003613e515750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115613e745780613e6581614736565b915050600882901c9150613e55565b610c168482613a5e565b6040805160608101825260008082526020820152908101613eba6040805160608101909152806000815260200160008152602001600081525090565b905290565b600060208284031215613ed157600080fd5b81356001600160e01b031981168114610f7157600080fd5b60008083601f840112613efb57600080fd5b50813567ffffffffffffffff811115613f1357600080fd5b6020830191508360208260051b850101111561166557600080fd5b60008060008060408587031215613f4457600080fd5b843567ffffffffffffffff80821115613f5c57600080fd5b613f6888838901613ee9565b90965094506020870135915080821115613f8157600080fd5b50613f8e87828801613ee9565b95989497509550505050565b60008060008060008060608789031215613fb357600080fd5b863567ffffffffffffffff80821115613fcb57600080fd5b613fd78a838b01613ee9565b90985096506020890135915080821115613ff057600080fd5b613ffc8a838b01613ee9565b9096509450604089013591508082111561401557600080fd5b5061402289828a01613ee9565b979a9699509497509295939492505050565b6001600160a01b038116811461099e57600080fd5b80356117d581614034565b60006020828403121561406657600080fd5b8135610f7181614034565b60006020828403121561408357600080fd5b5035919050565b6000806040838503121561409d57600080fd5b8235915060208301356140af81614034565b809150509250929050565b600060a082840312156140cc57600080fd5b50919050565b600061016082840312156140cc57600080fd5b600080600061018084860312156140fb57600080fd5b61410585856140d2565b925061016084013567ffffffffffffffff8082111561412357600080fd5b818601915086601f83011261413757600080fd5b81358181111561414657600080fd5b87602060608302850101111561415b57600080fd5b6020830194508093505050509250925092565b80606081018310156109c757600080fd5b80608081018310156109c757600080fd5b6000806000806000806000806000806101208b8d0312156141b057600080fd5b6141b98b614049565b99506141c760208c01614049565b985060408b0135975060608b0135965060808b0135955060a08b0135945060c08b013567ffffffffffffffff8082111561420057600080fd5b61420c8e838f0161416e565b955060e08d013591508082111561422257600080fd5b61422e8e838f0161417f565b94506101008d013591508082111561424557600080fd5b506142528d828e01613ee9565b915080935050809150509295989b9194979a5092959850565b6000806040838503121561427e57600080fd5b823561428981614034565b946020939093013593505050565b600080604083850312156142aa57600080fd5b50508035926020909101359150565b600080602083850312156142cc57600080fd5b823567ffffffffffffffff8111156142e357600080fd5b6142ef85828601613ee9565b90969095509350505050565b6000610160828403121561430e57600080fd5b610f7183836140d2565b6020808252825182820181905260009190848201906040850190845b818110156143595783516001600160a01b031683529284019291840191600101614334565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6002811061099e57634e487b7160e01b600052602160045260246000fd5b815160408201906143a98161437b565b82526020928301516001600160a01b0316929091019190915290565b60008060008060008060006080888a0312156143e057600080fd5b873567ffffffffffffffff808211156143f857600080fd5b6144048b838c01613ee9565b909950975060208a013591508082111561441d57600080fd5b6144298b838c01613ee9565b909750955060408a013591508082111561444257600080fd5b61444e8b838c01613ee9565b909550935060608a013591508082111561446757600080fd5b506144748a828b0161417f565b91505092959891949750929550565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b6020808252602a908201527f5769746864726177616c4c696d69746174696f6e3a20696e76616c69642061726040820152690e4c2f240d8cadccee8d60b31b606082015260800190565b60208082526029908201527f4d61696e636861696e4761746577617956323a20717565727920666f7220656d60408201526870747920617272617960b81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561459f57634e487b7160e01b600052604160045260246000fd5b60405290565b6002811061099e57600080fd5b6000606082840312156145c457600080fd5b6145cc61456e565b905081356145d9816145a5565b80825250602082013560208201526040820135604082015292915050565b600060a0828403121561460957600080fd5b61461161456e565b823561461c81614034565b8152602083013561462c81614034565b602082015261463e84604085016145b2565b60408201529392505050565b60006060828403121561465c57600080fd5b6040516060810181811067ffffffffffffffff8211171561468d57634e487b7160e01b600052604160045260246000fd5b604052823560ff811681146146a157600080fd5b8152602083810135908201526040928301359281019290925250919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126146ed57600080fd5b83018035915067ffffffffffffffff82111561470857600080fd5b6020019150600581901b360382131561166557600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161474857614748614720565b5060010190565b818103818111156109c7576109c7614720565b634e487b7160e01b600052603160045260246000fd5b8183526000602080850194508260005b858110156147b657813561479b81614034565b6001600160a01b031687529582019590820190600101614788565b509495945050505050565b602081526000610c16602083018486614778565b6000606082840312156147e757600080fd5b6147ef61456e565b905081356147fc81614034565b8152602082013561480c81614034565b806020830152506040820135604082015292915050565b6000610160828403121561483657600080fd5b60405160a0810181811067ffffffffffffffff8211171561486757634e487b7160e01b600052604160045260246000fd5b60405282358152602083013561487c816145a5565b602082015261488e84604085016147d5565b60408201526148a08460a085016147d5565b60608201526148b38461010085016145b2565b60808201529392505050565b60208082526023908201527f4d61696e636861696e4761746577617956323a20696e76616c696420726563656040820152621a5c1d60ea1b606082015260800190565b803561490d81614034565b6001600160a01b03908116835260208201359061492982614034565b166020830152604090810135910152565b60006101808201905083825282356020830152602083013561495b816145a5565b6149648161437b565b8060408401525061497b6060830160408501614902565b61498b60c0830160a08501614902565b61012061010084013561499d816145a5565b6149a68161437b565b81840152830135610140808401919091529092013561016090910152919050565b6000602082840312156149d957600080fd5b8135610f71816145a5565b6000606082840312156149f657600080fd5b610f7183836145b2565b80820281158282048414176109c7576109c7614720565b60208082526023908201527f4d61696e636861696e4761746577617956323a20696e76616c69642072657175604082015262195cdd60ea1b606082015260800190565b6020808252602a908201527f4d61696e636861696e4761746577617956323a20696e76616c696420746f6b656040820152691b881cdd185b99185c9960b21b606082015260800190565b600061018082019050838252825160208301526020830151614ac58161437b565b6040838101919091528381015180516001600160a01b03908116606086015260208201511660808501529081015160a084015250606083015180516001600160a01b0390811660c085015260208201511660e084015260408101516101008401525060808301518051614b378161437b565b6101208401526020810151610140840152604001516101609092019190915292915050565b604081526000614b70604083018688614778565b82810360208401528381526001600160fb1b03841115614b8f57600080fd5b8360051b80866020840137016020019695505050505050565b606081526000614bbc60608301888a614778565b602083820381850152614bd082888a614778565b8481036040860152858152869250810160005b86811015614c11578335614bf6816145a5565b614bff8161437b565b82529282019290820190600101614be3565b509a9950505050505050505050565b808201808211156109c7576109c7614720565b600082614c5057634e487b7160e01b600052601260045260246000fd5b500490565b8681526020810186905260c08101614c6c8661437b565b8560408301528460608301528360808301528260a0830152979650505050505050565b600060208284031215614ca157600080fd5b5051919050565b60005b83811015614cc3578181015183820152602001614cab565b50506000910152565b60008251614cde818460208701614ca8565b9190910192915050565b600060208284031215614cfa57600080fd5b81518015158114610f7157600080fd5b7f546f6b656e3a20636f756c64206e6f74207472616e73666572200000000000008152600085516020614d4382601a8601838b01614ca8565b65010333937b6960d51b601a928501928301528651614d6781838501848b01614ca8565b630103a37960e51b9201818101929092528551614d8a8160248501898501614ca8565b660103a37b5b2b7160cd1b602493909101928301528451614db181602b8501848901614ca8565b91909101602b01979650505050505050565b6020815260008251806020840152614de2816040850160208701614ca8565b601f01601f19169190910160400192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e2e816017850160208801614ca8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614e5f816028840160208801614ca8565b01602801949350505050565b84815260808101614e7b8561437b565b84602083015283604083015282606083015295945050505050565b7f546f6b656e3a20636f756c64206e6f74207472616e7366657220000000000000815260008451614ece81601a850160208901614ca8565b630103a37960e51b601a918401918201528451614ef281601e840160208901614ca8565b660103a37b5b2b7160cd1b601e92909101918201528351614f1a816025840160208801614ca8565b0160250195945050505050565b690a8ded6cadc92dcccde560b31b815260008451614f4c81600a850160208901614ca8565b8083019050600b60fa1b80600a8301528551614f6f81600b850160208a01614ca8565b600b9201918201528351614f8a81600c840160208801614ca8565b602960f81b600c9290910191820152600d0195945050505050565b600081614fb457614fb4614720565b50600019019056fea26469706673582212207e51a6de127cdfd84db2c7836d5277334eab2eb05bdf39811127a9a78544c9bf64736f6c63430008110033",
  "devdoc": {
    "events": {
      "BridgeOperatorsReplaced(address[])": {
        "details": "Emitted when the bridge operators are replaced"
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain seperator."
      },
      "checkHighTierVoteWeightThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the high-tier vote weight threshold."
      },
      "checkThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the threshold."
      },
      "getBridgeOperators()": {
        "details": "Returns the bridge operator list."
      },
      "getHighTierVoteWeightThreshold()": {
        "details": "Returns the high-tier vote weight threshold."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoninToken(address)": {
        "details": "Returns token address on Ronin network. Note: Reverts for unsupported token."
      },
      "getThreshold()": {
        "details": "Returns the threshold."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address[][3],uint256[][4],uint8[])": {
        "details": "Initializes contract storage."
      },
      "mapTokens(address[],address[],uint8[])": {
        "details": "Maps mainchain tokens to Ronin network. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event."
      },
      "mapTokensAndThresholds(address[],address[],uint8[],uint256[][4])": {
        "details": "Maps mainchain tokens to Ronin network and sets thresholds. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event."
      },
      "minimumVoteWeight()": {
        "details": "Returns the minimum vote weight to pass the threshold."
      },
      "pause()": {
        "details": "Triggers paused state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "reachedWithdrawalLimit(address,uint256)": {
        "details": "Checks whether the withdrawal reaches the limitation."
      },
      "receiveEther()": {
        "details": "Receives ether without doing anything. Use this function to topup native token."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "replaceBridgeOperators(address[])": {
        "details": "Replaces the old bridge operator list by the new one. Requirements: - The method caller is admin. Emitted the event `BridgeOperatorsReplaced`."
      },
      "requestDepositFor((address,address,(uint8,uint256,uint256)))": {
        "details": "Locks the assets and request deposit."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setDailyWithdrawalLimits(address[],uint256[])": {
        "details": "Sets daily limit amounts for the withdrawals. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `DailyWithdrawalLimitsUpdated` event."
      },
      "setHighTierThresholds(address[],uint256[])": {
        "details": "Sets the thresholds for high-tier withdrawals that requires high-tier vote weights. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `HighTierThresholdsUpdated` event."
      },
      "setHighTierVoteWeightThreshold(uint256,uint256)": {
        "details": "Sets high-tier vote weight threshold and returns the old one. Requirements: - The method caller is admin. - The high-tier vote weight threshold must equal to or larger than the normal threshold. Emits the `HighTierVoteWeightThresholdUpdated` event."
      },
      "setLockedThresholds(address[],uint256[])": {
        "details": "Sets the amount thresholds to lock withdrawal. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `LockedThresholdsUpdated` event."
      },
      "setThreshold(uint256,uint256)": {
        "details": "Override `GatewayV2-setThreshold`. Requirements: - The high-tier vote weight threshold must equal to or larger than the normal threshold."
      },
      "setUnlockFeePercentages(address[],uint256[])": {
        "details": "Sets fee percentages to unlock withdrawal. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `UnlockFeePercentagesUpdated` event."
      },
      "setWrappedNativeTokenContract(address)": {
        "details": "Sets the wrapped native token contract. Requirements: - The method caller is admin. Emits the `WrappedNativeTokenContractUpdated` event."
      },
      "submitWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)),(uint8,bytes32,bytes32)[])": {
        "details": "Withdraws based on the receipt and the validator signatures. Returns whether the withdrawal is locked. Emits the `Withdrew` once the assets are released."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unlockWithdrawal((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "details": "Approves a specific withdrawal. Requirements: - The method caller is a validator. Emits the `Withdrew` once the assets are released."
      },
      "unpause()": {
        "details": "Triggers unpaused state."
      }
    },
    "stateVariables": {
      "WITHDRAWAL_UNLOCKER_ROLE": {
        "details": "Withdrawal unlocker role hash"
      },
      "_bridgeOperatorAddedBlock": {
        "details": "Mapping from validator address => last block that the bridge operator is added"
      },
      "_bridgeOperators": {
        "details": "Bridge operators array"
      },
      "_domainSeparator": {
        "details": "Domain seperator"
      },
      "_roninToken": {
        "details": "Mapping from mainchain token => token address on Ronin network"
      },
      "depositCount": {
        "details": "Total deposit"
      },
      "roninChainId": {
        "details": "Ronin network id"
      },
      "withdrawalHash": {
        "details": "Mapping from withdrawal id => withdrawal hash"
      },
      "withdrawalLocked": {
        "details": "Mapping from withdrawal id => locked"
      },
      "wrappedNativeToken": {
        "details": "Wrapped native token address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "unlockFeePercentages(address)": {
        "notice": "Values 0-1,000,000 map to 0%-100%"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1535,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4326,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_num",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4328,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_denom",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4330,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "______deprecated",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4332,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4337,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "______gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5132,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_highTierVWNum",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 5134,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_highTierVWDenom",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 5139,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "highTierThreshold",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5144,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "lockedThreshold",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5149,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "unlockFeePercentages",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5154,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "dailyWithdrawalLimit",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5159,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "lastSyncedWithdrawal",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5164,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "lastDateSynced",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5169,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "______gap",
        "offset": 0,
        "slot": "63",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "113",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "113",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_roles",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4026_storage)"
      },
      {
        "astId": 14493,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "116",
        "type": "t_contract(IWETH)10588"
      },
      {
        "astId": 14496,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "roninChainId",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      },
      {
        "astId": 14499,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "depositCount",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 14502,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_domainSeparator",
        "offset": 0,
        "slot": "119",
        "type": "t_bytes32"
      },
      {
        "astId": 14508,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_roninToken",
        "offset": 0,
        "slot": "120",
        "type": "t_mapping(t_address,t_struct(MappedToken)10843_storage)"
      },
      {
        "astId": 14513,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "withdrawalHash",
        "offset": 0,
        "slot": "121",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 14518,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "withdrawalLocked",
        "offset": 0,
        "slot": "122",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 14523,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_bridgeOperatorAddedBlock",
        "offset": 0,
        "slot": "123",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14527,
        "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
        "label": "_bridgeOperators",
        "offset": 0,
        "slot": "124",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IWETH)10588": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_enum(Standard)13582": {
        "encoding": "inplace",
        "label": "enum Token.Standard",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(MappedToken)10843_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MappedTokenConsumer.MappedToken)",
        "numberOfBytes": "32",
        "value": "t_struct(MappedToken)10843_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4026_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4026_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(AddressSet)4026_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4025,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3725_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MappedToken)10843_storage": {
        "encoding": "inplace",
        "label": "struct MappedTokenConsumer.MappedToken",
        "members": [
          {
            "astId": 10840,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "erc",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Standard)13582"
          },
          {
            "astId": 10842,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "tokenAddr",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3725_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3720,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3724,
            "contract": "contracts/mainchain/MainchainGatewayV2.sol:MainchainGatewayV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}