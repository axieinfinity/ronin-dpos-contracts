{
  "address": "0x456327e8961B3Cd20ea41fF8b4FcE80EA3A8A5C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_relayers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "globalProposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "globalProposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GlobalProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "successCalls",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "returnDatas",
          "type": "bytes[]"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Ballot.VoteType",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "changeProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "relayBridgeOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "relayGlobalProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "relayProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "againstVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVoteWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1f3e58c8e61e5a93cfaee1a4d9b92ee257a7c9d3f943abb8c2af9379fb514d7",
  "receipt": {
    "to": null,
    "from": "0xC37b5d7891D73F2064B0eE044844e053872Ef941",
    "contractAddress": "0x456327e8961B3Cd20ea41fF8b4FcE80EA3A8A5C9",
    "transactionIndex": 44,
    "gasUsed": "3592770",
    "logsBloom": "0x
    "blockHash": "0x15fabd8d3584438f2420afb3e5dffb10d4fb76e6aaaa11316fe05d52cb228c34",
    "transactionHash": "0xa1f3e58c8e61e5a93cfaee1a4d9b92ee257a7c9d3f943abb8c2af9379fb514d7",
    "logs": [
      {
        "transactionIndex": 44,
        "blockNumber": 7951463,
        "transactionHash": "0xa1f3e58c8e61e5a93cfaee1a4d9b92ee257a7c9d3f943abb8c2af9379fb514d7",
        "address": "0x456327e8961B3Cd20ea41fF8b4FcE80EA3A8A5C9",
        "topics": [
          "0xfd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7"
        ],
        "data": "0x000000000000000000000000a6eda3797569465b45dfca839f0a1454a449cd4e",
        "logIndex": 73,
        "blockHash": "0x15fabd8d3584438f2420afb3e5dffb10d4fb76e6aaaa11316fe05d52cb228c34"
      },
      {
        "transactionIndex": 44,
        "blockNumber": 7951463,
        "transactionHash": "0xa1f3e58c8e61e5a93cfaee1a4d9b92ee257a7c9d3f943abb8c2af9379fb514d7",
        "address": "0x456327e8961B3Cd20ea41fF8b4FcE80EA3A8A5C9",
        "topics": [
          "0x5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048"
        ],
        "data": "0x000000000000000000000000fc4319ae9e6134c708b88d5ad5da1a4a83372502",
        "logIndex": 74,
        "blockHash": "0x15fabd8d3584438f2420afb3e5dffb10d4fb76e6aaaa11316fe05d52cb228c34"
      },
      {
        "transactionIndex": 44,
        "blockNumber": 7951463,
        "transactionHash": "0xa1f3e58c8e61e5a93cfaee1a4d9b92ee257a7c9d3f943abb8c2af9379fb514d7",
        "address": "0x456327e8961B3Cd20ea41fF8b4FcE80EA3A8A5C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c37b5d7891d73f2064b0ee044844e053872ef941",
          "0x000000000000000000000000c37b5d7891d73f2064b0ee044844e053872ef941"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x15fabd8d3584438f2420afb3e5dffb10d4fb76e6aaaa11316fe05d52cb228c34"
      },
      {
        "transactionIndex": 44,
        "blockNumber": 7951463,
        "transactionHash": "0xa1f3e58c8e61e5a93cfaee1a4d9b92ee257a7c9d3f943abb8c2af9379fb514d7",
        "address": "0x456327e8961B3Cd20ea41fF8b4FcE80EA3A8A5C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4",
          "0x000000000000000000000000c37b5d7891d73f2064b0ee044844e053872ef941",
          "0x000000000000000000000000c37b5d7891d73f2064b0ee044844e053872ef941"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x15fabd8d3584438f2420afb3e5dffb10d4fb76e6aaaa11316fe05d52cb228c34"
      }
    ],
    "blockNumber": 7951463,
    "cumulativeGasUsed": "8980791",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC37b5d7891D73F2064B0eE044844e053872Ef941",
    "0xA6edA3797569465B45dfca839F0A1454a449CD4e",
    "0xFc4319Ae9e6134C708b88D5Ad5Da1A4a83372502",
    [
      "0xC37b5d7891D73F2064B0eE044844e053872Ef941"
    ]
  ],
  "numDeployments": 3,
  "solcInputHash": "1d53902dd90cd91eebd679fc038e76a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_relayers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"globalProposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GlobalProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayBridgeOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayGlobalProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bridgeContract()\":{\"details\":\"Returns the bridge contract.\"},\"changeProxyAdmin(address,address)\":{\"details\":\"Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`.\"},\"getProxyAdmin(address)\":{\"details\":\"Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getProxyImplementation(address)\":{\"details\":\"Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"relayBridgeOperators(uint256,address[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See {BOsGovernanceRelay-_relayVotesBySignatures}. Requirements: - The method caller is relayer.\"},\"relayGlobalProposal((uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See {GovernanceRelay-_relayGlobalProposal}. Requirements: - The method caller is relayer.\"},\"relayProposal((uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See {GovernanceRelay-_relayProposal}. Requirements: - The method caller is relayer.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeContract(address)\":{\"details\":\"Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"round(uint256)\":{\"notice\":\"chain id = 0 for global proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mainchain/MainchainGovernanceAdmin.sol\":\"MainchainGovernanceAdmin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/extensions/GovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport \\\"../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../extensions/collections/HasBridgeContract.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract GovernanceAdmin is CoreGovernance, HasRoninTrustedOrganizationContract, HasBridgeContract {\\n  /// @dev Domain separator\\n  bytes32 public constant DOMAIN_SEPARATOR = 0xf8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256b;\\n\\n  modifier onlySelfCall() {\\n    require(msg.sender == address(this), \\\"GovernanceAdmin: only allowed self-call\\\");\\n    _;\\n  }\\n\\n  constructor(address _roninTrustedOrganizationContract, address _bridgeContract) {\\n    require(\\n      keccak256(\\n        abi.encode(\\n          keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n          keccak256(\\\"GovernanceAdmin\\\"), // name hash\\n          keccak256(\\\"1\\\"), // version hash\\n          keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", 2020)) // salt\\n        )\\n      ) == DOMAIN_SEPARATOR,\\n      \\\"GovernanceAdmin: invalid domain\\\"\\n    );\\n    _setRoninTrustedOrganizationContract(_roninTrustedOrganizationContract);\\n    _setBridgeContract(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external override onlySelfCall {\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external override onlySelfCall {\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyImplementation(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(hex\\\"5c60da1b\\\");\\n    require(_success, \\\"GovernanceAdmin: proxy call `implementation()` failed\\\");\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyAdmin(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(hex\\\"f851a440\\\");\\n    require(_success, \\\"GovernanceAdmin: proxy call `admin()` failed\\\");\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `_proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - This contract must be the current admin of `_proxy`.\\n   *\\n   */\\n  function changeProxyAdmin(address _proxy, address _newAdmin) external onlySelfCall {\\n    // bytes4(keccak256(\\\"changeAdmin(address)\\\"))\\n    (bool _success, ) = _proxy.call(abi.encodeWithSelector(0x8f283970, _newAdmin));\\n    require(_success, \\\"GovernanceAdmin: proxy call `changeAdmin(address)` failed\\\");\\n  }\\n\\n  /**\\n   * @dev Override {CoreGovernance-_getMinimumVoteWeight}.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IQuorum.minimumVoteWeight.selector)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `minimumVoteWeight()` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Override {CoreGovernance-_getTotalWeights}.\\n   */\\n  function _getTotalWeights() internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.totalWeights.selector)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `totalWeights()` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x08ced5e2518aa74414130c3f24dd11924aaf62a2bb9979381d2600d5d8f4c37a\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeContract.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\n\\ncontract HasBridgeContract is IHasBridgeContract, HasProxyAdmin {\\n  IBridge internal _bridgeContract;\\n\\n  modifier onlyBridgeContract() {\\n    require(bridgeContract() == msg.sender, \\\"HasBridgeContract: method caller must be bridge contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function bridgeContract() public view override returns (address) {\\n    return address(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external virtual override onlyAdmin {\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function _setBridgeContract(address _addr) internal {\\n    _bridgeContract = IBridge(_addr);\\n    emit BridgeContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xdaa1cc7acd36008e0839274c7d4614c4066cbc67a0aa603b599bebb1c7b4fa2c\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    require(\\n      roninTrustedOrganizationContract() == msg.sender,\\n      \\\"HasRoninTrustedOrganizationContract: method caller must be ronin trusted organization contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x0a79acbb2439826b8a28f562026b7e5be6b857c78bfdd130a8c4ebc47f777cc6\",\"license\":\"MIT\"},\"contracts/extensions/isolated-governance/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract IsolatedGovernance is VoteStatusConsumer {\\n  struct IsolatedVote {\\n    VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev Mapping from receipt hash => vote weight\\n    mapping(bytes32 => uint256) weight;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function _castVote(\\n    IsolatedVote storage _proposal,\\n    address _voter,\\n    uint256 _voterWeight,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _hash\\n  ) internal virtual returns (VoteStatus _status) {\\n    if (_voted(_proposal, _voter)) {\\n      revert(\\n        string(abi.encodePacked(\\\"IsolatedGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\"))\\n      );\\n    }\\n\\n    // Record for voter\\n    _proposal.voteHashOf[_voter] = _hash;\\n    // Increase vote weight\\n    uint256 _weight = _proposal.weight[_hash] += _voterWeight;\\n\\n    if (_weight >= _minimumVoteWeight && _proposal.status == VoteStatus.Pending) {\\n      _proposal.status = VoteStatus.Approved;\\n      _proposal.finalHash = _hash;\\n    }\\n\\n    _status = _proposal.status;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(IsolatedVote storage _proposal, address _voter) internal view virtual returns (bool) {\\n    return _proposal.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0x0c84a1e18e5472ec179c0ccba6de642ad53e26a908f66f7fedc1f85499e2513c\",\"license\":\"MIT\"},\"contracts/extensions/isolated-governance/bridge-operator-governance/BOsGovernanceRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../extensions/isolated-governance/IsolatedGovernance.sol\\\";\\nimport \\\"../../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../../libraries/BridgeOperatorsBallot.sol\\\";\\n\\nabstract contract BOsGovernanceRelay is SignatureConsumer, IsolatedGovernance {\\n  /// @dev The last period that the brige operators synced.\\n  uint256 internal _lastSyncedPeriod;\\n  /// @dev Mapping from period index => bridge operators vote\\n  mapping(uint256 => IsolatedVote) internal _vote;\\n\\n  /**\\n   * @dev Relays votes by signatures.\\n   *\\n   * Requirements:\\n   * - The period of voting is larger than the last synced period.\\n   * - The arrays are not empty.\\n   * - The signature signers are in order.\\n   *\\n   * @notice Does not store the voter signature into storage.\\n   *\\n   */\\n  function _relayVotesBySignatures(\\n    address[] calldata _operators,\\n    Signature[] calldata _signatures,\\n    uint256 _period,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _domainSeperator\\n  ) internal {\\n    require(_period > _lastSyncedPeriod, \\\"BOsGovernanceRelay: query for outdated period\\\");\\n    require(_operators.length > 0 && _signatures.length > 0, \\\"BOsGovernanceRelay: invalid array length\\\");\\n\\n    Signature memory _sig;\\n    address[] memory _signers = new address[](_signatures.length);\\n    address _lastSigner;\\n    bytes32 _hash = BridgeOperatorsBallot.hash(_period, _operators);\\n    bytes32 _digest = ECDSA.toTypedDataHash(_domainSeperator, _hash);\\n\\n    for (uint256 _i = 0; _i < _signatures.length; _i++) {\\n      _sig = _signatures[_i];\\n      _signers[_i] = ECDSA.recover(_digest, _sig.v, _sig.r, _sig.s);\\n      require(_lastSigner < _signers[_i], \\\"BOsGovernanceRelay: invalid order\\\");\\n      _lastSigner = _signers[_i];\\n    }\\n\\n    IsolatedVote storage _v = _vote[_period];\\n    uint256 _totalVoteWeight = _sumBridgeVoterWeights(_signers);\\n    if (_totalVoteWeight >= _minimumVoteWeight) {\\n      require(_totalVoteWeight > 0, \\\"BOsGovernanceRelay: invalid vote weight\\\");\\n      _v.status = VoteStatus.Approved;\\n      _lastSyncedPeriod = _period;\\n      return;\\n    }\\n\\n    revert(\\\"BOsGovernanceRelay: relay failed\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the weight of the governor list.\\n   */\\n  function _sumBridgeVoterWeights(address[] memory _bridgeVoters) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x23ebb44e73898829693da93af3c1c49ccc2a0fb111117f5f42575d186f40ef32\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/CoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    mapping(address => bool) forVoted;\\n    mapping(address => bool) againstVoted;\\n    mapping(address => Signature) sig;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when a proposal is created\\n  event GlobalProposalCreated(\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    bytes32 globalProposalHash,\\n    GlobalProposal.GlobalProposalDetail globalProposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  /**\\n   * @dev Creates new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _createVotingRound(uint256 _chainId, bytes32 _proposalHash) internal returns (uint256 _round) {\\n    _round = round[_chainId]++;\\n    // Skip checking for the first ever round\\n    if (_round > 0) {\\n      require(vote[_chainId][_round].status != VoteStatus.Pending, \\\"CoreGovernance: current proposal is not completed\\\");\\n    }\\n    vote[_chainId][++_round].hash = _proposalHash;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 _chainId,\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _creator\\n  ) internal virtual returns (uint256 _round) {\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n\\n    Proposal.ProposalDetail memory _proposal = Proposal.ProposalDetail(\\n      round[_chainId] + 1,\\n      _chainId,\\n      _targets,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    _proposal.validate();\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId, _proposalHash);\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(Proposal.ProposalDetail memory _proposal, address _creator)\\n    internal\\n    virtual\\n    returns (uint256 _round)\\n  {\\n    uint256 _chainId = _proposal.chainId;\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n    _proposal.validate();\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId, _proposalHash);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes for a global proposal.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobal(\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (uint256 _round) {\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal = GlobalProposal.GlobalProposalDetail(\\n      round[0] + 1,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    _proposal.validate();\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(0, _proposalHash);\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes global proposal struct.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobalStruct(\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal, uint256 _round) {\\n    _proposal = _globalProposal.into_proposal_detail(_roninTrustedOrganizationContract, _gatewayContract);\\n    _proposal.validate();\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(0, _proposalHash);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support,\\n    uint256 _minimumForVoteWeight,\\n    uint256 _minimumAgainstVoteWeight,\\n    address _voter,\\n    Signature memory _signature,\\n    uint256 _voterWeight\\n  ) internal virtual returns (bool _done) {\\n    uint256 _chainId = _proposal.chainId;\\n    uint256 _round = _proposal.nonce;\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    require(round[_proposal.chainId] == _round, \\\"CoreGovernance: query for invalid proposal nonce\\\");\\n    require(_vote.status == VoteStatus.Pending, \\\"CoreGovernance: the vote is finalized\\\");\\n    if (_vote.forVoted[_voter] || _vote.againstVoted[_voter]) {\\n      revert(string(abi.encodePacked(\\\"CoreGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\")));\\n    }\\n\\n    _vote.sig[_voter] = _signature;\\n    emit ProposalVoted(_vote.hash, _voter, _support, _voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (_support == Ballot.VoteType.For) {\\n      _vote.forVoted[_voter] = true;\\n      _forVoteWeight = _vote.forVoteWeight += _voterWeight;\\n    } else if (_support == Ballot.VoteType.Against) {\\n      _vote.againstVoted[_voter] = true;\\n      _againstVoteWeight = _vote.againstVoteWeight += _voterWeight;\\n    } else {\\n      revert(\\\"CoreGovernance: unsupported vote type\\\");\\n    }\\n\\n    if (_forVoteWeight >= _minimumForVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n    } else if (_againstVoteWeight >= _minimumAgainstVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage _vote, Proposal.ProposalDetail memory _proposal) internal {\\n    if (_proposal.executable()) {\\n      _vote.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = _proposal.execute();\\n      emit ProposalExecuted(_vote.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeights() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xa151c5d7e728724b28150377aa9fb605066051c857873f56be37a214c26f04bf\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/GovernanceRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CoreGovernance.sol\\\";\\n\\nabstract contract GovernanceRelay is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Relays votes by signatures.\\n   *\\n   * @notice Does not store the voter signature into storage.\\n   *\\n   */\\n  function _relayVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    require(_supports.length > 0 && _supports.length == _signatures.length, \\\"GovernanceRelay: invalid array length\\\");\\n    uint256 _forVoteCount;\\n    uint256 _againstVoteCount;\\n    address[] memory _forVoteSigners = new address[](_signatures.length);\\n    address[] memory _againstVoteSigners = new address[](_signatures.length);\\n\\n    {\\n      address _signer;\\n      address _lastSigner;\\n      Ballot.VoteType _support;\\n      Signature memory _sig;\\n\\n      for (uint256 _i; _i < _signatures.length; _i++) {\\n        _sig = _signatures[_i];\\n        _support = _supports[_i];\\n\\n        if (_support == Ballot.VoteType.For) {\\n          _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n          _forVoteSigners[_forVoteCount++] = _signer;\\n        } else if (_support == Ballot.VoteType.Against) {\\n          _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n          _againstVoteSigners[_againstVoteCount++] = _signer;\\n        } else {\\n          revert(\\\"GovernanceRelay: query for unsupported vote type\\\");\\n        }\\n\\n        require(_lastSigner < _signer, \\\"GovernanceRelay: invalid order\\\");\\n        _lastSigner = _signer;\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_forVoteSigners, _forVoteCount)\\n      mstore(_againstVoteSigners, _againstVoteCount)\\n    }\\n\\n    ProposalVote storage _vote = vote[_proposal.chainId][_proposal.nonce];\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _totalForVoteWeight = _sumWeights(_forVoteSigners);\\n    if (_totalForVoteWeight >= _minimumForVoteWeight) {\\n      require(_totalForVoteWeight > 0, \\\"GovernanceRelay: invalid vote weight\\\");\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n      return;\\n    }\\n\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n    uint256 _totalAgainstVoteWeight = _sumWeights(_againstVoteSigners);\\n    if (_totalAgainstVoteWeight >= _minimumAgainstVoteWeight) {\\n      require(_totalAgainstVoteWeight > 0, \\\"GovernanceRelay: invalid vote weight\\\");\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n      return;\\n    }\\n\\n    revert(\\\"GovernanceRelay: relay failed\\\");\\n  }\\n\\n  /**\\n   * @dev Relays voted proposal.\\n   *\\n   * Requirements:\\n   * - The relay proposal is finalized.\\n   *\\n   */\\n  function _relayProposal(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _relayVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Relays voted global proposal.\\n   *\\n   * Requirements:\\n   * - The relay proposal is finalized.\\n   *\\n   */\\n  function _relayGlobalProposal(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal {\\n    (Proposal.ProposalDetail memory _proposal, ) = _proposeGlobalStruct(\\n      _globalProposal,\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract,\\n      _creator\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    _relayVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns the weight of the governor list.\\n   */\\n  function _sumWeights(address[] memory _governors) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xa67f8ed80ffb41f53cbf44b31ca63e451d4aa4d6c33f50aa258468fbe9a9969f\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasBridgeContract {\\n  /// @dev Emitted when the bridge contract is updated.\\n  event BridgeContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the bridge contract.\\n   */\\n  function bridgeContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function setBridgeContract(address) external;\\n}\\n\",\"keccak256\":\"0xb1c239a3987c93db20b65bb80f165861bc83a186fb8d5a1c17c5ad06cfb395a8\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasRoninTrustedOrganizationContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x8ec2782f28a2c41d8feee0c5f213ac66e327c3757eab8d85a09104f21587ff10\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected\\n  }\\n}\\n\",\"keccak256\":\"0xc2f5e7cf4fdc18b990b3829e4ba479cd7aa0c5ea553a39dc3f1bf2e9aaed38df\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/WeightedAddressConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface WeightedAddressConsumer {\\n  struct WeightedAddress {\\n    address addr;\\n    uint256 weight;\\n  }\\n}\\n\",\"keccak256\":\"0xc141bda51591ca368cf9263df1b10cdb298583a4fe5104160eeaa4cf39f32763\",\"license\":\"MIT\"},\"contracts/libraries/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 public constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n  }\\n}\\n\",\"keccak256\":\"0x28a0192db886307f30ada203bdb902749ee3f30d42710de4eaf303cba23c32c2\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/consumers/WeightedAddressConsumer.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xeea5e3908ac28cbdbbce8853e49444c558a0a03597e98ef19e6ff86162ed9ae3;\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(uint256 _period, address[] memory _operators) internal pure returns (bytes32) {\\n    bytes32 _operatorsHash;\\n    assembly {\\n      _operatorsHash := keccak256(add(_operators, 32), mul(mload(_operators), 32))\\n    }\\n\\n    return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _period, _operatorsHash));\\n  }\\n}\\n\",\"keccak256\":\"0xe90d38a54b9029912a3e58f58a595da8ea285d3775d1ad798651e94f7ec83ab6\",\"license\":\"MIT\"},\"contracts/libraries/GlobalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  enum TargetOption {\\n    RoninTrustedOrganizationContract,\\n    GatewayContract\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xdb316eb400de2ddff92ab4255c0cd3cba634cd5236b93386ed9328b7d822d1c7;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    TargetOption[] memory _targets = _proposal.targetOptions;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(abi.encode(TYPE_HASH, _proposal.nonce, _targetsHash, _valuesHash, _calldatasHash, _gasAmountsHash));\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function into_proposal_detail(\\n    GlobalProposalDetail memory _proposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal pure returns (Proposal.ProposalDetail memory _detail) {\\n    _detail.nonce = _proposal.nonce;\\n    _detail.chainId = 0;\\n    _detail.targets = new address[](_proposal.targetOptions.length);\\n    _detail.values = _proposal.values;\\n    _detail.calldatas = _proposal.calldatas;\\n    _detail.gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _proposal.targetOptions.length; _i++) {\\n      if (_proposal.targetOptions[_i] == TargetOption.GatewayContract) {\\n        _detail.targets[_i] = _gatewayContract;\\n      } else if (_proposal.targetOptions[_i] == TargetOption.RoninTrustedOrganizationContract) {\\n        _detail.targets[_i] = _roninTrustedOrganizationContract;\\n      } else {\\n        revert(\\\"GlobalProposal: unsupported target\\\");\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfd2c537e2df6f90725bd927660ad4905e84f5be00195081bd685ff6e7c45ee0f\",\"license\":\"MIT\"},\"contracts/libraries/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Proposal {\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x65526afa953b4e935ecd640e6905741252eedae157e79c37331ee8103c70019d;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal) internal pure {\\n    require(\\n      _proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length,\\n      \\\"Proposal: invalid array length\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _proposal.nonce,\\n          _proposal.chainId,\\n          _targetsHash,\\n          _valuesHash,\\n          _calldatasHash,\\n          _gasAmountsHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(ProposalDetail memory _proposal)\\n    internal\\n    returns (bool[] memory _successCalls, bytes[] memory _returnDatas)\\n  {\\n    require(executable(_proposal), \\\"Proposal: query for invalid chainId\\\");\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ++_i) {\\n      require(gasleft() > _proposal.gasAmounts[_i], \\\"Proposal: insufficient gas\\\");\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd898f14c8212662db9481d072e64135e207e89055fd8dd56d06d6f3dbab11c67\",\"license\":\"MIT\"},\"contracts/mainchain/MainchainGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../extensions/isolated-governance/bridge-operator-governance/BOsGovernanceRelay.sol\\\";\\nimport \\\"../extensions/sequential-governance/GovernanceRelay.sol\\\";\\nimport \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport \\\"../extensions/GovernanceAdmin.sol\\\";\\nimport \\\"../interfaces/IBridge.sol\\\";\\n\\ncontract MainchainGovernanceAdmin is AccessControlEnumerable, GovernanceRelay, GovernanceAdmin, BOsGovernanceRelay {\\n  bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n  constructor(\\n    address _roleSetter,\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    address[] memory _relayers\\n  ) GovernanceAdmin(_roninTrustedOrganizationContract, _bridgeContract) {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roleSetter);\\n    for (uint256 _i; _i < _relayers.length; _i++) {\\n      _grantRole(RELAYER_ROLE, _relayers[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev See {GovernanceRelay-_relayProposal}.\\n   *\\n   * Requirements:\\n   * - The method caller is relayer.\\n   *\\n   */\\n  function relayProposal(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyRole(RELAYER_ROLE) {\\n    _relayProposal(_proposal, _supports, _signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See {GovernanceRelay-_relayGlobalProposal}.\\n   *\\n   * Requirements:\\n   * - The method caller is relayer.\\n   *\\n   */\\n  function relayGlobalProposal(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyRole(RELAYER_ROLE) {\\n    _relayGlobalProposal(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See {BOsGovernanceRelay-_relayVotesBySignatures}.\\n   *\\n   * Requirements:\\n   * - The method caller is relayer.\\n   *\\n   */\\n  function relayBridgeOperators(\\n    uint256 _period,\\n    address[] calldata _operators,\\n    Signature[] calldata _signatures\\n  ) external onlyRole(RELAYER_ROLE) {\\n    _relayVotesBySignatures(_operators, _signatures, _period, _getMinimumVoteWeight(), DOMAIN_SEPARATOR);\\n    TransparentUpgradeableProxyV2(payable(bridgeContract())).functionDelegateCall(\\n      abi.encodeWithSelector(_bridgeContract.replaceBridgeOperators.selector, _operators)\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc GovernanceRelay\\n   */\\n  function _sumWeights(address[] memory _governors) internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.sumGovernorWeights.selector, _governors)\\n      )\\n    );\\n    require(_success, \\\"MainchainGovernanceAdmin: proxy call `sumGovernorWeights(address[])` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @inheritdoc BOsGovernanceRelay\\n   */\\n  function _sumBridgeVoterWeights(address[] memory _governors) internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.sumBridgeVoterWeights.selector, _governors)\\n      )\\n    );\\n    require(_success, \\\"MainchainGovernanceAdmin: proxy call `sumBridgeVoterWeights(address[])` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x44cc2dbfec319730ea5bb819a64a885b72e51bd3719076879ea8ef6ecdfb7845\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200414c3803806200414c833981016040819052620000349162000489565b82827ff8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256b60001b7f599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf7f7e7935007966eb860f4a2ee3dcc9fd53fb3205ce2aa86b0126d4893d4d4c14b97fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66107e46040516020016200010f919060408082526016908201527f524f4e494e5f474f5645524e414e43455f41444d494e00000000000000000000606082015261ffff91909116602082015260800190565b60408051601f198184030181528282528051602091820120908301959095528101929092526060820152608081019190915260a0016040516020818303038152906040528051906020012014620001ac5760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e616e636541646d696e3a20696e76616c696420646f6d61696e00604482015260640160405180910390fd5b620001b7826200024d565b620001c281620002a2565b50620001d29050600085620002f1565b60005b815181101562000242576200022d7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc483838151811062000219576200021962000594565b60200260200101516200030160201b60201c565b806200023981620005aa565b915050620001d5565b5050505050620005d4565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7906020015b60405180910390a150565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae0489060200162000297565b620002fd828262000301565b5050565b6200031882826200034460201b620009b41760201c565b60008281526001602090815260409091206200033f91839062000a38620003e4821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002fd576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003a03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620003fb836001600160a01b03841662000404565b90505b92915050565b60008181526001830160205260408120546200044d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620003fe565b506000620003fe565b80516001600160a01b03811681146200046e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215620004a057600080fd5b620004ab8562000456565b93506020620004bc81870162000456565b9350620004cc6040870162000456565b60608701519093506001600160401b0380821115620004ea57600080fd5b818801915088601f830112620004ff57600080fd5b81518181111562000514576200051462000473565b8060051b604051601f19603f830116810181811085821117156200053c576200053c62000473565b60405291825284820192508381018501918b8311156200055b57600080fd5b938501935b828510156200058457620005748562000456565b8452938501939285019262000560565b989b979a50959850505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415620005cd57634e487b7160e01b600052601160045260246000fd5b5060010190565b613b6880620005e46000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80639010d07c116100c3578063ca15c8731161007c578063ca15c87314610326578063cd59658314610339578063d547741f1461034a578063d5918e611461035d578063eeb6adda14610370578063f3b7dead1461038357600080fd5b80639010d07c1461027d57806391d1485414610290578063926d7d7f146102a3578063a217fddf146102b8578063b384abef146102c0578063b5e337de1461031357600080fd5b80632f2ff15d116101155780632f2ff15d146101fe57806334d5f37b146102115780633644e5151461023157806336568abe146102465780635511cde1146102595780637eff275e1461026a57600080fd5b806301ffc9a71461015257806309ff2cb61461017a5780630b26cf661461018f578063204e1c7a146101a2578063248a9ca3146101cd575b600080fd5b610165610160366004612d35565b610396565b60405190151581526020015b60405180910390f35b61018d610188366004612dee565b6103c1565b005b61018d61019d366004612e9f565b61041c565b6101b56101b0366004612e9f565b610450565b6040516001600160a01b039091168152602001610171565b6101f06101db366004612ebc565b60009081526020819052604090206001015490565b604051908152602001610171565b61018d61020c366004612ed5565b610542565b6101f061021f366004612ebc565b60026020526000908152604090205481565b6101f0600080516020613b1383398151915281565b61018d610254366004612ed5565b61056c565b6004546001600160a01b03166101b5565b61018d610278366004612f05565b6105ea565b6101b561028b366004612f33565b610716565b61016561029e366004612ed5565b610735565b6101f0600080516020613af383398151915281565b6101f0600081565b6103036102ce366004612f33565b60036020818152600093845260408085209091529183529120805460018201546002830154929093015460ff90911692919084565b6040516101719493929190612f6b565b61018d610321366004612e9f565b61075e565b6101f0610334366004612ebc565b610786565b6005546001600160a01b03166101b5565b61018d610358366004612ed5565b61079d565b61018d61036b366004612f9b565b6107c2565b61018d61037e366004612fd1565b6108b2565b6101b5610391366004612e9f565b6108e7565b60006001600160e01b03198216635a05180f60e01b14806103bb57506103bb82610a4d565b92915050565b600080516020613af38339815191526103d981610a82565b6104148686868686600080516020613b138339815191526104026004546001600160a01b031690565b6005546001600160a01b031633610a8c565b505050505050565b3330146104445760405162461bcd60e51b815260040161043b90613014565b60405180910390fd5b61044d81610af7565b50565b6000806000836001600160a01b031660405161047690635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146104b1576040519150601f19603f3d011682016040523d82523d6000602084013e6104b6565b606091505b5091509150816105265760405162461bcd60e51b815260206004820152603560248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060696d706044820152741b195b595b9d185d1a5bdb8a0a580819985a5b1959605a1b606482015260840161043b565b8080602001905181019061053a919061305b565b949350505050565b60008281526020819052604090206001015461055d81610a82565b6105678383610b4c565b505050565b6001600160a01b03811633146105dc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161043b565b6105e68282610b6e565b5050565b3330146106095760405162461bcd60e51b815260040161043b90613014565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b179052915160009285169161065d916130a8565b6000604051808303816000865af19150503d806000811461069a576040519150601f19603f3d011682016040523d82523d6000602084013e61069f565b606091505b50509050806105675760405162461bcd60e51b815260206004820152603960248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206063686160448201527f6e676541646d696e28616464726573732960206661696c656400000000000000606482015260840161043b565b600082815260016020526040812061072e9083610b90565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b33301461077d5760405162461bcd60e51b815260040161043b90613014565b61044d81610b9c565b60008181526001602052604081206103bb90610bea565b6000828152602081905260409020600101546107b881610a82565b6105678383610b6e565b600080516020613af38339815191526107da81610a82565b6107fe858585858a6107ea610bf4565b600080516020613b13833981519152610d60565b6005546001600160a01b03166001600160a01b0316634bb5274a63901d627760e01b87876040516024016108339291906130c4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b90921682526108789160040161313e565b600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b50505050505050505050565b600080516020613af38339815191526108ca81610a82565b6104148686868686600080516020613b1383398151915233611104565b6000806000836001600160a01b031660405161090d906303e1469160e61b815260040190565b600060405180830381855afa9150503d8060008114610948576040519150601f19603f3d011682016040523d82523d6000602084013e61094d565b606091505b5091509150816105265760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206061646d60448201526b1a5b8a0a580819985a5b195960a21b606482015260840161043b565b6109be8282610735565b6105e6576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556109f43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061072e836001600160a01b038416611164565b60006001600160e01b03198216637965db0b60e01b14806103bb57506301ffc9a760e01b6001600160e01b03198316146103bb565b61044d81336111b3565b6000610aa2610a9a8b6133b8565b858585611217565b5090506000610ab8610ab38c6133b8565b6112f4565b9050610aea828b8b8b8b610ad68c610ad1896000611462565b6114b8565b610ae58d610ad18a6001611462565b6114df565b5050505050505050505050565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b610b5682826109b4565b60008281526001602052604090206105679082610a38565b610b788282611991565b600082815260016020526040902061056790826119f6565b600061072e8383611a0b565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001610b41565b60006103bb825490565b6000806000610c0b6004546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b0316637de5dedd60e01b17905291516001600160a01b039390931692634bb5274a92610c5492910161313e565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610c8d91906130a8565b600060405180830381855afa9150503d8060008114610cc8576040519150601f19603f3d011682016040523d82523d6000602084013e610ccd565b606091505b509150915081610d455760405162461bcd60e51b815260206004820152603860248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c20606d696e60448201527f696d756d566f7465576569676874282960206661696c65640000000000000000606482015260840161043b565b80806020019051810190610d599190613478565b9250505090565b6006548311610dc75760405162461bcd60e51b815260206004820152602d60248201527f424f73476f7665726e616e636552656c61793a20717565727920666f72206f7560448201526c1d19185d1959081c195c9a5bd9609a1b606482015260840161043b565b8515801590610dd557508315155b610e325760405162461bcd60e51b815260206004820152602860248201527f424f73476f7665726e616e636552656c61793a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b606482015260840161043b565b6040805160608101825260008082526020820181905291810182905290856001600160401b03811115610e6757610e67613151565b604051908082528060200260200182016040528015610e90578160200160208202803683370190505b509050600080610ed3878c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611a3592505050565b90506000610ee186836114b8565b905060005b89811015611015578a8a82818110610f0057610f00613491565b905060600201803603810190610f1691906134a7565b9550610f3082876000015188602001518960400151611a96565b858281518110610f4257610f42613491565b60200260200101906001600160a01b031690816001600160a01b031681525050848181518110610f7457610f74613491565b60200260200101516001600160a01b0316846001600160a01b031610610fe65760405162461bcd60e51b815260206004820152602160248201527f424f73476f7665726e616e636552656c61793a20696e76616c6964206f7264656044820152603960f91b606482015260840161043b565b848181518110610ff857610ff8613491565b60200260200101519350808061100d90613524565b915050610ee6565b5060008881526007602052604081209061102e86611abe565b90508881106110b357600081116110975760405162461bcd60e51b815260206004820152602760248201527f424f73476f7665726e616e636552656c61793a20696e76616c696420766f7465604482015266081dd95a59da1d60ca1b606482015260840161043b565b50805460ff191660011790555050506006859055506110fb9050565b60405162461bcd60e51b815260206004820181905260248201527f424f73476f7665726e616e636552656c61793a2072656c6179206661696c6564604482015260640161043b565b50505050505050565b611116611110886135a3565b82611c59565b50600061112a611125896135a3565b611d35565b905061115a611138896135a3565b8888888861114b89610ad1896000611462565b610ae58a610ad18a6001611462565b5050505050505050565b60008181526001830160205260408120546111ab575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103bb565b5060006103bb565b6111bd8282610735565b6105e6576111d5816001600160a01b03166014611e8f565b6111e0836020611e8f565b6040516020016111f192919061366d565b60408051601f198184030181529082905262461bcd60e51b825261043b9160040161313e565b6112506040518060c001604052806000815260200160008152602001606081526020016060815260200160608152602001606081525090565b600061125d86868661202a565b91506112688261221e565b600061127383611d35565b90506112806000826122b2565b835190925082146112a35760405162461bcd60e51b815260040161043b906136e2565b80827fedacddc6fe3387cd527f9ac55848b2e48a439a02270ed36e053a8065169b99c2856112d08b6112f4565b8b896040516112e29493929190613880565b60405180910390a35094509492505050565b6000806000806000808660400151905060008760200151905060008860600151516001600160401b0381111561132c5761132c613151565b604051908082528060200260200182016040528015611355578160200160208202803683370190505b5060808a015190915060005b82518110156113be578a60600151818151811061138057611380613491565b6020026020010151805190602001208382815181106113a1576113a1613491565b6020908102919091010152806113b681613524565b915050611361565b5082516020908102818501208551820286830120845183028584012084518402858501208e51604080517fdb316eb400de2ddff92ab4255c0cd3cba634cd5236b93386ed9328b7d822d1c797810197909752860152606085018490526080850183905260a0850182905260c08501819052929b509099509750955060e0015b6040516020818303038152906040528051906020012098505050505050505050919050565b60405160009061149a907fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2908590859060200161395b565b60405160208183030381529060405280519060200120905092915050565b60405161190160f01b6020820152602281018390526042810182905260009060620161149a565b84158015906114ed57508483145b6115475760405162461bcd60e51b815260206004820152602560248201527f476f7665726e616e636552656c61793a20696e76616c6964206172726179206c6044820152640cadccee8d60db1b606482015260840161043b565b60008080856001600160401b0381111561156357611563613151565b60405190808252806020026020018201604052801561158c578160200160208202803683370190505b5090506000866001600160401b038111156115a9576115a9613151565b6040519080825280602002602001820160405280156115d2578160200160208202803683370190505b5060408051606081018252600080825260208201819052918101829052919250908190819060005b8b8110156117f5578c8c8281811061161457611614613491565b90506060020180360381019061162a91906134a7565b91508e8e8281811061163e5761163e613491565b90506020020160208101906116539190613980565b9250600083600181111561166957611669612f55565b14156116cc576116878b836000015184602001518560400151611a96565b945084878a61169581613524565b9b50815181106116a7576116a7613491565b60200260200101906001600160a01b031690816001600160a01b03168152505061177f565b60018360018111156116e0576116e0612f55565b141561171e576116fe8a836000015184602001518560400151611a96565b945084868961170c81613524565b9a50815181106116a7576116a7613491565b60405162461bcd60e51b815260206004820152603060248201527f476f7665726e616e636552656c61793a20717565727920666f7220756e73757060448201526f706f7274656420766f7465207479706560801b606482015260840161043b565b846001600160a01b0316846001600160a01b0316106117e05760405162461bcd60e51b815260206004820152601e60248201527f476f7665726e616e636552656c61793a20696e76616c6964206f726465720000604482015260640161043b565b849350806117ed81613524565b9150506115fa565b50505085845250508281526020808c015160009081526003825260408082208e51835290925290812090611827610bf4565b90506000611834856123a5565b90508181106118ac576000811161185d5760405162461bcd60e51b815260040161043b9061399d565b825460ff1916600190811784558301546040517f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a26118a0838f612529565b505050505050506110fb565b6000826118b7612596565b6118c191906139e1565b6118cc9060016139f8565b905060006118d9866123a5565b905081811061194957600081116119025760405162461bcd60e51b815260040161043b9061399d565b845460ff1916600317855560018501546040517f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25050505050505050506110fb565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e616e636552656c61793a2072656c6179206661696c6564000000604482015260640161043b565b61199b8282610735565b156105e6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061072e836001600160a01b0384166126dd565b6000826000018281548110611a2257611a22613491565b9060005260206000200154905092915050565b8051602090810291810191909120604080517feea5e3908ac28cbdbbce8853e49444c558a0a03597e98ef19e6ff86162ed9ae38185015280820194909452606080850192909252805180850390920182526080909301909252815191012090565b6000806000611aa7878787876127d0565b91509150611ab4816128bd565b5095945050505050565b6000806000611ad56004546001600160a01b031690565b6001600160a01b0316634bb5274a63d9d5dadb60e01b86604051602401611afc9190613a10565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611b3d919060240161313e565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611b7691906130a8565b600060405180830381855afa9150503d8060008114611bb1576040519150601f19603f3d011682016040523d82523d6000602084013e611bb6565b606091505b509150915081611c455760405162461bcd60e51b815260206004820152604e60248201527f4d61696e636861696e476f7665726e616e636541646d696e3a2070726f78792060448201527f63616c6c206073756d427269646765566f74657257656967687473286164647260648201526d195cdcd6d74a580819985a5b195960921b608482015260a40161043b565b8080602001905181019061053a9190613478565b602082015160009080611cae5760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e206964604482015260640161043b565b611cb78461221e565b6000611cc285611d35565b9050611cce82826122b2565b85519093508314611cf15760405162461bcd60e51b815260040161043b906136e2565b8083837f0861aae3a90b957953a30ca9779a1e27af2feeca4205ae2e45cdd5842468a26d8888604051611d25929190613a23565b60405180910390a4505092915050565b6000806000806000808660600151905060008760400151905060008860800151516001600160401b03811115611d6d57611d6d613151565b604051908082528060200260200182016040528015611d96578160200160208202803683370190505b5060a08a015190915060005b8251811015611dff578a608001518181518110611dc157611dc1613491565b602002602001015180519060200120838281518110611de257611de2613491565b602090810291909101015280611df781613524565b915050611da2565b5082516020908102848201208551820286830120845183028584012084518402858501208e518f860151604080517f65526afa953b4e935ecd640e6905741252eedae157e79c37331ee8103c70019d9881019890985287019190915260608601526080850184905260a0850183905260c0850182905260e08501819052929b50909950975095506101000161143d565b60606000611e9e836002613a4d565b611ea99060026139f8565b6001600160401b03811115611ec057611ec0613151565b6040519080825280601f01601f191660200182016040528015611eea576020820181803683370190505b509050600360fc1b81600081518110611f0557611f05613491565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f3457611f34613491565b60200101906001600160f81b031916908160001a9053506000611f58846002613a4d565b611f639060016139f8565b90505b6001811115611fdb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f9757611f97613491565b1a60f81b828281518110611fad57611fad613491565b60200101906001600160f81b031916908160001a90535060049490941c93611fd481613a6c565b9050611f66565b50831561072e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161043b565b6120636040518060c001604052806000815260200160008152602001606081526020016060815260200160608152602001606081525090565b835181526000602080830191909152840151516001600160401b0381111561208d5761208d613151565b6040519080825280602002602001820160405280156120b6578160200160208202803683370190505b5060408083019190915284015160608083019190915284015160808083019190915284015160a082015260005b8460200151518110156122165760018560200151828151811061210857612108613491565b6020026020010151600181111561212157612121612f55565b141561216357828260400151828151811061213e5761213e613491565b60200260200101906001600160a01b031690816001600160a01b031681525050612204565b60008560200151828151811061217b5761217b613491565b6020026020010151600181111561219457612194612f55565b14156121b157838260400151828151811061213e5761213e613491565b60405162461bcd60e51b815260206004820152602260248201527f476c6f62616c50726f706f73616c3a20756e737570706f727465642074617267604482015261195d60f21b606482015260840161043b565b8061220e81613524565b9150506120e3565b509392505050565b600081604001515111801561223c5750806060015151816040015151145b80156122515750806080015151816040015151145b801561226657508060a0015151816040015151145b61044d5760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c3a20696e76616c6964206172726179206c656e6774680000604482015260640161043b565b6000828152600260205260408120805490826122cd83613524565b909155509050801561236e57600083815260036020818152604080842085855290915282205460ff169081111561230657612306612f55565b141561236e5760405162461bcd60e51b815260206004820152603160248201527f436f7265476f7665726e616e63653a2063757272656e742070726f706f73616c604482015270081a5cc81b9bdd0818dbdb5c1b195d1959607a1b606482015260840161043b565b6000838152600360205260408120839161238784613524565b93508381526020019081526020016000206001018190555092915050565b60008060006123bc6004546001600160a01b031690565b6001600160a01b0316634bb5274a635f14a1c360e01b866040516024016123e39190613a10565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612424919060240161313e565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161245d91906130a8565b600060405180830381855afa9150503d8060008114612498576040519150601f19603f3d011682016040523d82523d6000602084013e61249d565b606091505b509150915081611c455760405162461bcd60e51b815260206004820152604b60248201527f4d61696e636861696e476f7665726e616e636541646d696e3a2070726f78792060448201527f63616c6c206073756d476f7665726e6f7257656967687473286164647265737360648201526a16d74a580819985a5b195960aa1b608482015260a40161043b565b61253281612a78565b156105e657815460ff1916600217825560008061254e83612a92565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba8383604051612588929190613a83565b60405180910390a250505050565b60008060006125ad6004546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b031663926323d560e01b17905291516001600160a01b039390931692634bb5274a926125f692910161313e565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161262f91906130a8565b600060405180830381855afa9150503d806000811461266a576040519150601f19603f3d011682016040523d82523d6000602084013e61266f565b606091505b509150915081610d455760405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060746f74604482015272185b15d95a59da1d1cca0a580819985a5b1959606a1b606482015260840161043b565b600081815260018301602052604081205480156127c65760006127016001836139e1565b8554909150600090612715906001906139e1565b905081811461277a57600086600001828154811061273557612735613491565b906000526020600020015490508087600001848154811061275857612758613491565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061278b5761278b613adc565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103bb565b60009150506103bb565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561280757506000905060036128b4565b8460ff16601b1415801561281f57508460ff16601c14155b1561283057506000905060046128b4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612884573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128ad576000600192509250506128b4565b9150600090505b94509492505050565b60008160048111156128d1576128d1612f55565b14156128da5750565b60018160048111156128ee576128ee612f55565b141561293c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161043b565b600281600481111561295057612950612f55565b141561299e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161043b565b60038160048111156129b2576129b2612f55565b1415612a0b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161043b565b6004816004811115612a1f57612a1f612f55565b141561044d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161043b565b60008160200151600014806103bb57505060200151461490565b606080612a9e83612a78565b612af65760405162461bcd60e51b815260206004820152602360248201527f50726f706f73616c3a20717565727920666f7220696e76616c696420636861696044820152621b925960ea1b606482015260840161043b565b8260400151516001600160401b03811115612b1357612b13613151565b604051908082528060200260200182016040528015612b3c578160200160208202803683370190505b5091508260400151516001600160401b03811115612b5c57612b5c613151565b604051908082528060200260200182016040528015612b8f57816020015b6060815260200190600190039081612b7a5790505b50905060005b836040015151811015612d2f578360a001518181518110612bb857612bb8613491565b60200260200101515a11612c0e5760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c3a20696e73756666696369656e7420676173000000000000604482015260640161043b565b83604001518181518110612c2457612c24613491565b60200260200101516001600160a01b031684606001518281518110612c4b57612c4b613491565b60200260200101518560a001518381518110612c6957612c69613491565b60200260200101519086608001518481518110612c8857612c88613491565b6020026020010151604051612c9d91906130a8565b600060405180830381858888f193505050503d8060008114612cdb576040519150601f19603f3d011682016040523d82523d6000602084013e612ce0565b606091505b50848381518110612cf357612cf3613491565b60200260200101848481518110612d0c57612d0c613491565b60209081029190910101919091529015159052612d2881613524565b9050612b95565b50915091565b600060208284031215612d4757600080fd5b81356001600160e01b03198116811461072e57600080fd5b60008083601f840112612d7157600080fd5b5081356001600160401b03811115612d8857600080fd5b6020830191508360208260051b8501011115612da357600080fd5b9250929050565b60008083601f840112612dbc57600080fd5b5081356001600160401b03811115612dd357600080fd5b602083019150836020606083028501011115612da357600080fd5b600080600080600060608688031215612e0657600080fd5b85356001600160401b0380821115612e1d57600080fd5b9087019060a0828a031215612e3157600080fd5b90955060208701359080821115612e4757600080fd5b612e5389838a01612d5f565b90965094506040880135915080821115612e6c57600080fd5b50612e7988828901612daa565b969995985093965092949392505050565b6001600160a01b038116811461044d57600080fd5b600060208284031215612eb157600080fd5b813561072e81612e8a565b600060208284031215612ece57600080fd5b5035919050565b60008060408385031215612ee857600080fd5b823591506020830135612efa81612e8a565b809150509250929050565b60008060408385031215612f1857600080fd5b8235612f2381612e8a565b91506020830135612efa81612e8a565b60008060408385031215612f4657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b6080810160048610612f7f57612f7f612f55565b9481526020810193909352604083019190915260609091015290565b600080600080600060608688031215612fb357600080fd5b8535945060208601356001600160401b0380821115612e4757600080fd5b600080600080600060608688031215612fe957600080fd5b85356001600160401b038082111561300057600080fd5b9087019060c0828a031215612e3157600080fd5b60208082526027908201527f476f7665726e616e636541646d696e3a206f6e6c7920616c6c6f7765642073656040820152661b198b58d85b1b60ca1b606082015260800190565b60006020828403121561306d57600080fd5b815161072e81612e8a565b60005b8381101561309357818101518382015260200161307b565b838111156130a2576000848401525b50505050565b600082516130ba818460208701613078565b9190910192915050565b60208082528181018390526000908460408401835b868110156131075782356130ec81612e8a565b6001600160a01b0316825291830191908301906001016130d9565b509695505050505050565b6000815180845261312a816020860160208601613078565b601f01601f19169290920160200192915050565b60208152600061072e6020830184613112565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561318957613189613151565b60405290565b60405160c081016001600160401b038111828210171561318957613189613151565b604051601f8201601f191681016001600160401b03811182821017156131d9576131d9613151565b604052919050565b60006001600160401b038211156131fa576131fa613151565b5060051b60200190565b6002811061044d57600080fd5b600082601f83011261322257600080fd5b81356020613237613232836131e1565b6131b1565b82815260059290921b8401810191818101908684111561325657600080fd5b8286015b8481101561310757803561326d81613204565b835291830191830161325a565b600082601f83011261328b57600080fd5b8135602061329b613232836131e1565b82815260059290921b840181019181810190868411156132ba57600080fd5b8286015b8481101561310757803583529183019183016132be565b6000601f83818401126132e757600080fd5b823560206132f7613232836131e1565b82815260059290921b8501810191818101908784111561331657600080fd5b8287015b848110156133ac5780356001600160401b038082111561333a5760008081fd5b818a0191508a603f83011261334f5760008081fd5b8582013560408282111561336557613365613151565b613376828b01601f191689016131b1565b92508183528c8183860101111561338d5760008081fd5b818185018985013750600090820187015284525091830191830161331a565b50979650505050505050565b600060a082360312156133ca57600080fd5b6133d2613167565b8235815260208301356001600160401b03808211156133f057600080fd5b6133fc36838701613211565b6020840152604085013591508082111561341557600080fd5b6134213683870161327a565b6040840152606085013591508082111561343a57600080fd5b613446368387016132d5565b6060840152608085013591508082111561345f57600080fd5b5061346c3682860161327a565b60808301525092915050565b60006020828403121561348a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000606082840312156134b957600080fd5b604051606081018181106001600160401b03821117156134db576134db613151565b604052823560ff811681146134ef57600080fd5b8152602083810135908201526040928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156135385761353861350e565b5060010190565b600082601f83011261355057600080fd5b81356020613560613232836131e1565b82815260059290921b8401810191818101908684111561357f57600080fd5b8286015b8481101561310757803561359681612e8a565b8352918301918301613583565b600060c082360312156135b557600080fd5b6135bd61318f565b823581526020830135602082015260408301356001600160401b03808211156135e557600080fd5b6135f13683870161353f565b6040840152606085013591508082111561360a57600080fd5b6136163683870161327a565b6060840152608085013591508082111561362f57600080fd5b61363b368387016132d5565b608084015260a085013591508082111561365457600080fd5b506136613682860161327a565b60a08301525092915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136a5816017850160208801613078565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516136d6816028840160208801613078565b01602801949350505050565b60208082526026908201527f436f7265476f7665726e616e63653a20696e76616c69642070726f706f73616c604082015265206e6f6e636560d01b606082015260800190565b600081518084526020808501945080840160005b838110156137615781516001600160a01b03168752958201959082019060010161373c565b509495945050505050565b600081518084526020808501945080840160005b8381101561376157815187529582019590820190600101613780565b600081518084526020808501808196508360051b8101915082860160005b858110156137e45782840389526137d2848351613112565b988501989350908401906001016137ba565b5091979650505050505050565b80518252602081015160208301526000604082015160c0604085015261381a60c0850182613728565b905060608301518482036060860152613833828261376c565b9150506080830151848203608086015261384d828261379c565b91505060a083015184820360a0860152613867828261376c565b95945050505050565b6002811061044d5761044d612f55565b60808152600061389360808301876137f1565b60208381018790528382036040850152855182528581015160a083830181905281519084018190529082019060009060c08501905b808310156138f15783516138db81613870565b82529284019260019290920191908401906138c8565b5060408901519350848103604086015261390b818561376c565b935050505060608601518282036060840152613927828261379c565b91505060808601518282036080840152613941828261376c565b935050505061386760608301846001600160a01b03169052565b838152602081018390526060810161397283613870565b826040830152949350505050565b60006020828403121561399257600080fd5b813561072e81613204565b60208082526024908201527f476f7665726e616e636552656c61793a20696e76616c696420766f74652077656040820152631a59da1d60e21b606082015260800190565b6000828210156139f3576139f361350e565b500390565b60008219821115613a0b57613a0b61350e565b500190565b60208152600061072e6020830184613728565b604081526000613a3660408301856137f1565b905060018060a01b03831660208301529392505050565b6000816000190483118215151615613a6757613a6761350e565b500290565b600081613a7b57613a7b61350e565b506000190190565b604080825283519082018190526000906020906060840190828701845b82811015613abe578151151584529284019290840190600101613aa0565b50505083810382850152613ad2818661379c565b9695505050505050565b634e487b7160e01b600052603160045260246000fdfee2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4f8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256ba2646970667358221220855481b345571e97728916ee4943ca5f6fb4286d1188a843240f1341a73046fa64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80639010d07c116100c3578063ca15c8731161007c578063ca15c87314610326578063cd59658314610339578063d547741f1461034a578063d5918e611461035d578063eeb6adda14610370578063f3b7dead1461038357600080fd5b80639010d07c1461027d57806391d1485414610290578063926d7d7f146102a3578063a217fddf146102b8578063b384abef146102c0578063b5e337de1461031357600080fd5b80632f2ff15d116101155780632f2ff15d146101fe57806334d5f37b146102115780633644e5151461023157806336568abe146102465780635511cde1146102595780637eff275e1461026a57600080fd5b806301ffc9a71461015257806309ff2cb61461017a5780630b26cf661461018f578063204e1c7a146101a2578063248a9ca3146101cd575b600080fd5b610165610160366004612d35565b610396565b60405190151581526020015b60405180910390f35b61018d610188366004612dee565b6103c1565b005b61018d61019d366004612e9f565b61041c565b6101b56101b0366004612e9f565b610450565b6040516001600160a01b039091168152602001610171565b6101f06101db366004612ebc565b60009081526020819052604090206001015490565b604051908152602001610171565b61018d61020c366004612ed5565b610542565b6101f061021f366004612ebc565b60026020526000908152604090205481565b6101f0600080516020613b1383398151915281565b61018d610254366004612ed5565b61056c565b6004546001600160a01b03166101b5565b61018d610278366004612f05565b6105ea565b6101b561028b366004612f33565b610716565b61016561029e366004612ed5565b610735565b6101f0600080516020613af383398151915281565b6101f0600081565b6103036102ce366004612f33565b60036020818152600093845260408085209091529183529120805460018201546002830154929093015460ff90911692919084565b6040516101719493929190612f6b565b61018d610321366004612e9f565b61075e565b6101f0610334366004612ebc565b610786565b6005546001600160a01b03166101b5565b61018d610358366004612ed5565b61079d565b61018d61036b366004612f9b565b6107c2565b61018d61037e366004612fd1565b6108b2565b6101b5610391366004612e9f565b6108e7565b60006001600160e01b03198216635a05180f60e01b14806103bb57506103bb82610a4d565b92915050565b600080516020613af38339815191526103d981610a82565b6104148686868686600080516020613b138339815191526104026004546001600160a01b031690565b6005546001600160a01b031633610a8c565b505050505050565b3330146104445760405162461bcd60e51b815260040161043b90613014565b60405180910390fd5b61044d81610af7565b50565b6000806000836001600160a01b031660405161047690635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146104b1576040519150601f19603f3d011682016040523d82523d6000602084013e6104b6565b606091505b5091509150816105265760405162461bcd60e51b815260206004820152603560248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060696d706044820152741b195b595b9d185d1a5bdb8a0a580819985a5b1959605a1b606482015260840161043b565b8080602001905181019061053a919061305b565b949350505050565b60008281526020819052604090206001015461055d81610a82565b6105678383610b4c565b505050565b6001600160a01b03811633146105dc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161043b565b6105e68282610b6e565b5050565b3330146106095760405162461bcd60e51b815260040161043b90613014565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b179052915160009285169161065d916130a8565b6000604051808303816000865af19150503d806000811461069a576040519150601f19603f3d011682016040523d82523d6000602084013e61069f565b606091505b50509050806105675760405162461bcd60e51b815260206004820152603960248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206063686160448201527f6e676541646d696e28616464726573732960206661696c656400000000000000606482015260840161043b565b600082815260016020526040812061072e9083610b90565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b33301461077d5760405162461bcd60e51b815260040161043b90613014565b61044d81610b9c565b60008181526001602052604081206103bb90610bea565b6000828152602081905260409020600101546107b881610a82565b6105678383610b6e565b600080516020613af38339815191526107da81610a82565b6107fe858585858a6107ea610bf4565b600080516020613b13833981519152610d60565b6005546001600160a01b03166001600160a01b0316634bb5274a63901d627760e01b87876040516024016108339291906130c4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b90921682526108789160040161313e565b600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b50505050505050505050565b600080516020613af38339815191526108ca81610a82565b6104148686868686600080516020613b1383398151915233611104565b6000806000836001600160a01b031660405161090d906303e1469160e61b815260040190565b600060405180830381855afa9150503d8060008114610948576040519150601f19603f3d011682016040523d82523d6000602084013e61094d565b606091505b5091509150816105265760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206061646d60448201526b1a5b8a0a580819985a5b195960a21b606482015260840161043b565b6109be8282610735565b6105e6576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556109f43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061072e836001600160a01b038416611164565b60006001600160e01b03198216637965db0b60e01b14806103bb57506301ffc9a760e01b6001600160e01b03198316146103bb565b61044d81336111b3565b6000610aa2610a9a8b6133b8565b858585611217565b5090506000610ab8610ab38c6133b8565b6112f4565b9050610aea828b8b8b8b610ad68c610ad1896000611462565b6114b8565b610ae58d610ad18a6001611462565b6114df565b5050505050505050505050565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b610b5682826109b4565b60008281526001602052604090206105679082610a38565b610b788282611991565b600082815260016020526040902061056790826119f6565b600061072e8383611a0b565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001610b41565b60006103bb825490565b6000806000610c0b6004546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b0316637de5dedd60e01b17905291516001600160a01b039390931692634bb5274a92610c5492910161313e565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610c8d91906130a8565b600060405180830381855afa9150503d8060008114610cc8576040519150601f19603f3d011682016040523d82523d6000602084013e610ccd565b606091505b509150915081610d455760405162461bcd60e51b815260206004820152603860248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c20606d696e60448201527f696d756d566f7465576569676874282960206661696c65640000000000000000606482015260840161043b565b80806020019051810190610d599190613478565b9250505090565b6006548311610dc75760405162461bcd60e51b815260206004820152602d60248201527f424f73476f7665726e616e636552656c61793a20717565727920666f72206f7560448201526c1d19185d1959081c195c9a5bd9609a1b606482015260840161043b565b8515801590610dd557508315155b610e325760405162461bcd60e51b815260206004820152602860248201527f424f73476f7665726e616e636552656c61793a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b606482015260840161043b565b6040805160608101825260008082526020820181905291810182905290856001600160401b03811115610e6757610e67613151565b604051908082528060200260200182016040528015610e90578160200160208202803683370190505b509050600080610ed3878c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611a3592505050565b90506000610ee186836114b8565b905060005b89811015611015578a8a82818110610f0057610f00613491565b905060600201803603810190610f1691906134a7565b9550610f3082876000015188602001518960400151611a96565b858281518110610f4257610f42613491565b60200260200101906001600160a01b031690816001600160a01b031681525050848181518110610f7457610f74613491565b60200260200101516001600160a01b0316846001600160a01b031610610fe65760405162461bcd60e51b815260206004820152602160248201527f424f73476f7665726e616e636552656c61793a20696e76616c6964206f7264656044820152603960f91b606482015260840161043b565b848181518110610ff857610ff8613491565b60200260200101519350808061100d90613524565b915050610ee6565b5060008881526007602052604081209061102e86611abe565b90508881106110b357600081116110975760405162461bcd60e51b815260206004820152602760248201527f424f73476f7665726e616e636552656c61793a20696e76616c696420766f7465604482015266081dd95a59da1d60ca1b606482015260840161043b565b50805460ff191660011790555050506006859055506110fb9050565b60405162461bcd60e51b815260206004820181905260248201527f424f73476f7665726e616e636552656c61793a2072656c6179206661696c6564604482015260640161043b565b50505050505050565b611116611110886135a3565b82611c59565b50600061112a611125896135a3565b611d35565b905061115a611138896135a3565b8888888861114b89610ad1896000611462565b610ae58a610ad18a6001611462565b5050505050505050565b60008181526001830160205260408120546111ab575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103bb565b5060006103bb565b6111bd8282610735565b6105e6576111d5816001600160a01b03166014611e8f565b6111e0836020611e8f565b6040516020016111f192919061366d565b60408051601f198184030181529082905262461bcd60e51b825261043b9160040161313e565b6112506040518060c001604052806000815260200160008152602001606081526020016060815260200160608152602001606081525090565b600061125d86868661202a565b91506112688261221e565b600061127383611d35565b90506112806000826122b2565b835190925082146112a35760405162461bcd60e51b815260040161043b906136e2565b80827fedacddc6fe3387cd527f9ac55848b2e48a439a02270ed36e053a8065169b99c2856112d08b6112f4565b8b896040516112e29493929190613880565b60405180910390a35094509492505050565b6000806000806000808660400151905060008760200151905060008860600151516001600160401b0381111561132c5761132c613151565b604051908082528060200260200182016040528015611355578160200160208202803683370190505b5060808a015190915060005b82518110156113be578a60600151818151811061138057611380613491565b6020026020010151805190602001208382815181106113a1576113a1613491565b6020908102919091010152806113b681613524565b915050611361565b5082516020908102818501208551820286830120845183028584012084518402858501208e51604080517fdb316eb400de2ddff92ab4255c0cd3cba634cd5236b93386ed9328b7d822d1c797810197909752860152606085018490526080850183905260a0850182905260c08501819052929b509099509750955060e0015b6040516020818303038152906040528051906020012098505050505050505050919050565b60405160009061149a907fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2908590859060200161395b565b60405160208183030381529060405280519060200120905092915050565b60405161190160f01b6020820152602281018390526042810182905260009060620161149a565b84158015906114ed57508483145b6115475760405162461bcd60e51b815260206004820152602560248201527f476f7665726e616e636552656c61793a20696e76616c6964206172726179206c6044820152640cadccee8d60db1b606482015260840161043b565b60008080856001600160401b0381111561156357611563613151565b60405190808252806020026020018201604052801561158c578160200160208202803683370190505b5090506000866001600160401b038111156115a9576115a9613151565b6040519080825280602002602001820160405280156115d2578160200160208202803683370190505b5060408051606081018252600080825260208201819052918101829052919250908190819060005b8b8110156117f5578c8c8281811061161457611614613491565b90506060020180360381019061162a91906134a7565b91508e8e8281811061163e5761163e613491565b90506020020160208101906116539190613980565b9250600083600181111561166957611669612f55565b14156116cc576116878b836000015184602001518560400151611a96565b945084878a61169581613524565b9b50815181106116a7576116a7613491565b60200260200101906001600160a01b031690816001600160a01b03168152505061177f565b60018360018111156116e0576116e0612f55565b141561171e576116fe8a836000015184602001518560400151611a96565b945084868961170c81613524565b9a50815181106116a7576116a7613491565b60405162461bcd60e51b815260206004820152603060248201527f476f7665726e616e636552656c61793a20717565727920666f7220756e73757060448201526f706f7274656420766f7465207479706560801b606482015260840161043b565b846001600160a01b0316846001600160a01b0316106117e05760405162461bcd60e51b815260206004820152601e60248201527f476f7665726e616e636552656c61793a20696e76616c6964206f726465720000604482015260640161043b565b849350806117ed81613524565b9150506115fa565b50505085845250508281526020808c015160009081526003825260408082208e51835290925290812090611827610bf4565b90506000611834856123a5565b90508181106118ac576000811161185d5760405162461bcd60e51b815260040161043b9061399d565b825460ff1916600190811784558301546040517f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a26118a0838f612529565b505050505050506110fb565b6000826118b7612596565b6118c191906139e1565b6118cc9060016139f8565b905060006118d9866123a5565b905081811061194957600081116119025760405162461bcd60e51b815260040161043b9061399d565b845460ff1916600317855560018501546040517f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25050505050505050506110fb565b60405162461bcd60e51b815260206004820152601d60248201527f476f7665726e616e636552656c61793a2072656c6179206661696c6564000000604482015260640161043b565b61199b8282610735565b156105e6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061072e836001600160a01b0384166126dd565b6000826000018281548110611a2257611a22613491565b9060005260206000200154905092915050565b8051602090810291810191909120604080517feea5e3908ac28cbdbbce8853e49444c558a0a03597e98ef19e6ff86162ed9ae38185015280820194909452606080850192909252805180850390920182526080909301909252815191012090565b6000806000611aa7878787876127d0565b91509150611ab4816128bd565b5095945050505050565b6000806000611ad56004546001600160a01b031690565b6001600160a01b0316634bb5274a63d9d5dadb60e01b86604051602401611afc9190613a10565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611b3d919060240161313e565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611b7691906130a8565b600060405180830381855afa9150503d8060008114611bb1576040519150601f19603f3d011682016040523d82523d6000602084013e611bb6565b606091505b509150915081611c455760405162461bcd60e51b815260206004820152604e60248201527f4d61696e636861696e476f7665726e616e636541646d696e3a2070726f78792060448201527f63616c6c206073756d427269646765566f74657257656967687473286164647260648201526d195cdcd6d74a580819985a5b195960921b608482015260a40161043b565b8080602001905181019061053a9190613478565b602082015160009080611cae5760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e206964604482015260640161043b565b611cb78461221e565b6000611cc285611d35565b9050611cce82826122b2565b85519093508314611cf15760405162461bcd60e51b815260040161043b906136e2565b8083837f0861aae3a90b957953a30ca9779a1e27af2feeca4205ae2e45cdd5842468a26d8888604051611d25929190613a23565b60405180910390a4505092915050565b6000806000806000808660600151905060008760400151905060008860800151516001600160401b03811115611d6d57611d6d613151565b604051908082528060200260200182016040528015611d96578160200160208202803683370190505b5060a08a015190915060005b8251811015611dff578a608001518181518110611dc157611dc1613491565b602002602001015180519060200120838281518110611de257611de2613491565b602090810291909101015280611df781613524565b915050611da2565b5082516020908102848201208551820286830120845183028584012084518402858501208e518f860151604080517f65526afa953b4e935ecd640e6905741252eedae157e79c37331ee8103c70019d9881019890985287019190915260608601526080850184905260a0850183905260c0850182905260e08501819052929b50909950975095506101000161143d565b60606000611e9e836002613a4d565b611ea99060026139f8565b6001600160401b03811115611ec057611ec0613151565b6040519080825280601f01601f191660200182016040528015611eea576020820181803683370190505b509050600360fc1b81600081518110611f0557611f05613491565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f3457611f34613491565b60200101906001600160f81b031916908160001a9053506000611f58846002613a4d565b611f639060016139f8565b90505b6001811115611fdb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f9757611f97613491565b1a60f81b828281518110611fad57611fad613491565b60200101906001600160f81b031916908160001a90535060049490941c93611fd481613a6c565b9050611f66565b50831561072e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161043b565b6120636040518060c001604052806000815260200160008152602001606081526020016060815260200160608152602001606081525090565b835181526000602080830191909152840151516001600160401b0381111561208d5761208d613151565b6040519080825280602002602001820160405280156120b6578160200160208202803683370190505b5060408083019190915284015160608083019190915284015160808083019190915284015160a082015260005b8460200151518110156122165760018560200151828151811061210857612108613491565b6020026020010151600181111561212157612121612f55565b141561216357828260400151828151811061213e5761213e613491565b60200260200101906001600160a01b031690816001600160a01b031681525050612204565b60008560200151828151811061217b5761217b613491565b6020026020010151600181111561219457612194612f55565b14156121b157838260400151828151811061213e5761213e613491565b60405162461bcd60e51b815260206004820152602260248201527f476c6f62616c50726f706f73616c3a20756e737570706f727465642074617267604482015261195d60f21b606482015260840161043b565b8061220e81613524565b9150506120e3565b509392505050565b600081604001515111801561223c5750806060015151816040015151145b80156122515750806080015151816040015151145b801561226657508060a0015151816040015151145b61044d5760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c3a20696e76616c6964206172726179206c656e6774680000604482015260640161043b565b6000828152600260205260408120805490826122cd83613524565b909155509050801561236e57600083815260036020818152604080842085855290915282205460ff169081111561230657612306612f55565b141561236e5760405162461bcd60e51b815260206004820152603160248201527f436f7265476f7665726e616e63653a2063757272656e742070726f706f73616c604482015270081a5cc81b9bdd0818dbdb5c1b195d1959607a1b606482015260840161043b565b6000838152600360205260408120839161238784613524565b93508381526020019081526020016000206001018190555092915050565b60008060006123bc6004546001600160a01b031690565b6001600160a01b0316634bb5274a635f14a1c360e01b866040516024016123e39190613a10565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612424919060240161313e565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161245d91906130a8565b600060405180830381855afa9150503d8060008114612498576040519150601f19603f3d011682016040523d82523d6000602084013e61249d565b606091505b509150915081611c455760405162461bcd60e51b815260206004820152604b60248201527f4d61696e636861696e476f7665726e616e636541646d696e3a2070726f78792060448201527f63616c6c206073756d476f7665726e6f7257656967687473286164647265737360648201526a16d74a580819985a5b195960aa1b608482015260a40161043b565b61253281612a78565b156105e657815460ff1916600217825560008061254e83612a92565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba8383604051612588929190613a83565b60405180910390a250505050565b60008060006125ad6004546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b031663926323d560e01b17905291516001600160a01b039390931692634bb5274a926125f692910161313e565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161262f91906130a8565b600060405180830381855afa9150503d806000811461266a576040519150601f19603f3d011682016040523d82523d6000602084013e61266f565b606091505b509150915081610d455760405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060746f74604482015272185b15d95a59da1d1cca0a580819985a5b1959606a1b606482015260840161043b565b600081815260018301602052604081205480156127c65760006127016001836139e1565b8554909150600090612715906001906139e1565b905081811461277a57600086600001828154811061273557612735613491565b906000526020600020015490508087600001848154811061275857612758613491565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061278b5761278b613adc565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103bb565b60009150506103bb565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561280757506000905060036128b4565b8460ff16601b1415801561281f57508460ff16601c14155b1561283057506000905060046128b4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612884573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128ad576000600192509250506128b4565b9150600090505b94509492505050565b60008160048111156128d1576128d1612f55565b14156128da5750565b60018160048111156128ee576128ee612f55565b141561293c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161043b565b600281600481111561295057612950612f55565b141561299e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161043b565b60038160048111156129b2576129b2612f55565b1415612a0b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161043b565b6004816004811115612a1f57612a1f612f55565b141561044d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161043b565b60008160200151600014806103bb57505060200151461490565b606080612a9e83612a78565b612af65760405162461bcd60e51b815260206004820152602360248201527f50726f706f73616c3a20717565727920666f7220696e76616c696420636861696044820152621b925960ea1b606482015260840161043b565b8260400151516001600160401b03811115612b1357612b13613151565b604051908082528060200260200182016040528015612b3c578160200160208202803683370190505b5091508260400151516001600160401b03811115612b5c57612b5c613151565b604051908082528060200260200182016040528015612b8f57816020015b6060815260200190600190039081612b7a5790505b50905060005b836040015151811015612d2f578360a001518181518110612bb857612bb8613491565b60200260200101515a11612c0e5760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c3a20696e73756666696369656e7420676173000000000000604482015260640161043b565b83604001518181518110612c2457612c24613491565b60200260200101516001600160a01b031684606001518281518110612c4b57612c4b613491565b60200260200101518560a001518381518110612c6957612c69613491565b60200260200101519086608001518481518110612c8857612c88613491565b6020026020010151604051612c9d91906130a8565b600060405180830381858888f193505050503d8060008114612cdb576040519150601f19603f3d011682016040523d82523d6000602084013e612ce0565b606091505b50848381518110612cf357612cf3613491565b60200260200101848481518110612d0c57612d0c613491565b60209081029190910101919091529015159052612d2881613524565b9050612b95565b50915091565b600060208284031215612d4757600080fd5b81356001600160e01b03198116811461072e57600080fd5b60008083601f840112612d7157600080fd5b5081356001600160401b03811115612d8857600080fd5b6020830191508360208260051b8501011115612da357600080fd5b9250929050565b60008083601f840112612dbc57600080fd5b5081356001600160401b03811115612dd357600080fd5b602083019150836020606083028501011115612da357600080fd5b600080600080600060608688031215612e0657600080fd5b85356001600160401b0380821115612e1d57600080fd5b9087019060a0828a031215612e3157600080fd5b90955060208701359080821115612e4757600080fd5b612e5389838a01612d5f565b90965094506040880135915080821115612e6c57600080fd5b50612e7988828901612daa565b969995985093965092949392505050565b6001600160a01b038116811461044d57600080fd5b600060208284031215612eb157600080fd5b813561072e81612e8a565b600060208284031215612ece57600080fd5b5035919050565b60008060408385031215612ee857600080fd5b823591506020830135612efa81612e8a565b809150509250929050565b60008060408385031215612f1857600080fd5b8235612f2381612e8a565b91506020830135612efa81612e8a565b60008060408385031215612f4657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b6080810160048610612f7f57612f7f612f55565b9481526020810193909352604083019190915260609091015290565b600080600080600060608688031215612fb357600080fd5b8535945060208601356001600160401b0380821115612e4757600080fd5b600080600080600060608688031215612fe957600080fd5b85356001600160401b038082111561300057600080fd5b9087019060c0828a031215612e3157600080fd5b60208082526027908201527f476f7665726e616e636541646d696e3a206f6e6c7920616c6c6f7765642073656040820152661b198b58d85b1b60ca1b606082015260800190565b60006020828403121561306d57600080fd5b815161072e81612e8a565b60005b8381101561309357818101518382015260200161307b565b838111156130a2576000848401525b50505050565b600082516130ba818460208701613078565b9190910192915050565b60208082528181018390526000908460408401835b868110156131075782356130ec81612e8a565b6001600160a01b0316825291830191908301906001016130d9565b509695505050505050565b6000815180845261312a816020860160208601613078565b601f01601f19169290920160200192915050565b60208152600061072e6020830184613112565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561318957613189613151565b60405290565b60405160c081016001600160401b038111828210171561318957613189613151565b604051601f8201601f191681016001600160401b03811182821017156131d9576131d9613151565b604052919050565b60006001600160401b038211156131fa576131fa613151565b5060051b60200190565b6002811061044d57600080fd5b600082601f83011261322257600080fd5b81356020613237613232836131e1565b6131b1565b82815260059290921b8401810191818101908684111561325657600080fd5b8286015b8481101561310757803561326d81613204565b835291830191830161325a565b600082601f83011261328b57600080fd5b8135602061329b613232836131e1565b82815260059290921b840181019181810190868411156132ba57600080fd5b8286015b8481101561310757803583529183019183016132be565b6000601f83818401126132e757600080fd5b823560206132f7613232836131e1565b82815260059290921b8501810191818101908784111561331657600080fd5b8287015b848110156133ac5780356001600160401b038082111561333a5760008081fd5b818a0191508a603f83011261334f5760008081fd5b8582013560408282111561336557613365613151565b613376828b01601f191689016131b1565b92508183528c8183860101111561338d5760008081fd5b818185018985013750600090820187015284525091830191830161331a565b50979650505050505050565b600060a082360312156133ca57600080fd5b6133d2613167565b8235815260208301356001600160401b03808211156133f057600080fd5b6133fc36838701613211565b6020840152604085013591508082111561341557600080fd5b6134213683870161327a565b6040840152606085013591508082111561343a57600080fd5b613446368387016132d5565b6060840152608085013591508082111561345f57600080fd5b5061346c3682860161327a565b60808301525092915050565b60006020828403121561348a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000606082840312156134b957600080fd5b604051606081018181106001600160401b03821117156134db576134db613151565b604052823560ff811681146134ef57600080fd5b8152602083810135908201526040928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156135385761353861350e565b5060010190565b600082601f83011261355057600080fd5b81356020613560613232836131e1565b82815260059290921b8401810191818101908684111561357f57600080fd5b8286015b8481101561310757803561359681612e8a565b8352918301918301613583565b600060c082360312156135b557600080fd5b6135bd61318f565b823581526020830135602082015260408301356001600160401b03808211156135e557600080fd5b6135f13683870161353f565b6040840152606085013591508082111561360a57600080fd5b6136163683870161327a565b6060840152608085013591508082111561362f57600080fd5b61363b368387016132d5565b608084015260a085013591508082111561365457600080fd5b506136613682860161327a565b60a08301525092915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136a5816017850160208801613078565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516136d6816028840160208801613078565b01602801949350505050565b60208082526026908201527f436f7265476f7665726e616e63653a20696e76616c69642070726f706f73616c604082015265206e6f6e636560d01b606082015260800190565b600081518084526020808501945080840160005b838110156137615781516001600160a01b03168752958201959082019060010161373c565b509495945050505050565b600081518084526020808501945080840160005b8381101561376157815187529582019590820190600101613780565b600081518084526020808501808196508360051b8101915082860160005b858110156137e45782840389526137d2848351613112565b988501989350908401906001016137ba565b5091979650505050505050565b80518252602081015160208301526000604082015160c0604085015261381a60c0850182613728565b905060608301518482036060860152613833828261376c565b9150506080830151848203608086015261384d828261379c565b91505060a083015184820360a0860152613867828261376c565b95945050505050565b6002811061044d5761044d612f55565b60808152600061389360808301876137f1565b60208381018790528382036040850152855182528581015160a083830181905281519084018190529082019060009060c08501905b808310156138f15783516138db81613870565b82529284019260019290920191908401906138c8565b5060408901519350848103604086015261390b818561376c565b935050505060608601518282036060840152613927828261379c565b91505060808601518282036080840152613941828261376c565b935050505061386760608301846001600160a01b03169052565b838152602081018390526060810161397283613870565b826040830152949350505050565b60006020828403121561399257600080fd5b813561072e81613204565b60208082526024908201527f476f7665726e616e636552656c61793a20696e76616c696420766f74652077656040820152631a59da1d60e21b606082015260800190565b6000828210156139f3576139f361350e565b500390565b60008219821115613a0b57613a0b61350e565b500190565b60208152600061072e6020830184613728565b604081526000613a3660408301856137f1565b905060018060a01b03831660208301529392505050565b6000816000190483118215151615613a6757613a6761350e565b500290565b600081613a7b57613a7b61350e565b506000190190565b604080825283519082018190526000906020906060840190828701845b82811015613abe578151151584529284019290840190600101613aa0565b50505083810382850152613ad2818661379c565b9695505050505050565b634e487b7160e01b600052603160045260246000fdfee2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4f8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256ba2646970667358221220855481b345571e97728916ee4943ca5f6fb4286d1188a843240f1341a73046fa64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bridgeContract()": {
        "details": "Returns the bridge contract."
      },
      "changeProxyAdmin(address,address)": {
        "details": "Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`."
      },
      "getProxyAdmin(address)": {
        "details": "Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getProxyImplementation(address)": {
        "details": "Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "relayBridgeOperators(uint256,address[],(uint8,bytes32,bytes32)[])": {
        "details": "See {BOsGovernanceRelay-_relayVotesBySignatures}. Requirements: - The method caller is relayer."
      },
      "relayGlobalProposal((uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See {GovernanceRelay-_relayGlobalProposal}. Requirements: - The method caller is relayer."
      },
      "relayProposal((uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See {GovernanceRelay-_relayProposal}. Requirements: - The method caller is relayer."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeContract(address)": {
        "details": "Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "round(uint256)": {
        "notice": "chain id = 0 for global proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4026_storage)"
      },
      {
        "astId": 7031,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "round",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7039,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "vote",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)6962_storage))"
      },
      {
        "astId": 6028,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRoninTrustedOrganization)9534"
      },
      {
        "astId": 5715,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_bridgeContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBridge)8545"
      },
      {
        "astId": 6740,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_lastSyncedPeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6746,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_vote",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(IsolatedVote)6394_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)8545": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)9534": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_enum(VoteStatus)10217": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_struct(Signature)10209_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignatureConsumer.Signature)",
        "numberOfBytes": "32",
        "value": "t_struct(Signature)10209_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4026_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4026_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)6962_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalVote)6962_storage)"
      },
      "t_mapping(t_uint256,t_struct(IsolatedVote)6394_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IsolatedGovernance.IsolatedVote)",
        "numberOfBytes": "32",
        "value": "t_struct(IsolatedVote)6394_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)6962_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreGovernance.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)6962_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4026_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4025,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3725_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(IsolatedVote)6394_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.IsolatedVote",
        "members": [
          {
            "astId": 6381,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10217"
          },
          {
            "astId": 6383,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6388,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 6393,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "weight",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ProposalVote)6962_storage": {
        "encoding": "inplace",
        "label": "struct CoreGovernance.ProposalVote",
        "members": [
          {
            "astId": 6942,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10217"
          },
          {
            "astId": 6944,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6946,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "againstVoteWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6948,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "forVoteWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6952,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "forVoted",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6956,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "againstVoted",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6961,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "sig",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_struct(Signature)10209_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3725_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3720,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3724,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Signature)10209_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConsumer.Signature",
        "members": [
          {
            "astId": 10204,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "v",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10206,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "r",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10208,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "s",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}