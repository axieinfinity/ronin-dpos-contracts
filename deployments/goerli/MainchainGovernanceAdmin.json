{
  "address": "0x249e1aA055a8523883305CdA6C5166bc2f76a243",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roninChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_roleSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_relayers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrBridgeOperatorSetIsAlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCurrentProposalIsNotCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrEmptyArray",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ErrInsufficientGas",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ErrInvalidChainId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidExpiryTimestamp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidOrderOfBridgeOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidProposalNonce",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidVoteWeight",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrOnlySelfCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForOutdatedBridgeOperatorSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrRelayFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "targetNumber",
          "type": "uint256"
        }
      ],
      "name": "ErrUnsupportedTarget",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrUnsupportedVoteType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrVoteIsFinalized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "globalProposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "globalProposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GlobalProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "successCalls",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "returnDatas",
          "type": "bytes[]"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Ballot.VoteType",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "bridgeOperatorsRelayed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "changeProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalExpiryDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSyncedBridgeOperatorSetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct BridgeOperatorsBallot.BridgeOperatorSet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "proposalRelayed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct BridgeOperatorsBallot.BridgeOperatorSet",
          "name": "_ballot",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "relayBridgeOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "relayGlobalProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "relayProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryDuration",
          "type": "uint256"
        }
      ],
      "name": "setProposalExpiryDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "againstVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c178b0cb54bb6bbb1f4b2f0585a27578cdbeb9c52a60ccd5dbeac79d3729b6d",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x249e1aA055a8523883305CdA6C5166bc2f76a243",
    "transactionIndex": 48,
    "gasUsed": "3694525",
    "logsBloom": "0x
    "blockHash": "0xeaeb3d234e32c52ddf8db1d4dbf7c15a16ae4eb6ffd900d1016bb7f2379c42fd",
    "transactionHash": "0x6c178b0cb54bb6bbb1f4b2f0585a27578cdbeb9c52a60ccd5dbeac79d3729b6d",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 9476978,
        "transactionHash": "0x6c178b0cb54bb6bbb1f4b2f0585a27578cdbeb9c52a60ccd5dbeac79d3729b6d",
        "address": "0x249e1aA055a8523883305CdA6C5166bc2f76a243",
        "topics": [
          "0x865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c59",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
          "0x0000000000000000000000008236498fe00254b2ed34711d73e816aa293459c5"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0xeaeb3d234e32c52ddf8db1d4dbf7c15a16ae4eb6ffd900d1016bb7f2379c42fd"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 9476978,
        "transactionHash": "0x6c178b0cb54bb6bbb1f4b2f0585a27578cdbeb9c52a60ccd5dbeac79d3729b6d",
        "address": "0x249e1aA055a8523883305CdA6C5166bc2f76a243",
        "topics": [
          "0x865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c59",
          "0x000000000000000000000000000000000000000000000000000000000000000a",
          "0x0000000000000000000000001638be252438a97e6aef7b6488ae4c9449e38f26"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0xeaeb3d234e32c52ddf8db1d4dbf7c15a16ae4eb6ffd900d1016bb7f2379c42fd"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 9476978,
        "transactionHash": "0x6c178b0cb54bb6bbb1f4b2f0585a27578cdbeb9c52a60ccd5dbeac79d3729b6d",
        "address": "0x249e1aA055a8523883305CdA6C5166bc2f76a243",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c37b5d7891d73f2064b0ee044844e053872ef941",
          "0x000000000000000000000000968d0cd7343f711216817e617d3f92a23dc91c07"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0xeaeb3d234e32c52ddf8db1d4dbf7c15a16ae4eb6ffd900d1016bb7f2379c42fd"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 9476978,
        "transactionHash": "0x6c178b0cb54bb6bbb1f4b2f0585a27578cdbeb9c52a60ccd5dbeac79d3729b6d",
        "address": "0x249e1aA055a8523883305CdA6C5166bc2f76a243",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4",
          "0x000000000000000000000000c37b5d7891d73f2064b0ee044844e053872ef941",
          "0x000000000000000000000000968d0cd7343f711216817e617d3f92a23dc91c07"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0xeaeb3d234e32c52ddf8db1d4dbf7c15a16ae4eb6ffd900d1016bb7f2379c42fd"
      }
    ],
    "blockNumber": 9476978,
    "cumulativeGasUsed": "23809510",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2021,
    "0xC37b5d7891D73F2064B0eE044844e053872Ef941",
    "0x1638be252438a97E6AeF7B6488AE4C9449e38F26",
    "0x8236498FE00254b2ED34711d73e816aA293459C5",
    [
      "0xC37b5d7891D73F2064B0eE044844e053872Ef941"
    ]
  ],
  "numDeployments": 7,
  "solcInputHash": "4a6c2d91e409e6ff92e726e537003433",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roninChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_roleSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_relayers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrBridgeOperatorSetIsAlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCurrentProposalIsNotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEmptyArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ErrInsufficientGas\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidExpiryTimestamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidOrderOfBridgeOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidProposalNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidVoteWeight\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrOnlySelfCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForOutdatedBridgeOperatorSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRelayFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"targetNumber\",\"type\":\"uint256\"}],\"name\":\"ErrUnsupportedTarget\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrUnsupportedVoteType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrVoteIsFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"globalProposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GlobalProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"bridgeOperatorsRelayed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSyncedBridgeOperatorSetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct BridgeOperatorsBallot.BridgeOperatorSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"proposalRelayed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct BridgeOperatorsBallot.BridgeOperatorSet\",\"name\":\"_ballot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayBridgeOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayGlobalProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"relayProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryDuration\",\"type\":\"uint256\"}],\"name\":\"setProposalExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrBridgeOperatorSetIsAlreadyVoted()\":[{\"details\":\"Error indicating that the bridge operator set has already been voted.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrCurrentProposalIsNotCompleted()\":[{\"details\":\"Error thrown when the current proposal is not completed.\"}],\"ErrEmptyArray()\":[{\"details\":\"Error indicating that an array is empty when it should contain elements.\"}],\"ErrInsufficientGas(bytes32)\":[{\"details\":\"Error thrown when there is insufficient gas to execute a function.\"}],\"ErrInvalidChainId(bytes4,uint256,uint256)\":[{\"details\":\"Error indicating that the chain ID is invalid.\",\"params\":{\"actual\":\"Current chain ID that executing function.\",\"expected\":\"Expected chain ID required for the tx to success.\",\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid chain ID.\"}}],\"ErrInvalidExpiryTimestamp()\":[{\"details\":\"Error thrown when an invalid expiry timestamp is provided.\"}],\"ErrInvalidOrder(bytes4)\":[{\"details\":\"Error indicating that an order is invalid.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid order.\"}}],\"ErrInvalidOrderOfBridgeOperator()\":[{\"details\":\"Error thrown when an invalid order of the bridge operator is detected.\"}],\"ErrInvalidProposalNonce(bytes4)\":[{\"details\":\"Error indicating that the proposal nonce is invalid.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\"}}],\"ErrInvalidVoteWeight(bytes4)\":[{\"details\":\"Error indicating that a vote weight is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that encountered an invalid vote weight.\"}}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrOnlySelfCall(bytes4)\":[{\"details\":\"Error indicating that a function can only be called by the contract itself.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that can only be called by the contract itself.\"}}],\"ErrQueryForOutdatedBridgeOperatorSet()\":[{\"details\":\"Error indicating that a query was made for an outdated bridge operator set.\"}],\"ErrRelayFailed(bytes4)\":[{\"details\":\"Error indicating that a relay call has failed.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the relay call that failed.\"}}],\"ErrUnsupportedTarget(bytes32,uint256)\":[{\"details\":\"Error thrown when attempting to interact with an unsupported target.\"}],\"ErrUnsupportedVoteType(bytes4)\":[{\"details\":\"Error indicating that a vote type is not supported.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an unsupported vote type.\"}}],\"ErrVoteIsFinalized()\":[{\"details\":\"Error thrown when attempting to interact with a finalized vote.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"bridgeOperatorsRelayed(uint256,uint256)\":{\"details\":\"Returns whether the voter `_voter` casted vote for bridge operators at a specific period.\"},\"changeProxyAdmin(address,address)\":{\"details\":\"Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getProposalExpiryDuration()\":{\"details\":\"Returns the proposal expiry duration.\"},\"getProxyAdmin(address)\":{\"details\":\"Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getProxyImplementation(address)\":{\"details\":\"Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"lastSyncedBridgeOperatorSetInfo()\":{\"details\":\"Returns the synced bridge operator set info.\"},\"proposalRelayed(uint256,uint256)\":{\"details\":\"Returns whether the voter `_voter` casted vote for the proposal.\"},\"relayBridgeOperators((uint256,uint256,address[]),(uint8,bytes32,bytes32)[])\":{\"details\":\"See `BOsGovernanceRelay-_relayVotesBySignatures`. Requirements: - The method caller is relayer.\"},\"relayGlobalProposal((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceRelay-_relayGlobalProposal`. Requirements: - The method caller is relayer.\"},\"relayProposal((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceRelay-_relayProposal`. Requirements: - The method caller is relayer.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setProposalExpiryDuration(uint256)\":{\"details\":\"Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"round(uint256)\":{\"notice\":\"chain id = 0 for global proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mainchain/MainchainGovernanceAdmin.sol\":\"MainchainGovernanceAdmin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ronin/contracts/=./contracts/\",\":bridge-operator-governance/=contracts/extensions/bridge-operator-governance/\",\":collections/=contracts/extensions/collections/\",\":consumers/=contracts/extensions/consumers/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":forwarder/=contracts/extensions/forwarder/\",\":sequential-governance/=contracts/extensions/sequential-governance/\",\":slash-indicator/=contracts/interfaces/slash-indicator/\",\":staking/=contracts/interfaces/staking/\",\":validator/=contracts/interfaces/validator/\",\":version-control/=contracts/extensions/version-control/\"]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/extensions/GovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport \\\"../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport { ErrorHandler } from \\\"../libraries/ErrorHandler.sol\\\";\\nimport { HasGovernanceAdminDeprecated, HasBridgeDeprecated } from \\\"../utils/DeprecatedSlots.sol\\\";\\n\\nabstract contract GovernanceAdmin is CoreGovernance, HasContracts, HasGovernanceAdminDeprecated, HasBridgeDeprecated {\\n  using ErrorHandler for bool;\\n\\n  uint256 public roninChainId;\\n  /// @dev Domain separator\\n  bytes32 public DOMAIN_SEPARATOR;\\n\\n  modifier onlySelfCall() {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 _roninChainId,\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    uint256 _proposalExpiryDuration\\n  ) CoreGovernance(_proposalExpiryDuration) {\\n    roninChainId = _roninChainId;\\n\\n    /*\\n     * DOMAIN_SEPARATOR = keccak256(\\n     *  abi.encode(\\n     *    keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n     *    keccak256(\\\"GovernanceAdmin\\\"), // name hash\\n     *    keccak256(\\\"2\\\"), // version hash\\n     *    keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", _roninChainId)) // salt\\n     *  )\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n\\n      // See abi.encode implementation: https://github.com/axieinfinity/ronin/blob/569ebd5a782da5601c6aba22799dc9b4afd39da9/accounts/abi/argument.go#L227-L267\\n      mstore(ptr, 0x40) // offset bytes\\n      mstore(add(ptr, 0x20), _roninChainId)\\n      mstore(add(ptr, 0x40), 0x16) // \\\"RONIN_GOVERNANCE_ADMIN\\\".length\\n      mstore(add(ptr, 0x60), 0x524f4e494e5f474f5645524e414e43455f41444d494e00000000000000000000) // bytes(\\\"RONIN_GOVERNANCE_ADMIN\\\")\\n      let salt := keccak256(ptr, 0x80) // keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", _roninChainId))\\n\\n      mstore(ptr, 0x599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf) // keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\")\\n      mstore(add(ptr, 0x20), 0x7e7935007966eb860f4a2ee3dcc9fd53fb3205ce2aa86b0126d4893d4d4c14b9) // keccak256(\\\"GovernanceAdmin\\\")\\n      mstore(add(ptr, 0x40), 0xad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5) // keccak256(\\\"2\\\")\\n      mstore(add(ptr, 0x60), salt)\\n      sstore(DOMAIN_SEPARATOR.slot, keccak256(ptr, 0x80))\\n    }\\n\\n    _setContract(ContractType.BRIDGE, _bridgeContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, _roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual override onlySelfCall {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   *\\n   * Requirements:\\n   * - Only allowing self-call to this method, since this contract does not have admin.\\n   *\\n   */\\n  function setProposalExpiryDuration(uint256 _expiryDuration) external onlySelfCall {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyImplementation(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    bytes4 _selector = 0x5c60da1b;\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(abi.encodeWithSelector(_selector));\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the proposal expiry duration.\\n   */\\n  function getProposalExpiryDuration() external view returns (uint256) {\\n    return super._getProposalExpiryDuration();\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyAdmin(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    bytes4 _selector = 0xf851a440;\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(abi.encodeWithSelector(_selector));\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `_proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - This contract must be the current admin of `_proxy`.\\n   *\\n   */\\n  function changeProxyAdmin(address _proxy, address _newAdmin) external onlySelfCall {\\n    // bytes4(keccak256(\\\"changeAdmin(address)\\\"))\\n    bytes4 _selector = 0x8f283970;\\n    (bool _success, bytes memory _returndata) = _proxy.call(abi.encodeWithSelector(_selector, _newAdmin));\\n    _success.handleRevert(_selector, _returndata);\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getMinimumVoteWeight`.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual override returns (uint256) {\\n    bytes4 _selector = IQuorum.minimumVoteWeight.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION).staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector)\\n      )\\n    );\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getTotalWeights`.\\n   */\\n  function _getTotalWeights() internal view virtual override returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.totalWeights.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION).staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector)\\n      )\\n    );\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Internal method to check method caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The method caller must be this contract.\\n   *\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n}\\n\",\"keccak256\":\"0x212b5d8fcb2419aa3e4760a6e251804320f63479de08f92260393aeb1b23f0c2\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/bridge-operator-governance/BOsGovernanceRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\nimport \\\"../../libraries/BridgeOperatorsBallot.sol\\\";\\nimport \\\"../../libraries/AddressArrayUtils.sol\\\";\\nimport \\\"../../libraries/IsolatedGovernance.sol\\\";\\n\\nabstract contract BOsGovernanceRelay is SignatureConsumer, VoteStatusConsumer {\\n  /**\\n   * @dev Error indicating that the bridge operator set has already been voted.\\n   */\\n  error ErrBridgeOperatorSetIsAlreadyVoted();\\n\\n  /// @dev The last the brige operator set info.\\n  BridgeOperatorsBallot.BridgeOperatorSet internal _lastSyncedBridgeOperatorSetInfo;\\n  /// @dev Mapping from period index => epoch index => bridge operators vote\\n  mapping(uint256 => mapping(uint256 => IsolatedGovernance.Vote)) internal _vote;\\n\\n  /**\\n   * @dev Returns the synced bridge operator set info.\\n   */\\n  function lastSyncedBridgeOperatorSetInfo() external view returns (BridgeOperatorsBallot.BridgeOperatorSet memory) {\\n    return _lastSyncedBridgeOperatorSetInfo;\\n  }\\n\\n  /**\\n   * @dev Relays votes by signatures.\\n   *\\n   * Requirements:\\n   * - The period of voting is larger than the last synced period.\\n   * - The arrays are not empty.\\n   * - The signature signers are in order.\\n   *\\n   * @notice Does not store the voter signature into storage.\\n   *\\n   */\\n  function _relayVotesBySignatures(\\n    BridgeOperatorsBallot.BridgeOperatorSet calldata _ballot,\\n    Signature[] calldata _signatures,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _domainSeperator\\n  ) internal {\\n    if (\\n      _ballot.period < _lastSyncedBridgeOperatorSetInfo.period ||\\n      _ballot.epoch <= _lastSyncedBridgeOperatorSetInfo.epoch\\n    ) revert ErrQueryForOutdatedBridgeOperatorSet();\\n\\n    BridgeOperatorsBallot.verifyBallot(_ballot);\\n\\n    if (AddressArrayUtils.isEqual(_ballot.operators, _lastSyncedBridgeOperatorSetInfo.operators))\\n      revert ErrBridgeOperatorSetIsAlreadyVoted();\\n\\n    if (_signatures.length == 0) revert ErrEmptyArray();\\n\\n    Signature calldata _sig;\\n    address[] memory _signers = new address[](_signatures.length);\\n    address _lastSigner;\\n    bytes32 _hash = BridgeOperatorsBallot.hash(_ballot);\\n    bytes32 _digest = ECDSA.toTypedDataHash(_domainSeperator, _hash);\\n\\n    for (uint256 _i = 0; _i < _signatures.length; ) {\\n      _sig = _signatures[_i];\\n      _signers[_i] = ECDSA.recover(_digest, _sig.v, _sig.r, _sig.s);\\n      if (_lastSigner >= _signers[_i]) revert ErrInvalidOrder(msg.sig);\\n      _lastSigner = _signers[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    IsolatedGovernance.Vote storage _v = _vote[_ballot.period][_ballot.epoch];\\n    uint256 _totalVoteWeight = _sumBridgeVoterWeights(_signers);\\n    if (_totalVoteWeight >= _minimumVoteWeight) {\\n      if (_totalVoteWeight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n      _v.status = VoteStatus.Approved;\\n      _lastSyncedBridgeOperatorSetInfo = _ballot;\\n      return;\\n    }\\n\\n    revert ErrRelayFailed(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Returns the weight of the governor list.\\n   */\\n  function _sumBridgeVoterWeights(address[] memory _bridgeVoters) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xfad76538432e1ce16bfabd84250e781539031ccf66790d041c3d51f0334e67a8\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0d5cda6bbab5672cc7983efd0cf1f9a4e4fb1a7a2c1cfb50d38aedd052230f91\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/CoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/ChainTypeConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer, ChainTypeConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Error thrown when attempting to interact with a finalized vote.\\n   */\\n  error ErrVoteIsFinalized();\\n\\n  /**\\n   * @dev Error thrown when the current proposal is not completed.\\n   */\\n  error ErrCurrentProposalIsNotCompleted();\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    address[] forVoteds; // Array of addresses voting for\\n    address[] againstVoteds; // Array of addresses voting against\\n    uint256 expiryTimestamp;\\n    mapping(address => Signature) sig;\\n    mapping(address => bool) voted;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when a proposal is created\\n  event GlobalProposalCreated(\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    bytes32 globalProposalHash,\\n    GlobalProposal.GlobalProposalDetail globalProposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is expired\\n  event ProposalExpired(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  uint256 private _proposalExpiryDuration;\\n\\n  constructor(uint256 _expiryDuration) {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Creates new voting round by calculating the `_round` number of chain `_chainId`.\\n   * Increases the `_round` number if the previous one is not expired. Delete the previous proposal\\n   * if it is expired and not increase the `_round`.\\n   */\\n  function _createVotingRound(uint256 _chainId) internal returns (uint256 _round) {\\n    _round = round[_chainId];\\n    // Skip checking for the first ever round\\n    if (_round == 0) {\\n      _round = round[_chainId] = 1;\\n    } else {\\n      ProposalVote storage _latestProposalVote = vote[_chainId][_round];\\n      bool _isExpired = _tryDeleteExpiredVotingRound(_latestProposalVote);\\n      // Skip increasing round number if the latest round is expired, allow the vote to be overridden\\n      if (!_isExpired) {\\n        if (_latestProposalVote.status == VoteStatus.Pending) revert ErrCurrentProposalIsNotCompleted();\\n        unchecked {\\n          _round = ++round[_chainId];\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Saves new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _saveVotingRound(ProposalVote storage _vote, bytes32 _proposalHash, uint256 _expiryTimestamp) internal {\\n    _vote.hash = _proposalHash;\\n    _vote.expiryTimestamp = _expiryTimestamp;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 _chainId,\\n    uint256 _expiryTimestamp,\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal) {\\n    if (_chainId == 0) revert ErrInvalidChainId(msg.sig, 0, block.chainid);\\n    uint256 _round = _createVotingRound(_chainId);\\n\\n    _proposal = Proposal.ProposalDetail(_round, _chainId, _expiryTimestamp, _targets, _values, _calldatas, _gasAmounts);\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _saveVotingRound(vote[_chainId][_round], _proposalHash, _expiryTimestamp);\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(\\n    Proposal.ProposalDetail memory _proposal,\\n    address _creator\\n  ) internal virtual returns (uint256 _round) {\\n    uint256 _chainId = _proposal.chainId;\\n    if (_chainId == 0) revert ErrInvalidChainId(msg.sig, 0, block.chainid);\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId);\\n    _saveVotingRound(vote[_chainId][_round], _proposalHash, _proposal.expiryTimestamp);\\n    if (_round != _proposal.nonce) revert ErrInvalidProposalNonce(msg.sig);\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes for a global proposal.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobal(\\n    uint256 _expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual {\\n    uint256 _round = _createVotingRound(0);\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal = GlobalProposal.GlobalProposalDetail(\\n      _round,\\n      _expiryTimestamp,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _saveVotingRound(vote[0][_round], _proposalHash, _expiryTimestamp);\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes global proposal struct.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobalStruct(\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal) {\\n    _proposal = _globalProposal.into_proposal_detail(_roninTrustedOrganizationContract, _gatewayContract);\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    uint256 _round = _createVotingRound(0);\\n    _saveVotingRound(vote[0][_round], _proposalHash, _globalProposal.expiryTimestamp);\\n\\n    if (_round != _proposal.nonce) revert ErrInvalidProposalNonce(msg.sig);\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support,\\n    uint256 _minimumForVoteWeight,\\n    uint256 _minimumAgainstVoteWeight,\\n    address _voter,\\n    Signature memory _signature,\\n    uint256 _voterWeight\\n  ) internal virtual returns (bool _done) {\\n    uint256 _chainId = _proposal.chainId;\\n    uint256 _round = _proposal.nonce;\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    if (_tryDeleteExpiredVotingRound(_vote)) {\\n      return true;\\n    }\\n\\n    if (round[_proposal.chainId] != _round) revert ErrInvalidProposalNonce(msg.sig);\\n    if (_vote.status != VoteStatus.Pending) revert ErrVoteIsFinalized();\\n    if (_voted(_vote, _voter)) revert ErrAlreadyVoted(_voter);\\n\\n    _vote.voted[_voter] = true;\\n    // Stores the signature if it is not empty\\n    if (_signature.r > 0 || _signature.s > 0 || _signature.v > 0) {\\n      _vote.sig[_voter] = _signature;\\n    }\\n    emit ProposalVoted(_vote.hash, _voter, _support, _voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (_support == Ballot.VoteType.For) {\\n      _vote.forVoteds.push(_voter);\\n      _forVoteWeight = _vote.forVoteWeight += _voterWeight;\\n    } else if (_support == Ballot.VoteType.Against) {\\n      _vote.againstVoteds.push(_voter);\\n      _againstVoteWeight = _vote.againstVoteWeight += _voterWeight;\\n    } else revert ErrUnsupportedVoteType(msg.sig);\\n\\n    if (_forVoteWeight >= _minimumForVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n    } else if (_againstVoteWeight >= _minimumAgainstVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev When the contract is on Ronin chain, checks whether the proposal is expired and delete it if is expired.\\n   *\\n   * Emits the event `ProposalExpired` if the vote is expired.\\n   *\\n   * Note: This function assumes the vote `_proposalVote` is already created, consider verifying the vote's existence\\n   * before or it will emit an unexpected event of `ProposalExpired`.\\n   */\\n  function _tryDeleteExpiredVotingRound(ProposalVote storage _proposalVote) internal returns (bool _isExpired) {\\n    _isExpired =\\n      _getChainType() == ChainType.RoninChain &&\\n      _proposalVote.status == VoteStatus.Pending &&\\n      _proposalVote.expiryTimestamp <= block.timestamp;\\n\\n    if (_isExpired) {\\n      emit ProposalExpired(_proposalVote.hash);\\n\\n      for (uint256 _i; _i < _proposalVote.forVoteds.length; ) {\\n        delete _proposalVote.voted[_proposalVote.forVoteds[_i]];\\n        delete _proposalVote.sig[_proposalVote.forVoteds[_i]];\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n      for (uint256 _i; _i < _proposalVote.againstVoteds.length; ) {\\n        delete _proposalVote.voted[_proposalVote.againstVoteds[_i]];\\n        delete _proposalVote.sig[_proposalVote.againstVoteds[_i]];\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n      delete _proposalVote.status;\\n      delete _proposalVote.hash;\\n      delete _proposalVote.againstVoteWeight;\\n      delete _proposalVote.forVoteWeight;\\n      delete _proposalVote.forVoteds;\\n      delete _proposalVote.againstVoteds;\\n      delete _proposalVote.expiryTimestamp;\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage _vote, Proposal.ProposalDetail memory _proposal) internal {\\n    if (_proposal.executable()) {\\n      _vote.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = _proposal.execute();\\n      emit ProposalExecuted(_vote.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   */\\n  function _setProposalExpiryDuration(uint256 _expiryDuration) internal {\\n    _proposalExpiryDuration = _expiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(ProposalVote storage _vote, address _voter) internal view returns (bool) {\\n    return _vote.voted[_voter];\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function _getProposalExpiryDuration() internal view returns (uint256) {\\n    return _proposalExpiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeights() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns current context is running on whether Ronin chain or on mainchain.\\n   */\\n  function _getChainType() internal view virtual returns (ChainType);\\n}\\n\",\"keccak256\":\"0x6b814ca405521919315ac9465a9aa24ec7e207b7af594c3342ba12f40d62b3da\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/GovernanceRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CoreGovernance.sol\\\";\\n\\nabstract contract GovernanceRelay is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Relays votes by signatures.\\n   *\\n   * @notice Does not store the voter signature into storage.\\n   *\\n   */\\n  function _relayVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    if (!(_supports.length > 0 && _supports.length == _signatures.length)) revert ErrLengthMismatch(msg.sig);\\n\\n    uint256 _forVoteCount;\\n    uint256 _againstVoteCount;\\n    address[] memory _forVoteSigners = new address[](_signatures.length);\\n    address[] memory _againstVoteSigners = new address[](_signatures.length);\\n\\n    {\\n      address _signer;\\n      address _lastSigner;\\n      Ballot.VoteType _support;\\n      Signature calldata _sig;\\n\\n      for (uint256 _i; _i < _signatures.length; ) {\\n        _sig = _signatures[_i];\\n        _support = _supports[_i];\\n\\n        if (_support == Ballot.VoteType.For) {\\n          _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n          _forVoteSigners[_forVoteCount++] = _signer;\\n        } else if (_support == Ballot.VoteType.Against) {\\n          _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n          _againstVoteSigners[_againstVoteCount++] = _signer;\\n        } else revert ErrUnsupportedVoteType(msg.sig);\\n\\n        if (_lastSigner >= _signer) revert ErrInvalidOrder(msg.sig);\\n        _lastSigner = _signer;\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_forVoteSigners, _forVoteCount)\\n      mstore(_againstVoteSigners, _againstVoteCount)\\n    }\\n\\n    ProposalVote storage _vote = vote[_proposal.chainId][_proposal.nonce];\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _totalForVoteWeight = _sumWeights(_forVoteSigners);\\n    if (_totalForVoteWeight >= _minimumForVoteWeight) {\\n      if (_totalForVoteWeight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n      return;\\n    }\\n\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n    uint256 _totalAgainstVoteWeight = _sumWeights(_againstVoteSigners);\\n    if (_totalAgainstVoteWeight >= _minimumAgainstVoteWeight) {\\n      if (_totalAgainstVoteWeight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n      return;\\n    }\\n\\n    revert ErrRelayFailed(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Relays voted proposal.\\n   *\\n   * Requirements:\\n   * - The relay proposal is finalized.\\n   *\\n   */\\n  function _relayProposal(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _relayVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Relays voted global proposal.\\n   *\\n   * Requirements:\\n   * - The relay proposal is finalized.\\n   *\\n   */\\n  function _relayGlobalProposal(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal {\\n    Proposal.ProposalDetail memory _proposal = _proposeGlobalStruct(\\n      _globalProposal,\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract,\\n      _creator\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    _relayVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns the weight of the governor list.\\n   */\\n  function _sumWeights(address[] memory _governors) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x279f77d292448593c1a2a050ca2f9956939fa61d9d62cf74a3d133587944cffc\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a bridge voter has already been added.\\n   * @param voter The address of the bridge voter that is already added.\\n   */\\n  error ErrBridgeVoterIsAlreadyAdded(address voter);\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(address addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x28b0407cf740164f3ddf4a44952423604439cda580f286c6ed1edcdb59b219d0\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract(address addr);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x5947f7f706685ce9a692da732cc0f296fcf88d38a625708354180133b3451089\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/ChainTypeConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainTypeConsumer {\\n  enum ChainType {\\n    RoninChain,\\n    Mainchain\\n  }\\n}\\n\",\"keccak256\":\"0xe0d20e00c8d237f8e0fb881abf1ff1ef114173bcb428f06f689c581666a22db7\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected,\\n    Expired\\n  }\\n}\\n\",\"keccak256\":\"0xa5045232c0c053fcf31fb3fe71942344444159c48d5f1b2063dbb06b6a1c9752\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xad507377bb0f55ca4cb85a2306fca3b2b92a3b7246abfe79e85a0dfe1fb0d14c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 private constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32 digest) {\\n    // return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, BALLOT_TYPEHASH)\\n      mstore(add(ptr, 0x20), _proposalHash)\\n      mstore(add(ptr, 0x40), _support)\\n      digest := keccak256(ptr, 0x60)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaa1e66bcd86baa6f18c7c5e9b67496535f229cbd2e2ecb4c66bcbfed2b1365de\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  /**\\n   * @dev Error thrown when an invalid order of the bridge operator is detected.\\n   */\\n  error ErrInvalidOrderOfBridgeOperator();\\n\\n  struct BridgeOperatorSet {\\n    uint256 period;\\n    uint256 epoch;\\n    address[] operators;\\n  }\\n\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,uint256 epoch,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a;\\n\\n  /**\\n   * @dev Verifies whether the ballot is valid or not.\\n   *\\n   * Requirements:\\n   * - The ballot is not for an empty operator set.\\n   * - The operator address list is in order.\\n   *\\n   */\\n  function verifyBallot(BridgeOperatorSet calldata _ballot) internal pure {\\n    if (_ballot.operators.length == 0) revert ErrEmptyArray();\\n\\n    address _addr = _ballot.operators[0];\\n    for (uint _i = 1; _i < _ballot.operators.length; ) {\\n      if (_addr >= _ballot.operators[_i]) revert ErrInvalidOrderOfBridgeOperator();\\n      _addr = _ballot.operators[_i];\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(BridgeOperatorSet memory self) internal pure returns (bytes32 digest_) {\\n    bytes32 operatorsHash;\\n    address[] memory operators = self.operators;\\n\\n    // return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _ballot.period, _ballot.epoch, _operatorsHash));\\n    assembly {\\n      operatorsHash := keccak256(add(operators, 32), mul(mload(operators), 32))\\n      let ptr := mload(0x40)\\n      mstore(ptr, BRIDGE_OPERATORS_BALLOT_TYPEHASH)\\n      mstore(add(ptr, 0x20), mload(self)) // _ballot.period\\n      mstore(add(ptr, 0x40), mload(add(self, 0x20))) // _ballot.epoch\\n      mstore(add(ptr, 0x60), operatorsHash)\\n      digest_ := keccak256(ptr, 0x80)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7671f6e599d5a33fa1e97538b1c8e04159337da5701eb6fa07b29d0566f57f81\",\"license\":\"MIT\"},\"contracts/libraries/ErrorHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ErrProxyCallFailed } from \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary ErrorHandler {\\n  /// @notice handle low level call revert if call failed,\\n  /// If extcall return empty bytes, reverts with custom error.\\n  /// @param status Status of external call\\n  /// @param callSig function signature of the calldata\\n  /// @param returnOrRevertData bytes result from external call\\n  function handleRevert(bool status, bytes4 callSig, bytes memory returnOrRevertData) internal pure {\\n    // Get the function signature of current context\\n    bytes4 msgSig = msg.sig;\\n    assembly {\\n      if iszero(status) {\\n        // Load the length of bytes array\\n        let revertLength := mload(returnOrRevertData)\\n        // Check if length != 0 => revert following reason from external call\\n        if iszero(iszero(revertLength)) {\\n          // Start of revert data bytes. The 0x20 offset is always the same.\\n          revert(add(returnOrRevertData, 0x20), revertLength)\\n        }\\n\\n        // Load free memory pointer\\n        let ptr := mload(0x40)\\n        // Store 4 bytes the function selector of ErrProxyCallFailed(msg.sig, callSig)\\n        // Equivalent to revert ErrProxyCallFailed(bytes4,bytes4)\\n        mstore(ptr, 0x8e3eda2b)\\n        // Store 4 bytes of msgSig parameter in the next slot\\n        mstore(add(ptr, 0x20), msgSig)\\n        // Store 4 bytes of callSig parameter in the next slot\\n        mstore(add(ptr, 0x40), callSig)\\n        // Revert 68 bytes of error starting from 0x1c\\n        revert(add(ptr, 0x1c), 0x44)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xab13dea63389bea2acb67c429ab9d55f154d03c982bf0b6f5e7be90dd227c084\",\"license\":\"MIT\"},\"contracts/libraries/GlobalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  /**\\n   * @dev Error thrown when attempting to interact with an unsupported target.\\n   */\\n  error ErrUnsupportedTarget(bytes32 proposalHash, uint256 targetNumber);\\n\\n  enum TargetOption {\\n    RoninTrustedOrganizationContract,\\n    GatewayContract\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    uint256 expiryTimestamp;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint256 expiryTimestamp,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory _proposal) internal pure returns (bytes32 digest_) {\\n    uint256[] memory _values = _proposal.values;\\n    TargetOption[] memory _targets = _proposal.targetOptions;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; ) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    /*\\n     * return\\n     *   keccak256(\\n     *     abi.encode(\\n     *       TYPE_HASH,\\n     *       _proposal.nonce,\\n     *       _proposal.expiryTimestamp,\\n     *       _targetsHash,\\n     *       _valuesHash,\\n     *       _calldatasHash,\\n     *       _gasAmountsHash\\n     *     )\\n     *   );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_proposal)) // _proposal.nonce\\n      mstore(add(ptr, 0x40), mload(add(_proposal, 0x20))) // _proposal.expiryTimestamp\\n\\n      let arrayHashed\\n      arrayHashed := keccak256(add(_targets, 32), mul(mload(_targets), 32)) // targetsHash\\n      mstore(add(ptr, 0x60), arrayHashed)\\n      arrayHashed := keccak256(add(_values, 32), mul(mload(_values), 32)) // _valuesHash\\n      mstore(add(ptr, 0x80), arrayHashed)\\n      arrayHashed := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32)) // _calldatasHash\\n      mstore(add(ptr, 0xa0), arrayHashed)\\n      arrayHashed := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32)) // _gasAmountsHash\\n      mstore(add(ptr, 0xc0), arrayHashed)\\n      digest_ := keccak256(ptr, 0xe0)\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function into_proposal_detail(\\n    GlobalProposalDetail memory _proposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal pure returns (Proposal.ProposalDetail memory _detail) {\\n    _detail.nonce = _proposal.nonce;\\n    _detail.expiryTimestamp = _proposal.expiryTimestamp;\\n    _detail.chainId = 0;\\n    _detail.targets = new address[](_proposal.targetOptions.length);\\n    _detail.values = _proposal.values;\\n    _detail.calldatas = _proposal.calldatas;\\n    _detail.gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _proposal.targetOptions.length; ) {\\n      if (_proposal.targetOptions[_i] == TargetOption.GatewayContract) {\\n        _detail.targets[_i] = _gatewayContract;\\n      } else if (_proposal.targetOptions[_i] == TargetOption.RoninTrustedOrganizationContract) {\\n        _detail.targets[_i] = _roninTrustedOrganizationContract;\\n      } else revert ErrUnsupportedTarget(hash(_proposal), _i);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb40940590a93c31a72f559d38717777361b79b13c25929cd130e36d581c69e91\",\"license\":\"MIT\"},\"contracts/libraries/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/consumers/VoteStatusConsumer.sol\\\";\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary IsolatedGovernance {\\n  struct Vote {\\n    VoteStatusConsumer.VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev The timestamp that voting is expired (no expiration=0)\\n    uint256 expiredAt;\\n    /// @dev The timestamp that voting is created\\n    uint256 createdAt;\\n    /// @dev The list of voters\\n    address[] voters;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function castVote(Vote storage _v, address _voter, bytes32 _hash) internal {\\n    if (_v.expiredAt > 0 && _v.expiredAt <= block.timestamp) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Expired;\\n    }\\n\\n    if (voted(_v, _voter)) revert ErrAlreadyVoted(_voter);\\n\\n    _v.voteHashOf[_voter] = _hash;\\n    _v.voters.push(_voter);\\n  }\\n\\n  /**\\n   * @dev Updates vote with the requirement of minimum vote weight.\\n   */\\n  function syncVoteStatus(\\n    Vote storage _v,\\n    uint256 _minimumVoteWeight,\\n    uint256 _votedWeightForHash,\\n    uint256 _minimumTrustedVoteWeight,\\n    uint256 _trustedVotedWeightForHash,\\n    bytes32 _hash\\n  ) internal returns (VoteStatusConsumer.VoteStatus _status) {\\n    if (\\n      _votedWeightForHash >= _minimumVoteWeight &&\\n      _trustedVotedWeightForHash >= _minimumTrustedVoteWeight &&\\n      _v.status == VoteStatusConsumer.VoteStatus.Pending\\n    ) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Approved;\\n      _v.finalHash = _hash;\\n    }\\n\\n    return _v.status;\\n  }\\n\\n  /**\\n   * @dev Returns the list of vote's addresses that voted for the hash `_hash`.\\n   */\\n  function filterByHash(Vote storage _v, bytes32 _hash) internal view returns (address[] memory _voters) {\\n    uint256 _count;\\n    _voters = new address[](_v.voters.length);\\n\\n    unchecked {\\n      for (uint _i; _i < _voters.length; ++_i) {\\n        address _voter = _v.voters[_i];\\n        if (_v.voteHashOf[_voter] == _hash) {\\n          _voters[_count++] = _voter;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_voters, _count)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function voted(Vote storage _v, address _voter) internal view returns (bool) {\\n    return _v.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0x7a78175eaa142ee84321ad63137e99bc4ec8dc4f4c45119f7329a00994964127\",\"license\":\"MIT\"},\"contracts/libraries/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ErrInvalidChainId, ErrLengthMismatch } from \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary Proposal {\\n  /**\\n   * @dev Error thrown when there is insufficient gas to execute a function.\\n   */\\n  error ErrInsufficientGas(bytes32 proposalHash);\\n\\n  /**\\n   * @dev Error thrown when an invalid expiry timestamp is provided.\\n   */\\n  error ErrInvalidExpiryTimestamp();\\n\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    uint256 expiryTimestamp;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,uint256 expiryTimestamp,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal, uint256 _maxExpiryDuration) internal view {\\n    if (\\n      !(_proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length)\\n    ) {\\n      revert ErrLengthMismatch(msg.sig);\\n    }\\n\\n    if (_proposal.expiryTimestamp > block.timestamp + _maxExpiryDuration) {\\n      revert ErrInvalidExpiryTimestamp();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32 digest_) {\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; ) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    // return\\n    //   keccak256(\\n    //     abi.encode(\\n    //       TYPE_HASH,\\n    //       _proposal.nonce,\\n    //       _proposal.chainId,\\n    //       _targetsHash,\\n    //       _valuesHash,\\n    //       _calldatasHash,\\n    //       _gasAmountsHash\\n    //     )\\n    //   );\\n    // /\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_proposal)) // _proposal.nonce\\n      mstore(add(ptr, 0x40), mload(add(_proposal, 0x20))) // _proposal.chainId\\n      mstore(add(ptr, 0x60), mload(add(_proposal, 0x40))) // expiry timestamp\\n\\n      let arrayHashed\\n      arrayHashed := keccak256(add(_targets, 32), mul(mload(_targets), 32)) // targetsHash\\n      mstore(add(ptr, 0x80), arrayHashed)\\n      arrayHashed := keccak256(add(_values, 32), mul(mload(_values), 32)) // _valuesHash\\n      mstore(add(ptr, 0xa0), arrayHashed)\\n      arrayHashed := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32)) // _calldatasHash\\n      mstore(add(ptr, 0xc0), arrayHashed)\\n      arrayHashed := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32)) // _gasAmountsHash\\n      mstore(add(ptr, 0xe0), arrayHashed)\\n      digest_ := keccak256(ptr, 0x100)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(\\n    ProposalDetail memory _proposal\\n  ) internal returns (bool[] memory _successCalls, bytes[] memory _returnDatas) {\\n    if (!executable(_proposal)) revert ErrInvalidChainId(msg.sig, _proposal.chainId, block.chainid);\\n\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ) {\\n      if (gasleft() <= _proposal.gasAmounts[_i]) revert ErrInsufficientGas(hash(_proposal));\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbc29aa4e69db7eef0034fdb795181124f86bcf2bc07b5e4a202100dbdce7f7a1\",\"license\":\"MIT\"},\"contracts/mainchain/MainchainGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../extensions/bridge-operator-governance/BOsGovernanceRelay.sol\\\";\\nimport \\\"../extensions/sequential-governance/GovernanceRelay.sol\\\";\\nimport \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport \\\"../extensions/GovernanceAdmin.sol\\\";\\nimport \\\"../interfaces/IBridge.sol\\\";\\nimport { ErrorHandler } from \\\"../libraries/ErrorHandler.sol\\\";\\n\\ncontract MainchainGovernanceAdmin is AccessControlEnumerable, GovernanceRelay, GovernanceAdmin, BOsGovernanceRelay {\\n  using ErrorHandler for bool;\\n\\n  bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n  uint256 private constant DEFAULT_EXPIRY_DURATION = 1 << 255;\\n\\n  constructor(\\n    uint256 _roninChainId,\\n    address _roleSetter,\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    address[] memory _relayers\\n  ) GovernanceAdmin(_roninChainId, _roninTrustedOrganizationContract, _bridgeContract, DEFAULT_EXPIRY_DURATION) {\\n    round[5] = 1;\\n\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roleSetter);\\n    for (uint256 _i; _i < _relayers.length; ) {\\n      _grantRole(RELAYER_ROLE, _relayers[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for the proposal.\\n   */\\n  function proposalRelayed(uint256 _chainId, uint256 _round) external view returns (bool) {\\n    return vote[_chainId][_round].status != VoteStatus.Pending;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for bridge operators at a specific period.\\n   */\\n  function bridgeOperatorsRelayed(uint256 _period, uint256 _epoch) external view returns (bool) {\\n    return _vote[_period][_epoch].status != VoteStatus.Pending;\\n  }\\n\\n  /**\\n   * @dev See `GovernanceRelay-_relayProposal`.\\n   *\\n   * Requirements:\\n   * - The method caller is relayer.\\n   *\\n   */\\n  function relayProposal(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyRole(RELAYER_ROLE) {\\n    _relayProposal(_proposal, _supports, _signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceRelay-_relayGlobalProposal`.\\n   *\\n   * Requirements:\\n   * - The method caller is relayer.\\n   *\\n   */\\n  function relayGlobalProposal(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyRole(RELAYER_ROLE) {\\n    _relayGlobalProposal(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      getContract(ContractType.RONIN_TRUSTED_ORGANIZATION),\\n      getContract(ContractType.BRIDGE),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See `BOsGovernanceRelay-_relayVotesBySignatures`.\\n   *\\n   * Requirements:\\n   * - The method caller is relayer.\\n   *\\n   */\\n  function relayBridgeOperators(\\n    BridgeOperatorsBallot.BridgeOperatorSet calldata _ballot,\\n    Signature[] calldata _signatures\\n  ) external onlyRole(RELAYER_ROLE) {\\n    _relayVotesBySignatures(_ballot, _signatures, _getMinimumVoteWeight(), DOMAIN_SEPARATOR);\\n    TransparentUpgradeableProxyV2(payable(getContract(ContractType.BRIDGE))).functionDelegateCall(\\n      abi.encodeWithSelector(IBridge.replaceBridgeOperators.selector, _ballot.operators)\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc GovernanceRelay\\n   */\\n  function _sumWeights(address[] memory _governors) internal view virtual override returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.sumGovernorWeights.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION).staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, _governors)\\n      )\\n    );\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @inheritdoc BOsGovernanceRelay\\n   */\\n  function _sumBridgeVoterWeights(address[] memory _governors) internal view virtual override returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.sumBridgeVoterWeights.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION).staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, _governors)\\n      )\\n    );\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev See {CoreGovernance-_getChainType}\\n   */\\n  function _getChainType() internal pure override returns (ChainType) {\\n    return ChainType.Mainchain;\\n  }\\n}\\n\",\"keccak256\":\"0xd886706402b668704c0a37d4731836ee7b6700d84d23ad8fe46b5a0d6b52aae0\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\",\"keccak256\":\"0xe0c75a4a82f3dc7dcf89dd5cab9ae1ec93c136b7d8210b3f9e18f3215aa69ffb\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION\\n}\\n\",\"keccak256\":\"0x65a0b062c8f963b4679a128abb3840167de1b10b32a8528787f47915a7d9ccc3\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xb3e242a9cb967a64e0ef6419a6b260b647b40082102ce3ab899ab690c84957fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620041073803806200410783398101604081905262000034916200040d565b848383600160ff1b806200004781600455565b506007849055604080518181526020810186815260169282019283527f524f4e494e5f474f5645524e414e43455f41444d494e000000000000000000006060830190815260808084207f599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf85527f7e7935007966eb860f4a2ee3dcc9fd53fb3205ce2aa86b0126d4893d4d4c14b99093527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a590945252206008556200010d600283620001cb565b6200011a600a84620001cb565b505060056000908152600260205260017fb98b78633099fa36ed8b8680c4f8092689e1e04080eb9cbb077ca38a14d7e384556200015b925090508562000275565b60005b8151811015620001bf57620001b67fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4838381518110620001a257620001a262000524565b60200260200101516200028560201b60201c565b6001016200015e565b50505050505062000550565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a8111156200020457620002046200053a565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a8111156200024857620002486200053a565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b62000281828262000285565b5050565b6200029c8282620002c860201b62000a671760201c565b6000828152600160209081526040909120620002c391839062000aeb62000368821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000281576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003243390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200037f836001600160a01b03841662000388565b90505b92915050565b6000818152600183016020526040812054620003d15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000382565b50600062000382565b80516001600160a01b0381168114620003f257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156200042657600080fd5b85519450602062000439818801620003da565b94506200044960408801620003da565b93506200045960608801620003da565b60808801519093506001600160401b03808211156200047757600080fd5b818901915089601f8301126200048c57600080fd5b815181811115620004a157620004a1620003f7565b8060051b604051601f19603f83011681018181108582111715620004c957620004c9620003f7565b60405291825284820192508381018501918c831115620004e857600080fd5b938501935b8285101562000511576200050185620003da565b84529385019392850192620004ed565b8096505050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b613ba780620005606000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063865e6fd3116100f9578063bc96180b11610097578063d547741f11610071578063d547741f146103df578063de981f1b146103f2578063f3b7dead14610405578063f589262d1461041857600080fd5b8063bc96180b146103b1578063beb3a6a1146103b9578063ca15c873146103cc57600080fd5b806391d14854116100d357806391d1485414610326578063926d7d7f14610339578063a217fddf1461034e578063b384abef1461035657600080fd5b8063865e6fd3146102ed5780638fb7ac7c146103005780639010d07c1461031357600080fd5b806334d5f37b116101665780635e05cf9e116101405780635e05cf9e1461029f57806362e52e5f146102b25780637d465f79146102c75780637eff275e146102da57600080fd5b806334d5f37b146102635780633644e5151461028357806336568abe1461028c57600080fd5b806301ffc9a7146101ae57806317ce2dd4146101d6578063204e1c7a146101ed578063248a9ca3146102185780632e96a6fb1461023b5780632f2ff15d14610250575b600080fd5b6101c16101bc366004612c3c565b61042b565b60405190151581526020015b60405180910390f35b6101df60075481565b6040519081526020016101cd565b6102006101fb366004612c7b565b610456565b6040516001600160a01b0390911681526020016101cd565b6101df610226366004612c98565b60009081526020819052604090206001015490565b61024e610249366004612c98565b610510565b005b61024e61025e366004612cb1565b610524565b6101df610271366004612c98565b60026020526000908152604090205481565b6101df60085481565b61024e61029a366004612cb1565b61054e565b61024e6102ad366004612d70565b6105d1565b6102ba610602565b6040516101cd9190612e50565b61024e6102d5366004612e87565b6106a4565b61024e6102e8366004612eca565b6106e1565b61024e6102fb366004612f07565b61079f565b6101c161030e366004612f23565b6107ba565b610200610321366004612f23565b6107f4565b6101c1610334366004612cb1565b610813565b6101df600080516020613b7b83398151915281565b6101df600081565b6103a0610364366004612f23565b600360208181526000938452604080852090915291835291208054600182015460028301549383015460069093015460ff909216939092909185565b6040516101cd959493929190612f5b565b6101df61083c565b6101c16103c7366004612f23565b61084c565b6101df6103da366004612c98565b61087d565b61024e6103ed366004612cb1565b610894565b610200610400366004612f90565b6108b9565b610200610413366004612c7b565b610934565b61024e610426366004612fab565b61097e565b60006001600160e01b03198216635a05180f60e01b1480610450575061045082610b00565b92915050565b60408051600481526024810182526020810180516001600160e01b0316635c60da1b60e01b908117909152915160009291839182916001600160a01b038716916104a0919061303f565b600060405180830381855afa9150503d80600081146104db576040519150601f19603f3d011682016040523d82523d6000602084013e6104e0565b606091505b5090925090506104f38215158483610b35565b80806020019051810190610507919061305b565b95945050505050565b610518610b7b565b61052181600455565b50565b60008281526020819052604090206001015461053f81610bab565b6105498383610bb5565b505050565b6001600160a01b03811633146105c35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105cd8282610bd7565b5050565b600080516020613b7b8339815191526105e981610bab565b6105fa868686868660085433610bf9565b505050505050565b61062660405180606001604052806000815260200160008152602001606081525090565b60408051606081018252600980548252600a54602080840191909152600b8054855181840281018401875281815294959394938601939283018282801561069657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610678575b505050505081525050905090565b600080516020613b7b8339815191526106bc81610bab565b6105fa86868686866008546106d1600a6108b9565b6106db60026108b9565b33610c59565b6106e9610b7b565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b90811790915292516000928392871691610743919061303f565b6000604051808303816000865af19150503d8060008114610780576040519150601f19603f3d011682016040523d82523d6000602084013e610785565b606091505b5090925090506107988215158483610b35565b5050505050565b6107a7610b7b565b6107b081610cb9565b6105cd8282610cef565b600080600084815260036020908152604080832086845290915290205460ff1660048111156107eb576107eb612f45565b14159392505050565b600082815260016020526040812061080c9083610d93565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061084760045490565b905090565b6000806000848152600c6020908152604080832086845290915290205460ff1660048111156107eb576107eb612f45565b600081815260016020526040812061045090610d9f565b6000828152602081905260409020600101546108af81610bab565b6105498383610bd7565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600a8111156108f0576108f0612f45565b60ff1681526020810191909152604001600020546001600160a01b031690508061092f578160405163409140df60e11b81526004016105ba9190613078565b919050565b60408051600481526024810182526020810180516001600160e01b03166303e1469160e61b908117909152915160009291839182916001600160a01b038716916104a0919061303f565b600080516020613b7b83398151915261099681610bab565b6109ac8484846109a4610da9565b600854610eb3565b6109b660026108b9565b6001600160a01b0316634bb5274a63901d627760e01b6109d96040880188613092565b6040516024016109ea9291906130db565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b9092168252610a2f91600401613155565b600060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b5050505050505050565b610a718282610813565b6105cd576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610aa73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061080c836001600160a01b03841661124f565b60006001600160e01b03198216637965db0b60e01b148061045057506301ffc9a760e01b6001600160e01b0319831614610450565b6001600160e01b03196000351683610b755781518015610b56578060208401fd5b50604051638e3eda2b81528160208201528360408201526044601c8201fd5b50505050565b333014610ba9576000356001600160e01b0319166040516307337e1960e41b81526004016105ba9190613168565b565b610521813361129e565b610bbf8282610a67565b60008281526001602052604090206105499082610aeb565b610be18282611302565b60008281526001602052604090206105499082611367565b610c0b610c05886133d7565b8261137c565b506000610c1f610c1a896133d7565b611483565b9050610a5d610c2d896133d7565b88888888610c4589610c408960006115c2565b6115fb565b610c548a610c408a60016115c2565b61163b565b6000610c6f610c678b61351c565b858585611a07565b90506000610c84610c7f8c61351c565b611b45565b9050610cac828b8b8b8b610c9d8c610c408960006115c2565b610c548d610c408a60016115c2565b5050505050505050505050565b806001600160a01b03163b60000361052157604051630bfc64a360e21b81526001600160a01b03821660048201526024016105ba565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a811115610d2557610d25612f45565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a811115610d6657610d66612f45565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b600061080c8383611c7c565b6000610450825490565b6000637de5dedd60e01b8180610dbf600a6108b9565b6040805160048152602480820183526020820180516001600160e01b03166001600160e01b0319891617905291516001600160a01b039390931692634bb5274a92610e0b929101613155565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610e44919061303f565b600060405180830381855afa9150503d8060008114610e7f576040519150601f19603f3d011682016040523d82523d6000602084013e610e84565b606091505b509092509050610e978215158483610b35565b80806020019051810190610eab91906135e6565b935050505090565b60095485351080610eca5750600a54602086013511155b15610ee8576040516312a0efa360e31b815260040160405180910390fd5b610ef185611ca6565b610fa6610f016040870187613092565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600b805460408051602080840282018101909252828152945091925090830182828015610f8657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f68575b505050505081516020908102928101929092208151830291909201201490565b15610fc457604051637dd0ee2f60e01b815260040160405180910390fd5b6000839003610fe6576040516316ee9d3b60e11b815260040160405180910390fd5b366000846001600160401b038111156110015761100161317d565b60405190808252806020026020018201604052801561102a578160200160208202803683370190505b50905060008061109661103c8a6135ff565b604080820151805160209081029181019190912082517fd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a815284518184015291909301519181019190915260608101919091526080902090565b905060006110a486836115fb565b905060005b888110156111a0578989828181106110c3576110c3613673565b6060029190910196506110ee9050826110df6020890189613689565b88602001358960400135611dc4565b85828151811061110057611100613673565b60200260200101906001600160a01b031690816001600160a01b03168152505084818151811061113257611132613673565b60200260200101516001600160a01b0316846001600160a01b031610611179576000356001600160e01b031916604051635d3dcd3160e01b81526004016105ba9190613168565b84818151811061118b5761118b613673565b602002602001015193508060010190506110a9565b5089356000908152600c60209081526040808320828e013584529091528120906111c986611dec565b90508881106112285780600003611201576000356001600160e01b031916604051637f11b8a360e11b81526004016105ba9190613168565b815460ff191660011782558b600961121982826136e6565b90505050505050505050610798565b6000356001600160e01b031916604051634ccfe64360e11b81526004016105ba9190613168565b600081815260018301602052604081205461129657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610450565b506000610450565b6112a88282610813565b6105cd576112c0816001600160a01b03166014611f03565b6112cb836020611f03565b6040516020016112dc9291906137b9565b60408051601f198184030181529082905262461bcd60e51b82526105ba91600401613155565b61130c8282610813565b156105cd576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061080c836001600160a01b03841661209e565b60208201516000908082036113be5760405163092048d160e11b8152600080356001600160e01b031916600483015260248201524660448201526064016105ba565b6004546113cc908590612191565b60006113d785611483565b90506113e282612232565b600083815260036020908152604080832084845290915290819020908701516001820184905560069091015592508451831461143f576000356001600160e01b03191660405163d4cec26960e01b81526004016105ba9190613168565b8083837fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98888604051611473929190613933565b60405180910390a4505092915050565b6080810151606082015160a083015151600092919083906001600160401b038111156114b1576114b161317d565b6040519080825280602002602001820160405280156114da578160200160208202803683370190505b5060c086015190915060005b8251811015611539578660a00151818151811061150557611505613673565b60200260200101518051906020012083828151811061152657611526613673565b60209081029190910101526001016114e6565b50604080517fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a8152875160208083019190915280890151828401529790910151606082015283518702938701939093206080840152835186029386019390932060a0830152805185029085012060c082015281518402919093012060e083015250610100902090565b604080517fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2815260208101939093528201526060902090565b60405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b841580159061164957508483145b611674576000356001600160e01b0319166040516306b5667560e21b81526004016105ba9190613168565b60008080856001600160401b038111156116905761169061317d565b6040519080825280602002602001820160405280156116b9578160200160208202803683370190505b5090506000866001600160401b038111156116d6576116d661317d565b6040519080825280602002602001820160405280156116ff578160200160208202803683370190505b50905060008060003660005b8b811015611890578c8c8281811061172557611725613673565b90506060020191508e8e8281811061173f5761173f613673565b9050602002016020810190611754919061395d565b9250600083600181111561176a5761176a612f45565b036117d45761178f8b6117806020850185613689565b84602001358560400135611dc4565b945084878a61179d8161397a565b9b50815181106117af576117af613673565b60200260200101906001600160a01b031690816001600160a01b031681525050611845565b60018360018111156117e8576117e8612f45565b0361181e576117fe8a6117806020850185613689565b945084868961180c8161397a565b9a50815181106117af576117af613673565b6000356001600160e01b031916604051630612418f60e11b81526004016105ba9190613168565b846001600160a01b0316846001600160a01b031610611885576000356001600160e01b031916604051635d3dcd3160e01b81526004016105ba9190613168565b84935060010161170b565b50505085845250508281526020808c015160009081526003825260408082208e518352909252908120906118c2610da9565b905060006118cf856122ce565b90508181106119565780600003611907576000356001600160e01b031916604051637f11b8a360e11b81526004016105ba9190613168565b825460ff1916600190811784558301546040517f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a261194a838f6122e4565b505050505050506119fe565b600082611961612351565b61196b9190613993565b6119769060016139a6565b90506000611983866122ce565b905081811061122857806000036119bb576000356001600160e01b031916604051637f11b8a360e11b81526004016105ba9190613168565b845460ff1916600317855560018501546040517f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25050505050505050505b50505050505050565b611a476040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b611a52858585612367565b9050611a696004548261219190919063ffffffff16565b6000611a7482611483565b90506000611a826000612232565b60008181527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff602090815260409091209089015160018201859055600690910155905082518114611af4576000356001600160e01b03191660405163d4cec26960e01b81526004016105ba9190613168565b81817f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca85611b218b611b45565b8b89604051611b3394939291906139b9565b60405180910390a35050949350505050565b60608101516040820151608083015151600092919083906001600160401b03811115611b7357611b7361317d565b604051908082528060200260200182016040528015611b9c578160200160208202803683370190505b5060a086015190915060005b8251811015611bfb5786608001518181518110611bc757611bc7613673565b602002602001015180519060200120838281518110611be857611be8613673565b6020908102919091010152600101611ba8565b50604080517f1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee911413508152875160208083019190915297880151918101919091528351870293870193909320606084015283518602938601939093206080830152805185029085012060a082015281518402919093012060c08301525060e0902090565b6000826000018281548110611c9357611c93613673565b9060005260206000200154905092915050565b611cb36040820182613092565b9050600003611cd5576040516316ee9d3b60e11b815260040160405180910390fd5b6000611ce46040830183613092565b6000818110611cf557611cf5613673565b9050602002016020810190611d0a9190612c7b565b905060015b611d1c6040840184613092565b905081101561054957611d326040840184613092565b82818110611d4257611d42613673565b9050602002016020810190611d579190612c7b565b6001600160a01b0316826001600160a01b031610611d8857604051630159959d60e01b815260040160405180910390fd5b611d956040840184613092565b82818110611da557611da5613673565b9050602002016020810190611dba9190612c7b565b9150600101611d0f565b6000806000611dd58787878761253d565b91509150611de28161262a565b5095945050505050565b600063d9d5dadb60e01b8180611e02600a6108b9565b6001600160a01b0316634bb5274a8487604051602401611e229190613aa7565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611e639190602401613155565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611e9c919061303f565b600060405180830381855afa9150503d8060008114611ed7576040519150601f19603f3d011682016040523d82523d6000602084013e611edc565b606091505b509092509050611eef8215158483610b35565b8080602001905181019061050791906135e6565b60606000611f128360026136c2565b611f1d9060026139a6565b6001600160401b03811115611f3457611f3461317d565b6040519080825280601f01601f191660200182016040528015611f5e576020820181803683370190505b509050600360fc1b81600081518110611f7957611f79613673565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fa857611fa8613673565b60200101906001600160f81b031916908160001a9053506000611fcc8460026136c2565b611fd79060016139a6565b90505b600181111561204f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061200b5761200b613673565b1a60f81b82828151811061202157612021613673565b60200101906001600160f81b031916908160001a90535060049490941c9361204881613af4565b9050611fda565b50831561080c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ba565b600081815260018301602052604081205480156121875760006120c2600183613993565b85549091506000906120d690600190613993565b905081811461213b5760008660000182815481106120f6576120f6613673565b906000526020600020015490508087600001848154811061211957612119613673565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061214c5761214c613b0b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610450565b6000915050610450565b60008260600151511180156121af5750816080015151826060015151145b80156121c457508160a0015151826060015151145b80156121d957508160c0015151826060015151145b612204576000356001600160e01b0319166040516306b5667560e21b81526004016105ba9190613168565b61220e81426139a6565b826040015111156105cd5760405163ad89be9d60e01b815260040160405180910390fd5b600081815260026020526040812054908190036122615750600090815260026020526040902060019081905590565b60008281526003602090815260408083208484529091528120906000825460ff16600481111561229357612293612f45565b036122b15760405163757a436360e01b815260040160405180910390fd5b505050600090815260026020526040902080546001019081905590565b6000635f14a1c360e01b8180611e02600a6108b9565b6122ed81612992565b156105cd57815460ff19166002178255600080612309836129ac565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba8383604051612343929190613b21565b60405180910390a250505050565b600063926323d560e01b8180610dbf600a6108b9565b6123a76040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b83518152602080850151604080840191909152600091830191909152840151516001600160401b038111156123de576123de61317d565b604051908082528060200260200182016040528015612407578160200160208202803683370190505b5060608083019190915284015160808083019190915284015160a08083019190915284015160c082015260005b8460400151518110156125355760018560400151828151811061245957612459613673565b6020026020010151600181111561247257612472612f45565b036124b357828260600151828151811061248e5761248e613673565b60200260200101906001600160a01b031690816001600160a01b03168152505061252d565b6000856040015182815181106124cb576124cb613673565b602002602001015160018111156124e4576124e4612f45565b0361250057838260600151828151811061248e5761248e613673565b61250985611b45565b60405163612ee33160e01b81526004810191909152602481018290526044016105ba565b600101612434565b509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156125745750600090506003612621565b8460ff16601b1415801561258c57508460ff16601c14155b1561259d5750600090506004612621565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156125f1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661261a57600060019250925050612621565b9150600090505b94509492505050565b600081600481111561263e5761263e612f45565b036126465750565b600181600481111561265a5761265a612f45565b036126a75760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105ba565b60028160048111156126bb576126bb612f45565b036127085760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105ba565b600381600481111561271c5761271c612f45565b036127745760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105ba565b600481600481111561278857612788612f45565b036105215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105ba565b60048301548110156128935782600801600084600401838154811061280757612807613673565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600484018054600786019291908490811061285057612850613673565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191681556001818101839055600290910191909155016127e0565b5060005b600583015481101561294a578260080160008460050183815481106128be576128be613673565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600584018054600786019291908490811061290757612907613673565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181810183905560029091019190915501612897565b50815460ff191682556000600183018190556002830181905560038301819055612978906004840190612c0a565b612986600583016000612c0a565b60006006830155919050565b600081602001516000148061045057505060200151461490565b6060806129b883612992565b6129f657602083015160405163092048d160e11b81526000356001600160e01b031916600482015260248101919091524660448201526064016105ba565b8260600151516001600160401b03811115612a1357612a1361317d565b604051908082528060200260200182016040528015612a3c578160200160208202803683370190505b5091508260600151516001600160401b03811115612a5c57612a5c61317d565b604051908082528060200260200182016040528015612a8f57816020015b6060815260200190600190039081612a7a5790505b50905060005b836060015151811015612c04578360c001518181518110612ab857612ab8613673565b60200260200101515a11612aeb57612acf84611483565b6040516307aec4ab60e21b81526004016105ba91815260200190565b83606001518181518110612b0157612b01613673565b60200260200101516001600160a01b031684608001518281518110612b2857612b28613673565b60200260200101518560c001518381518110612b4657612b46613673565b6020026020010151908660a001518481518110612b6557612b65613673565b6020026020010151604051612b7a919061303f565b600060405180830381858888f193505050503d8060008114612bb8576040519150601f19603f3d011682016040523d82523d6000602084013e612bbd565b606091505b50848381518110612bd057612bd0613673565b60200260200101848481518110612be957612be9613673565b60209081029190910101919091529015159052600101612a95565b50915091565b508054600082559060005260206000209081019061052191905b80821115612c385760008155600101612c24565b5090565b600060208284031215612c4e57600080fd5b81356001600160e01b03198116811461080c57600080fd5b6001600160a01b038116811461052157600080fd5b600060208284031215612c8d57600080fd5b813561080c81612c66565b600060208284031215612caa57600080fd5b5035919050565b60008060408385031215612cc457600080fd5b823591506020830135612cd681612c66565b809150509250929050565b60008083601f840112612cf357600080fd5b5081356001600160401b03811115612d0a57600080fd5b6020830191508360208260051b8501011115612d2557600080fd5b9250929050565b60008083601f840112612d3e57600080fd5b5081356001600160401b03811115612d5557600080fd5b602083019150836020606083028501011115612d2557600080fd5b600080600080600060608688031215612d8857600080fd5b85356001600160401b0380821115612d9f57600080fd5b9087019060e0828a031215612db357600080fd5b90955060208701359080821115612dc957600080fd5b612dd589838a01612ce1565b90965094506040880135915080821115612dee57600080fd5b50612dfb88828901612d2c565b969995985093965092949392505050565b600081518084526020808501945080840160005b83811015612e455781516001600160a01b031687529582019590820190600101612e20565b509495945050505050565b60208152815160208201526020820151604082015260006040830151606080840152612e7f6080840182612e0c565b949350505050565b600080600080600060608688031215612e9f57600080fd5b85356001600160401b0380821115612eb657600080fd5b9087019060c0828a031215612db357600080fd5b60008060408385031215612edd57600080fd5b8235612ee881612c66565b91506020830135612cd681612c66565b8035600b811061092f57600080fd5b60008060408385031215612f1a57600080fd5b612ee883612ef8565b60008060408385031215612f3657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60a0810160058710612f6f57612f6f612f45565b95815260208101949094526040840192909252606083015260809091015290565b600060208284031215612fa257600080fd5b61080c82612ef8565b600080600060408486031215612fc057600080fd5b83356001600160401b0380821115612fd757600080fd5b9085019060608288031215612feb57600080fd5b9093506020850135908082111561300157600080fd5b5061300e86828701612d2c565b9497909650939450505050565b60005b8381101561303657818101518382015260200161301e565b50506000910152565b6000825161305181846020870161301b565b9190910192915050565b60006020828403121561306d57600080fd5b815161080c81612c66565b60208101600b831061308c5761308c612f45565b91905290565b6000808335601e198436030181126130a957600080fd5b8301803591506001600160401b038211156130c357600080fd5b6020019150600581901b3603821315612d2557600080fd5b60208082528181018390526000908460408401835b8681101561311e57823561310381612c66565b6001600160a01b0316825291830191908301906001016130f0565b509695505050505050565b6000815180845261314181602086016020860161301b565b601f01601f19169290920160200192915050565b60208152600061080c6020830184613129565b6001600160e01b031991909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156131b5576131b561317d565b60405290565b60405160c081016001600160401b03811182821017156131b5576131b561317d565b604051601f8201601f191681016001600160401b03811182821017156132055761320561317d565b604052919050565b60006001600160401b038211156132265761322661317d565b5060051b60200190565b600082601f83011261324157600080fd5b813560206132566132518361320d565b6131dd565b82815260059290921b8401810191818101908684111561327557600080fd5b8286015b8481101561311e57803561328c81612c66565b8352918301918301613279565b600082601f8301126132aa57600080fd5b813560206132ba6132518361320d565b82815260059290921b840181019181810190868411156132d957600080fd5b8286015b8481101561311e57803583529183019183016132dd565b6000601f838184011261330657600080fd5b823560206133166132518361320d565b82815260059290921b8501810191818101908784111561333557600080fd5b8287015b848110156133cb5780356001600160401b03808211156133595760008081fd5b818a0191508a603f83011261336e5760008081fd5b858201356040828211156133845761338461317d565b613395828b01601f191689016131dd565b92508183528c818386010111156133ac5760008081fd5b8181850189850137506000908201870152845250918301918301613339565b50979650505050505050565b600060e082360312156133e957600080fd5b6133f1613193565b82358152602083013560208201526040830135604082015260608301356001600160401b038082111561342357600080fd5b61342f36838701613230565b6060840152608085013591508082111561344857600080fd5b61345436838701613299565b608084015260a085013591508082111561346d57600080fd5b613479368387016132f4565b60a084015260c085013591508082111561349257600080fd5b5061349f36828601613299565b60c08301525092915050565b6002811061052157600080fd5b600082601f8301126134c957600080fd5b813560206134d96132518361320d565b82815260059290921b840181019181810190868411156134f857600080fd5b8286015b8481101561311e57803561350f816134ab565b83529183019183016134fc565b600060c0823603121561352e57600080fd5b6135366131bb565b823581526020830135602082015260408301356001600160401b038082111561355e57600080fd5b61356a368387016134b8565b6040840152606085013591508082111561358357600080fd5b61358f36838701613299565b606084015260808501359150808211156135a857600080fd5b6135b4368387016132f4565b608084015260a08501359150808211156135cd57600080fd5b506135da36828601613299565b60a08301525092915050565b6000602082840312156135f857600080fd5b5051919050565b60006060823603121561361157600080fd5b604051606081016001600160401b0382821081831117156136345761363461317d565b816040528435835260208501356020840152604085013591508082111561365a57600080fd5b5061366736828601613230565b60408301525092915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561369b57600080fd5b813560ff8116811461080c57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610450576104506136ac565b6000813561045081612c66565b81358155600160208084013582840155600283016040850135601e1986360301811261371157600080fd5b850180356001600160401b0381111561372957600080fd5b83820191508060051b360382131561374057600080fd5b680100000000000000008111156137595761375961317d565b82548184558082101561378d5760008481528581208381019083015b808210156137895782825590880190613775565b5050505b50600092835260208320925b81811015610a5d576137aa836136d9565b84820155918401918501613799565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516137f181601785016020880161301b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161382281602884016020880161301b565b01602801949350505050565b600081518084526020808501945080840160005b83811015612e4557815187529582019590820190600101613842565b600081518084526020808501808196508360051b8101915082860160005b858110156138a6578284038952613894848351613129565b9885019893509084019060010161387c565b5091979650505050505050565b8051825260208101516020830152604081015160408301526000606082015160e060608501526138e660e0850182612e0c565b9050608083015184820360808601526138ff828261382e565b91505060a083015184820360a0860152613919828261385e565b91505060c083015184820360c0860152610507828261382e565b60408152600061394660408301856138b3565b905060018060a01b03831660208301529392505050565b60006020828403121561396f57600080fd5b813561080c816134ab565b60006001820161398c5761398c6136ac565b5060010190565b81810381811115610450576104506136ac565b80820180821115610450576104506136ac565b6080815260006139cc60808301876138b3565b60208681850152838203604085015260c08201865183528187015182840152604087015160c0604085015281815180845260e0860191508483019350600092505b80831015613a3d57835160028110613a2757613a27612f45565b8252928401926001929092019190840190613a0d565b50606089015193508481036060860152613a57818561382e565b935050505060808601518282036080840152613a73828261385e565b91505060a086015182820360a0840152613a8d828261382e565b935050505061050760608301846001600160a01b03169052565b6020808252825182820181905260009190848201906040850190845b81811015613ae85783516001600160a01b031683529284019291840191600101613ac3565b50909695505050505050565b600081613b0357613b036136ac565b506000190190565b634e487b7160e01b600052603160045260246000fd5b604080825283519082018190526000906020906060840190828701845b82811015613b5c578151151584529284019290840190600101613b3e565b50505083810382850152613b70818661385e565b969550505050505056fee2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4a164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063865e6fd3116100f9578063bc96180b11610097578063d547741f11610071578063d547741f146103df578063de981f1b146103f2578063f3b7dead14610405578063f589262d1461041857600080fd5b8063bc96180b146103b1578063beb3a6a1146103b9578063ca15c873146103cc57600080fd5b806391d14854116100d357806391d1485414610326578063926d7d7f14610339578063a217fddf1461034e578063b384abef1461035657600080fd5b8063865e6fd3146102ed5780638fb7ac7c146103005780639010d07c1461031357600080fd5b806334d5f37b116101665780635e05cf9e116101405780635e05cf9e1461029f57806362e52e5f146102b25780637d465f79146102c75780637eff275e146102da57600080fd5b806334d5f37b146102635780633644e5151461028357806336568abe1461028c57600080fd5b806301ffc9a7146101ae57806317ce2dd4146101d6578063204e1c7a146101ed578063248a9ca3146102185780632e96a6fb1461023b5780632f2ff15d14610250575b600080fd5b6101c16101bc366004612c3c565b61042b565b60405190151581526020015b60405180910390f35b6101df60075481565b6040519081526020016101cd565b6102006101fb366004612c7b565b610456565b6040516001600160a01b0390911681526020016101cd565b6101df610226366004612c98565b60009081526020819052604090206001015490565b61024e610249366004612c98565b610510565b005b61024e61025e366004612cb1565b610524565b6101df610271366004612c98565b60026020526000908152604090205481565b6101df60085481565b61024e61029a366004612cb1565b61054e565b61024e6102ad366004612d70565b6105d1565b6102ba610602565b6040516101cd9190612e50565b61024e6102d5366004612e87565b6106a4565b61024e6102e8366004612eca565b6106e1565b61024e6102fb366004612f07565b61079f565b6101c161030e366004612f23565b6107ba565b610200610321366004612f23565b6107f4565b6101c1610334366004612cb1565b610813565b6101df600080516020613b7b83398151915281565b6101df600081565b6103a0610364366004612f23565b600360208181526000938452604080852090915291835291208054600182015460028301549383015460069093015460ff909216939092909185565b6040516101cd959493929190612f5b565b6101df61083c565b6101c16103c7366004612f23565b61084c565b6101df6103da366004612c98565b61087d565b61024e6103ed366004612cb1565b610894565b610200610400366004612f90565b6108b9565b610200610413366004612c7b565b610934565b61024e610426366004612fab565b61097e565b60006001600160e01b03198216635a05180f60e01b1480610450575061045082610b00565b92915050565b60408051600481526024810182526020810180516001600160e01b0316635c60da1b60e01b908117909152915160009291839182916001600160a01b038716916104a0919061303f565b600060405180830381855afa9150503d80600081146104db576040519150601f19603f3d011682016040523d82523d6000602084013e6104e0565b606091505b5090925090506104f38215158483610b35565b80806020019051810190610507919061305b565b95945050505050565b610518610b7b565b61052181600455565b50565b60008281526020819052604090206001015461053f81610bab565b6105498383610bb5565b505050565b6001600160a01b03811633146105c35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105cd8282610bd7565b5050565b600080516020613b7b8339815191526105e981610bab565b6105fa868686868660085433610bf9565b505050505050565b61062660405180606001604052806000815260200160008152602001606081525090565b60408051606081018252600980548252600a54602080840191909152600b8054855181840281018401875281815294959394938601939283018282801561069657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610678575b505050505081525050905090565b600080516020613b7b8339815191526106bc81610bab565b6105fa86868686866008546106d1600a6108b9565b6106db60026108b9565b33610c59565b6106e9610b7b565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b90811790915292516000928392871691610743919061303f565b6000604051808303816000865af19150503d8060008114610780576040519150601f19603f3d011682016040523d82523d6000602084013e610785565b606091505b5090925090506107988215158483610b35565b5050505050565b6107a7610b7b565b6107b081610cb9565b6105cd8282610cef565b600080600084815260036020908152604080832086845290915290205460ff1660048111156107eb576107eb612f45565b14159392505050565b600082815260016020526040812061080c9083610d93565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061084760045490565b905090565b6000806000848152600c6020908152604080832086845290915290205460ff1660048111156107eb576107eb612f45565b600081815260016020526040812061045090610d9f565b6000828152602081905260409020600101546108af81610bab565b6105498383610bd7565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600a8111156108f0576108f0612f45565b60ff1681526020810191909152604001600020546001600160a01b031690508061092f578160405163409140df60e11b81526004016105ba9190613078565b919050565b60408051600481526024810182526020810180516001600160e01b03166303e1469160e61b908117909152915160009291839182916001600160a01b038716916104a0919061303f565b600080516020613b7b83398151915261099681610bab565b6109ac8484846109a4610da9565b600854610eb3565b6109b660026108b9565b6001600160a01b0316634bb5274a63901d627760e01b6109d96040880188613092565b6040516024016109ea9291906130db565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b9092168252610a2f91600401613155565b600060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b5050505050505050565b610a718282610813565b6105cd576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610aa73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061080c836001600160a01b03841661124f565b60006001600160e01b03198216637965db0b60e01b148061045057506301ffc9a760e01b6001600160e01b0319831614610450565b6001600160e01b03196000351683610b755781518015610b56578060208401fd5b50604051638e3eda2b81528160208201528360408201526044601c8201fd5b50505050565b333014610ba9576000356001600160e01b0319166040516307337e1960e41b81526004016105ba9190613168565b565b610521813361129e565b610bbf8282610a67565b60008281526001602052604090206105499082610aeb565b610be18282611302565b60008281526001602052604090206105499082611367565b610c0b610c05886133d7565b8261137c565b506000610c1f610c1a896133d7565b611483565b9050610a5d610c2d896133d7565b88888888610c4589610c408960006115c2565b6115fb565b610c548a610c408a60016115c2565b61163b565b6000610c6f610c678b61351c565b858585611a07565b90506000610c84610c7f8c61351c565b611b45565b9050610cac828b8b8b8b610c9d8c610c408960006115c2565b610c548d610c408a60016115c2565b5050505050505050505050565b806001600160a01b03163b60000361052157604051630bfc64a360e21b81526001600160a01b03821660048201526024016105ba565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a811115610d2557610d25612f45565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a811115610d6657610d66612f45565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b600061080c8383611c7c565b6000610450825490565b6000637de5dedd60e01b8180610dbf600a6108b9565b6040805160048152602480820183526020820180516001600160e01b03166001600160e01b0319891617905291516001600160a01b039390931692634bb5274a92610e0b929101613155565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610e44919061303f565b600060405180830381855afa9150503d8060008114610e7f576040519150601f19603f3d011682016040523d82523d6000602084013e610e84565b606091505b509092509050610e978215158483610b35565b80806020019051810190610eab91906135e6565b935050505090565b60095485351080610eca5750600a54602086013511155b15610ee8576040516312a0efa360e31b815260040160405180910390fd5b610ef185611ca6565b610fa6610f016040870187613092565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600b805460408051602080840282018101909252828152945091925090830182828015610f8657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f68575b505050505081516020908102928101929092208151830291909201201490565b15610fc457604051637dd0ee2f60e01b815260040160405180910390fd5b6000839003610fe6576040516316ee9d3b60e11b815260040160405180910390fd5b366000846001600160401b038111156110015761100161317d565b60405190808252806020026020018201604052801561102a578160200160208202803683370190505b50905060008061109661103c8a6135ff565b604080820151805160209081029181019190912082517fd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a815284518184015291909301519181019190915260608101919091526080902090565b905060006110a486836115fb565b905060005b888110156111a0578989828181106110c3576110c3613673565b6060029190910196506110ee9050826110df6020890189613689565b88602001358960400135611dc4565b85828151811061110057611100613673565b60200260200101906001600160a01b031690816001600160a01b03168152505084818151811061113257611132613673565b60200260200101516001600160a01b0316846001600160a01b031610611179576000356001600160e01b031916604051635d3dcd3160e01b81526004016105ba9190613168565b84818151811061118b5761118b613673565b602002602001015193508060010190506110a9565b5089356000908152600c60209081526040808320828e013584529091528120906111c986611dec565b90508881106112285780600003611201576000356001600160e01b031916604051637f11b8a360e11b81526004016105ba9190613168565b815460ff191660011782558b600961121982826136e6565b90505050505050505050610798565b6000356001600160e01b031916604051634ccfe64360e11b81526004016105ba9190613168565b600081815260018301602052604081205461129657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610450565b506000610450565b6112a88282610813565b6105cd576112c0816001600160a01b03166014611f03565b6112cb836020611f03565b6040516020016112dc9291906137b9565b60408051601f198184030181529082905262461bcd60e51b82526105ba91600401613155565b61130c8282610813565b156105cd576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061080c836001600160a01b03841661209e565b60208201516000908082036113be5760405163092048d160e11b8152600080356001600160e01b031916600483015260248201524660448201526064016105ba565b6004546113cc908590612191565b60006113d785611483565b90506113e282612232565b600083815260036020908152604080832084845290915290819020908701516001820184905560069091015592508451831461143f576000356001600160e01b03191660405163d4cec26960e01b81526004016105ba9190613168565b8083837fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98888604051611473929190613933565b60405180910390a4505092915050565b6080810151606082015160a083015151600092919083906001600160401b038111156114b1576114b161317d565b6040519080825280602002602001820160405280156114da578160200160208202803683370190505b5060c086015190915060005b8251811015611539578660a00151818151811061150557611505613673565b60200260200101518051906020012083828151811061152657611526613673565b60209081029190910101526001016114e6565b50604080517fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a8152875160208083019190915280890151828401529790910151606082015283518702938701939093206080840152835186029386019390932060a0830152805185029085012060c082015281518402919093012060e083015250610100902090565b604080517fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2815260208101939093528201526060902090565b60405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b841580159061164957508483145b611674576000356001600160e01b0319166040516306b5667560e21b81526004016105ba9190613168565b60008080856001600160401b038111156116905761169061317d565b6040519080825280602002602001820160405280156116b9578160200160208202803683370190505b5090506000866001600160401b038111156116d6576116d661317d565b6040519080825280602002602001820160405280156116ff578160200160208202803683370190505b50905060008060003660005b8b811015611890578c8c8281811061172557611725613673565b90506060020191508e8e8281811061173f5761173f613673565b9050602002016020810190611754919061395d565b9250600083600181111561176a5761176a612f45565b036117d45761178f8b6117806020850185613689565b84602001358560400135611dc4565b945084878a61179d8161397a565b9b50815181106117af576117af613673565b60200260200101906001600160a01b031690816001600160a01b031681525050611845565b60018360018111156117e8576117e8612f45565b0361181e576117fe8a6117806020850185613689565b945084868961180c8161397a565b9a50815181106117af576117af613673565b6000356001600160e01b031916604051630612418f60e11b81526004016105ba9190613168565b846001600160a01b0316846001600160a01b031610611885576000356001600160e01b031916604051635d3dcd3160e01b81526004016105ba9190613168565b84935060010161170b565b50505085845250508281526020808c015160009081526003825260408082208e518352909252908120906118c2610da9565b905060006118cf856122ce565b90508181106119565780600003611907576000356001600160e01b031916604051637f11b8a360e11b81526004016105ba9190613168565b825460ff1916600190811784558301546040517f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a261194a838f6122e4565b505050505050506119fe565b600082611961612351565b61196b9190613993565b6119769060016139a6565b90506000611983866122ce565b905081811061122857806000036119bb576000356001600160e01b031916604051637f11b8a360e11b81526004016105ba9190613168565b845460ff1916600317855560018501546040517f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25050505050505050505b50505050505050565b611a476040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b611a52858585612367565b9050611a696004548261219190919063ffffffff16565b6000611a7482611483565b90506000611a826000612232565b60008181527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff602090815260409091209089015160018201859055600690910155905082518114611af4576000356001600160e01b03191660405163d4cec26960e01b81526004016105ba9190613168565b81817f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca85611b218b611b45565b8b89604051611b3394939291906139b9565b60405180910390a35050949350505050565b60608101516040820151608083015151600092919083906001600160401b03811115611b7357611b7361317d565b604051908082528060200260200182016040528015611b9c578160200160208202803683370190505b5060a086015190915060005b8251811015611bfb5786608001518181518110611bc757611bc7613673565b602002602001015180519060200120838281518110611be857611be8613673565b6020908102919091010152600101611ba8565b50604080517f1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee911413508152875160208083019190915297880151918101919091528351870293870193909320606084015283518602938601939093206080830152805185029085012060a082015281518402919093012060c08301525060e0902090565b6000826000018281548110611c9357611c93613673565b9060005260206000200154905092915050565b611cb36040820182613092565b9050600003611cd5576040516316ee9d3b60e11b815260040160405180910390fd5b6000611ce46040830183613092565b6000818110611cf557611cf5613673565b9050602002016020810190611d0a9190612c7b565b905060015b611d1c6040840184613092565b905081101561054957611d326040840184613092565b82818110611d4257611d42613673565b9050602002016020810190611d579190612c7b565b6001600160a01b0316826001600160a01b031610611d8857604051630159959d60e01b815260040160405180910390fd5b611d956040840184613092565b82818110611da557611da5613673565b9050602002016020810190611dba9190612c7b565b9150600101611d0f565b6000806000611dd58787878761253d565b91509150611de28161262a565b5095945050505050565b600063d9d5dadb60e01b8180611e02600a6108b9565b6001600160a01b0316634bb5274a8487604051602401611e229190613aa7565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611e639190602401613155565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611e9c919061303f565b600060405180830381855afa9150503d8060008114611ed7576040519150601f19603f3d011682016040523d82523d6000602084013e611edc565b606091505b509092509050611eef8215158483610b35565b8080602001905181019061050791906135e6565b60606000611f128360026136c2565b611f1d9060026139a6565b6001600160401b03811115611f3457611f3461317d565b6040519080825280601f01601f191660200182016040528015611f5e576020820181803683370190505b509050600360fc1b81600081518110611f7957611f79613673565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fa857611fa8613673565b60200101906001600160f81b031916908160001a9053506000611fcc8460026136c2565b611fd79060016139a6565b90505b600181111561204f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061200b5761200b613673565b1a60f81b82828151811061202157612021613673565b60200101906001600160f81b031916908160001a90535060049490941c9361204881613af4565b9050611fda565b50831561080c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ba565b600081815260018301602052604081205480156121875760006120c2600183613993565b85549091506000906120d690600190613993565b905081811461213b5760008660000182815481106120f6576120f6613673565b906000526020600020015490508087600001848154811061211957612119613673565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061214c5761214c613b0b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610450565b6000915050610450565b60008260600151511180156121af5750816080015151826060015151145b80156121c457508160a0015151826060015151145b80156121d957508160c0015151826060015151145b612204576000356001600160e01b0319166040516306b5667560e21b81526004016105ba9190613168565b61220e81426139a6565b826040015111156105cd5760405163ad89be9d60e01b815260040160405180910390fd5b600081815260026020526040812054908190036122615750600090815260026020526040902060019081905590565b60008281526003602090815260408083208484529091528120906000825460ff16600481111561229357612293612f45565b036122b15760405163757a436360e01b815260040160405180910390fd5b505050600090815260026020526040902080546001019081905590565b6000635f14a1c360e01b8180611e02600a6108b9565b6122ed81612992565b156105cd57815460ff19166002178255600080612309836129ac565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba8383604051612343929190613b21565b60405180910390a250505050565b600063926323d560e01b8180610dbf600a6108b9565b6123a76040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b83518152602080850151604080840191909152600091830191909152840151516001600160401b038111156123de576123de61317d565b604051908082528060200260200182016040528015612407578160200160208202803683370190505b5060608083019190915284015160808083019190915284015160a08083019190915284015160c082015260005b8460400151518110156125355760018560400151828151811061245957612459613673565b6020026020010151600181111561247257612472612f45565b036124b357828260600151828151811061248e5761248e613673565b60200260200101906001600160a01b031690816001600160a01b03168152505061252d565b6000856040015182815181106124cb576124cb613673565b602002602001015160018111156124e4576124e4612f45565b0361250057838260600151828151811061248e5761248e613673565b61250985611b45565b60405163612ee33160e01b81526004810191909152602481018290526044016105ba565b600101612434565b509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156125745750600090506003612621565b8460ff16601b1415801561258c57508460ff16601c14155b1561259d5750600090506004612621565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156125f1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661261a57600060019250925050612621565b9150600090505b94509492505050565b600081600481111561263e5761263e612f45565b036126465750565b600181600481111561265a5761265a612f45565b036126a75760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105ba565b60028160048111156126bb576126bb612f45565b036127085760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105ba565b600381600481111561271c5761271c612f45565b036127745760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105ba565b600481600481111561278857612788612f45565b036105215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105ba565b60048301548110156128935782600801600084600401838154811061280757612807613673565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600484018054600786019291908490811061285057612850613673565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191681556001818101839055600290910191909155016127e0565b5060005b600583015481101561294a578260080160008460050183815481106128be576128be613673565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600584018054600786019291908490811061290757612907613673565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181810183905560029091019190915501612897565b50815460ff191682556000600183018190556002830181905560038301819055612978906004840190612c0a565b612986600583016000612c0a565b60006006830155919050565b600081602001516000148061045057505060200151461490565b6060806129b883612992565b6129f657602083015160405163092048d160e11b81526000356001600160e01b031916600482015260248101919091524660448201526064016105ba565b8260600151516001600160401b03811115612a1357612a1361317d565b604051908082528060200260200182016040528015612a3c578160200160208202803683370190505b5091508260600151516001600160401b03811115612a5c57612a5c61317d565b604051908082528060200260200182016040528015612a8f57816020015b6060815260200190600190039081612a7a5790505b50905060005b836060015151811015612c04578360c001518181518110612ab857612ab8613673565b60200260200101515a11612aeb57612acf84611483565b6040516307aec4ab60e21b81526004016105ba91815260200190565b83606001518181518110612b0157612b01613673565b60200260200101516001600160a01b031684608001518281518110612b2857612b28613673565b60200260200101518560c001518381518110612b4657612b46613673565b6020026020010151908660a001518481518110612b6557612b65613673565b6020026020010151604051612b7a919061303f565b600060405180830381858888f193505050503d8060008114612bb8576040519150601f19603f3d011682016040523d82523d6000602084013e612bbd565b606091505b50848381518110612bd057612bd0613673565b60200260200101848481518110612be957612be9613673565b60209081029190910101919091529015159052600101612a95565b50915091565b508054600082559060005260206000209081019061052191905b80821115612c385760008155600101612c24565b5090565b600060208284031215612c4e57600080fd5b81356001600160e01b03198116811461080c57600080fd5b6001600160a01b038116811461052157600080fd5b600060208284031215612c8d57600080fd5b813561080c81612c66565b600060208284031215612caa57600080fd5b5035919050565b60008060408385031215612cc457600080fd5b823591506020830135612cd681612c66565b809150509250929050565b60008083601f840112612cf357600080fd5b5081356001600160401b03811115612d0a57600080fd5b6020830191508360208260051b8501011115612d2557600080fd5b9250929050565b60008083601f840112612d3e57600080fd5b5081356001600160401b03811115612d5557600080fd5b602083019150836020606083028501011115612d2557600080fd5b600080600080600060608688031215612d8857600080fd5b85356001600160401b0380821115612d9f57600080fd5b9087019060e0828a031215612db357600080fd5b90955060208701359080821115612dc957600080fd5b612dd589838a01612ce1565b90965094506040880135915080821115612dee57600080fd5b50612dfb88828901612d2c565b969995985093965092949392505050565b600081518084526020808501945080840160005b83811015612e455781516001600160a01b031687529582019590820190600101612e20565b509495945050505050565b60208152815160208201526020820151604082015260006040830151606080840152612e7f6080840182612e0c565b949350505050565b600080600080600060608688031215612e9f57600080fd5b85356001600160401b0380821115612eb657600080fd5b9087019060c0828a031215612db357600080fd5b60008060408385031215612edd57600080fd5b8235612ee881612c66565b91506020830135612cd681612c66565b8035600b811061092f57600080fd5b60008060408385031215612f1a57600080fd5b612ee883612ef8565b60008060408385031215612f3657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60a0810160058710612f6f57612f6f612f45565b95815260208101949094526040840192909252606083015260809091015290565b600060208284031215612fa257600080fd5b61080c82612ef8565b600080600060408486031215612fc057600080fd5b83356001600160401b0380821115612fd757600080fd5b9085019060608288031215612feb57600080fd5b9093506020850135908082111561300157600080fd5b5061300e86828701612d2c565b9497909650939450505050565b60005b8381101561303657818101518382015260200161301e565b50506000910152565b6000825161305181846020870161301b565b9190910192915050565b60006020828403121561306d57600080fd5b815161080c81612c66565b60208101600b831061308c5761308c612f45565b91905290565b6000808335601e198436030181126130a957600080fd5b8301803591506001600160401b038211156130c357600080fd5b6020019150600581901b3603821315612d2557600080fd5b60208082528181018390526000908460408401835b8681101561311e57823561310381612c66565b6001600160a01b0316825291830191908301906001016130f0565b509695505050505050565b6000815180845261314181602086016020860161301b565b601f01601f19169290920160200192915050565b60208152600061080c6020830184613129565b6001600160e01b031991909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156131b5576131b561317d565b60405290565b60405160c081016001600160401b03811182821017156131b5576131b561317d565b604051601f8201601f191681016001600160401b03811182821017156132055761320561317d565b604052919050565b60006001600160401b038211156132265761322661317d565b5060051b60200190565b600082601f83011261324157600080fd5b813560206132566132518361320d565b6131dd565b82815260059290921b8401810191818101908684111561327557600080fd5b8286015b8481101561311e57803561328c81612c66565b8352918301918301613279565b600082601f8301126132aa57600080fd5b813560206132ba6132518361320d565b82815260059290921b840181019181810190868411156132d957600080fd5b8286015b8481101561311e57803583529183019183016132dd565b6000601f838184011261330657600080fd5b823560206133166132518361320d565b82815260059290921b8501810191818101908784111561333557600080fd5b8287015b848110156133cb5780356001600160401b03808211156133595760008081fd5b818a0191508a603f83011261336e5760008081fd5b858201356040828211156133845761338461317d565b613395828b01601f191689016131dd565b92508183528c818386010111156133ac5760008081fd5b8181850189850137506000908201870152845250918301918301613339565b50979650505050505050565b600060e082360312156133e957600080fd5b6133f1613193565b82358152602083013560208201526040830135604082015260608301356001600160401b038082111561342357600080fd5b61342f36838701613230565b6060840152608085013591508082111561344857600080fd5b61345436838701613299565b608084015260a085013591508082111561346d57600080fd5b613479368387016132f4565b60a084015260c085013591508082111561349257600080fd5b5061349f36828601613299565b60c08301525092915050565b6002811061052157600080fd5b600082601f8301126134c957600080fd5b813560206134d96132518361320d565b82815260059290921b840181019181810190868411156134f857600080fd5b8286015b8481101561311e57803561350f816134ab565b83529183019183016134fc565b600060c0823603121561352e57600080fd5b6135366131bb565b823581526020830135602082015260408301356001600160401b038082111561355e57600080fd5b61356a368387016134b8565b6040840152606085013591508082111561358357600080fd5b61358f36838701613299565b606084015260808501359150808211156135a857600080fd5b6135b4368387016132f4565b608084015260a08501359150808211156135cd57600080fd5b506135da36828601613299565b60a08301525092915050565b6000602082840312156135f857600080fd5b5051919050565b60006060823603121561361157600080fd5b604051606081016001600160401b0382821081831117156136345761363461317d565b816040528435835260208501356020840152604085013591508082111561365a57600080fd5b5061366736828601613230565b60408301525092915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561369b57600080fd5b813560ff8116811461080c57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610450576104506136ac565b6000813561045081612c66565b81358155600160208084013582840155600283016040850135601e1986360301811261371157600080fd5b850180356001600160401b0381111561372957600080fd5b83820191508060051b360382131561374057600080fd5b680100000000000000008111156137595761375961317d565b82548184558082101561378d5760008481528581208381019083015b808210156137895782825590880190613775565b5050505b50600092835260208320925b81811015610a5d576137aa836136d9565b84820155918401918501613799565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516137f181601785016020880161301b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161382281602884016020880161301b565b01602801949350505050565b600081518084526020808501945080840160005b83811015612e4557815187529582019590820190600101613842565b600081518084526020808501808196508360051b8101915082860160005b858110156138a6578284038952613894848351613129565b9885019893509084019060010161387c565b5091979650505050505050565b8051825260208101516020830152604081015160408301526000606082015160e060608501526138e660e0850182612e0c565b9050608083015184820360808601526138ff828261382e565b91505060a083015184820360a0860152613919828261385e565b91505060c083015184820360c0860152610507828261382e565b60408152600061394660408301856138b3565b905060018060a01b03831660208301529392505050565b60006020828403121561396f57600080fd5b813561080c816134ab565b60006001820161398c5761398c6136ac565b5060010190565b81810381811115610450576104506136ac565b80820180821115610450576104506136ac565b6080815260006139cc60808301876138b3565b60208681850152838203604085015260c08201865183528187015182840152604087015160c0604085015281815180845260e0860191508483019350600092505b80831015613a3d57835160028110613a2757613a27612f45565b8252928401926001929092019190840190613a0d565b50606089015193508481036060860152613a57818561382e565b935050505060808601518282036080840152613a73828261385e565b91505060a086015182820360a0840152613a8d828261382e565b935050505061050760608301846001600160a01b03169052565b6020808252825182820181905260009190848201906040850190845b81811015613ae85783516001600160a01b031683529284019291840191600101613ac3565b50909695505050505050565b600081613b0357613b036136ac565b506000190190565b634e487b7160e01b600052603160045260246000fd5b604080825283519082018190526000906020906060840190828701845b82811015613b5c578151151584529284019290840190600101613b3e565b50505083810382850152613b70818661385e565b969550505050505056fee2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4a164736f6c6343000811000a",
  "devdoc": {
    "errors": {
      "ErrBridgeOperatorSetIsAlreadyVoted()": [
        {
          "details": "Error indicating that the bridge operator set has already been voted."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrCurrentProposalIsNotCompleted()": [
        {
          "details": "Error thrown when the current proposal is not completed."
        }
      ],
      "ErrEmptyArray()": [
        {
          "details": "Error indicating that an array is empty when it should contain elements."
        }
      ],
      "ErrInsufficientGas(bytes32)": [
        {
          "details": "Error thrown when there is insufficient gas to execute a function."
        }
      ],
      "ErrInvalidChainId(bytes4,uint256,uint256)": [
        {
          "details": "Error indicating that the chain ID is invalid.",
          "params": {
            "actual": "Current chain ID that executing function.",
            "expected": "Expected chain ID required for the tx to success.",
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid chain ID."
          }
        }
      ],
      "ErrInvalidExpiryTimestamp()": [
        {
          "details": "Error thrown when an invalid expiry timestamp is provided."
        }
      ],
      "ErrInvalidOrder(bytes4)": [
        {
          "details": "Error indicating that an order is invalid.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid order."
          }
        }
      ],
      "ErrInvalidOrderOfBridgeOperator()": [
        {
          "details": "Error thrown when an invalid order of the bridge operator is detected."
        }
      ],
      "ErrInvalidProposalNonce(bytes4)": [
        {
          "details": "Error indicating that the proposal nonce is invalid.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid proposal nonce."
          }
        }
      ],
      "ErrInvalidVoteWeight(bytes4)": [
        {
          "details": "Error indicating that a vote weight is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that encountered an invalid vote weight."
          }
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrOnlySelfCall(bytes4)": [
        {
          "details": "Error indicating that a function can only be called by the contract itself.",
          "params": {
            "msgSig": "The function signature (bytes4) that can only be called by the contract itself."
          }
        }
      ],
      "ErrQueryForOutdatedBridgeOperatorSet()": [
        {
          "details": "Error indicating that a query was made for an outdated bridge operator set."
        }
      ],
      "ErrRelayFailed(bytes4)": [
        {
          "details": "Error indicating that a relay call has failed.",
          "params": {
            "msgSig": "The function signature (bytes4) of the relay call that failed."
          }
        }
      ],
      "ErrUnsupportedTarget(bytes32,uint256)": [
        {
          "details": "Error thrown when attempting to interact with an unsupported target."
        }
      ],
      "ErrUnsupportedVoteType(bytes4)": [
        {
          "details": "Error indicating that a vote type is not supported.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an unsupported vote type."
          }
        }
      ],
      "ErrVoteIsFinalized()": [
        {
          "details": "Error thrown when attempting to interact with a finalized vote."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bridgeOperatorsRelayed(uint256,uint256)": {
        "details": "Returns whether the voter `_voter` casted vote for bridge operators at a specific period."
      },
      "changeProxyAdmin(address,address)": {
        "details": "Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getProposalExpiryDuration()": {
        "details": "Returns the proposal expiry duration."
      },
      "getProxyAdmin(address)": {
        "details": "Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getProxyImplementation(address)": {
        "details": "Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "lastSyncedBridgeOperatorSetInfo()": {
        "details": "Returns the synced bridge operator set info."
      },
      "proposalRelayed(uint256,uint256)": {
        "details": "Returns whether the voter `_voter` casted vote for the proposal."
      },
      "relayBridgeOperators((uint256,uint256,address[]),(uint8,bytes32,bytes32)[])": {
        "details": "See `BOsGovernanceRelay-_relayVotesBySignatures`. Requirements: - The method caller is relayer."
      },
      "relayGlobalProposal((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceRelay-_relayGlobalProposal`. Requirements: - The method caller is relayer."
      },
      "relayProposal((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceRelay-_relayProposal`. Requirements: - The method caller is relayer."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setProposalExpiryDuration(uint256)": {
        "details": "Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "round(uint256)": {
        "notice": "chain id = 0 for global proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2456_storage)"
      },
      {
        "astId": 3692,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "round",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3700,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "vote",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)3618_storage))"
      },
      {
        "astId": 3702,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_proposalExpiryDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6848,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "______deprecatedGovernanceAdmin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6828,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "______deprecatedBridge",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2766,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "roninChainId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2769,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 3139,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_lastSyncedBridgeOperatorSetInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(BridgeOperatorSet)5480_storage"
      },
      {
        "astId": 3147,
        "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
        "label": "_vote",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)5840_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(VoteStatus)5355": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_struct(Signature)5346_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignatureConsumer.Signature)",
        "numberOfBytes": "32",
        "value": "t_struct(Signature)5346_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2456_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2456_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)3618_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalVote)3618_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)5840_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct IsolatedGovernance.Vote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vote)5840_storage)"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)3618_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreGovernance.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)3618_storage"
      },
      "t_mapping(t_uint256,t_struct(Vote)5840_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IsolatedGovernance.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)5840_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2456_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2455,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2155_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BridgeOperatorSet)5480_storage": {
        "encoding": "inplace",
        "label": "struct BridgeOperatorsBallot.BridgeOperatorSet",
        "members": [
          {
            "astId": 5474,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "period",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5476,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "epoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5479,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "operators",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalVote)3618_storage": {
        "encoding": "inplace",
        "label": "struct CoreGovernance.ProposalVote",
        "members": [
          {
            "astId": 3594,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)5355"
          },
          {
            "astId": 3596,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3598,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "againstVoteWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3600,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "forVoteWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3603,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "forVoteds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3606,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "againstVoteds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3608,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "expiryTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3613,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "sig",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Signature)5346_storage)"
          },
          {
            "astId": 3617,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "voted",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2155_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2150,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2154,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Signature)5346_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConsumer.Signature",
        "members": [
          {
            "astId": 5341,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "v",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5343,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "r",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5345,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "s",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Vote)5840_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.Vote",
        "members": [
          {
            "astId": 5822,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)5355"
          },
          {
            "astId": 5824,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5829,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 5832,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "expiredAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5835,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5839,
            "contract": "contracts/mainchain/MainchainGovernanceAdmin.sol:MainchainGovernanceAdmin",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}