{
  "address": "0x056500E6028048dB7FCA81Ac307008A9042605f3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrCallPrecompiled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeGovernanceAdminContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeMaintenanceContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeRoninTrustedOrgContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeValidatorContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usedCreditScore",
          "type": "uint256"
        }
      ],
      "name": "BailedOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "missingVotesRatioTier1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "missingVotesRatioTier2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jailDurationForMissingVotesRatioTier2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "skipBridgeOperatorSlashingThreshold",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorSlashingConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeVotingThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeVotingSlashAmount",
          "type": "uint256"
        }
      ],
      "name": "BridgeVotingSlashingConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gainCreditScore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCreditScore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bailOutCostMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cutOffPercentageAfterBailout",
          "type": "uint256"
        }
      ],
      "name": "CreditScoreConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "creditScores",
          "type": "uint256[]"
        }
      ],
      "name": "CreditScoresUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashDoubleSignAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "doubleSigningJailUntilBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "doubleSigningOffsetLimitBlock",
          "type": "uint256"
        }
      ],
      "name": "DoubleSignSlashingConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "MaintenanceContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninGovernanceAdminContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseSlash.SlashType",
          "name": "slashType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "Slashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unavailabilityTier1Threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unavailabilityTier2Threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashAmountForUnavailabilityTier2Threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jailDurationForUnavailabilityTier2Threshold",
          "type": "uint256"
        }
      ],
      "name": "UnavailabilitySlashingConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "bailOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "checkBailedOutAtPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "currentUnavailabilityIndicator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        }
      ],
      "name": "execResetCreditScores",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "execSlashBridgeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeOperatorSlashingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "missingVotesRatioTier1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "missingVotesRatioTier2_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jailDurationForMissingVotesRatioTier2_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "skipBridgeOperatorSlashingThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeVotingSlashingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bridgeVotingThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeVotingSlashAmount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "getCreditScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreditScoreConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gainCreditScore_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCreditScore_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bailOutCostMultiplier_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cutOffPercentageAfterBailout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDoubleSignSlashingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "slashDoubleSignAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "doubleSigningJailUntilBlock_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "doubleSigningOffsetLimitBlock_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        }
      ],
      "name": "getManyCreditScores",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_resultList",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "getUnavailabilityIndicator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnavailabilitySlashingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unavailabilityTier1Threshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unavailabilityTier2Threshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slashAmountForUnavailabilityTier2Threshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jailDurationForUnavailabilityTier2Threshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__validatorContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__maintenanceContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__roninGovernanceAdminContract",
          "type": "address"
        },
        {
          "internalType": "uint256[4]",
          "name": "_bridgeOperatorSlashingConfigs",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_bridgeVotingSlashingConfigs",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[3]",
          "name": "_doubleSignSlashingConfigs",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_unavailabilitySlashingConfigs",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_creditScoreConfigs",
          "type": "uint256[4]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUnavailabilitySlashedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompileValidateDoubleSignAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninGovernanceAdminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratioTier1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ratioTier2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jailDurationTier2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_skipSlashingThreshold",
          "type": "uint256"
        }
      ],
      "name": "setBridgeOperatorSlashingConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashAmount",
          "type": "uint256"
        }
      ],
      "name": "setBridgeVotingSlashingConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gainScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bailOutMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cutOffPercentage",
          "type": "uint256"
        }
      ],
      "name": "setCreditScoreConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slashAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jailUntilBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offsetLimitBlock",
          "type": "uint256"
        }
      ],
      "name": "setDoubleSignSlashingConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setMaintenanceContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninGovernanceAdminContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier1Threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier2Threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashAmountForTier2Threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jailDurationForTier2Threshold",
          "type": "uint256"
        }
      ],
      "name": "setUnavailabilitySlashingConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "slashBridgeVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_header1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_header2",
          "type": "bytes"
        }
      ],
      "name": "slashDoubleSign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        }
      ],
      "name": "slashUnavailability",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "updateCreditScores",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ee00398d0a4bc945a69ac24f8d1b9564f3d268392dfa229794499d23cee5b5a",
  "receipt": {
    "to": null,
    "from": "0x0F68eDBE14C8f68481771016d7E2871d6a35DE11",
    "contractAddress": "0x056500E6028048dB7FCA81Ac307008A9042605f3",
    "transactionIndex": 3,
    "gasUsed": "2626414",
    "logsBloom": "0x
    "blockHash": "0xccca0b80024cd79c72c8415efb705dab390b56820311eec112cf3fddecefb3a6",
    "transactionHash": "0x6ee00398d0a4bc945a69ac24f8d1b9564f3d268392dfa229794499d23cee5b5a",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 22984609,
        "transactionHash": "0x6ee00398d0a4bc945a69ac24f8d1b9564f3d268392dfa229794499d23cee5b5a",
        "address": "0x056500E6028048dB7FCA81Ac307008A9042605f3",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0xccca0b80024cd79c72c8415efb705dab390b56820311eec112cf3fddecefb3a6"
      }
    ],
    "blockNumber": 22984609,
    "cumulativeGasUsed": "2912055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "cee8587b26e080f856978a2f78dd6e87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeGovernanceAdminContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeMaintenanceContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeRoninTrustedOrgContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeValidatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedCreditScore\",\"type\":\"uint256\"}],\"name\":\"BailedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"missingVotesRatioTier1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"missingVotesRatioTier2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailDurationForMissingVotesRatioTier2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skipBridgeOperatorSlashingThreshold\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeVotingThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeVotingSlashAmount\",\"type\":\"uint256\"}],\"name\":\"BridgeVotingSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gainCreditScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCreditScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailOutCostMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cutOffPercentageAfterBailout\",\"type\":\"uint256\"}],\"name\":\"CreditScoreConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"creditScores\",\"type\":\"uint256[]\"}],\"name\":\"CreditScoresUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashDoubleSignAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doubleSigningJailUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doubleSigningOffsetLimitBlock\",\"type\":\"uint256\"}],\"name\":\"DoubleSignSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MaintenanceContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninGovernanceAdminContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseSlash.SlashType\",\"name\":\"slashType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unavailabilityTier1Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unavailabilityTier2Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashAmountForUnavailabilityTier2Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailDurationForUnavailabilityTier2Threshold\",\"type\":\"uint256\"}],\"name\":\"UnavailabilitySlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"bailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"checkBailedOutAtPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"currentUnavailabilityIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"execResetCreditScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"execSlashBridgeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperatorSlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"missingVotesRatioTier1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missingVotesRatioTier2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailDurationForMissingVotesRatioTier2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skipBridgeOperatorSlashingThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeVotingSlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bridgeVotingThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeVotingSlashAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getCreditScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditScoreConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gainCreditScore_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCreditScore_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bailOutCostMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cutOffPercentageAfterBailout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDoubleSignSlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashDoubleSignAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"doubleSigningJailUntilBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"doubleSigningOffsetLimitBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"getManyCreditScores\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_resultList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getUnavailabilityIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnavailabilitySlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unavailabilityTier1Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unavailabilityTier2Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashAmountForUnavailabilityTier2Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailDurationForUnavailabilityTier2Threshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninGovernanceAdminContract\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"_bridgeOperatorSlashingConfigs\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_bridgeVotingSlashingConfigs\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_doubleSignSlashingConfigs\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_unavailabilitySlashingConfigs\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_creditScoreConfigs\",\"type\":\"uint256[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnavailabilitySlashedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileValidateDoubleSignAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninGovernanceAdminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratioTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailDurationTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skipSlashingThreshold\",\"type\":\"uint256\"}],\"name\":\"setBridgeOperatorSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"}],\"name\":\"setBridgeVotingSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gainScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bailOutMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cutOffPercentage\",\"type\":\"uint256\"}],\"name\":\"setCreditScoreConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailUntilBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offsetLimitBlock\",\"type\":\"uint256\"}],\"name\":\"setDoubleSignSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaintenanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninGovernanceAdminContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier1Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmountForTier2Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailDurationForTier2Threshold\",\"type\":\"uint256\"}],\"name\":\"setUnavailabilitySlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"slashBridgeVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_header1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_header2\",\"type\":\"bytes\"}],\"name\":\"slashDoubleSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"}],\"name\":\"slashUnavailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"updateCreditScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrCallerMustBeGovernanceAdminContract()\":[{\"details\":\"Error of method caller must be goverance admin contract.\"}],\"ErrCallerMustBeMaintenanceContract()\":[{\"details\":\"Error of method caller must be maintenance contract.\"}],\"ErrCallerMustBeRoninTrustedOrgContract()\":[{\"details\":\"Error of method caller must be Ronin trusted org contract.\"}],\"ErrCallerMustBeValidatorContract()\":[{\"details\":\"Error of method caller must be validator contract.\"}],\"ErrZeroCodeContract()\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"bailOut(address)\":{\"details\":\"A slashed validator use this method to get out of jail. Requirements: - The `_consensusAddr` must be a validator. - Only validator's admin can call this method. Emits the event `BailedOut`.\"},\"checkBailedOutAtPeriod(address,uint256)\":{\"details\":\"Returns the whether the `_validator` has been bailed out at the `_period`.\"},\"currentUnavailabilityIndicator(address)\":{\"details\":\"Returns the current unavailability indicator of a block producer.\"},\"execResetCreditScores(address[])\":{\"details\":\"Resets the credit score for the revoked validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`.\"},\"execSlashBridgeOperator(address,uint256,uint256)\":{\"details\":\"Acknowledges bridge operator slash and emit `Slashed` event correspondingly.\",\"params\":{\"_tier\":\"The tier of the slash, in value of {1, 2}, corresponding to `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_1` and `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_2` Requirements: - Only validator contract can invoke this method. - Should be called only at the end of period. - Should be called only when there is slash of bridge operator. Emits the event `Slashed`.\"}},\"getBridgeOperatorSlashingConfigs()\":{\"details\":\"Returns the configs related to bridge operator slashing.\",\"returns\":{\"jailDurationForMissingVotesRatioTier2_\":\"The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.\",\"missingVotesRatioTier1_\":\"The bridge reward will be deprecated if (s)he missed more than this ratio.\",\"missingVotesRatioTier2_\":\"The bridge reward and mining reward will be deprecated and the corresponding block producer will be put in jail if (s)he misses more than this ratio.\",\"skipBridgeOperatorSlashingThreshold_\":\"The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small.\"}},\"getBridgeVotingSlashingConfigs()\":{\"details\":\"Returns the configs related to bridge voting slashing.\",\"returns\":{\"bridgeVotingSlashAmount_\":\"The amount of RON to slash bridge voting.\",\"bridgeVotingThreshold_\":\"The threshold to slash when a trusted organization does not vote for bridge operators.\"}},\"getCreditScore(address)\":{\"details\":\"Returns the current credit score of the validator.\"},\"getCreditScoreConfigs()\":{\"details\":\"Returns the configs related to credit score.\",\"returns\":{\"bailOutCostMultiplier_\":\"The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\",\"cutOffPercentageAfterBailout_\":\"The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\",\"gainCreditScore_\":\"The score to gain per period.\",\"maxCreditScore_\":\"The max number of credit score that a validator can hold.\"}},\"getDoubleSignSlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"params\":{\"_doubleSigningOffsetLimitBlock\":\"The number of block that the current block is at most far from the double signing block.\"},\"returns\":{\"doubleSigningJailUntilBlock_\":\"The block number that the punished validator will be jailed until, due to double signing.\",\"slashDoubleSignAmount_\":\"The amount of RON to slash double sign.\"}},\"getManyCreditScores(address[])\":{\"details\":\"Returns the current credit score of a list of validators.\"},\"getUnavailabilityIndicator(address,uint256)\":{\"details\":\"Helper for CreditScore contract to query indicator of the validator.\"},\"getUnavailabilitySlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"returns\":{\"jailDurationForUnavailabilityTier2Threshold_\":\"The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.\",\"slashAmountForUnavailabilityTier2Threshold_\":\"The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with tier-2 or tier-3.\",\"unavailabilityTier1Threshold_\":\"The mining reward will be deprecated, if (s)he missed more than this threshold. This threshold is applied for tier-1 and tier-3 slash.\",\"unavailabilityTier2Threshold_\":\" The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\"}},\"initialize(address,address,address,address,uint256[4],uint256[2],uint256[3],uint256[4],uint256[4])\":{\"details\":\"Initializes the contract storage.\"},\"maintenanceContract()\":{\"details\":\"Returns the maintenance contract.\"},\"precompileValidateDoubleSignAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"roninGovernanceAdminContract()\":{\"details\":\"Returns the ronin governance admin contract.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeOperatorSlashingConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash bridge operators. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.\",\"params\":{\"_jailDurationTier2\":\"The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.\",\"_ratioTier1\":\"The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map to 0%-100%.\",\"_ratioTier2\":\"The bridge reward and mining reward will be deprecated and the corresponding block producer will be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.\",\"_skipSlashingThreshold\":\"The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small.\"}},\"setBridgeVotingSlashingConfigs(uint256,uint256)\":{\"details\":\"Sets the configs to slash bridge voting. Requirements: - The method caller is admin. Emits the event `BridgeVotingSlashingConfigsUpdated`.\",\"params\":{\"_slashAmount\":\"The amount of RON to slash bridge voting.\",\"_threshold\":\"The threshold to slash when a trusted organization does not vote for bridge operators.\"}},\"setCreditScoreConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to credit score. Requirements: - The method caller is admin. Emits the event `CreditScoreConfigsUpdated`.\",\"params\":{\"_bailOutMultiplier\":\"The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\",\"_cutOffPercentage\":\"The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\",\"_gainScore\":\"The score to gain per period.\",\"_maxScore\":\"The max number of credit score that a validator can hold.\"}},\"setDoubleSignSlashingConfigs(uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `DoubleSignSlashingConfigsUpdated`.\",\"params\":{\"_doubleSigningOffsetLimitBlock\":\"The number of block that the current block is at most far from the double signing block.\",\"_jailUntilBlock\":\"The block number that the punished validator will be jailed until, due to double signing.\",\"_slashAmount\":\"The amount of RON to slash double sign.\"}},\"setMaintenanceContract(address)\":{\"details\":\"Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`.\"},\"setRoninGovernanceAdminContract(address)\":{\"details\":\"Sets the ronin governance admin contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninGovernanceAdminContractUpdated`.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.\",\"params\":{\"_jailDurationForTier2Threshold\":\"The number of blocks to jail a block producer when (s)he is slashed tier-2.\",\"_slashAmountForTier2Threshold\":\"The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.\",\"_tier1Threshold\":\"The mining reward will be deprecated, if (s)he missed more than this threshold.\",\"_tier2Threshold\":\"The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold.\"}},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"slashBridgeVoting(address)\":{\"details\":\"Slashes for bridge voter governance. Emits the event `Slashed`.\"},\"slashDoubleSign(address,bytes,bytes)\":{\"details\":\"Slashes for double signing. Requirements: - The method caller is coinbase. Emits the event `Slashed` if the double signing evidence of the two headers valid.\"},\"slashUnavailability(address)\":{\"details\":\"Slashes for unavailability by increasing the counter of block producer `_consensusAddr`. Requirements: - The method caller is coinbase. Emits the event `Slashed` when the threshold is reached.\"},\"updateCreditScores(address[],uint256)\":{\"details\":\"Updates the credit score for the validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/slash-indicator/SlashIndicator.sol\":\"SlashIndicator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasMaintenanceContract.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\n\\ncontract HasMaintenanceContract is IHasMaintenanceContract, HasProxyAdmin {\\n  IMaintenance internal _maintenanceContract;\\n\\n  modifier onlyMaintenanceContract() {\\n    if (maintenanceContract() != msg.sender) revert ErrCallerMustBeMaintenanceContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function maintenanceContract() public view override returns (address) {\\n    return address(_maintenanceContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function setMaintenanceContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setMaintenanceContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the scheduled maintenance contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function _setMaintenanceContract(address _addr) internal {\\n    _maintenanceContract = IMaintenance(_addr);\\n    emit MaintenanceContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x117a29d878d44a20350df8ab539d34335713ba0f3b2c768a58124f61efb74357\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninGovernanceAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninGovernanceAdminContract.sol\\\";\\nimport \\\"../../interfaces/IRoninGovernanceAdmin.sol\\\";\\n\\ncontract HasRoninGovernanceAdminContract is IHasRoninGovernanceAdminContract, HasProxyAdmin {\\n  IRoninGovernanceAdmin internal _roninGovernanceAdminContract;\\n\\n  modifier onlyRoninGovernanceAdminContract() {\\n    if (roninGovernanceAdminContract() != msg.sender) revert ErrCallerMustBeGovernanceAdminContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninGovernanceAdminContract\\n   */\\n  function roninGovernanceAdminContract() public view override returns (address) {\\n    return address(_roninGovernanceAdminContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninGovernanceAdminContract\\n   */\\n  function setRoninGovernanceAdminContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setRoninGovernanceAdminContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin governance admin contract.\\n   *\\n   * Emits the event `RoninGovernanceAdminContractUpdated`.\\n   *\\n   */\\n  function _setRoninGovernanceAdminContract(address _addr) internal {\\n    _roninGovernanceAdminContract = IRoninGovernanceAdmin(_addr);\\n    emit RoninGovernanceAdminContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xbbb077c4c406c6b13d8602dd1bcac1031cd144e9c1965ec59311ded2b9fe8e3c\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    if (roninTrustedOrganizationContract() != msg.sender) revert ErrCallerMustBeRoninTrustedOrgContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x951fd730f4853d8c932da5484ea093f3094c8186735b603d31fb53035c395751\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    if (validatorContract() != msg.sender) revert ErrCallerMustBeValidatorContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xf0a7c4c2165ede118c6ba219ee1a20d293d94049b18aa6fc86a2c48661eb654d\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMaintenance {\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed consensusAddr, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed consensusAddr);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(address _consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `_block` or not.\\n   */\\n  function checkManyMaintained(address[] calldata _addrList, uint256 _block) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    address[] calldata _addrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` has scheduled.\\n   */\\n  function checkScheduled(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr`\\n   */\\n  function checkCooldownEnds(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `_consensusAddr`.\\n   */\\n  function getSchedule(address _consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedules() external view returns (uint256 _count);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules,\\n    uint256 _cooldownSecsToMaintain\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedules() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - The candidate `_consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(\\n    address _consensusAddr,\\n    uint256 _startedAtBlock,\\n    uint256 _endedAtBlock\\n  ) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - A schedule for the `_consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x4f06c8f3ad7ec8b863882c655ddf443675d557272445e51d8a1e1f3454089d09\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BridgeOperatorsBallot.sol\\\";\\n\\ninterface IRoninGovernanceAdmin {\\n  /// @dev Emitted when the bridge operators are approved.\\n  event BridgeOperatorsApproved(uint256 _period, uint256 _epoch, address[] _operators);\\n  /// @dev Emitted when an emergency exit poll is created.\\n  event EmergencyExitPollCreated(\\n    bytes32 _voteHash,\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  );\\n  /// @dev Emitted when an emergency exit poll is approved.\\n  event EmergencyExitPollApproved(bytes32 _voteHash);\\n  /// @dev Emitted when an emergency exit poll is expired.\\n  event EmergencyExitPollExpired(bytes32 _voteHash);\\n\\n  /**\\n   * @dev Returns the last voted block of the bridge voter.\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the synced bridge operator set info.\\n   */\\n  function lastSyncedBridgeOperatorSetInfo()\\n    external\\n    view\\n    returns (BridgeOperatorsBallot.BridgeOperatorSet memory _bridgeOperatorSetInfo);\\n\\n  /**\\n   * @dev Create a vote to agree that an emergency exit is valid and should return the locked funds back.a\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   */\\n  function createEmergencyExitPoll(\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1aa218f9a8cad8fa9f865c179b257aa8f2614e034100dedebdd352da9a7d96d9\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasContract {\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract();\\n}\\n\",\"keccak256\":\"0x8a17785d841137fcae5b5d542f1714de0492c85b54ca074f0b9c1c490ad3f342\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasMaintenanceContract is IHasContract {\\n  /// @dev Emitted when the maintenance contract is updated.\\n  event MaintenanceContractUpdated(address);\\n\\n  /// @dev Error of method caller must be maintenance contract.\\n  error ErrCallerMustBeMaintenanceContract();\\n\\n  /**\\n   * @dev Returns the maintenance contract.\\n   */\\n  function maintenanceContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the maintenance contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function setMaintenanceContract(address) external;\\n}\\n\",\"keccak256\":\"0x0a0ef6ba14e2929c7c8dda0642a7a831c9997d1b0d049eb83f64dfc21ff0e72e\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninGovernanceAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasRoninGovernanceAdminContract is IHasContract {\\n  /// @dev Emitted when the ronin governance admin contract is updated.\\n  event RoninGovernanceAdminContractUpdated(address);\\n\\n  /// @dev Error of method caller must be goverance admin contract.\\n  error ErrCallerMustBeGovernanceAdminContract();\\n\\n  /**\\n   * @dev Returns the ronin governance admin contract.\\n   */\\n  function roninGovernanceAdminContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin governance admin contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninGovernanceAdminContractUpdated`.\\n   *\\n   */\\n  function setRoninGovernanceAdminContract(address) external;\\n}\\n\",\"keccak256\":\"0x7143a90b75a403f79f017c5350f816375d1ad5858ddbfa896c964ab9c8d4225a\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasRoninTrustedOrganizationContract is IHasContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /// @dev Error of method caller must be Ronin trusted org contract.\\n  error ErrCallerMustBeRoninTrustedOrgContract();\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x7d0a0b1d658e9cf4d69f4934748e0a5c1d22183024d26927f5d621fc61aff0b2\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasValidatorContract is IHasContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /// @dev Error of method caller must be validator contract.\\n  error ErrCallerMustBeValidatorContract();\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0x35a715f123b0c5dc296d13583f946bef4e485201e122b5170988a7535f114559\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2,\\n    UNAVAILABILITY_TIER_3\\n  }\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed validator, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0x04d449f2852840566dfff4e3673929f6e9b8d9b5fc5b29744bf4f344dc7f9bc0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICreditScore {\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore,\\n    uint256 maxCreditScore,\\n    uint256 bailOutCostMultiplier,\\n    uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated.\\n  event CreditScoresUpdated(address[] validators, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail.\\n  event BailedOut(address indexed validator, uint256 period, uint256 usedCreditScore);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function updateCreditScores(address[] calldata _validators, uint256 _period) external;\\n\\n  /**\\n   * @dev Resets the credit score for the revoked validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execResetCreditScores(address[] calldata _validators) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(address[] calldata _validators) external view returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `_validator` has been bailed out at the `_period`.\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5364db88efb971f73aac569e27e5604758a123f28567af757b9933fdddd14f8\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeOperator is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method\\n   * `getBridgeOperatorSlashingConfigs` for param details.\\n   */\\n  event BridgeOperatorSlashingConfigsUpdated(\\n    uint256 missingVotesRatioTier1,\\n    uint256 missingVotesRatioTier2,\\n    uint256 jailDurationForMissingVotesRatioTier2,\\n    uint256 skipBridgeOperatorSlashingThreshold\\n  );\\n\\n  /**\\n   * @dev Acknowledges bridge operator slash and emit `Slashed` event correspondingly.\\n   * @param _tier The tier of the slash, in value of {1, 2}, corresponding to `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_1`\\n   * and `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_2`\\n   *\\n   * Requirements:\\n   * - Only validator contract can invoke this method.\\n   * - Should be called only at the end of period.\\n   * - Should be called only when there is slash of bridge operator.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function execSlashBridgeOperator(\\n    address _consensusAddr,\\n    uint256 _tier,\\n    uint256 _period\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge operator slashing.\\n   *\\n   * @return _missingVotesRatioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio.\\n   * @return _missingVotesRatioTier2 The bridge reward and mining reward will be deprecated and the corresponding\\n   * block producer will be put in jail if (s)he misses more than this ratio.\\n   * @return _jailDurationForMissingVotesRatioTier2 The number of blocks to jail the corresponding block producer when\\n   * its bridge operator is slashed tier-2.\\n   * @return _skipBridgeOperatorSlashingThreshold The threshold to skip slashing the bridge operator in case the total\\n   * number of votes in the bridge is too small.\\n   *\\n   */\\n  function getBridgeOperatorSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2,\\n      uint256 _skipBridgeOperatorSlashingThreshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash bridge operators.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _ratioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map\\n   * to 0%-100%.\\n   * @param _ratioTier2 The bridge reward and mining reward will be deprecated and the corresponding block producer will\\n   * be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.\\n   * @param _jailDurationTier2 The number of blocks to jail the corresponding block producer when its bridge operator is\\n   * slashed tier-2.\\n   * @param _skipSlashingThreshold The threshold to skip slashing the bridge operator in case the total number of votes\\n   * in the bridge is too small.\\n   *\\n   */\\n  function setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5c09ac11ead005bfa25ae58e970c441144849b14d58fd5f53fadc3b9be16e5d6\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeVoting is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge voting is updated. See the method `getBridgeVotingSlashingConfigs` for param\\n   * details.\\n   */\\n  event BridgeVotingSlashingConfigsUpdated(uint256 bridgeVotingThreshold, uint256 bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Slashes for bridge voter governance.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function slashBridgeVoting(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge voting slashing.\\n   *\\n   * @return _bridgeVotingThreshold The threshold to slash when a trusted organization does not vote for bridge\\n   * operators.\\n   * @return _bridgeVotingSlashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function getBridgeVotingSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _bridgeVotingThreshold, uint256 _bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Sets the configs to slash bridge voting.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeVotingSlashingConfigsUpdated`.\\n   *\\n   * @param _threshold The threshold to slash when a trusted organization does not vote for bridge operators.\\n   * @param _slashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) external;\\n}\\n\",\"keccak256\":\"0x72c3bcfe3c49f946651caa3066bd5296d007871c9a56fa113e2d3c0f3db7eb99\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(\\n    uint256 slashDoubleSignAmount,\\n    uint256 doubleSigningJailUntilBlock,\\n    uint256 doubleSigningOffsetLimitBlock\\n  );\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(\\n    address _validatorAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _slashDoubleSignAmount,\\n      uint256 _doubleSigningJailUntilBlock,\\n      uint256 _doubleSigningOffsetLimitBlock\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _doubleSigningOffsetLimitBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe72708c42d468b0c40ffa0c72b3386899f11273e4149425aab490a78d5312222\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashBridgeVoting.sol\\\";\\nimport \\\"./ISlashBridgeOperator.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is\\n  ISlashDoubleSign,\\n  ISlashBridgeVoting,\\n  ISlashBridgeOperator,\\n  ISlashUnavailability,\\n  ICreditScore\\n{}\\n\",\"keccak256\":\"0xe8b8fde3af614735cb304bc1eb82b05d65ede4df804b5d555787e5d5ecb95ec0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the unavailability indicator in the period `_period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold. This threshold is applied for tier-1 and tier-3 slash.\\n   * @return _unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   * @return _slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed with tier-2 or tier-3.\\n   * @return _jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed with tier-2 or tier-3.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _unavailabilityTier1Threshold,\\n      uint256 _unavailabilityTier2Threshold,\\n      uint256 _slashAmountForUnavailabilityTier2Threshold,\\n      uint256 _jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param _tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param _slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param _jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x92f7d8e9c6f80d4fedab80515c68db0a46cf4f8da143f8d766bf5f7582aa0a21\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xc382bd50ca507308ec23826308bc9ff0a22cfb9b3fcd09c7ac7a63c37729d33e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n  /// @dev Emitted when the bridge tracking contract's response is incorrect\\n  event BridgeTrackingIncorrectlyResponded();\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x42ed0bff5f8233dc6de28bd3283f98a0c16df6abc26655fc777bdc07a83ff3f5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xc00b1bda0c6076c9aa0631dc0c01e849d8f42cc616fe4c036f73cda0a9afe9ef\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the latest wrapped up period.\\n   */\\n  function checkBridgeRewardDeprecatedAtLatestPeriod(address _consensusAddr) external view returns (bool _result);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the  `_period`.\\n   */\\n  function checkBridgeRewardDeprecatedAtPeriod(address _consensusAddr, uint256 _period)\\n    external\\n    view\\n    returns (bool _result);\\n}\\n\",\"keccak256\":\"0x19b85ce95caf9deb4aff9614d1ca2d89712b89e8609dc6ab772e989164a51139\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /// @dev Error of number of prioritized greater than number of max validators.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators()\\n    external\\n    view\\n    returns (\\n      address[] memory _validatorList,\\n      address[] memory _bridgeOperators,\\n      EnumFlags.ValidatorFlag[] memory _flags\\n    );\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the bridge operator list corresponding to validator address list.\\n   */\\n  function getBridgeOperatorsOf(address[] memory _validatorAddrs) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool isOperator);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x86189a2fee2e5dccba27728db15e1bd19f647cdb97c02b52d9ab07c5d98a2a75\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  struct BridgeOperatorSet {\\n    uint256 period;\\n    uint256 epoch;\\n    address[] operators;\\n  }\\n\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,uint256 epoch,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a;\\n\\n  /**\\n   * @dev Verifies whether the ballot is valid or not.\\n   *\\n   * Requirements:\\n   * - The ballot is not for an empty operator set.\\n   * - The operator address list is in order.\\n   *\\n   */\\n  function verifyBallot(BridgeOperatorSet calldata _ballot) internal pure {\\n    require(_ballot.operators.length > 0, \\\"BridgeOperatorsBallot: invalid array length\\\");\\n    address _addr = _ballot.operators[0];\\n    for (uint _i = 1; _i < _ballot.operators.length; _i++) {\\n      require(_addr < _ballot.operators[_i], \\\"BridgeOperatorsBallot: invalid order of bridge operators\\\");\\n      _addr = _ballot.operators[_i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(BridgeOperatorSet calldata _ballot) internal pure returns (bytes32) {\\n    bytes32 _operatorsHash;\\n    address[] memory _operators = _ballot.operators;\\n\\n    assembly {\\n      _operatorsHash := keccak256(add(_operators, 32), mul(mload(_operators), 32))\\n    }\\n\\n    return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _ballot.period, _ballot.epoch, _operatorsHash));\\n  }\\n}\\n\",\"keccak256\":\"0x986425ebae2dcfcfa266c9ca825232ff300ec8ce796e8975da6714d87e921793\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xf719e74bc39be7aceb4e5cc455260f81b2b21e83aa693e0b50c390c9909e08c4\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUValidateDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUValidateDoubleSign is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileValidateDoubleSignAddress() public view virtual returns (address) {\\n    return address(0x67);\\n  }\\n\\n  /**\\n   * @dev Validates the two submitted block header if they are produced by the same address\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcValidateEvidence(\\n    address _consensusAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) internal view virtual returns (bool _validEvidence) {\\n    address _smc = precompileValidateDoubleSignAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload = abi.encodeWithSignature(\\n      \\\"validatingDoubleSignProof(address,bytes,bytes)\\\",\\n      _consensusAddr,\\n      _header1,\\n      _header2\\n    );\\n    uint _payloadLength = _payload.length;\\n    uint[1] memory _output;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _output, 0x20)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n    return (_output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x9df5b8272e1cd963d776b94e29a69ba1139f0df7404b67c213b3c5ebe19e527b\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/CreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/slash-indicator/ICreditScore.sol\\\";\\nimport \\\"../../extensions/collections/HasMaintenanceContract.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\n\\nabstract contract CreditScore is ICreditScore, HasValidatorContract, HasMaintenanceContract, PercentageConsumer {\\n  /// @dev Mapping from validator address => period index => whether bailed out before\\n  mapping(address => mapping(uint256 => bool)) internal _checkBailedOutAtPeriod;\\n  /// @dev Mapping from validator address => credit score\\n  mapping(address => uint256) internal _creditScore;\\n\\n  /// @dev The max gained number of credit score per period.\\n  uint256 internal _gainCreditScore;\\n  /// @dev The max number of credit score that a validator can hold.\\n  uint256 internal _maxCreditScore;\\n  /// @dev The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n  uint256 internal _bailOutCostMultiplier;\\n  /// @dev The percentage of reward to be cut off from the validator in the rest of the period after bailed out.\\n  uint256 internal _cutOffPercentageAfterBailout;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function updateCreditScores(address[] calldata _validators, uint256 _period) external override onlyValidatorContract {\\n    uint256 _periodStartAtBlock = _validatorContract.currentPeriodStartAtBlock();\\n\\n    bool[] memory _jaileds = _validatorContract.checkManyJailed(_validators);\\n    bool[] memory _maintaineds = _maintenanceContract.checkManyMaintainedInBlockRange(\\n      _validators,\\n      _periodStartAtBlock,\\n      block.number\\n    );\\n    uint256[] memory _updatedCreditScores = new uint256[](_validators.length);\\n\\n    for (uint _i = 0; _i < _validators.length; _i++) {\\n      address _validator = _validators[_i];\\n\\n      uint256 _indicator = getUnavailabilityIndicator(_validator, _period);\\n      bool _isJailedInPeriod = _jaileds[_i];\\n      bool _isMaintainingInPeriod = _maintaineds[_i];\\n\\n      uint256 _actualGain = (_isJailedInPeriod || _isMaintainingInPeriod)\\n        ? 0\\n        : Math.subNonNegative(_gainCreditScore, _indicator);\\n\\n      _creditScore[_validator] = Math.addWithUpperbound(_creditScore[_validator], _actualGain, _maxCreditScore);\\n      _updatedCreditScores[_i] = _creditScore[_validator];\\n    }\\n\\n    emit CreditScoresUpdated(_validators, _updatedCreditScores);\\n  }\\n\\n  function execResetCreditScores(address[] calldata _validators) external override onlyValidatorContract {\\n    uint256[] memory _updatedCreditScores = new uint256[](_validators.length);\\n    for (uint _i = 0; _i < _validators.length; _i++) {\\n      address _validator = _validators[_i];\\n      delete _creditScore[_validator];\\n      delete _updatedCreditScores[_i];\\n    }\\n    emit CreditScoresUpdated(_validators, _updatedCreditScores);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function bailOut(address _consensusAddr) external override {\\n    require(\\n      _validatorContract.isValidatorCandidate(_consensusAddr),\\n      \\\"SlashIndicator: consensus address must be a validator candidate\\\"\\n    );\\n    require(\\n      _validatorContract.isCandidateAdmin(_consensusAddr, msg.sender),\\n      \\\"SlashIndicator: method caller must be a candidate admin\\\"\\n    );\\n\\n    (bool _isJailed, , uint256 _jailedEpochLeft) = _validatorContract.getJailedTimeLeft(_consensusAddr);\\n    require(_isJailed, \\\"SlashIndicator: caller must be jailed in the current period\\\");\\n\\n    uint256 _period = _validatorContract.currentPeriod();\\n    require(!_checkBailedOutAtPeriod[_consensusAddr][_period], \\\"SlashIndicator: validator has bailed out previously\\\");\\n\\n    uint256 _score = _creditScore[_consensusAddr];\\n    uint256 _cost = _jailedEpochLeft * _bailOutCostMultiplier;\\n    require(_score >= _cost, \\\"SlashIndicator: insufficient credit score to bail out\\\");\\n\\n    _validatorContract.execBailOut(_consensusAddr, _period);\\n\\n    _creditScore[_consensusAddr] -= _cost;\\n    _setUnavailabilityIndicator(_consensusAddr, _period, 0);\\n    _checkBailedOutAtPeriod[_consensusAddr][_period] = true;\\n    emit BailedOut(_consensusAddr, _period, _cost);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external override onlyAdmin {\\n    _setCreditScoreConfigs(_gainScore, _maxScore, _bailOutMultiplier, _cutOffPercentage);\\n  }\\n\\n  /**\\n   * @dev See `ISlashUnavailability`\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period) public view virtual returns (uint256);\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 gainCreditScore_,\\n      uint256 maxCreditScore_,\\n      uint256 bailOutCostMultiplier_,\\n      uint256 cutOffPercentageAfterBailout_\\n    )\\n  {\\n    return (_gainCreditScore, _maxCreditScore, _bailOutCostMultiplier, _cutOffPercentageAfterBailout);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getCreditScore(address _validator) external view override returns (uint256) {\\n    return _creditScore[_validator];\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getManyCreditScores(address[] calldata _validators)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory _resultList)\\n  {\\n    _resultList = new uint256[](_validators.length);\\n\\n    for (uint _i = 0; _i < _resultList.length; _i++) {\\n      _resultList[_i] = _creditScore[_validators[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period) public view virtual override returns (bool) {\\n    return _checkBailedOutAtPeriod[_validator][_period];\\n  }\\n\\n  /**\\n   * @dev See `SlashUnavailability`.\\n   */\\n  function _setUnavailabilityIndicator(\\n    address _validator,\\n    uint256 _period,\\n    uint256 _indicator\\n  ) internal virtual;\\n\\n  /**\\n   * @dev See `ICreditScore-setCreditScoreConfigs`.\\n   */\\n  function _setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) internal {\\n    require(_gainScore <= _maxScore, \\\"CreditScore: invalid credit score config\\\");\\n    require(_cutOffPercentage <= _MAX_PERCENTAGE, \\\"CreditScore: invalid cut off percentage config\\\");\\n\\n    _gainCreditScore = _gainScore;\\n    _maxCreditScore = _maxScore;\\n    _bailOutCostMultiplier = _bailOutMultiplier;\\n    _cutOffPercentageAfterBailout = _cutOffPercentage;\\n    emit CreditScoreConfigsUpdated(_gainScore, _maxScore, _bailOutMultiplier, _cutOffPercentage);\\n  }\\n}\\n\",\"keccak256\":\"0xe2a4b46731a462e0f71eda5a47b7b56bb1a77ca7e618e02f56acccc7bc759bab\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../extensions/collections/HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashBridgeOperator.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\n\\nabstract contract SlashBridgeOperator is ISlashBridgeOperator, HasProxyAdmin, HasValidatorContract, PercentageConsumer {\\n  /**\\n   * @dev The bridge operators will be deprecated reward if (s)he missed more than the ratio.\\n   * Values 0-10,000 map to 0%-100%.\\n   */\\n  uint256 internal _missingVotesRatioTier1;\\n  /**\\n   * @dev The bridge operators will be deprecated all rewards including bridge reward and mining reward if (s)he missed\\n   * more than the ratio. Values 0-10,000 map to 0%-100%.\\n   */\\n  uint256 internal _missingVotesRatioTier2;\\n  /// @dev The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.\\n  uint256 internal _jailDurationForMissingVotesRatioTier2;\\n  /// @dev The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small.\\n  uint256 internal _skipBridgeOperatorSlashingThreshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ISlashBridgeOperator\\n   */\\n  function getBridgeOperatorSlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 missingVotesRatioTier1_,\\n      uint256 missingVotesRatioTier2_,\\n      uint256 jailDurationForMissingVotesRatioTier2_,\\n      uint256 skipBridgeOperatorSlashingThreshold_\\n    )\\n  {\\n    return (\\n      _missingVotesRatioTier1,\\n      _missingVotesRatioTier2,\\n      _jailDurationForMissingVotesRatioTier2,\\n      _skipBridgeOperatorSlashingThreshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashBridgeOperator\\n   */\\n  function setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) external override onlyAdmin {\\n    _setBridgeOperatorSlashingConfigs(_ratioTier1, _ratioTier2, _jailDurationTier2, _skipSlashingThreshold);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashBridgeOperator\\n   */\\n  function execSlashBridgeOperator(\\n    address _consensusAddr,\\n    uint256 _tier,\\n    uint256 _period\\n  ) external onlyValidatorContract {\\n    if (_tier == 1) {\\n      emit Slashed(_consensusAddr, SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_1, _period);\\n    } else if (_tier == 2) {\\n      emit Slashed(_consensusAddr, SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_2, _period);\\n    }\\n  }\\n\\n  /**\\n   * @dev See `ISlashBridgeOperator-setBridgeOperatorSlashingConfigs`.\\n   */\\n  function _setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) internal {\\n    require(\\n      _ratioTier1 <= _ratioTier2 && _ratioTier1 <= _MAX_PERCENTAGE && _ratioTier2 <= _MAX_PERCENTAGE,\\n      \\\"SlashIndicator: invalid ratios\\\"\\n    );\\n    _missingVotesRatioTier1 = _ratioTier1;\\n    _missingVotesRatioTier2 = _ratioTier2;\\n    _jailDurationForMissingVotesRatioTier2 = _jailDurationTier2;\\n    _skipBridgeOperatorSlashingThreshold = _skipSlashingThreshold;\\n    emit BridgeOperatorSlashingConfigsUpdated(_ratioTier1, _ratioTier2, _jailDurationTier2, _skipSlashingThreshold);\\n  }\\n}\\n\",\"keccak256\":\"0x80fc557349f05e584737a6ba80f87dff5940bcae770db6215d62fb435342957a\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashBridgeVoting.sol\\\";\\nimport \\\"../../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../extensions/collections/HasRoninGovernanceAdminContract.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\n\\nabstract contract SlashBridgeVoting is\\n  ISlashBridgeVoting,\\n  HasValidatorContract,\\n  HasRoninTrustedOrganizationContract,\\n  HasRoninGovernanceAdminContract\\n{\\n  /// @dev Mapping from validator address => period index => bridge voting slashed\\n  mapping(address => mapping(uint256 => bool)) internal _bridgeVotingSlashed;\\n  /// @dev The threshold to slash when a trusted organization does not vote for bridge operators.\\n  uint256 internal _bridgeVotingThreshold;\\n  /// @dev The amount of RON to slash bridge voting.\\n  uint256 internal _bridgeVotingSlashAmount;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ISlashBridgeVoting\\n   */\\n  function slashBridgeVoting(address _consensusAddr) external onlyAdmin {\\n    IRoninTrustedOrganization.TrustedOrganization memory _org = _roninTrustedOrganizationContract\\n      .getTrustedOrganization(_consensusAddr);\\n    uint256 _lastVotedBlock = Math.max(_roninGovernanceAdminContract.lastVotedBlock(_org.bridgeVoter), _org.addedBlock);\\n    uint256 _period = _validatorContract.currentPeriod();\\n\\n    require(\\n      block.number - _lastVotedBlock > _bridgeVotingThreshold && !_bridgeVotingSlashed[_consensusAddr][_period],\\n      \\\"SlashBridgeVoting: invalid slash\\\"\\n    );\\n\\n    _bridgeVotingSlashed[_consensusAddr][_period] = true;\\n    emit Slashed(_consensusAddr, SlashType.BRIDGE_VOTING, _period);\\n    _validatorContract.execSlash(_consensusAddr, 0, _bridgeVotingSlashAmount, false);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashBridgeVoting\\n   */\\n  function getBridgeVotingSlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (uint256 bridgeVotingThreshold_, uint256 bridgeVotingSlashAmount_)\\n  {\\n    return (_bridgeVotingThreshold, _bridgeVotingSlashAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashBridgeVoting\\n   */\\n  function setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) external override onlyAdmin {\\n    _setBridgeVotingSlashingConfigs(_threshold, _slashAmount);\\n  }\\n\\n  /**\\n   * @dev See `ISlashBridgeVoting-setBridgeVotingSlashingConfigs`.\\n   */\\n  function _setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) internal {\\n    _bridgeVotingThreshold = _threshold;\\n    _bridgeVotingSlashAmount = _slashAmount;\\n    emit BridgeVotingSlashingConfigsUpdated(_threshold, _slashAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x63eaf9d93feda26b62b814d45926569c0657b0f0bf7d7a8244c6688e9850502c\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/slash-indicator/ISlashDoubleSign.sol\\\";\\nimport \\\"../../precompile-usages/PCUValidateDoubleSign.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\n\\nabstract contract SlashDoubleSign is ISlashDoubleSign, HasValidatorContract, PCUValidateDoubleSign {\\n  /// @dev The amount of RON to slash double sign.\\n  uint256 internal _slashDoubleSignAmount;\\n  /// @dev The block number that the punished validator will be jailed until, due to double signing.\\n  uint256 internal _doubleSigningJailUntilBlock;\\n  /** @dev The offset from the submitted block to the current block, from which double signing will be invalidated.\\n   * This parameter is exposed for system transaction.\\n   **/\\n  uint256 internal _doubleSigningOffsetLimitBlock;\\n  /// @dev Recording of submitted proof to prevent relay attack.\\n  mapping(bytes32 => bool) _submittedEvidence;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function slashDoubleSign(\\n    address _consensusAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) external override onlyAdmin {\\n    bytes32 _header1Checksum = keccak256(_header1);\\n    bytes32 _header2Checksum = keccak256(_header2);\\n\\n    require(\\n      !_submittedEvidence[_header1Checksum] && !_submittedEvidence[_header2Checksum],\\n      \\\"SlashDoubleSign: evidence already submitted\\\"\\n    );\\n\\n    if (_pcValidateEvidence(_consensusAddr, _header1, _header2)) {\\n      uint256 _period = _validatorContract.currentPeriod();\\n      _submittedEvidence[_header1Checksum] = true;\\n      _submittedEvidence[_header2Checksum] = true;\\n      emit Slashed(_consensusAddr, SlashType.DOUBLE_SIGNING, _period);\\n      _validatorContract.execSlash(_consensusAddr, _doubleSigningJailUntilBlock, _slashDoubleSignAmount, true);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 slashDoubleSignAmount_,\\n      uint256 doubleSigningJailUntilBlock_,\\n      uint256 doubleSigningOffsetLimitBlock_\\n    )\\n  {\\n    return (_slashDoubleSignAmount, _doubleSigningJailUntilBlock, _doubleSigningOffsetLimitBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _offsetLimitBlock\\n  ) external override onlyAdmin {\\n    _setDoubleSignSlashingConfigs(_slashAmount, _jailUntilBlock, _offsetLimitBlock);\\n  }\\n\\n  /**\\n   * @dev See `ISlashDoubleSign-setDoubleSignSlashingConfigs`.\\n   */\\n  function _setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _offsetLimitBlock\\n  ) internal {\\n    _slashDoubleSignAmount = _slashAmount;\\n    _doubleSigningJailUntilBlock = _jailUntilBlock;\\n    _doubleSigningOffsetLimitBlock = _offsetLimitBlock;\\n    emit DoubleSignSlashingConfigsUpdated(_slashAmount, _jailUntilBlock, _doubleSigningOffsetLimitBlock);\\n  }\\n\\n  /**\\n   * @dev Returns whether the account `_addr` should be slashed or not.\\n   */\\n  function _shouldSlash(address _addr) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc0a3f6c59aa50b857e81fbb1ea1cb52ea631ddd1a0efb34b3619b1f4fd3a567a\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\nimport \\\"./SlashDoubleSign.sol\\\";\\nimport \\\"./SlashBridgeVoting.sol\\\";\\nimport \\\"./SlashBridgeOperator.sol\\\";\\nimport \\\"./SlashUnavailability.sol\\\";\\nimport \\\"./CreditScore.sol\\\";\\n\\ncontract SlashIndicator is\\n  ISlashIndicator,\\n  SlashDoubleSign,\\n  SlashBridgeVoting,\\n  SlashBridgeOperator,\\n  SlashUnavailability,\\n  CreditScore,\\n  Initializable\\n{\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address __roninGovernanceAdminContract,\\n    // _bridgeOperatorSlashingConfigs[0]: _missingVotesRatioTier1\\n    // _bridgeOperatorSlashingConfigs[1]: _missingVotesRatioTier2\\n    // _bridgeOperatorSlashingConfigs[2]: _jailDurationForMissingVotesRatioTier2\\n    // _bridgeOperatorSlashingConfigs[3]: _skipBridgeOperatorSlashingThreshold\\n    uint256[4] calldata _bridgeOperatorSlashingConfigs,\\n    // _bridgeVotingSlashingConfigs[0]: _bridgeVotingThreshold\\n    // _bridgeVotingSlashingConfigs[1]: _bridgeVotingSlashAmount\\n    uint256[2] calldata _bridgeVotingSlashingConfigs,\\n    // _doubleSignSlashingConfigs[0]: _slashDoubleSignAmount\\n    // _doubleSignSlashingConfigs[1]: _doubleSigningJailUntilBlock\\n    // _doubleSignSlashingConfigs[2]: _doubleSigningOffsetLimitBlock\\n    uint256[3] calldata _doubleSignSlashingConfigs,\\n    // _unavailabilitySlashingConfigs[0]: _unavailabilityTier1Threshold\\n    // _unavailabilitySlashingConfigs[1]: _unavailabilityTier2Threshold\\n    // _unavailabilitySlashingConfigs[2]: _slashAmountForUnavailabilityTier2Threshold\\n    // _unavailabilitySlashingConfigs[3]: _jailDurationForUnavailabilityTier2Threshold\\n    uint256[4] calldata _unavailabilitySlashingConfigs,\\n    // _creditScoreConfigs[0]: _gainCreditScore\\n    // _creditScoreConfigs[1]: _maxCreditScore\\n    // _creditScoreConfigs[2]: _bailOutCostMultiplier\\n    // _creditScoreConfigs[3]: _cutOffPercentageAfterBailout\\n    uint256[4] calldata _creditScoreConfigs\\n  ) external initializer {\\n    _setValidatorContract(__validatorContract);\\n    _setMaintenanceContract(__maintenanceContract);\\n    _setRoninTrustedOrganizationContract(__roninTrustedOrganizationContract);\\n    _setRoninGovernanceAdminContract(__roninGovernanceAdminContract);\\n    _setBridgeOperatorSlashingConfigs(\\n      _bridgeOperatorSlashingConfigs[0],\\n      _bridgeOperatorSlashingConfigs[1],\\n      _bridgeOperatorSlashingConfigs[2],\\n      _bridgeOperatorSlashingConfigs[3]\\n    );\\n    _setBridgeVotingSlashingConfigs(_bridgeVotingSlashingConfigs[0], _bridgeVotingSlashingConfigs[1]);\\n    _setDoubleSignSlashingConfigs(\\n      _doubleSignSlashingConfigs[0],\\n      _doubleSignSlashingConfigs[1],\\n      _doubleSignSlashingConfigs[2]\\n    );\\n    _setUnavailabilitySlashingConfigs(\\n      _unavailabilitySlashingConfigs[0],\\n      _unavailabilitySlashingConfigs[1],\\n      _unavailabilitySlashingConfigs[2],\\n      _unavailabilitySlashingConfigs[3]\\n    );\\n    _setCreditScoreConfigs(\\n      _creditScoreConfigs[0],\\n      _creditScoreConfigs[1],\\n      _creditScoreConfigs[2],\\n      _creditScoreConfigs[3]\\n    );\\n  }\\n\\n  /**\\n   * @dev Helper for CreditScore contract to reset the indicator of the validator after bailing out.\\n   */\\n  function _setUnavailabilityIndicator(\\n    address _validator,\\n    uint256 _period,\\n    uint256 _indicator\\n  ) internal override(CreditScore, SlashUnavailability) {\\n    SlashUnavailability._setUnavailabilityIndicator(_validator, _period, _indicator);\\n  }\\n\\n  /**\\n   * @dev Helper for CreditScore contract to query indicator of the validator.\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period)\\n    public\\n    view\\n    override(CreditScore, ISlashUnavailability, SlashUnavailability)\\n    returns (uint256)\\n  {\\n    return SlashUnavailability.getUnavailabilityIndicator(_validator, _period);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period)\\n    public\\n    view\\n    override(CreditScore, ICreditScore, SlashUnavailability)\\n    returns (bool)\\n  {\\n    return CreditScore.checkBailedOutAtPeriod(_validator, _period);\\n  }\\n\\n  /**\\n   * @dev Sanity check the address to be slashed\\n   */\\n  function _shouldSlash(address _addr) internal view override(SlashDoubleSign, SlashUnavailability) returns (bool) {\\n    return\\n      (msg.sender != _addr) &&\\n      _validatorContract.isBlockProducer(_addr) &&\\n      !_maintenanceContract.checkMaintained(_addr, block.number);\\n  }\\n}\\n\",\"keccak256\":\"0x4e8ed6197fb42f52420fae0ebe09f46d891c5e6c56f4ee0fb8b3c2ffc879b648\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./CreditScore.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashUnavailability.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\n\\nabstract contract SlashUnavailability is ISlashUnavailability, HasValidatorContract {\\n  /// @dev The last block that a validator is slashed for unavailability.\\n  uint256 public lastUnavailabilitySlashedBlock;\\n  /// @dev Mapping from validator address => period index => unavailability indicator.\\n  mapping(address => mapping(uint256 => uint256)) internal _unavailabilityIndicator;\\n\\n  /**\\n   * @dev The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * This threshold is applied for tier-1 and tier-3 of unavailability slash.\\n   */\\n  uint256 internal _unavailabilityTier1Threshold;\\n  /**\\n   * @dev The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   */\\n  uint256 internal _unavailabilityTier2Threshold;\\n  /**\\n   * @dev The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with\\n   * tier-2 or tier-3.\\n   **/\\n  uint256 internal _slashAmountForUnavailabilityTier2Threshold;\\n  /// @dev The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.\\n  uint256 internal _jailDurationForUnavailabilityTier2Threshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  modifier oncePerBlock() {\\n    require(\\n      block.number > lastUnavailabilitySlashedBlock,\\n      \\\"SlashIndicator: cannot slash a validator twice or slash more than one validator in one block\\\"\\n    );\\n    lastUnavailabilitySlashedBlock = block.number;\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function slashUnavailability(address _validatorAddr) external override oncePerBlock {\\n    require(msg.sender == block.coinbase, \\\"SlashUnavailability: method caller must be coinbase\\\");\\n    if (!_shouldSlash(_validatorAddr)) {\\n      // Should return instead of throwing error since this is a part of system transaction.\\n      return;\\n    }\\n\\n    uint256 _period = _validatorContract.currentPeriod();\\n    uint256 _count = ++_unavailabilityIndicator[_validatorAddr][_period];\\n    uint256 _newJailedUntilBlock = Math.addIfNonZero(block.number, _jailDurationForUnavailabilityTier2Threshold);\\n\\n    if (_count == _unavailabilityTier2Threshold) {\\n      emit Slashed(_validatorAddr, SlashType.UNAVAILABILITY_TIER_2, _period);\\n      _validatorContract.execSlash(\\n        _validatorAddr,\\n        _newJailedUntilBlock,\\n        _slashAmountForUnavailabilityTier2Threshold,\\n        false\\n      );\\n    } else if (_count == _unavailabilityTier1Threshold) {\\n      bool _tier1SecondTime = checkBailedOutAtPeriod(_validatorAddr, _period);\\n      if (!_tier1SecondTime) {\\n        emit Slashed(_validatorAddr, SlashType.UNAVAILABILITY_TIER_1, _period);\\n        _validatorContract.execSlash(_validatorAddr, 0, 0, false);\\n      } else {\\n        /// Handles tier-3\\n        emit Slashed(_validatorAddr, SlashType.UNAVAILABILITY_TIER_3, _period);\\n        _validatorContract.execSlash(\\n          _validatorAddr,\\n          _newJailedUntilBlock,\\n          _slashAmountForUnavailabilityTier2Threshold,\\n          true\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external override onlyAdmin {\\n    _setUnavailabilitySlashingConfigs(\\n      _tier1Threshold,\\n      _tier2Threshold,\\n      _slashAmountForTier2Threshold,\\n      _jailDurationForTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 unavailabilityTier1Threshold_,\\n      uint256 unavailabilityTier2Threshold_,\\n      uint256 slashAmountForUnavailabilityTier2Threshold_,\\n      uint256 jailDurationForUnavailabilityTier2Threshold_\\n    )\\n  {\\n    return (\\n      _unavailabilityTier1Threshold,\\n      _unavailabilityTier2Threshold,\\n      _slashAmountForUnavailabilityTier2Threshold,\\n      _jailDurationForUnavailabilityTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function currentUnavailabilityIndicator(address _validator) external view override returns (uint256) {\\n    return getUnavailabilityIndicator(_validator, _validatorContract.currentPeriod());\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _unavailabilityIndicator[_validator][_period];\\n  }\\n\\n  /**\\n   * @dev Sets the unavailability indicator of the `_validator` at `_period`.\\n   */\\n  function _setUnavailabilityIndicator(\\n    address _validator,\\n    uint256 _period,\\n    uint256 _indicator\\n  ) internal virtual {\\n    _unavailabilityIndicator[_validator][_period] = _indicator;\\n  }\\n\\n  /**\\n   * @dev See `ISlashUnavailability-setUnavailabilitySlashingConfigs`.\\n   */\\n  function _setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) internal {\\n    require(_unavailabilityTier1Threshold <= _unavailabilityTier2Threshold, \\\"SlashUnavailability: invalid threshold\\\");\\n    _unavailabilityTier1Threshold = _tier1Threshold;\\n    _unavailabilityTier2Threshold = _tier2Threshold;\\n    _slashAmountForUnavailabilityTier2Threshold = _slashAmountForTier2Threshold;\\n    _jailDurationForUnavailabilityTier2Threshold = _jailDurationForTier2Threshold;\\n    emit UnavailabilitySlashingConfigsUpdated(\\n      _tier1Threshold,\\n      _tier2Threshold,\\n      _slashAmountForTier2Threshold,\\n      _jailDurationForTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether the account `_addr` should be slashed or not.\\n   */\\n  function _shouldSlash(address _addr) internal view virtual returns (bool);\\n\\n  /**\\n   * @dev See `ICreditScore-checkBailedOutAtPeriod`\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xf725c5d1992bad9a7e952bf1b2e0b0fec11858be35cf8d91ffc001fcf64b0e02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e7565b61011354610100900460ff1615620000905760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b6101135460ff9081161015620000e557610113805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612e0e80620000f76000396000f3fe608060405234801561001057600080fd5b506004361061018b5760003560e01c806307c2d2f614610190578063082e7420146101a55780630e1512ac146101cb5780631079402a146101de5780631a697341146101fb5780631e90b2a01461020e57806323368e471461022157806329ddc3c01461023b5780633d48fd7d1461025e57806346fe93111461026f5780635511cde11461028257806362ffe6cb146102935780637680850c146102a65780637c2b55a0146102b9578063853af1b7146102c057806399103f7b146102d357806399439089146102e6578063b5e337de146102ee578063c008ce3914610301578063c2e524dc14610314578063c6391fa21461032f578063ccbb72ed14610340578063cdf64a7614610353578063cf39d13c14610366578063d1737e2714610379578063d1f992f71461038c578063d2cb215e1461039f578063d3dd2bdf146103b0578063d73e81b8146103d9578063df4b6ee0146103ec578063f1001e7814610410578063f562b3c414610430578063fd422cd014610439575b600080fd5b6101a361019e3660046125a2565b61044c565b005b6101b86101b33660046125f8565b610575565b6040519081526020015b60405180910390f35b6101a36101d9366004612615565b6105f6565b606d54606e54606f546070545b6040516101c29493929190612647565b6101a36102093660046125f8565b610649565b6101a361021c3660046126a3565b610947565b6036546001600160a01b03165b6040516101c29190612725565b61024e610249366004612739565b610bac565b60405190151581526020016101c2565b60a55460a65460a75460a8546101eb565b6101a361027d3660046125f8565b610bdb565b6035546001600160a01b031661022e565b6101b86102a1366004612739565b610c4a565b6101a36102b4366004612765565b610c73565b606761022e565b6101a36102ce3660046127b0565b610fb4565b6101a36102e13660046127e3565b610ffa565b61022e6111a4565b6101a36102fc3660046125f8565b6111b3565b6101a361030f3660046128a7565b61121f565b603854603954604080519283526020830191909152016101c2565b60dd5460de5460df5460e0546101eb565b6101a361034e366004612615565b6112c5565b6101a36103613660046125f8565b611309565b6101a36103743660046128dc565b611375565b6101a3610387366004612615565b6113b8565b6101a361039a3660046125f8565b6113fc565b606c546001600160a01b031661022e565b6101b86103be3660046125f8565b6001600160a01b0316600090815260dc602052604090205490565b6101a36103e73660046125f8565b61196d565b600154600254600354604080519384526020840192909252908201526060016101c2565b61042361041e3660046125a2565b6119d9565b6040516101c29190612943565b6101b860a35481565b6101a36104473660046125f8565b611aad565b336104556111a4565b6001600160a01b03161461047c57604051630e6444a160e31b815260040160405180910390fd5b6000816001600160401b0381111561049657610496612956565b6040519080825280602002602001820160405280156104bf578160200160208202803683370190505b50905060005b828110156105465760008484838181106104e1576104e161296c565b90506020020160208101906104f691906125f8565b6001600160a01b038116600090815260dc602052604081205583519091508390839081106105265761052661296c565b60200260200101600081525050808061053e90612998565b9150506104c5565b50600080516020612db9833981519152838383604051610568939291906129ef565b60405180910390a1505050565b60006105f08260008054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a19190612a1f565b92915050565b6105fe611e91565b6001600160a01b0316336001600160a01b0316146106375760405162461bcd60e51b815260040161062e90612a38565b60405180910390fd5b61064384848484611ebf565b50505050565b610651611e91565b6001600160a01b0316336001600160a01b0316146106815760405162461bcd60e51b815260040161062e90612a38565b603554604051636db349d160e11b81526000916001600160a01b03169063db6693a2906106b2908590600401612725565b60a060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190612aaa565b6036546040808301519051632623bd4f60e21b815292935060009261077a926001600160a01b03169163988ef53c9161072f9190600401612725565b602060405180830381865afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190612a1f565b8360800151611f83565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190612a1f565b6038549091506108048343612b31565b11801561083557506001600160a01b038416600090815260376020908152604080832084845290915290205460ff16155b6108815760405162461bcd60e51b815260206004820181905260248201527f536c617368427269646765566f74696e673a20696e76616c696420736c617368604482015260640161062e565b6001600160a01b038416600081815260376020908152604080832085845290915290819020805460ff1916600117905551600080516020612d99833981519152906108d0906004908590612b44565b60405180910390a260008054603954604051630bde081360e21b81526001600160a01b0390921692632f78204c9261090f928992918290600401612b70565b600060405180830381600087803b15801561092957600080fd5b505af115801561093d573d6000803e3d6000fd5b5050505050505050565b61094f611e91565b6001600160a01b0316336001600160a01b03161461097f5760405162461bcd60e51b815260040161062e90612a38565b60008484604051610991929190612b98565b60405180910390209050600083836040516109ad929190612b98565b604080519182900390912060008481526004602052919091205490915060ff161580156109e9575060008181526004602052604090205460ff16155b610a495760405162461bcd60e51b815260206004820152602b60248201527f536c617368446f75626c655369676e3a2065766964656e636520616c7265616460448201526a1e481cdd589b5a5d1d195960aa1b606482015260840161062e565b610a568787878787611f9a565b15610ba35760008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190612a1f565b6000848152600460205260408082208054600160ff19918216811790925586845292829020805490931617909155519091506001600160a01b03891690600080516020612d9983398151915290610b2e906003908590612b44565b60405180910390a260005460025460018054604051630bde081360e21b81526001600160a01b0390941693632f78204c93610b6f938e939192600401612b70565b600060405180830381600087803b158015610b8957600080fd5b505af1158015610b9d573d6000803e3d6000fd5b50505050505b50505050505050565b6001600160a01b038216600090815260db6020908152604080832084845290915281205460ff165b9392505050565b610be3611e91565b6001600160a01b0316336001600160a01b031614610c135760405162461bcd60e51b815260040161062e90612a38565b806001600160a01b03163b600003610c3e57604051637bcd509160e01b815260040160405180910390fd5b610c4781612044565b50565b6001600160a01b038216600090815260a460209081526040808320848452909152812054610bd4565b33610c7c6111a4565b6001600160a01b031614610ca357604051630e6444a160e31b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663297a8fca6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b9190612a1f565b60008054604051634de2b73560e01b815292935090916001600160a01b0390911690634de2b73590610d539088908890600401612ba8565b600060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d989190810190612bd1565b606c5460405163ba30375560e01b81529192506000916001600160a01b039091169063ba30375590610dd4908990899088904390600401612c7d565b600060405180830381865afa158015610df1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e199190810190612bd1565b90506000856001600160401b03811115610e3557610e35612956565b604051908082528060200260200182016040528015610e5e578160200160208202803683370190505b50905060005b86811015610f81576000888883818110610e8057610e8061296c565b9050602002016020810190610e9591906125f8565b90506000610ea38289610c4a565b90506000868481518110610eb957610eb961296c565b602002602001015190506000868581518110610ed757610ed761296c565b6020026020010151905060008280610eec5750815b610f0157610efc60dd548561209a565b610f04565b60005b6001600160a01b038616600090815260dc602052604090205460de54919250610f2e9183906120b4565b6001600160a01b038616600090815260dc602052604090208190558751889088908110610f5d57610f5d61296c565b60200260200101818152505050505050508080610f7990612998565b915050610e64565b50600080516020612db9833981519152878783604051610fa3939291906129ef565b60405180910390a150505050505050565b610fbc611e91565b6001600160a01b0316336001600160a01b031614610fec5760405162461bcd60e51b815260040161062e90612a38565b610ff682826120d1565b5050565b61011354610100900460ff161580801561101c575061011354600160ff909116105b806110375750303b15801561103757506101135460ff166001145b61109a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161062e565b610113805460ff1916600117905580156110bf57610113805461ff0019166101001790555b6110c88a612118565b6110d189612044565b6110da88612163565b6110e3876121ae565b6110fc86356020880135604089013560608a0135611ebf565b61110b853560208701356120d1565b61111f8435602086013560408701356121f9565b6111388335602085013560408601356060870135612246565b61115182356020840135604085013560608601356122f3565b801561119857610113805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b6000546001600160a01b031690565b6111bb611e91565b6001600160a01b0316336001600160a01b0316146111eb5760405162461bcd60e51b815260040161062e90612a38565b806001600160a01b03163b60000361121657604051637bcd509160e01b815260040160405180910390fd5b610c4781612163565b336112286111a4565b6001600160a01b03161461124f57604051630e6444a160e31b815260040160405180910390fd5b8160010361128e57826001600160a01b0316600080516020612d99833981519152600583604051611281929190612b44565b60405180910390a2505050565b816002036112c057826001600160a01b0316600080516020612d99833981519152600683604051611281929190612b44565b505050565b6112cd611e91565b6001600160a01b0316336001600160a01b0316146112fd5760405162461bcd60e51b815260040161062e90612a38565b610643848484846122f3565b611311611e91565b6001600160a01b0316336001600160a01b0316146113415760405162461bcd60e51b815260040161062e90612a38565b806001600160a01b03163b60000361136c57604051637bcd509160e01b815260040160405180910390fd5b610c4781612118565b61137d611e91565b6001600160a01b0316336001600160a01b0316146113ad5760405162461bcd60e51b815260040161062e90612a38565b6112c08383836121f9565b6113c0611e91565b6001600160a01b0316336001600160a01b0316146113f05760405162461bcd60e51b815260040161062e90612a38565b61064384848484612246565b600054604051635061f96960e11b81526001600160a01b039091169063a0c3f2d29061142c908490600401612725565b602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190612ca4565b6114df5760405162461bcd60e51b815260206004820152603f60248201527f536c617368496e64696361746f723a20636f6e73656e7375732061646472657360448201527f73206d75737420626520612076616c696461746f722063616e64696461746500606482015260840161062e565b6000546040516304d971ab60e01b81526001600160a01b038381166004830152336024830152909116906304d971ab90604401602060405180830381865afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190612ca4565b6115bf5760405162461bcd60e51b815260206004820152603760248201527f536c617368496e64696361746f723a206d6574686f642063616c6c6572206d7560448201527639ba10313290309031b0b73234b230ba329030b236b4b760491b606482015260840161062e565b60008054604051634b2c2fe160e11b815282916001600160a01b0316906396585fc2906115f0908690600401612725565b606060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116319190612cbf565b9250509150816116a75760405162461bcd60e51b815260206004820152603b60248201527f536c617368496e64696361746f723a2063616c6c6572206d757374206265206a60448201527a185a5b1959081a5b881d1a194818dd5c9c995b9d081c195c9a5bd9602a1b606482015260840161062e565b60008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171f9190612a1f565b6001600160a01b038516600090815260db6020908152604080832084845290915290205490915060ff16156117b25760405162461bcd60e51b815260206004820152603360248201527f536c617368496e64696361746f723a2076616c696461746f7220686173206261604482015272696c6564206f75742070726576696f75736c7960681b606482015260840161062e565b6001600160a01b038416600090815260dc602052604081205460df549091906117db9085612cf4565b90508082101561184b5760405162461bcd60e51b815260206004820152603560248201527f536c617368496e64696361746f723a20696e73756666696369656e7420637265604482015274191a5d081cd8dbdc99481d1bc818985a5b081bdd5d605a1b606482015260840161062e565b600054604051630adaf5ef60e11b81526001600160a01b03909116906315b5ebde9061187d9089908790600401612d0b565b600060405180830381600087803b15801561189757600080fd5b505af11580156118ab573d6000803e3d6000fd5b505050506001600160a01b038616600090815260dc6020526040812080548392906118d7908490612b31565b90915550506001600160a01b038616600090815260a4602090815260408083208684529091528120556001600160a01b038616600081815260db60209081526040808320878452825291829020805460ff1916600117905581518681529081018490527f7ff9f7032d565c7e8919332964b2faa33c320b53604a65d9dd1f8112e12cd39d910160405180910390a2505050505050565b611975611e91565b6001600160a01b0316336001600160a01b0316146119a55760405162461bcd60e51b815260040161062e90612a38565b806001600160a01b03163b6000036119d057604051637bcd509160e01b815260040160405180910390fd5b610c47816121ae565b6060816001600160401b038111156119f3576119f3612956565b604051908082528060200260200182016040528015611a1c578160200160208202803683370190505b50905060005b8151811015611aa65760dc6000858584818110611a4157611a4161296c565b9050602002016020810190611a5691906125f8565b6001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110611a8957611a8961296c565b602090810291909101015280611a9e81612998565b915050611a22565b5092915050565b60a3544311611b495760405162461bcd60e51b815260206004820152605c60248201527f536c617368496e64696361746f723a2063616e6e6f7420736c6173682061207660448201527f616c696461746f72207477696365206f7220736c617368206d6f72652074686160648201527b6e206f6e652076616c696461746f7220696e206f6e6520626c6f636b60201b608482015260a40161062e565b4360a355334114611bb85760405162461bcd60e51b815260206004820152603360248201527f536c617368556e617661696c6162696c6974793a206d6574686f642063616c6c6044820152726572206d75737420626520636f696e6261736560681b606482015260840161062e565b611bc181612407565b15610c475760008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3e9190612a1f565b6001600160a01b038316600090815260a4602090815260408083208484529091528120805492935090918290611c7390612998565b91905081905590506000611c894360a85461250f565b905060a6548203611d3357836001600160a01b0316600080516020612d99833981519152600285604051611cbe929190612b44565b60405180910390a26000805460a754604051630bde081360e21b81526001600160a01b0390921692632f78204c92611cfc9289928792600401612b70565b600060405180830381600087803b158015611d1657600080fd5b505af1158015611d2a573d6000803e3d6000fd5b50505050610643565b60a5548203610643576000611d488585610bac565b905080611ded57846001600160a01b0316600080516020612d99833981519152600186604051611d79929190612b44565b60405180910390a260008054604051630bde081360e21b81526001600160a01b0390911691632f78204c91611db691899181908190600401612b70565b600060405180830381600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b50505050611e8a565b846001600160a01b0316600080516020612d99833981519152600786604051611e17929190612b44565b60405180910390a260005460a754604051630bde081360e21b81526001600160a01b0390921691632f78204c91611e579189918791600190600401612b70565b600060405180830381600087803b158015611e7157600080fd5b505af1158015611e85573d6000803e3d6000fd5b505050505b5050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b828411158015611ed157506127108411155b8015611edf57506127108311155b611f2b5760405162461bcd60e51b815260206004820152601e60248201527f536c617368496e64696361746f723a20696e76616c696420726174696f730000604482015260640161062e565b606d849055606e839055606f82905560708190556040517fd24c671da2227c139fe1a5b34de15e5a67bef9b46e912916b9e0d025d51b3e3b90611f75908690869086908690612647565b60405180910390a150505050565b600081831015611f935781610bd4565b5090919050565b6040516000906067906001908390611fbe908a908a908a908a908a90602401612d4d565b60408051601f198184030181529190526020810180516001600160e01b0316637fc3567760e01b1790528051909150611ff5612539565b602083016020828483895afa61200a57600094505b503d61201557600093505b8361203357604051630fc2632160e01b815260040160405180910390fd5b5115159a9950505050505050505050565b606c80546001600160a01b0319166001600160a01b0383161790556040517f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b9061208f908390612725565b60405180910390a150565b60008183116120aa576000610bd4565b610bd48284612b31565b60006120c96120c38486612d85565b8361252a565b949350505050565b6038829055603981905560408051838152602081018390527fbda9ec2980d7468ba6a9f363696315affca9f9770016396bdea2ac39c3e5d61a910160405180910390a15050565b600080546001600160a01b0319166001600160a01b0383161790556040517fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b68361699061208f908390612725565b603580546001600160a01b0319166001600160a01b0383161790556040517ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d79061208f908390612725565b603680546001600160a01b0319166001600160a01b0383161790556040517f9125df97e014f5cc4f107fd784acd35e8e2188ca7c2a0f7caa478365747c1c839061208f908390612725565b60018390556002829055600381905560408051848152602081018490529081018290527f913da102149f952dde560cef3349db8e8002e9d580c41a7551d6d45329f4306b90606001610568565b60a65460a55411156122a95760405162461bcd60e51b815260206004820152602660248201527f536c617368556e617661696c6162696c6974793a20696e76616c696420746872604482015265195cda1bdb1960d21b606482015260840161062e565b60a584905560a683905560a782905560a88190556040517f442862e6143ad95854e7c13ff4947ec6e43bc87160e3b193e7c1abaf6e3aaa9890611f75908690869086908690612647565b828411156123545760405162461bcd60e51b815260206004820152602860248201527f43726564697453636f72653a20696e76616c6964206372656469742073636f726044820152676520636f6e66696760c01b606482015260840161062e565b6127108111156123bd5760405162461bcd60e51b815260206004820152602e60248201527f43726564697453636f72653a20696e76616c696420637574206f66662070657260448201526d63656e7461676520636f6e66696760901b606482015260840161062e565b60dd84905560de83905560df82905560e08190556040517fe1f9c6c73554b5fa140eead3cfd4ec3e6d4824f3ed26fb25e38376f65b95470b90611f75908690869086908690612647565b6000336001600160a01b0383161480159061248e5750600054604051633292276760e11b81526001600160a01b03909116906365244ece9061244d908590600401612725565b602060405180830381865afa15801561246a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248e9190612ca4565b80156105f05750606c54604051630fbeb37f60e01b81526001600160a01b0390911690630fbeb37f906124c79085904390600401612d0b565b602060405180830381865afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125089190612ca4565b1592915050565b600081600003612520576000610bd4565b610bd48284612d85565b6000818310611f935781610bd4565b60405180602001604052806001906020820280368337509192915050565b60008083601f84011261256957600080fd5b5081356001600160401b0381111561258057600080fd5b6020830191508360208260051b850101111561259b57600080fd5b9250929050565b600080602083850312156125b557600080fd5b82356001600160401b038111156125cb57600080fd5b6125d785828601612557565b90969095509350505050565b6001600160a01b0381168114610c4757600080fd5b60006020828403121561260a57600080fd5b8135610bd4816125e3565b6000806000806080858703121561262b57600080fd5b5050823594602084013594506040840135936060013592509050565b93845260208401929092526040830152606082015260800190565b60008083601f84011261267457600080fd5b5081356001600160401b0381111561268b57600080fd5b60208301915083602082850101111561259b57600080fd5b6000806000806000606086880312156126bb57600080fd5b85356126c6816125e3565b945060208601356001600160401b03808211156126e257600080fd5b6126ee89838a01612662565b9096509450604088013591508082111561270757600080fd5b5061271488828901612662565b969995985093965092949392505050565b6001600160a01b0391909116815260200190565b6000806040838503121561274c57600080fd5b8235612757816125e3565b946020939093013593505050565b60008060006040848603121561277a57600080fd5b83356001600160401b0381111561279057600080fd5b61279c86828701612557565b909790965060209590950135949350505050565b600080604083850312156127c357600080fd5b50508035926020909101359150565b80608081018310156105f057600080fd5b60008060008060008060008060006102a08a8c03121561280257600080fd5b893561280d816125e3565b985060208a013561281d816125e3565b975060408a013561282d816125e3565b965060608a013561283d816125e3565b955061284c8b60808c016127d2565b94506101408a018b81111561286057600080fd5b6101008b0194506101a08b018c81111561287957600080fd5b8194506128868d826127d2565b935050506128988b6102208c016127d2565b90509295985092959850929598565b6000806000606084860312156128bc57600080fd5b83356128c7816125e3565b95602085013595506040909401359392505050565b6000806000606084860312156128f157600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b838110156129385781518752958201959082019060010161291c565b509495945050505050565b602081526000610bd46020830184612908565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016129aa576129aa612982565b5060010190565b8183526000602080850194508260005b858110156129385781356129d4816125e3565b6001600160a01b0316875295820195908201906001016129c1565b604081526000612a036040830185876129b1565b8281036020840152612a158185612908565b9695505050505050565b600060208284031215612a3157600080fd5b5051919050565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b604051601f8201601f191681016001600160401b0381118282101715612aa257612aa2612956565b604052919050565b600060a08284031215612abc57600080fd5b60405160a081016001600160401b0381118282101715612ade57612ade612956565b6040528251612aec816125e3565b81526020830151612afc816125e3565b60208201526040830151612b0f816125e3565b6040820152606083810151908201526080928301519281019290925250919050565b818103818111156105f0576105f0612982565b6040810160088410612b6657634e487b7160e01b600052602160045260246000fd5b9281526020015290565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b8183823760009101908152919050565b6020815260006120c96020830184866129b1565b80518015158114612bcc57600080fd5b919050565b60006020808385031215612be457600080fd5b82516001600160401b0380821115612bfb57600080fd5b818501915085601f830112612c0f57600080fd5b815181811115612c2157612c21612956565b8060051b9150612c32848301612a7a565b8181529183018401918481019088841115612c4c57600080fd5b938501935b83851015612c7157612c6285612bbc565b82529385019390850190612c51565b98975050505050505050565b606081526000612c916060830186886129b1565b6020830194909452506040015292915050565b600060208284031215612cb657600080fd5b610bd482612bbc565b600080600060608486031215612cd457600080fd5b612cdd84612bbc565b925060208401519150604084015190509250925092565b80820281158282048414176105f0576105f0612982565b6001600160a01b03929092168252602082015260400190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0386168152606060208201819052600090612d729083018688612d24565b8281036040840152612c71818587612d24565b808201808211156105f0576105f061298256fe607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d98c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c23480a2646970667358221220bbb9c8a18d14676fde8bc85398a11a7545f7fb8cce3da08ee81c2ef3b251559464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018b5760003560e01c806307c2d2f614610190578063082e7420146101a55780630e1512ac146101cb5780631079402a146101de5780631a697341146101fb5780631e90b2a01461020e57806323368e471461022157806329ddc3c01461023b5780633d48fd7d1461025e57806346fe93111461026f5780635511cde11461028257806362ffe6cb146102935780637680850c146102a65780637c2b55a0146102b9578063853af1b7146102c057806399103f7b146102d357806399439089146102e6578063b5e337de146102ee578063c008ce3914610301578063c2e524dc14610314578063c6391fa21461032f578063ccbb72ed14610340578063cdf64a7614610353578063cf39d13c14610366578063d1737e2714610379578063d1f992f71461038c578063d2cb215e1461039f578063d3dd2bdf146103b0578063d73e81b8146103d9578063df4b6ee0146103ec578063f1001e7814610410578063f562b3c414610430578063fd422cd014610439575b600080fd5b6101a361019e3660046125a2565b61044c565b005b6101b86101b33660046125f8565b610575565b6040519081526020015b60405180910390f35b6101a36101d9366004612615565b6105f6565b606d54606e54606f546070545b6040516101c29493929190612647565b6101a36102093660046125f8565b610649565b6101a361021c3660046126a3565b610947565b6036546001600160a01b03165b6040516101c29190612725565b61024e610249366004612739565b610bac565b60405190151581526020016101c2565b60a55460a65460a75460a8546101eb565b6101a361027d3660046125f8565b610bdb565b6035546001600160a01b031661022e565b6101b86102a1366004612739565b610c4a565b6101a36102b4366004612765565b610c73565b606761022e565b6101a36102ce3660046127b0565b610fb4565b6101a36102e13660046127e3565b610ffa565b61022e6111a4565b6101a36102fc3660046125f8565b6111b3565b6101a361030f3660046128a7565b61121f565b603854603954604080519283526020830191909152016101c2565b60dd5460de5460df5460e0546101eb565b6101a361034e366004612615565b6112c5565b6101a36103613660046125f8565b611309565b6101a36103743660046128dc565b611375565b6101a3610387366004612615565b6113b8565b6101a361039a3660046125f8565b6113fc565b606c546001600160a01b031661022e565b6101b86103be3660046125f8565b6001600160a01b0316600090815260dc602052604090205490565b6101a36103e73660046125f8565b61196d565b600154600254600354604080519384526020840192909252908201526060016101c2565b61042361041e3660046125a2565b6119d9565b6040516101c29190612943565b6101b860a35481565b6101a36104473660046125f8565b611aad565b336104556111a4565b6001600160a01b03161461047c57604051630e6444a160e31b815260040160405180910390fd5b6000816001600160401b0381111561049657610496612956565b6040519080825280602002602001820160405280156104bf578160200160208202803683370190505b50905060005b828110156105465760008484838181106104e1576104e161296c565b90506020020160208101906104f691906125f8565b6001600160a01b038116600090815260dc602052604081205583519091508390839081106105265761052661296c565b60200260200101600081525050808061053e90612998565b9150506104c5565b50600080516020612db9833981519152838383604051610568939291906129ef565b60405180910390a1505050565b60006105f08260008054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a19190612a1f565b92915050565b6105fe611e91565b6001600160a01b0316336001600160a01b0316146106375760405162461bcd60e51b815260040161062e90612a38565b60405180910390fd5b61064384848484611ebf565b50505050565b610651611e91565b6001600160a01b0316336001600160a01b0316146106815760405162461bcd60e51b815260040161062e90612a38565b603554604051636db349d160e11b81526000916001600160a01b03169063db6693a2906106b2908590600401612725565b60a060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190612aaa565b6036546040808301519051632623bd4f60e21b815292935060009261077a926001600160a01b03169163988ef53c9161072f9190600401612725565b602060405180830381865afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190612a1f565b8360800151611f83565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f49190612a1f565b6038549091506108048343612b31565b11801561083557506001600160a01b038416600090815260376020908152604080832084845290915290205460ff16155b6108815760405162461bcd60e51b815260206004820181905260248201527f536c617368427269646765566f74696e673a20696e76616c696420736c617368604482015260640161062e565b6001600160a01b038416600081815260376020908152604080832085845290915290819020805460ff1916600117905551600080516020612d99833981519152906108d0906004908590612b44565b60405180910390a260008054603954604051630bde081360e21b81526001600160a01b0390921692632f78204c9261090f928992918290600401612b70565b600060405180830381600087803b15801561092957600080fd5b505af115801561093d573d6000803e3d6000fd5b5050505050505050565b61094f611e91565b6001600160a01b0316336001600160a01b03161461097f5760405162461bcd60e51b815260040161062e90612a38565b60008484604051610991929190612b98565b60405180910390209050600083836040516109ad929190612b98565b604080519182900390912060008481526004602052919091205490915060ff161580156109e9575060008181526004602052604090205460ff16155b610a495760405162461bcd60e51b815260206004820152602b60248201527f536c617368446f75626c655369676e3a2065766964656e636520616c7265616460448201526a1e481cdd589b5a5d1d195960aa1b606482015260840161062e565b610a568787878787611f9a565b15610ba35760008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190612a1f565b6000848152600460205260408082208054600160ff19918216811790925586845292829020805490931617909155519091506001600160a01b03891690600080516020612d9983398151915290610b2e906003908590612b44565b60405180910390a260005460025460018054604051630bde081360e21b81526001600160a01b0390941693632f78204c93610b6f938e939192600401612b70565b600060405180830381600087803b158015610b8957600080fd5b505af1158015610b9d573d6000803e3d6000fd5b50505050505b50505050505050565b6001600160a01b038216600090815260db6020908152604080832084845290915281205460ff165b9392505050565b610be3611e91565b6001600160a01b0316336001600160a01b031614610c135760405162461bcd60e51b815260040161062e90612a38565b806001600160a01b03163b600003610c3e57604051637bcd509160e01b815260040160405180910390fd5b610c4781612044565b50565b6001600160a01b038216600090815260a460209081526040808320848452909152812054610bd4565b33610c7c6111a4565b6001600160a01b031614610ca357604051630e6444a160e31b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663297a8fca6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b9190612a1f565b60008054604051634de2b73560e01b815292935090916001600160a01b0390911690634de2b73590610d539088908890600401612ba8565b600060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d989190810190612bd1565b606c5460405163ba30375560e01b81529192506000916001600160a01b039091169063ba30375590610dd4908990899088904390600401612c7d565b600060405180830381865afa158015610df1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e199190810190612bd1565b90506000856001600160401b03811115610e3557610e35612956565b604051908082528060200260200182016040528015610e5e578160200160208202803683370190505b50905060005b86811015610f81576000888883818110610e8057610e8061296c565b9050602002016020810190610e9591906125f8565b90506000610ea38289610c4a565b90506000868481518110610eb957610eb961296c565b602002602001015190506000868581518110610ed757610ed761296c565b6020026020010151905060008280610eec5750815b610f0157610efc60dd548561209a565b610f04565b60005b6001600160a01b038616600090815260dc602052604090205460de54919250610f2e9183906120b4565b6001600160a01b038616600090815260dc602052604090208190558751889088908110610f5d57610f5d61296c565b60200260200101818152505050505050508080610f7990612998565b915050610e64565b50600080516020612db9833981519152878783604051610fa3939291906129ef565b60405180910390a150505050505050565b610fbc611e91565b6001600160a01b0316336001600160a01b031614610fec5760405162461bcd60e51b815260040161062e90612a38565b610ff682826120d1565b5050565b61011354610100900460ff161580801561101c575061011354600160ff909116105b806110375750303b15801561103757506101135460ff166001145b61109a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161062e565b610113805460ff1916600117905580156110bf57610113805461ff0019166101001790555b6110c88a612118565b6110d189612044565b6110da88612163565b6110e3876121ae565b6110fc86356020880135604089013560608a0135611ebf565b61110b853560208701356120d1565b61111f8435602086013560408701356121f9565b6111388335602085013560408601356060870135612246565b61115182356020840135604085013560608601356122f3565b801561119857610113805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b6000546001600160a01b031690565b6111bb611e91565b6001600160a01b0316336001600160a01b0316146111eb5760405162461bcd60e51b815260040161062e90612a38565b806001600160a01b03163b60000361121657604051637bcd509160e01b815260040160405180910390fd5b610c4781612163565b336112286111a4565b6001600160a01b03161461124f57604051630e6444a160e31b815260040160405180910390fd5b8160010361128e57826001600160a01b0316600080516020612d99833981519152600583604051611281929190612b44565b60405180910390a2505050565b816002036112c057826001600160a01b0316600080516020612d99833981519152600683604051611281929190612b44565b505050565b6112cd611e91565b6001600160a01b0316336001600160a01b0316146112fd5760405162461bcd60e51b815260040161062e90612a38565b610643848484846122f3565b611311611e91565b6001600160a01b0316336001600160a01b0316146113415760405162461bcd60e51b815260040161062e90612a38565b806001600160a01b03163b60000361136c57604051637bcd509160e01b815260040160405180910390fd5b610c4781612118565b61137d611e91565b6001600160a01b0316336001600160a01b0316146113ad5760405162461bcd60e51b815260040161062e90612a38565b6112c08383836121f9565b6113c0611e91565b6001600160a01b0316336001600160a01b0316146113f05760405162461bcd60e51b815260040161062e90612a38565b61064384848484612246565b600054604051635061f96960e11b81526001600160a01b039091169063a0c3f2d29061142c908490600401612725565b602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190612ca4565b6114df5760405162461bcd60e51b815260206004820152603f60248201527f536c617368496e64696361746f723a20636f6e73656e7375732061646472657360448201527f73206d75737420626520612076616c696461746f722063616e64696461746500606482015260840161062e565b6000546040516304d971ab60e01b81526001600160a01b038381166004830152336024830152909116906304d971ab90604401602060405180830381865afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190612ca4565b6115bf5760405162461bcd60e51b815260206004820152603760248201527f536c617368496e64696361746f723a206d6574686f642063616c6c6572206d7560448201527639ba10313290309031b0b73234b230ba329030b236b4b760491b606482015260840161062e565b60008054604051634b2c2fe160e11b815282916001600160a01b0316906396585fc2906115f0908690600401612725565b606060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116319190612cbf565b9250509150816116a75760405162461bcd60e51b815260206004820152603b60248201527f536c617368496e64696361746f723a2063616c6c6572206d757374206265206a60448201527a185a5b1959081a5b881d1a194818dd5c9c995b9d081c195c9a5bd9602a1b606482015260840161062e565b60008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171f9190612a1f565b6001600160a01b038516600090815260db6020908152604080832084845290915290205490915060ff16156117b25760405162461bcd60e51b815260206004820152603360248201527f536c617368496e64696361746f723a2076616c696461746f7220686173206261604482015272696c6564206f75742070726576696f75736c7960681b606482015260840161062e565b6001600160a01b038416600090815260dc602052604081205460df549091906117db9085612cf4565b90508082101561184b5760405162461bcd60e51b815260206004820152603560248201527f536c617368496e64696361746f723a20696e73756666696369656e7420637265604482015274191a5d081cd8dbdc99481d1bc818985a5b081bdd5d605a1b606482015260840161062e565b600054604051630adaf5ef60e11b81526001600160a01b03909116906315b5ebde9061187d9089908790600401612d0b565b600060405180830381600087803b15801561189757600080fd5b505af11580156118ab573d6000803e3d6000fd5b505050506001600160a01b038616600090815260dc6020526040812080548392906118d7908490612b31565b90915550506001600160a01b038616600090815260a4602090815260408083208684529091528120556001600160a01b038616600081815260db60209081526040808320878452825291829020805460ff1916600117905581518681529081018490527f7ff9f7032d565c7e8919332964b2faa33c320b53604a65d9dd1f8112e12cd39d910160405180910390a2505050505050565b611975611e91565b6001600160a01b0316336001600160a01b0316146119a55760405162461bcd60e51b815260040161062e90612a38565b806001600160a01b03163b6000036119d057604051637bcd509160e01b815260040160405180910390fd5b610c47816121ae565b6060816001600160401b038111156119f3576119f3612956565b604051908082528060200260200182016040528015611a1c578160200160208202803683370190505b50905060005b8151811015611aa65760dc6000858584818110611a4157611a4161296c565b9050602002016020810190611a5691906125f8565b6001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110611a8957611a8961296c565b602090810291909101015280611a9e81612998565b915050611a22565b5092915050565b60a3544311611b495760405162461bcd60e51b815260206004820152605c60248201527f536c617368496e64696361746f723a2063616e6e6f7420736c6173682061207660448201527f616c696461746f72207477696365206f7220736c617368206d6f72652074686160648201527b6e206f6e652076616c696461746f7220696e206f6e6520626c6f636b60201b608482015260a40161062e565b4360a355334114611bb85760405162461bcd60e51b815260206004820152603360248201527f536c617368556e617661696c6162696c6974793a206d6574686f642063616c6c6044820152726572206d75737420626520636f696e6261736560681b606482015260840161062e565b611bc181612407565b15610c475760008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3e9190612a1f565b6001600160a01b038316600090815260a4602090815260408083208484529091528120805492935090918290611c7390612998565b91905081905590506000611c894360a85461250f565b905060a6548203611d3357836001600160a01b0316600080516020612d99833981519152600285604051611cbe929190612b44565b60405180910390a26000805460a754604051630bde081360e21b81526001600160a01b0390921692632f78204c92611cfc9289928792600401612b70565b600060405180830381600087803b158015611d1657600080fd5b505af1158015611d2a573d6000803e3d6000fd5b50505050610643565b60a5548203610643576000611d488585610bac565b905080611ded57846001600160a01b0316600080516020612d99833981519152600186604051611d79929190612b44565b60405180910390a260008054604051630bde081360e21b81526001600160a01b0390911691632f78204c91611db691899181908190600401612b70565b600060405180830381600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b50505050611e8a565b846001600160a01b0316600080516020612d99833981519152600786604051611e17929190612b44565b60405180910390a260005460a754604051630bde081360e21b81526001600160a01b0390921691632f78204c91611e579189918791600190600401612b70565b600060405180830381600087803b158015611e7157600080fd5b505af1158015611e85573d6000803e3d6000fd5b505050505b5050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b828411158015611ed157506127108411155b8015611edf57506127108311155b611f2b5760405162461bcd60e51b815260206004820152601e60248201527f536c617368496e64696361746f723a20696e76616c696420726174696f730000604482015260640161062e565b606d849055606e839055606f82905560708190556040517fd24c671da2227c139fe1a5b34de15e5a67bef9b46e912916b9e0d025d51b3e3b90611f75908690869086908690612647565b60405180910390a150505050565b600081831015611f935781610bd4565b5090919050565b6040516000906067906001908390611fbe908a908a908a908a908a90602401612d4d565b60408051601f198184030181529190526020810180516001600160e01b0316637fc3567760e01b1790528051909150611ff5612539565b602083016020828483895afa61200a57600094505b503d61201557600093505b8361203357604051630fc2632160e01b815260040160405180910390fd5b5115159a9950505050505050505050565b606c80546001600160a01b0319166001600160a01b0383161790556040517f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b9061208f908390612725565b60405180910390a150565b60008183116120aa576000610bd4565b610bd48284612b31565b60006120c96120c38486612d85565b8361252a565b949350505050565b6038829055603981905560408051838152602081018390527fbda9ec2980d7468ba6a9f363696315affca9f9770016396bdea2ac39c3e5d61a910160405180910390a15050565b600080546001600160a01b0319166001600160a01b0383161790556040517fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b68361699061208f908390612725565b603580546001600160a01b0319166001600160a01b0383161790556040517ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d79061208f908390612725565b603680546001600160a01b0319166001600160a01b0383161790556040517f9125df97e014f5cc4f107fd784acd35e8e2188ca7c2a0f7caa478365747c1c839061208f908390612725565b60018390556002829055600381905560408051848152602081018490529081018290527f913da102149f952dde560cef3349db8e8002e9d580c41a7551d6d45329f4306b90606001610568565b60a65460a55411156122a95760405162461bcd60e51b815260206004820152602660248201527f536c617368556e617661696c6162696c6974793a20696e76616c696420746872604482015265195cda1bdb1960d21b606482015260840161062e565b60a584905560a683905560a782905560a88190556040517f442862e6143ad95854e7c13ff4947ec6e43bc87160e3b193e7c1abaf6e3aaa9890611f75908690869086908690612647565b828411156123545760405162461bcd60e51b815260206004820152602860248201527f43726564697453636f72653a20696e76616c6964206372656469742073636f726044820152676520636f6e66696760c01b606482015260840161062e565b6127108111156123bd5760405162461bcd60e51b815260206004820152602e60248201527f43726564697453636f72653a20696e76616c696420637574206f66662070657260448201526d63656e7461676520636f6e66696760901b606482015260840161062e565b60dd84905560de83905560df82905560e08190556040517fe1f9c6c73554b5fa140eead3cfd4ec3e6d4824f3ed26fb25e38376f65b95470b90611f75908690869086908690612647565b6000336001600160a01b0383161480159061248e5750600054604051633292276760e11b81526001600160a01b03909116906365244ece9061244d908590600401612725565b602060405180830381865afa15801561246a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248e9190612ca4565b80156105f05750606c54604051630fbeb37f60e01b81526001600160a01b0390911690630fbeb37f906124c79085904390600401612d0b565b602060405180830381865afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125089190612ca4565b1592915050565b600081600003612520576000610bd4565b610bd48284612d85565b6000818310611f935781610bd4565b60405180602001604052806001906020820280368337509192915050565b60008083601f84011261256957600080fd5b5081356001600160401b0381111561258057600080fd5b6020830191508360208260051b850101111561259b57600080fd5b9250929050565b600080602083850312156125b557600080fd5b82356001600160401b038111156125cb57600080fd5b6125d785828601612557565b90969095509350505050565b6001600160a01b0381168114610c4757600080fd5b60006020828403121561260a57600080fd5b8135610bd4816125e3565b6000806000806080858703121561262b57600080fd5b5050823594602084013594506040840135936060013592509050565b93845260208401929092526040830152606082015260800190565b60008083601f84011261267457600080fd5b5081356001600160401b0381111561268b57600080fd5b60208301915083602082850101111561259b57600080fd5b6000806000806000606086880312156126bb57600080fd5b85356126c6816125e3565b945060208601356001600160401b03808211156126e257600080fd5b6126ee89838a01612662565b9096509450604088013591508082111561270757600080fd5b5061271488828901612662565b969995985093965092949392505050565b6001600160a01b0391909116815260200190565b6000806040838503121561274c57600080fd5b8235612757816125e3565b946020939093013593505050565b60008060006040848603121561277a57600080fd5b83356001600160401b0381111561279057600080fd5b61279c86828701612557565b909790965060209590950135949350505050565b600080604083850312156127c357600080fd5b50508035926020909101359150565b80608081018310156105f057600080fd5b60008060008060008060008060006102a08a8c03121561280257600080fd5b893561280d816125e3565b985060208a013561281d816125e3565b975060408a013561282d816125e3565b965060608a013561283d816125e3565b955061284c8b60808c016127d2565b94506101408a018b81111561286057600080fd5b6101008b0194506101a08b018c81111561287957600080fd5b8194506128868d826127d2565b935050506128988b6102208c016127d2565b90509295985092959850929598565b6000806000606084860312156128bc57600080fd5b83356128c7816125e3565b95602085013595506040909401359392505050565b6000806000606084860312156128f157600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b838110156129385781518752958201959082019060010161291c565b509495945050505050565b602081526000610bd46020830184612908565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016129aa576129aa612982565b5060010190565b8183526000602080850194508260005b858110156129385781356129d4816125e3565b6001600160a01b0316875295820195908201906001016129c1565b604081526000612a036040830185876129b1565b8281036020840152612a158185612908565b9695505050505050565b600060208284031215612a3157600080fd5b5051919050565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b604051601f8201601f191681016001600160401b0381118282101715612aa257612aa2612956565b604052919050565b600060a08284031215612abc57600080fd5b60405160a081016001600160401b0381118282101715612ade57612ade612956565b6040528251612aec816125e3565b81526020830151612afc816125e3565b60208201526040830151612b0f816125e3565b6040820152606083810151908201526080928301519281019290925250919050565b818103818111156105f0576105f0612982565b6040810160088410612b6657634e487b7160e01b600052602160045260246000fd5b9281526020015290565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b8183823760009101908152919050565b6020815260006120c96020830184866129b1565b80518015158114612bcc57600080fd5b919050565b60006020808385031215612be457600080fd5b82516001600160401b0380821115612bfb57600080fd5b818501915085601f830112612c0f57600080fd5b815181811115612c2157612c21612956565b8060051b9150612c32848301612a7a565b8181529183018401918481019088841115612c4c57600080fd5b938501935b83851015612c7157612c6285612bbc565b82529385019390850190612c51565b98975050505050505050565b606081526000612c916060830186886129b1565b6020830194909452506040015292915050565b600060208284031215612cb657600080fd5b610bd482612bbc565b600080600060608486031215612cd457600080fd5b612cdd84612bbc565b925060208401519150604084015190509250925092565b80820281158282048414176105f0576105f0612982565b6001600160a01b03929092168252602082015260400190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0386168152606060208201819052600090612d729083018688612d24565b8281036040840152612c71818587612d24565b808201808211156105f0576105f061298256fe607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d98c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c23480a2646970667358221220bbb9c8a18d14676fde8bc85398a11a7545f7fb8cce3da08ee81c2ef3b251559464736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrCallerMustBeGovernanceAdminContract()": [
        {
          "details": "Error of method caller must be goverance admin contract."
        }
      ],
      "ErrCallerMustBeMaintenanceContract()": [
        {
          "details": "Error of method caller must be maintenance contract."
        }
      ],
      "ErrCallerMustBeRoninTrustedOrgContract()": [
        {
          "details": "Error of method caller must be Ronin trusted org contract."
        }
      ],
      "ErrCallerMustBeValidatorContract()": [
        {
          "details": "Error of method caller must be validator contract."
        }
      ],
      "ErrZeroCodeContract()": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bailOut(address)": {
        "details": "A slashed validator use this method to get out of jail. Requirements: - The `_consensusAddr` must be a validator. - Only validator's admin can call this method. Emits the event `BailedOut`."
      },
      "checkBailedOutAtPeriod(address,uint256)": {
        "details": "Returns the whether the `_validator` has been bailed out at the `_period`."
      },
      "currentUnavailabilityIndicator(address)": {
        "details": "Returns the current unavailability indicator of a block producer."
      },
      "execResetCreditScores(address[])": {
        "details": "Resets the credit score for the revoked validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`."
      },
      "execSlashBridgeOperator(address,uint256,uint256)": {
        "details": "Acknowledges bridge operator slash and emit `Slashed` event correspondingly.",
        "params": {
          "_tier": "The tier of the slash, in value of {1, 2}, corresponding to `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_1` and `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_2` Requirements: - Only validator contract can invoke this method. - Should be called only at the end of period. - Should be called only when there is slash of bridge operator. Emits the event `Slashed`."
        }
      },
      "getBridgeOperatorSlashingConfigs()": {
        "details": "Returns the configs related to bridge operator slashing.",
        "returns": {
          "jailDurationForMissingVotesRatioTier2_": "The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.",
          "missingVotesRatioTier1_": "The bridge reward will be deprecated if (s)he missed more than this ratio.",
          "missingVotesRatioTier2_": "The bridge reward and mining reward will be deprecated and the corresponding block producer will be put in jail if (s)he misses more than this ratio.",
          "skipBridgeOperatorSlashingThreshold_": "The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small."
        }
      },
      "getBridgeVotingSlashingConfigs()": {
        "details": "Returns the configs related to bridge voting slashing.",
        "returns": {
          "bridgeVotingSlashAmount_": "The amount of RON to slash bridge voting.",
          "bridgeVotingThreshold_": "The threshold to slash when a trusted organization does not vote for bridge operators."
        }
      },
      "getCreditScore(address)": {
        "details": "Returns the current credit score of the validator."
      },
      "getCreditScoreConfigs()": {
        "details": "Returns the configs related to credit score.",
        "returns": {
          "bailOutCostMultiplier_": "The number that will be multiplied with the remaining jailed time to get the cost of bailing out.",
          "cutOffPercentageAfterBailout_": "The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.",
          "gainCreditScore_": "The score to gain per period.",
          "maxCreditScore_": "The max number of credit score that a validator can hold."
        }
      },
      "getDoubleSignSlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "params": {
          "_doubleSigningOffsetLimitBlock": "The number of block that the current block is at most far from the double signing block."
        },
        "returns": {
          "doubleSigningJailUntilBlock_": "The block number that the punished validator will be jailed until, due to double signing.",
          "slashDoubleSignAmount_": "The amount of RON to slash double sign."
        }
      },
      "getManyCreditScores(address[])": {
        "details": "Returns the current credit score of a list of validators."
      },
      "getUnavailabilityIndicator(address,uint256)": {
        "details": "Helper for CreditScore contract to query indicator of the validator."
      },
      "getUnavailabilitySlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "returns": {
          "jailDurationForUnavailabilityTier2Threshold_": "The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.",
          "slashAmountForUnavailabilityTier2Threshold_": "The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with tier-2 or tier-3.",
          "unavailabilityTier1Threshold_": "The mining reward will be deprecated, if (s)he missed more than this threshold. This threshold is applied for tier-1 and tier-3 slash.",
          "unavailabilityTier2Threshold_": " The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash."
        }
      },
      "initialize(address,address,address,address,uint256[4],uint256[2],uint256[3],uint256[4],uint256[4])": {
        "details": "Initializes the contract storage."
      },
      "maintenanceContract()": {
        "details": "Returns the maintenance contract."
      },
      "precompileValidateDoubleSignAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "roninGovernanceAdminContract()": {
        "details": "Returns the ronin governance admin contract."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeOperatorSlashingConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to slash bridge operators. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.",
        "params": {
          "_jailDurationTier2": "The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.",
          "_ratioTier1": "The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map to 0%-100%.",
          "_ratioTier2": "The bridge reward and mining reward will be deprecated and the corresponding block producer will be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.",
          "_skipSlashingThreshold": "The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small."
        }
      },
      "setBridgeVotingSlashingConfigs(uint256,uint256)": {
        "details": "Sets the configs to slash bridge voting. Requirements: - The method caller is admin. Emits the event `BridgeVotingSlashingConfigsUpdated`.",
        "params": {
          "_slashAmount": "The amount of RON to slash bridge voting.",
          "_threshold": "The threshold to slash when a trusted organization does not vote for bridge operators."
        }
      },
      "setCreditScoreConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to credit score. Requirements: - The method caller is admin. Emits the event `CreditScoreConfigsUpdated`.",
        "params": {
          "_bailOutMultiplier": "The number that will be multiplied with the remaining jailed time to get the cost of bailing out.",
          "_cutOffPercentage": "The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.",
          "_gainScore": "The score to gain per period.",
          "_maxScore": "The max number of credit score that a validator can hold."
        }
      },
      "setDoubleSignSlashingConfigs(uint256,uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `DoubleSignSlashingConfigsUpdated`.",
        "params": {
          "_doubleSigningOffsetLimitBlock": "The number of block that the current block is at most far from the double signing block.",
          "_jailUntilBlock": "The block number that the punished validator will be jailed until, due to double signing.",
          "_slashAmount": "The amount of RON to slash double sign."
        }
      },
      "setMaintenanceContract(address)": {
        "details": "Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`."
      },
      "setRoninGovernanceAdminContract(address)": {
        "details": "Sets the ronin governance admin contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninGovernanceAdminContractUpdated`."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.",
        "params": {
          "_jailDurationForTier2Threshold": "The number of blocks to jail a block producer when (s)he is slashed tier-2.",
          "_slashAmountForTier2Threshold": "The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.",
          "_tier1Threshold": "The mining reward will be deprecated, if (s)he missed more than this threshold.",
          "_tier2Threshold": "The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold."
        }
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "slashBridgeVoting(address)": {
        "details": "Slashes for bridge voter governance. Emits the event `Slashed`."
      },
      "slashDoubleSign(address,bytes,bytes)": {
        "details": "Slashes for double signing. Requirements: - The method caller is coinbase. Emits the event `Slashed` if the double signing evidence of the two headers valid."
      },
      "slashUnavailability(address)": {
        "details": "Slashes for unavailability by increasing the counter of block producer `_consensusAddr`. Requirements: - The method caller is coinbase. Emits the event `Slashed` when the threshold is reached."
      },
      "updateCreditScores(address[],uint256)": {
        "details": "Updates the credit score for the validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7051,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRoninValidatorSet)11967"
      },
      {
        "astId": 26721,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashDoubleSignAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 26724,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_doubleSigningJailUntilBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 26727,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_doubleSigningOffsetLimitBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26732,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_submittedEvidence",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 26737,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 6735,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IRoninTrustedOrganization)10182"
      },
      {
        "astId": 6656,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_roninGovernanceAdminContract",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IRoninGovernanceAdmin)10003"
      },
      {
        "astId": 26563,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bridgeVotingSlashed",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 26566,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bridgeVotingThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 26569,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bridgeVotingSlashAmount",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 26574,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6544,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_maintenanceContract",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IMaintenance)9657"
      },
      {
        "astId": 26395,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_missingVotesRatioTier1",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 26398,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_missingVotesRatioTier2",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 26401,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_jailDurationForMissingVotesRatioTier2",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 26404,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_skipBridgeOperatorSlashingThreshold",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 26409,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "113",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 27147,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "lastUnavailabilitySlashedBlock",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 27154,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityIndicator",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 27157,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityTier1Threshold",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 27160,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityTier2Threshold",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 27163,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashAmountForUnavailabilityTier2Threshold",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 27166,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_jailDurationForUnavailabilityTier2Threshold",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 27171,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "169",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25870,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_checkBailedOutAtPeriod",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 25875,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_creditScore",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25878,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_gainCreditScore",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 25881,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_maxCreditScore",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 25884,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bailOutCostMultiplier",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 25887,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_cutOffPercentageAfterBailout",
        "offset": 0,
        "slot": "224",
        "type": "t_uint256"
      },
      {
        "astId": 25892,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "225",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_initialized",
        "offset": 0,
        "slot": "275",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_initializing",
        "offset": 1,
        "slot": "275",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMaintenance)9657": {
        "encoding": "inplace",
        "label": "contract IMaintenance",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninGovernanceAdmin)10003": {
        "encoding": "inplace",
        "label": "contract IRoninGovernanceAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)10182": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninValidatorSet)11967": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}