{
  "address": "0x6d457615C1B08ab8d5ec2a0410440E23A17F7c38",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sendAmount",
          "type": "uint256"
        }
      ],
      "name": "ErrInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidArguments",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrRecipientRevert",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestRewardedPeriod",
          "type": "uint256"
        }
      ],
      "name": "ErrSyncTooFarPeriod",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrUnauthorizedCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum ContractType",
          "name": "expectedContractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "ErrUnexpectedInternalCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeRewardScatterFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeRewardScattered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeRewardSlashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "latestPeriod",
          "type": "uint256"
        }
      ],
      "name": "BridgeRewardSyncTooFarPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "BridgeTrackingIncorrectlyResponded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SafeReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardPerPeriod",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRewardPerPeriod",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ballots",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalBallot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "execSyncReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestRewardedPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardPerPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRewardScattered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRewardToppedUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeManagerContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeTrackingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeSlashContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "validatorSetContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dposGA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerPeriod",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeREP2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiveRON",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerPeriod",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "periodLength",
          "type": "uint256"
        }
      ],
      "name": "syncReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfa93c49d0d70792ce34ecf08c63df3f2775d5e5bfb1701498a72726f2150581",
  "receipt": {
    "to": null,
    "from": "0x4d58Ea7231c394d5804e8B06B1365915f906E27F",
    "contractAddress": "0x6d457615C1B08ab8d5ec2a0410440E23A17F7c38",
    "transactionIndex": 2,
    "gasUsed": "1381648",
    "logsBloom": "0x
    "blockHash": "0xf0a9d990126082ae1764baee9d65186bea031655894f5f8161e91dfa2673e75b",
    "transactionHash": "0xcfa93c49d0d70792ce34ecf08c63df3f2775d5e5bfb1701498a72726f2150581",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 28368660,
        "transactionHash": "0xcfa93c49d0d70792ce34ecf08c63df3f2775d5e5bfb1701498a72726f2150581",
        "address": "0x6d457615C1B08ab8d5ec2a0410440E23A17F7c38",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 7,
        "blockHash": "0xf0a9d990126082ae1764baee9d65186bea031655894f5f8161e91dfa2673e75b"
      }
    ],
    "blockNumber": 28368660,
    "cumulativeGasUsed": "1590778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d5751a51f1eb067d18a7dec1633f85eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidArguments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestRewardedPeriod\",\"type\":\"uint256\"}],\"name\":\"ErrSyncTooFarPeriod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrUnauthorizedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeRewardScatterFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeRewardScattered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeRewardSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestPeriod\",\"type\":\"uint256\"}],\"name\":\"BridgeRewardSyncTooFarPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BridgeTrackingIncorrectlyResponded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SafeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPerPeriod\",\"type\":\"uint256\"}],\"name\":\"UpdatedRewardPerPeriod\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ballots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalBallot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"execSyncReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestRewardedPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardScattered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardToppedUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeManagerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeTrackingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeSlashContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorSetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dposGA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerPeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeREP2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveRON\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerPeriod\",\"type\":\"uint256\"}],\"name\":\"setRewardPerPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"}],\"name\":\"syncReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrInsufficientBalance(bytes4,uint256,uint256)\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInvalidArguments(bytes4)\":[{\"details\":\"Error indicating that arguments are invalid.\"}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrRecipientRevert(bytes4)\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnauthorizedCall(bytes4)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"execSyncReward(address[],uint256[],uint256,uint256,uint256)\":{\"details\":\"The `period` a.k.a. `latestSyncedPeriod` must equal to `latestRewardedPeriod` + 1.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getLatestRewardedPeriod()\":{\"details\":\"External function to retrieve the latest rewarded period in the contract.\",\"returns\":{\"_0\":\"latestRewardedPeriod The latest rewarded period value.\"}},\"getRewardPerPeriod()\":{\"details\":\"Getter for all bridge operators per period.\"},\"getTotalRewardScattered()\":{\"details\":\"Retrieve the total amount of rewards that have been scattered to bridge operators in the contract.\",\"returns\":{\"_0\":\"totalRewardScattered The total rewards scattered value.\"}},\"getTotalRewardToppedUp()\":{\"details\":\"Retrieve the total amount of rewards that have been topped up in the contract.\",\"returns\":{\"_0\":\"totalRewardToppedUp The total rewards topped up value.\"}},\"initializeREP2()\":{\"details\":\"Helper for running upgrade script, required to only revoked once by the DPoS's governance admin. The following must be assured after initializing REP2: `_lastSyncPeriod` == `{BridgeReward}.latestRewardedPeriod` == `currentPeriod()`\"},\"receiveRON()\":{\"details\":\"Receives RON from any address.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setRewardPerPeriod(uint256)\":{\"details\":\"Setter for all bridge operators per period.\"},\"syncReward(uint256)\":{\"details\":\"This function allows bridge operators to manually synchronize the reward for a given period length.\",\"params\":{\"periodLength\":\"The length of the reward period for which synchronization is requested.\"}}},\"stateVariables\":{\"LATEST_REWARDED_PERIOD_SLOT\":{\"details\":\"value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.latestRewardedPeriod.slot\\\") - 1\"},\"REWARD_INFO_SLOT\":{\"details\":\"value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.rewardInfo.slot\\\") - 1\"},\"REWARD_PER_PERIOD_SLOT\":{\"details\":\"value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.rewardPerPeriod.slot\\\") - 1\"},\"TOTAL_REWARDS_SCATTERED_SLOT\":{\"details\":\"value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.totalRewardScattered.slot\\\") - 1\"},\"TOTAL_REWARDS_TOPPED_UP_SLOT\":{\"details\":\"value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.totalRewardToppedUp.slot\\\") - 1\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/gateway/BridgeReward.sol\":\"BridgeReward\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance(bytes4 msgSig, uint256 currentBalance, uint256 sendAmount);\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert(bytes4 msgSig);\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable recipient, uint256 amount) internal {\\n    if (!_sendRON(recipient, amount)) revert ErrRecipientRevert(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Send `amount` RON to the address `recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    if (address(this).balance < amount) revert ErrInsufficientBalance(msg.sig, address(this).balance, amount);\\n    return _unsafeSendRON(recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `amount` RON to the address `recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    (success, ) = recipient.call{ value: amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRONLimitGas(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRONLimitGas(\\n    address payable recipient,\\n    uint256 amount,\\n    uint256 gas\\n  ) internal returns (bool success) {\\n    (success, ) = recipient.call{ value: amount, gas: gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xdece837caa8da00fe031b8139ada009330b8bef149af12b535913c021ab94d0e\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/bridge-operator-governance/BridgeTrackingHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract BridgeTrackingHelper {\\n  /// @dev Event emited when the bridge tracking contract tracks the invalid data, cause malform in sharing bridge reward.\\n  event BridgeTrackingIncorrectlyResponded();\\n\\n  /**\\n   * @dev Internal function to validate the bridge tracking response for a given set of ballots.\\n   * @param totalBallot The total number of ballots available for the tracking response.\\n   * @param totalVote The total number of votes recorded in the tracking response.\\n   * @param ballots An array containing the individual ballot counts in the tracking response.\\n   * @return valid A boolean indicating whether the bridge tracking response is valid or not.\\n   * @notice The function checks if each individual ballot count is not greater than the total votes recorded.\\n   * @notice It also verifies that the sum of all individual ballot counts does not exceed the total available ballots.\\n   */\\n  function _isValidBridgeTrackingResponse(\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256[] memory ballots\\n  ) internal pure returns (bool valid) {\\n    valid = true;\\n    uint256 sumBallot;\\n    uint256 length = ballots.length;\\n\\n    unchecked {\\n      for (uint256 i; i < length; ++i) {\\n        if (ballots[i] > totalVote) {\\n          valid = false;\\n          break;\\n        }\\n\\n        sumBallot += ballots[i];\\n      }\\n    }\\n\\n    valid = valid && (sumBallot <= totalBallot);\\n  }\\n}\\n\",\"keccak256\":\"0x2da3d7c4b8d48228761b48c79beb04a55065d24a3469a16043b00c45873844e5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeManagerEvents } from \\\"./events/IBridgeManagerEvents.sol\\\";\\n\\n/**\\n * @title IBridgeManager\\n * @dev The interface for managing bridge operators.\\n */\\ninterface IBridgeManager is IBridgeManagerEvents {\\n  /**\\n   * @dev The domain separator used for computing hash digests in the contract.\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @dev Returns the total number of bridge operators.\\n   * @return The total number of bridge operators.\\n   */\\n  function totalBridgeOperator() external view returns (uint256);\\n\\n  /**\\n   * @dev Checks if the given address is a bridge operator.\\n   * @param addr The address to check.\\n   * @return A boolean indicating whether the address is a bridge operator.\\n   */\\n  function isBridgeOperator(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Retrieves the full information of all registered bridge operators.\\n   *\\n   * This external function allows external callers to obtain the full information of all the registered bridge operators.\\n   * The returned arrays include the addresses of governors, bridge operators, and their corresponding vote weights.\\n   *\\n   * @return governors An array of addresses representing the governors of each bridge operator.\\n   * @return bridgeOperators An array of addresses representing the registered bridge operators.\\n   * @return weights An array of uint256 values representing the vote weights of each bridge operator.\\n   *\\n   * Note: The length of each array will be the same, and the order of elements corresponds to the same bridge operator.\\n   *\\n   * Example Usage:\\n   * ```\\n   * (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights) = getFullBridgeOperatorInfos();\\n   * for (uint256 i = 0; i < bridgeOperators.length; i++) {\\n   *     // Access individual information for each bridge operator.\\n   *     address governor = governors[i];\\n   *     address bridgeOperator = bridgeOperators[i];\\n   *     uint256 weight = weights[i];\\n   *     // ... (Process or use the information as required) ...\\n   * }\\n   * ```\\n   *\\n   */\\n  function getFullBridgeOperatorInfos()\\n    external\\n    view\\n    returns (address[] memory governors, address[] memory bridgeOperators, uint96[] memory weights);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorsWeight(address[] calldata governors) external view returns (uint256 sum);\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function getTotalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns an array of all bridge operators.\\n   * @return An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns an array of bridge operators correspoding to governor addresses.\\n   * @return bridgeOperators_ An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperatorOf(address[] calldata gorvernors) external view returns (address[] memory bridgeOperators_);\\n\\n  /**\\n   * @dev Retrieves the governors corresponding to a given array of bridge operators.\\n   * This external function allows external callers to obtain the governors associated with a given array of bridge operators.\\n   * The function takes an input array `bridgeOperators` containing bridge operator addresses and returns an array of corresponding governors.\\n   * @param bridgeOperators An array of bridge operator addresses for which governors are to be retrieved.\\n   * @return governors An array of addresses representing the governors corresponding to the provided bridge operators.\\n   */\\n  function getGovernorsOf(address[] calldata bridgeOperators) external view returns (address[] memory governors);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific governor.\\n   * @param governor The address of the governor to get the vote weight for.\\n   * @return voteWeight The vote weight of the specified governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint96);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific bridge operator.\\n   * @param bridgeOperator The address of the bridge operator to get the vote weight for.\\n   * @return weight The vote weight of the specified bridge operator.\\n   */\\n  function getBridgeOperatorWeight(address bridgeOperator) external view returns (uint96 weight);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata governors) external view returns (uint96[] memory weights);\\n\\n  /**\\n   * @dev Returns an array of all governors.\\n   * @return An array containing the addresses of all governors.\\n   */\\n  function getGovernors() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Adds multiple bridge operators.\\n   * @param governors An array of addresses of hot/cold wallets for bridge operator to update their node address.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to add.\\n   * @return addeds An array of booleans indicating whether each bridge operator was added successfully.\\n   *\\n   * Note: return boolean array `addeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {addeds} = await bridgeManagerContract.callStatic.addBridgeOperators(\\n   *  voteWeights,\\n   *  governors,\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => addeds[index]);\\n   * const filteredWeights = weights.filter((_, index) => addeds[index]);\\n   * const filteredGovernors = governors.filter((_, index) => addeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function addBridgeOperators(\\n    uint96[] calldata voteWeights,\\n    address[] calldata governors,\\n    address[] calldata bridgeOperators\\n  ) external returns (bool[] memory addeds);\\n\\n  /**\\n   * @dev Removes multiple bridge operators.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to remove.\\n   * @return removeds An array of booleans indicating whether each bridge operator was removed successfully.\\n   *\\n   * * Note: return boolean array `removeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {removeds} = await bridgeManagerContract.callStatic.removeBridgeOperators(\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => removeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function removeBridgeOperators(address[] calldata bridgeOperators) external returns (bool[] memory removeds);\\n\\n  /**\\n   * @dev Governor updates their corresponding governor and/or operator address.\\n   * Requirements:\\n   * - The caller must the governor of the operator that is requested changes.\\n   * @param bridgeOperator The address of the bridge operator to update.\\n   */\\n  function updateBridgeOperator(address bridgeOperator) external;\\n}\\n\",\"keccak256\":\"0x9339ce2f14bc1e4d0e368a351506ff5735bcbc0a2e41aa633149198bbed76a60\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IBridgeRewardEvents } from \\\"./events/IBridgeRewardEvents.sol\\\";\\n\\ninterface IBridgeReward is IBridgeRewardEvents {\\n  /**\\n   * @dev This function allows bridge operators to manually synchronize the reward for a given period length.\\n   * @param periodLength The length of the reward period for which synchronization is requested.\\n   */\\n  function syncReward(uint256 periodLength) external;\\n\\n  /**\\n   * @dev Receives RON from any address.\\n   */\\n  function receiveRON() external payable;\\n\\n  /**\\n   * @dev Invoke calculate and transfer reward to operators based on their performance.\\n   *\\n   * Requirements:\\n   * - This method is only called once each period.\\n   * - The caller must be the bridge tracking contract or a bridge operator.\\n   */\\n  function execSyncReward(\\n    address[] calldata operators,\\n    uint256[] calldata ballots,\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256 period\\n  ) external;\\n\\n  /**\\n   * @dev Retrieve the total amount of rewards that have been topped up in the contract.\\n   * @return totalRewardToppedUp The total rewards topped up value.\\n   */\\n  function getTotalRewardToppedUp() external view returns (uint256);\\n\\n  /**\\n   * @dev Retrieve the total amount of rewards that have been scattered to bridge operators in the contract.\\n   * @return totalRewardScattered The total rewards scattered value.\\n   */\\n  function getTotalRewardScattered() external view returns (uint256);\\n\\n  /**\\n   * @dev Getter for all bridge operators per period.\\n   */\\n  function getRewardPerPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev External function to retrieve the latest rewarded period in the contract.\\n   * @return latestRewardedPeriod The latest rewarded period value.\\n   */\\n  function getLatestRewardedPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Setter for all bridge operators per period.\\n   */\\n  function setRewardPerPeriod(uint256 rewardPerPeriod) external;\\n}\\n\",\"keccak256\":\"0x781f5b4e9257231f008457d41b277058fe6a2b7366ecd3d64bce2591d0eaa216\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeSlashEvents } from \\\"./events/IBridgeSlashEvents.sol\\\";\\n\\n/**\\n * @title IBridgeSlash\\n * @dev Interface for the BridgeSlash contract to manage slashing functionality for bridge operators.\\n */\\ninterface IBridgeSlash is IBridgeSlashEvents {\\n  /**\\n   * @dev Slashes the unavailability of bridge operators during a specific period.\\n   * @param period The period to slash the bridge operators for.\\n   */\\n  function execSlashBridgeOperators(\\n    address[] calldata operators,\\n    uint256[] calldata ballots,\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256 period\\n  ) external;\\n\\n  /**\\n   * @dev Returns the penalize durations for the specified bridge operators.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @return untilPeriods The penalized periods for the bridge operators.\\n   */\\n  function getSlashUntilPeriodOf(address[] calldata bridgeOperators) external returns (uint256[] memory untilPeriods);\\n\\n  /**\\n   * @dev Retrieves the added periods of the specified bridge operators.\\n   * @param bridgeOperators An array of bridge operator addresses.\\n   * @return addedPeriods An array of uint256 values representing the added periods for each bridge operator.\\n   */\\n  function getAddedPeriodOf(address[] calldata bridgeOperators) external view returns (uint256[] memory addedPeriods);\\n\\n  /**\\n   * @dev Gets the slash tier based on the given ballot and total ballots.\\n   * @param ballot The ballot count for a bridge operator.\\n   * @param totalVote The total vote count for the period.\\n   * @return tier The slash tier.\\n   */\\n  function getSlashTier(uint256 ballot, uint256 totalVote) external pure returns (Tier tier);\\n\\n  /**\\n   * @dev Retrieve the penalty durations for different slash tiers.\\n   * @return penaltyDurations The array of penalty durations for each slash tier.\\n   */\\n  function getPenaltyDurations() external pure returns (uint256[] memory penaltyDurations);\\n\\n  /**\\n   * @dev Returns the penalty duration for Tier 1 slashing.\\n   * @return The duration in period number for Tier 1 slashing.\\n   */\\n  function TIER_1_PENALTY_DURATION() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the penalty duration for Tier 2 slashing.\\n   * @return The duration in period number for Tier 2 slashing.\\n   */\\n  function TIER_2_PENALTY_DURATION() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the threshold duration for removing bridge operators.\\n   * @return The duration in period number that exceeds which a bridge operator will be removed.\\n   */\\n  function REMOVE_DURATION_THRESHOLD() external view returns (uint256);\\n\\n  /**\\n   * @dev External function to retrieve the value of the minimum vote threshold to execute slashing rule.\\n   * @return minimumVoteThreshold The minimum vote threshold value.\\n   */\\n  function MINIMUM_VOTE_THRESHOLD() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc28c29288397fa0a3a4f3b2c33e31158c6e09611dbbcb6db9ca99195256b1c34\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  struct Request {\\n    VoteKind kind;\\n    uint256 id;\\n  }\\n\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  event ExternalCallFailed(address indexed to, bytes4 indexed msgSig, bytes reason);\\n\\n  /**\\n   * @dev Returns the block that allow incomming mutable call.\\n   */\\n  function startedAtBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVote(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallot(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(\\n    uint256 _period,\\n    address[] calldata _bridgeOperators\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(VoteKind _kind, uint256 _requestId, address _operator) external;\\n}\\n\",\"keccak256\":\"0x092841025351341cf7ff9cbf0eb6ef78752ffd2b1af329cb6048996d20c789a9\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/events/IBridgeManagerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeManagerEvents {\\n  /**\\n   * @dev The structure representing information about a bridge operator.\\n   * @param addr The address of the bridge operator.\\n   * @param voteWeight The vote weight assigned to the bridge operator.\\n   */\\n  struct BridgeOperatorInfo {\\n    address addr;\\n    uint96 voteWeight;\\n  }\\n\\n  /**\\n   * @dev Emitted when new bridge operators are added.\\n   * @param statuses The array of boolean values represents whether the corresponding bridge operator is added successfully.\\n   * @param voteWeights The array of vote weights assigned to the added bridge operators.\\n   * @param governors The array of addresses representing the governors associated with the added bridge operators.\\n   * @param bridgeOperators The array of addresses representing the added bridge operators.\\n   */\\n  event BridgeOperatorsAdded(bool[] statuses, uint96[] voteWeights, address[] governors, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when bridge operators are removed.\\n   * @param statuses The array of boolean values representing the statuses of the removed bridge operators.\\n   * @param bridgeOperators The array of addresses representing the removed bridge operators.\\n   */\\n  event BridgeOperatorsRemoved(bool[] statuses, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when a bridge operator is updated.\\n   * @param governor The address of the governor initiating the update.\\n   * @param fromBridgeOperator The address of the bridge operator being updated.\\n   * @param toBridgeOperator The updated address of the bridge operator.\\n   */\\n  event BridgeOperatorUpdated(\\n    address indexed governor,\\n    address indexed fromBridgeOperator,\\n    address indexed toBridgeOperator\\n  );\\n}\\n\",\"keccak256\":\"0x217fff41c4a9ca72d142c5a2120bb1b5e67bf5bf5aa0f6128450116aebc07b8d\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/events/IBridgeRewardEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeRewardEvents {\\n  /**\\n   * @dev Reward-related information for a bridge operator.\\n   * @param claimed The amount of rewards claimed by the bridge operator.\\n   * @param slashed The amount of rewards that have been slashed from the bridge operator.\\n   */\\n  struct BridgeRewardInfo {\\n    uint256 claimed;\\n    uint256 slashed;\\n  }\\n\\n  /**\\n   * @dev Emitted when RON are safely received as rewards in the contract.\\n   * @param from The address of the sender who transferred RON tokens as rewards.\\n   * @param balanceBefore The balance of the contract before receiving the RON tokens.\\n   * @param amount The amount of RON received.\\n   */\\n  event SafeReceived(address indexed from, uint256 balanceBefore, uint256 amount);\\n  /// @dev Event emitted when the reward per period config is updated.\\n  event UpdatedRewardPerPeriod(uint256 newRewardPerPeriod);\\n  /// @dev Event emitted when the reward of the `operator` is scattered with `amount`.\\n  event BridgeRewardScattered(uint256 indexed period, address operator, uint256 amount);\\n  /// @dev Event emitted when the reward of the `operator` is slashed with `amount`.\\n  event BridgeRewardSlashed(uint256 indexed period, address operator, uint256 amount);\\n  /// @dev Event emitted when the reward of the `operator` is scattered with `amount` but failed to transfer.\\n  event BridgeRewardScatterFailed(uint256 indexed period, address operator, uint256 amount);\\n  /// @dev Event emitted when the requesting period to sync  is too far.\\n  event BridgeRewardSyncTooFarPeriod(uint256 requestingPeriod, uint256 latestPeriod);\\n}\\n\",\"keccak256\":\"0xf0efa7130ba933552a16b7fb4040f23e276a41d8d698f27b11c3f82930916e51\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/events/IBridgeSlashEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeSlashEvents {\\n  /**\\n   * @dev Enumeration representing the slashing tiers for bridge operators.\\n   */\\n  enum Tier {\\n    Tier0,\\n    Tier1,\\n    Tier2\\n  }\\n\\n  /**\\n   * @dev Struct representing the status of a bridge operator.\\n   */\\n  struct BridgeSlashInfo {\\n    uint128 slashUntilPeriod;\\n    uint128 newlyAddedAtPeriod;\\n  }\\n\\n  /**\\n   * @dev Event emitted when a bridge operator is slashed.\\n   * @param tier The slash tier of the operator.\\n   * @param bridgeOperator The address of the slashed bridge operator.\\n   * @param period The period in which the operator is slashed.\\n   * @param slashUntilPeriod The period until which the operator is penalized.\\n   */\\n  event Slashed(Tier indexed tier, address indexed bridgeOperator, uint256 indexed period, uint256 slashUntilPeriod);\\n\\n  /**\\n   * @dev Emitted when a removal request is made for a bridge operator.\\n   * @param period The period for which the removal request is made.\\n   * @param bridgeOperator The address of the bridge operator being requested for removal.\\n   */\\n  event RemovalRequested(uint256 indexed period, address indexed bridgeOperator);\\n}\\n\",\"keccak256\":\"0x9611e0d8b85b50bdd8ba9e8148564af526e78ccce5d202e7c84043d2d2ccb75f\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address ______deprecatedbridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed consensusAddr, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address _consensusAddr, uint256 _effectiveTimestamp, uint256 _rate) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x97dae7e2ed43c21c48200581501bfa065c7836299306ba2e7f39896c3a22ef2d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x22f546add63b1b6e62929bdd4052fa032af55ebf50981dc22d208fe53ad1b0a3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address validatorAddr, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0xac0b772f2fca9dafd7cc6742f91b442f9f545bf9472185b8d817fe045b680193\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0x3fdfa86da33b889e5153075ffc028d6b0c607480a96b532fbbbc48ac7bbf27c9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    address _addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    address _addr,\\n    uint256 _blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2b1846b05ca1d636299fb929c1bd7b392b236f5e3f7aa3e7eea2c6d57b8836fb\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /**\\n   * @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n   */\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory _validatorList);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x6823181ac93ea3320e6ebfb456624afda59ac2acb480de5c774783983c8f4749\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/ronin/gateway/BridgeReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { BridgeTrackingHelper } from \\\"../../extensions/bridge-operator-governance/BridgeTrackingHelper.sol\\\";\\nimport { ContractType, HasContracts } from \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { RONTransferHelper } from \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport { IRoninValidatorSet } from \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport { IBridgeManager } from \\\"../../interfaces/bridge/IBridgeManager.sol\\\";\\nimport { IBridgeTracking } from \\\"../../interfaces/bridge/IBridgeTracking.sol\\\";\\nimport { IBridgeReward } from \\\"../../interfaces/bridge/IBridgeReward.sol\\\";\\nimport { IBridgeSlash } from \\\"../../interfaces/bridge/IBridgeSlash.sol\\\";\\nimport { Math } from \\\"../../libraries/Math.sol\\\";\\nimport { TUint256Slot } from \\\"../../types/Types.sol\\\";\\nimport { ErrSyncTooFarPeriod, ErrInvalidArguments, ErrLengthMismatch, ErrUnauthorizedCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\ncontract BridgeReward is IBridgeReward, BridgeTrackingHelper, HasContracts, RONTransferHelper, Initializable {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.rewardInfo.slot\\\") - 1\\n  bytes32 private constant REWARD_INFO_SLOT = 0x518cfd198acbffe95e740cfce1af28a3f7de51f0d784893d3d72c5cc59d7062a;\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.rewardPerPeriod.slot\\\") - 1\\n  TUint256Slot private constant REWARD_PER_PERIOD_SLOT =\\n    TUint256Slot.wrap(0x90f7d557245e5dd9485f463e58974fa7cdc93c0abbd0a1afebb8f9640ec73910);\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.latestRewardedPeriod.slot\\\") - 1\\n  TUint256Slot private constant LATEST_REWARDED_PERIOD_SLOT =\\n    TUint256Slot.wrap(0x2417f25874c1cdc139a787dd21df976d40d767090442b3a2496917ecfc93b619);\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.totalRewardToppedUp.slot\\\") - 1\\n  TUint256Slot private constant TOTAL_REWARDS_TOPPED_UP_SLOT =\\n    TUint256Slot.wrap(0x9a8c9f129792436c37b7bd2d79c56132fc05bf26cc8070794648517c2a0c6c64);\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeReward.totalRewardScattered.slot\\\") - 1\\n  TUint256Slot private constant TOTAL_REWARDS_SCATTERED_SLOT =\\n    TUint256Slot.wrap(0x3663384f6436b31a97d9c9a02f64ab8b73ead575c5b6224fa0800a6bd57f62f4);\\n\\n  address private immutable _self;\\n\\n  constructor() payable {\\n    _self = address(this);\\n    _disableInitializers();\\n  }\\n\\n  function initialize(\\n    address bridgeManagerContract,\\n    address bridgeTrackingContract,\\n    address bridgeSlashContract,\\n    address validatorSetContract,\\n    address dposGA,\\n    uint256 rewardPerPeriod\\n  ) external payable initializer {\\n    _setContract(ContractType.BRIDGE_MANAGER, bridgeManagerContract);\\n    _setContract(ContractType.BRIDGE_TRACKING, bridgeTrackingContract);\\n    _setContract(ContractType.BRIDGE_SLASH, bridgeSlashContract);\\n    _setContract(ContractType.VALIDATOR, validatorSetContract);\\n    _setContract(ContractType.GOVERNANCE_ADMIN, dposGA);\\n    LATEST_REWARDED_PERIOD_SLOT.store(type(uint256).max);\\n    _setRewardPerPeriod(rewardPerPeriod);\\n    _receiveRON();\\n  }\\n\\n  /**\\n   * @dev Helper for running upgrade script, required to only revoked once by the DPoS's governance admin.\\n   * The following must be assured after initializing REP2: `_lastSyncPeriod` == `{BridgeReward}.latestRewardedPeriod` == `currentPeriod()`\\n   */\\n  function initializeREP2() external onlyContract(ContractType.GOVERNANCE_ADMIN) {\\n    require(getLatestRewardedPeriod() == type(uint256).max, \\\"already init rep 2\\\");\\n    LATEST_REWARDED_PERIOD_SLOT.store(IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod() - 1);\\n    _setContract(ContractType.GOVERNANCE_ADMIN, address(0));\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeReward\\n   */\\n  function receiveRON() external payable {\\n    _receiveRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeReward\\n   */\\n  function syncReward(uint256 periodLength) external {\\n    if (!_isBridgeOperator(msg.sender)) revert ErrUnauthorizedCall(msg.sig);\\n\\n    uint256 latestRewardedPeriod = getLatestRewardedPeriod();\\n    uint256 currentPeriod = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n\\n    if (currentPeriod <= latestRewardedPeriod) revert ErrInvalidArguments(msg.sig);\\n    if (latestRewardedPeriod + periodLength > currentPeriod) revert ErrInvalidArguments(msg.sig);\\n\\n    LATEST_REWARDED_PERIOD_SLOT.addAssign(periodLength);\\n\\n    address[] memory operators = IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).getBridgeOperators();\\n    IBridgeTracking bridgeTrackingContract = IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING));\\n\\n    for (uint256 i = 1; i <= periodLength; ) {\\n      unchecked {\\n        _syncReward({\\n          operators: operators,\\n          ballots: bridgeTrackingContract.getManyTotalBallots(latestRewardedPeriod, operators),\\n          totalBallot: bridgeTrackingContract.totalBallot(latestRewardedPeriod),\\n          totalVote: bridgeTrackingContract.totalVote(latestRewardedPeriod),\\n          period: latestRewardedPeriod += i\\n        });\\n\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeReward\\n   *\\n   * @dev The `period` a.k.a. `latestSyncedPeriod` must equal to `latestRewardedPeriod` + 1.\\n   */\\n  function execSyncReward(\\n    address[] calldata operators,\\n    uint256[] calldata ballots,\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256 period\\n  ) external onlyContract(ContractType.BRIDGE_TRACKING) {\\n    if (operators.length != ballots.length) revert ErrLengthMismatch(msg.sig);\\n    if (operators.length == 0) return;\\n\\n    // Only sync the period that is after the latest rewarded period, i.e. `latestSyncedPeriod == latestRewardedPeriod + 1`.\\n    unchecked {\\n      uint256 latestRewardedPeriod = getLatestRewardedPeriod();\\n      if (period < latestRewardedPeriod + 1) revert ErrInvalidArguments(msg.sig);\\n      else if (period > latestRewardedPeriod + 1) revert ErrSyncTooFarPeriod(period, latestRewardedPeriod);\\n    }\\n    LATEST_REWARDED_PERIOD_SLOT.store(period);\\n\\n    _syncReward({\\n      operators: operators,\\n      ballots: ballots,\\n      totalBallot: totalBallot,\\n      totalVote: totalVote,\\n      period: period\\n    });\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeReward\\n   */\\n  function getTotalRewardToppedUp() external view returns (uint256) {\\n    return TOTAL_REWARDS_TOPPED_UP_SLOT.load();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeReward\\n   */\\n  function getTotalRewardScattered() external view returns (uint256) {\\n    return TOTAL_REWARDS_SCATTERED_SLOT.load();\\n  }\\n\\n  /**\\n   * @dev Internal function to receive RON tokens as rewards and update the total topped-up rewards amount.\\n   */\\n  function _receiveRON() internal {\\n    // prevent transfer RON directly to logic contract\\n    if (address(this) == _self) revert ErrUnauthorizedCall(msg.sig);\\n\\n    emit SafeReceived(msg.sender, TOTAL_REWARDS_TOPPED_UP_SLOT.load(), msg.value);\\n    TOTAL_REWARDS_TOPPED_UP_SLOT.addAssign(msg.value);\\n  }\\n\\n  /**\\n   * @dev Internal function to synchronize and distribute rewards to bridge operators for a given period.\\n   * @param operators An array containing the addresses of bridge operators to receive rewards.\\n   * @param ballots An array containing the individual ballot counts for each bridge operator.\\n   * @param totalBallot The total number of available ballots for the period.\\n   * @param totalVote The total number of votes recorded for the period.\\n   * @param period The period for which the rewards are being synchronized.\\n   */\\n  function _syncReward(\\n    address[] memory operators,\\n    uint256[] memory ballots,\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256 period\\n  ) internal {\\n    uint256 numBridgeOperators = operators.length;\\n    uint256 rewardPerPeriod = getRewardPerPeriod();\\n    uint256[] memory slashedDurationList = _getSlashInfo(operators);\\n    // Validate should share the reward equally\\n    bool shouldShareEqually = _shouldShareEqually(totalBallot, totalVote, ballots);\\n\\n    uint256 reward;\\n    bool shouldSlash;\\n    uint256 sumRewards;\\n\\n    for (uint256 i; i < numBridgeOperators; ) {\\n      (reward, shouldSlash) = _calcRewardAndCheckSlashedStatus({\\n        shouldShareEqually: shouldShareEqually,\\n        numBridgeOperators: numBridgeOperators,\\n        rewardPerPeriod: rewardPerPeriod,\\n        ballot: ballots[i],\\n        totalBallot: totalBallot,\\n        period: period,\\n        slashUntilPeriod: slashedDurationList[i]\\n      });\\n\\n      sumRewards += shouldSlash ? 0 : reward;\\n      _updateRewardAndTransfer({ period: period, operator: operators[i], reward: reward, shouldSlash: shouldSlash });\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    TOTAL_REWARDS_SCATTERED_SLOT.addAssign(sumRewards);\\n  }\\n\\n  /**\\n   * @dev Returns whether should share the reward equally, in case of bridge tracking returns\\n   * informed data or there is no ballot in a day.\\n   *\\n   * Emit a {BridgeTrackingIncorrectlyResponded} event when in case of incorrect data.\\n   */\\n  function _shouldShareEqually(\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256[] memory ballots\\n  ) internal returns (bool shareEqually) {\\n    bool valid = _isValidBridgeTrackingResponse(totalBallot, totalVote, ballots);\\n    if (!valid) {\\n      emit BridgeTrackingIncorrectlyResponded();\\n    }\\n\\n    return !valid || totalBallot == 0;\\n  }\\n\\n  /**\\n   * @dev Internal function to calculate the reward for a bridge operator and check its slashing status.\\n   * @param shouldShareEqually A boolean indicating whether the reward should be shared equally among bridge operators.\\n   * @param numBridgeOperators The total number of bridge operators for proportional reward calculation.\\n   * @param rewardPerPeriod The total reward available for the period.\\n   * @param ballot The individual ballot count of the bridge operator for the period.\\n   * @param totalBallot The total number of available ballots for the period.\\n   * @param period The period for which the reward is being calculated.\\n   * @param slashUntilPeriod The period until which slashing is effective for the bridge operator.\\n   * @return reward The calculated reward for the bridge operator.\\n   * @return shouldSlash A boolean indicating whether the bridge operator should be slashed for the current period.\\n   */\\n  function _calcRewardAndCheckSlashedStatus(\\n    bool shouldShareEqually,\\n    uint256 numBridgeOperators,\\n    uint256 rewardPerPeriod,\\n    uint256 ballot,\\n    uint256 totalBallot,\\n    uint256 period,\\n    uint256 slashUntilPeriod\\n  ) internal pure returns (uint256 reward, bool shouldSlash) {\\n    shouldSlash = _shouldSlashedThisPeriod(period, slashUntilPeriod);\\n    reward = _calcReward(shouldShareEqually, numBridgeOperators, rewardPerPeriod, ballot, totalBallot);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a specific period should be considered as slashed based on the slash duration.\\n   * @param period The period to check if it should be slashed.\\n   * @param slashDuration The duration until which periods should be considered as slashed.\\n   * @return shouldSlashed A boolean indicating whether the specified period should be slashed.\\n   * @notice This function is used internally to determine if a particular period should be marked as slashed based on the slash duration.\\n   */\\n  function _shouldSlashedThisPeriod(uint256 period, uint256 slashDuration) internal pure returns (bool) {\\n    return period <= slashDuration;\\n  }\\n\\n  /**\\n   * @dev Internal function to calculate the reward for a bridge operator based on the provided parameters.\\n   * @param shouldShareEqually A boolean indicating whether the reward should be shared equally among bridge operators.\\n   * @param numBridgeOperators The total number of bridge operators for proportional reward calculation.\\n   * @param rewardPerPeriod The total reward available for the period.\\n   * @param ballot The individual ballot count of the bridge operator for the period.\\n   * @param totalBallot The total number of available ballots for the period.\\n   * @return reward The calculated reward for the bridge operator.\\n   */\\n  function _calcReward(\\n    bool shouldShareEqually,\\n    uint256 numBridgeOperators,\\n    uint256 rewardPerPeriod,\\n    uint256 ballot,\\n    uint256 totalBallot\\n  ) internal pure returns (uint256 reward) {\\n    // Shares equally in case the bridge has nothing to vote or bridge tracking response is incorrect\\n    // Else shares the bridge operators reward proportionally\\n    reward = shouldShareEqually ? rewardPerPeriod / numBridgeOperators : (rewardPerPeriod * ballot) / totalBallot;\\n  }\\n\\n  /**\\n   * @dev Transfer `reward` to a `operator` or only emit event based on the operator `slashed` status.\\n   */\\n  function _updateRewardAndTransfer(uint256 period, address operator, uint256 reward, bool shouldSlash) private {\\n    BridgeRewardInfo storage _iRewardInfo = _getRewardInfo()[operator];\\n\\n    if (shouldSlash) {\\n      _iRewardInfo.slashed += reward;\\n      emit BridgeRewardSlashed(period, operator, reward);\\n    } else {\\n      _iRewardInfo.claimed += reward;\\n      if (_unsafeSendRONLimitGas({ recipient: payable(operator), amount: reward, gas: 0 })) {\\n        emit BridgeRewardScattered(period, operator, reward);\\n      } else {\\n        emit BridgeRewardScatterFailed(period, operator, reward);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeReward\\n   */\\n  function getRewardPerPeriod() public view returns (uint256) {\\n    return REWARD_PER_PERIOD_SLOT.load();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeReward\\n   */\\n  function getLatestRewardedPeriod() public view returns (uint256) {\\n    return LATEST_REWARDED_PERIOD_SLOT.load();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeReward\\n   */\\n  function setRewardPerPeriod(uint256 rewardPerPeriod) external onlyContract(ContractType.BRIDGE_MANAGER) {\\n    _setRewardPerPeriod(rewardPerPeriod);\\n  }\\n\\n  /**\\n   * @dev Internal function for setting the total reward per period.\\n   * Emit an {UpdatedRewardPerPeriod} event after set.\\n   */\\n  function _setRewardPerPeriod(uint256 rewardPerPeriod) internal {\\n    REWARD_PER_PERIOD_SLOT.store(rewardPerPeriod);\\n    emit UpdatedRewardPerPeriod(rewardPerPeriod);\\n  }\\n\\n  /**\\n   * @dev Internal helper for querying slash info of a list of operators.\\n   */\\n  function _getSlashInfo(address[] memory operatorList) internal returns (uint256[] memory _slashedDuration) {\\n    return IBridgeSlash(getContract(ContractType.BRIDGE_SLASH)).getSlashUntilPeriodOf(operatorList);\\n  }\\n\\n  /**\\n   * @dev Internal helper for querying whether an address is an operator.\\n   */\\n  function _isBridgeOperator(address operator) internal view returns (bool) {\\n    return IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).isBridgeOperator(operator);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping from bridge operator => BridgeRewardInfo.\\n   * @return rewardInfo the mapping from bridge operator => BridgeRewardInfo.\\n   */\\n  function _getRewardInfo() internal pure returns (mapping(address => BridgeRewardInfo) storage rewardInfo) {\\n    assembly (\\\"memory-safe\\\") {\\n      rewardInfo.slot := REWARD_INFO_SLOT\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7a0f81147e76a0418d3535dd880c1e6e6d8c471adee164b4050d5ad5d4cd822b\",\"license\":\"MIT\"},\"contracts/types/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { LibTUint256Slot } from \\\"./operations/LibTUint256Slot.sol\\\";\\n\\ntype TUint256Slot is bytes32;\\n\\nusing {\\n  LibTUint256Slot.add,\\n  LibTUint256Slot.sub,\\n  LibTUint256Slot.mul,\\n  LibTUint256Slot.div,\\n  LibTUint256Slot.load,\\n  LibTUint256Slot.store,\\n  LibTUint256Slot.addAssign,\\n  LibTUint256Slot.subAssign,\\n  LibTUint256Slot.preDecrement,\\n  LibTUint256Slot.postDecrement,\\n  LibTUint256Slot.preIncrement,\\n  LibTUint256Slot.postIncrement\\n} for TUint256Slot global;\\n\",\"keccak256\":\"0x20ab58f1c9ae4936f9dd9891d064301d78ef508c1dd2ce0c19a7b5b81d530e36\",\"license\":\"MIT\"},\"contracts/types/operations/LibTUint256Slot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { TUint256Slot } from \\\"../Types.sol\\\";\\n\\n/**\\n * @title LibTUint256Slot\\n * @dev Library for handling unsigned 256-bit integers.\\n */\\nlibrary LibTUint256Slot {\\n  /// @dev value is equal to bytes4(keccak256(\\\"Panic(uint256)\\\"))\\n  /// @dev see: https://github.com/foundry-rs/forge-std/blob/master/src/StdError.sol\\n  uint256 private constant PANIC_ERROR_SIGNATURE = 0x4e487b71;\\n  /// @dev error code for {Arithmetic over/underflow} error\\n  uint256 private constant ARITHMETIC_ERROR_CODE = 0x11;\\n  /// @dev error code for {Division or modulo by 0} error\\n  uint256 private constant DIVISION_ERROR_CODE = 0x12;\\n\\n  /**\\n   * @dev Loads the value of the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @return val The loaded value.\\n   */\\n  function load(TUint256Slot self) internal view returns (uint256 val) {\\n    assembly {\\n      val := sload(self)\\n    }\\n  }\\n\\n  /**\\n   * @dev Stores a value into the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to be stored.\\n   */\\n  function store(TUint256Slot self, uint256 other) internal {\\n    assembly {\\n      sstore(self, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Multiplies the TUint256Slot variable by a given value.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to multiply by.\\n   * @return res The resulting value after multiplication.\\n   */\\n  function mul(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      if iszero(iszero(storedVal)) {\\n        res := mul(storedVal, other)\\n\\n        // Overflow check\\n        if iszero(eq(other, div(res, storedVal))) {\\n          // Store 4 bytes the function selector of Panic(uint256)\\n          // Equivalent to revert Panic(uint256)\\n          mstore(0x00, PANIC_ERROR_SIGNATURE)\\n          // Store 4 bytes of division error code in the next slot\\n          mstore(0x20, ARITHMETIC_ERROR_CODE)\\n          // Revert 36 bytes of error starting from 0x1c\\n          revert(0x1c, 0x24)\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides the TUint256Slot variable by a given value.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to divide by.\\n   * @return res The resulting value after division.\\n   */\\n  function div(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      // revert if divide by zero\\n      if iszero(other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, DIVISION_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n      res := div(storedVal, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Subtracts a given value from the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to subtract.\\n   * @return res The resulting value after subtraction.\\n   */\\n  function sub(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n\\n      // Underflow check\\n      if lt(storedVal, other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, ARITHMETIC_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n\\n      res := sub(storedVal, other)\\n    }\\n  }\\n\\n  /**\\n   * @dev Adds a given value to the TUint256Slot variable.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to add.\\n   * @return res The resulting value after addition.\\n   */\\n  function add(TUint256Slot self, uint256 other) internal view returns (uint256 res) {\\n    assembly {\\n      let storedVal := sload(self)\\n      res := add(storedVal, other)\\n\\n      // Overflow check\\n      if lt(res, other) {\\n        // Store 4 bytes the function selector of Panic(uint256)\\n        // Equivalent to revert Panic(uint256)\\n        mstore(0x00, PANIC_ERROR_SIGNATURE)\\n        // Store 4 bytes of division error code in the next slot\\n        mstore(0x20, ARITHMETIC_ERROR_CODE)\\n        // Revert 36 bytes of error starting from 0x1c\\n        revert(0x1c, 0x24)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Increments the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value after incrementing.\\n   */\\n  function preIncrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = addAssign(self, 1);\\n  }\\n\\n  /**\\n   * @dev Increments the TUint256Slot variable by 1 and returns the original value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The original value before incrementing.\\n   */\\n  function postIncrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = load(self);\\n    store(self, res + 1);\\n  }\\n\\n  /**\\n   * @dev Decrements the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value after decrementing.\\n   */\\n  function preDecrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = subAssign(self, 1);\\n  }\\n\\n  /**\\n   * @dev Decrements the TUint256Slot variable by 1 and returns the new value.\\n   * @param self The TUint256Slot variable.\\n   * @return res The resulting value before decrementing.\\n   */\\n  function postDecrement(TUint256Slot self) internal returns (uint256 res) {\\n    res = load(self);\\n    store(self, res - 1);\\n  }\\n\\n  /**\\n   * @dev Adds a given value to the TUint256Slot variable and stores the result.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to add.\\n   * @return res The resulting value after addition and storage.\\n   */\\n  function addAssign(TUint256Slot self, uint256 other) internal returns (uint256 res) {\\n    store(self, res = add(self, other));\\n  }\\n\\n  /**\\n   * @dev Subtracts a given value from the TUint256Slot variable and stores the result.\\n   * @param self The TUint256Slot variable.\\n   * @param other The value to subtract.\\n   * @return res The resulting value after subtraction and storage.\\n   */\\n  function subAssign(TUint256Slot self, uint256 other) internal returns (uint256 res) {\\n    store(self, res = sub(self, other));\\n  }\\n}\\n\",\"keccak256\":\"0xe10c089459baf373494d76b00e582d49f6e43c500ab0f1657d53afc2fa472cbb\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x22942c8fea2d1ca863ac1f9c1662d714b8ac0856684e36f8aaf19508648c1053\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405230608052610010610015565b6100d5565b600054610100900460ff16156100815760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100d3576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161178f6100f06000396000610ca0015261178f6000f3fe6080604052600436106100a75760003560e01c80638f7c34a2116100645780638f7c34a21461015357806395b6ef0c14610168578063a6bd67881461017b578063ad43663e1461019b578063de981f1b146101b0578063f5dbc4ee146101e857600080fd5b806324a2f579146100ac57806334087952146100ce5780633b154455146100f657806359f778df1461010b5780636bcb6fd614610113578063865e6fd314610133575b600080fd5b3480156100b857600080fd5b506100cc6100c73660046111d7565b6101fd565b005b3480156100da57600080fd5b506100e3610522565b6040519081526020015b60405180910390f35b34801561010257600080fd5b506100cc610551565b6100cc610644565b34801561011f57600080fd5b506100cc61012e36600461123c565b61064e565b34801561013f57600080fd5b506100cc61014e3660046112e7565b61078d565b34801561015f57600080fd5b506100e36107ac565b6100cc61017636600461131e565b6107c4565b34801561018757600080fd5b506100cc6101963660046111d7565b61092e565b3480156101a757600080fd5b506100e3610942565b3480156101bc57600080fd5b506101d06101cb366004611397565b61096c565b6040516001600160a01b0390911681526020016100ed565b3480156101f457600080fd5b506100e36109e7565b61020633610a11565b61023a576000356001600160e01b031916604051638f47e7e360e01b815260040161023191906113b9565b60405180910390fd5b60006102446107ac565b90506000610252600861096c565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b391906113ce565b90508181116102e3576000356001600160e01b03191660405163053265f160e01b815260040161023191906113b9565b806102ee84846113fd565b111561031b576000356001600160e01b03191660405163053265f160e01b815260040161023191906113b9565b61033360008051602061173a83398151915284610a8f565b506000610340600b61096c565b6001600160a01b0316639b19dbfd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103a5919081019061147b565b905060006103b3600361096c565b905060015b85811161051a5761051283836001600160a01b031663f67e815288876040518363ffffffff1660e01b81526004016103f192919061155e565b600060405180830381865afa15801561040e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610436919081019061157f565b60405163692f6a6360e11b8152600481018990526001600160a01b0386169063d25ed4c690602401602060405180830381865afa15801561047b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049f91906113ce565b604051637153af9b60e11b8152600481018a90526001600160a01b0387169063e2a75f3690602401602060405180830381865afa1580156104e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050891906113ce565b9885019889610aa6565b6001016103b8565b505050505050565b600061054c7f3663384f6436b31a97d9c9a02f64ab8b73ead575c5b6224fa0800a6bd57f62f45490565b905090565b600461055c81610ba6565b6000196105676107ac565b146105a95760405162461bcd60e51b815260206004820152601260248201527130b63932b0b23c9034b734ba103932b8101960711b6044820152606401610231565b61063560016105b8600861096c565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061991906113ce565b6106239190611605565b60008051602061173a83398151915255565b61064160046000610bf2565b50565b61064c610c96565b565b600361065981610ba6565b868514610687576000356001600160e01b0319166040516306b5667560e21b815260040161023191906113b9565b86156107835760006106976107ac565b9050806001018310156106cb576000356001600160e01b03191660405163053265f160e01b815260040161023191906113b9565b806001018311156106f957604051634e4e051560e01b81526004810184905260248101829052604401610231565b5061071160008051602061173a833981519152839055565b61078388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092019190915250899250889150879050610aa6565b5050505050505050565b610795610d77565b61079e81610dd1565b6107a88282610bf2565b5050565b600061054c60008051602061173a8339815191525490565b600054610100900460ff16158080156107e45750600054600160ff909116105b806107fe5750303b1580156107fe575060005460ff166001145b6108615760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610231565b6000805460ff191660011790558015610884576000805461ff0019166101001790555b61088f600b88610bf2565b61089a600387610bf2565b6108a5600c86610bf2565b6108b0600885610bf2565b6108bb600484610bf2565b60001960008051602061173a833981519152556108d782610e07565b6108df610c96565b8015610925576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600b61093981610ba6565b6107a882610e07565b600061054c7f90f7d557245e5dd9485f463e58974fa7cdc93c0abbd0a1afebb8f9640ec739105490565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f8111156109a3576109a3611618565b60ff1681526020810191909152604001600020546001600160a01b03169050806109e2578160405163409140df60e11b81526004016102319190611642565b919050565b600061054c7f9a8c9f129792436c37b7bd2d79c56132fc05bf26cc8070794648517c2a0c6c645490565b6000610a1d600b61096c565b604051635a02d57960e11b81526001600160a01b038481166004830152919091169063b405aaf290602401602060405180830381865afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a899190611650565b92915050565b6000610a8983610a9f8585610e66565b9250829055565b84516000610ab2610942565b90506000610abf88610e85565b90506000610ace87878a610f03565b90506000806000805b87811015610b6c57610b208589898f8581518110610af757610af7611672565b60200260200101518f8e8c8881518110610b1357610b13611672565b6020026020010151610f56565b909450925082610b305783610b33565b60005b610b3d90836113fd565b9150610b64898e8381518110610b5557610b55611672565b60200260200101518686610f77565b600101610ad7565b50610b977f3663384f6436b31a97d9c9a02f64ab8b73ead575c5b6224fa0800a6bd57f62f482610a8f565b50505050505050505050505050565b610baf8161096c565b6001600160a01b0316336001600160a01b031614610641576000356001600160e01b03191681336040516320e0f98d60e21b815260040161023193929190611688565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115610c2857610c28611618565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f811115610c6957610c69611618565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ced576000356001600160e01b031916604051638f47e7e360e01b815260040161023191906113b9565b337f7ae161a1f0ef2537f5ff1957021a50412e72abdc6a941a77d99361e91e7f3c3d610d377f9a8c9f129792436c37b7bd2d79c56132fc05bf26cc8070794648517c2a0c6c645490565b604080519182523460208301520160405180910390a26106417f9a8c9f129792436c37b7bd2d79c56132fc05bf26cc8070794648517c2a0c6c6434610a8f565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316331461064c576000356001600160e01b0319166001604051620f948f60ea1b81526004016102319291906116bf565b806001600160a01b03163b60000361064157604051630bfc64a360e21b81526001600160a01b0382166004820152602401610231565b610e307f90f7d557245e5dd9485f463e58974fa7cdc93c0abbd0a1afebb8f9640ec73910829055565b6040518181527f9b40b647582311cc8f5f7d27e7ce206d126605d1625b8299b7edaeefd869ef259060200160405180910390a150565b8154810181811015610a8957634e487b7160005260116020526024601cfd5b6060610e91600c61096c565b6001600160a01b0316635311153b836040518263ffffffff1660e01b8152600401610ebc91906116ed565b6000604051808303816000875af1158015610edb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a89919081019061157f565b600080610f118585856110cf565b905080610f42576040517f64ba7143ea5a17abea37667aa9ae137e3afba5033c5f504770c02829c128189c90600090a15b801580610f4d575084155b95945050505050565b600082821015610f69898989898961114c565b915097509795505050505050565b6001600160a01b03831660009081527f518cfd198acbffe95e740cfce1af28a3f7de51f0d784893d3d72c5cc59d7062a6020526040902081156110175782816001016000828254610fc891906113fd565b9091555050604080516001600160a01b03861681526020810185905286917fb3d061c3ef3991b0d4b09f4c8b551d137c3d1e014cf5326462d3d1f6a8dfb9c291015b60405180910390a26110c8565b8281600001600082825461102b91906113fd565b9091555061103d905084846000611177565b1561108357604080516001600160a01b03861681526020810185905286917fbab0baccb39371d4d5206b519fe58d21cae9cdd63a1d1b5146ecdf405fd93152910161100a565b604080516001600160a01b03861681526020810185905286917f74b217634c5a7790ce69770c5e35019970453d4da3973769e7d6cdb7ce6816a1910160405180910390a25b5050505050565b8051600190600090815b8181101561113457858582815181106110f4576110f4611672565b6020026020010151111561110b5760009350611134565b84818151811061111d5761111d611672565b6020026020010151830192508060010190506110d9565b508280156111425750858211155b9695505050505050565b60008561116d578161115e8486611700565b6111689190611717565b611142565b6111428585611717565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d80600081146111c7576040519150601f19603f3d011682016040523d82523d6000602084013e6111cc565b606091505b509095945050505050565b6000602082840312156111e957600080fd5b5035919050565b60008083601f84011261120257600080fd5b50813567ffffffffffffffff81111561121a57600080fd5b6020830191508360208260051b850101111561123557600080fd5b9250929050565b600080600080600080600060a0888a03121561125757600080fd5b873567ffffffffffffffff8082111561126f57600080fd5b61127b8b838c016111f0565b909950975060208a013591508082111561129457600080fd5b506112a18a828b016111f0565b989b979a50986040810135976060820135975060809091013595509350505050565b8035601081106109e257600080fd5b6001600160a01b038116811461064157600080fd5b600080604083850312156112fa57600080fd5b611303836112c3565b91506020830135611313816112d2565b809150509250929050565b60008060008060008060c0878903121561133757600080fd5b8635611342816112d2565b95506020870135611352816112d2565b94506040870135611362816112d2565b93506060870135611372816112d2565b92506080870135611382816112d2565b8092505060a087013590509295509295509295565b6000602082840312156113a957600080fd5b6113b2826112c3565b9392505050565b6001600160e01b031991909116815260200190565b6000602082840312156113e057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a8957610a896113e7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561144f5761144f611410565b604052919050565b600067ffffffffffffffff82111561147157611471611410565b5060051b60200190565b6000602080838503121561148e57600080fd5b825167ffffffffffffffff8111156114a557600080fd5b8301601f810185136114b657600080fd5b80516114c96114c482611457565b611426565b81815260059190911b820183019083810190878311156114e857600080fd5b928401925b8284101561150f578351611500816112d2565b825292840192908401906114ed565b979650505050505050565b600081518084526020808501945080840160005b838110156115535781516001600160a01b03168752958201959082019060010161152e565b509495945050505050565b828152604060208201526000611577604083018461151a565b949350505050565b6000602080838503121561159257600080fd5b825167ffffffffffffffff8111156115a957600080fd5b8301601f810185136115ba57600080fd5b80516115c86114c482611457565b81815260059190911b820183019083810190878311156115e757600080fd5b928401925b8284101561150f578351825292840192908401906115ec565b81810381811115610a8957610a896113e7565b634e487b7160e01b600052602160045260246000fd5b6010811061163e5761163e611618565b9052565b60208101610a89828461162e565b60006020828403121561166257600080fd5b815180151581146113b257600080fd5b634e487b7160e01b600052603260045260246000fd5b6001600160e01b031984168152606081016116a6602083018561162e565b6001600160a01b03929092166040919091015292915050565b6001600160e01b03198316815260408101600b83106116e0576116e0611618565b8260208301529392505050565b6020815260006113b2602083018461151a565b8082028115828204841417610a8957610a896113e7565b60008261173457634e487b7160e01b600052601260045260246000fd5b50049056fe2417f25874c1cdc139a787dd21df976d40d767090442b3a2496917ecfc93b619a2646970667358221220c1c598adda978082b59773d95adf13181c8fb2d5a7934f4d7411162caabd26ae64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80638f7c34a2116100645780638f7c34a21461015357806395b6ef0c14610168578063a6bd67881461017b578063ad43663e1461019b578063de981f1b146101b0578063f5dbc4ee146101e857600080fd5b806324a2f579146100ac57806334087952146100ce5780633b154455146100f657806359f778df1461010b5780636bcb6fd614610113578063865e6fd314610133575b600080fd5b3480156100b857600080fd5b506100cc6100c73660046111d7565b6101fd565b005b3480156100da57600080fd5b506100e3610522565b6040519081526020015b60405180910390f35b34801561010257600080fd5b506100cc610551565b6100cc610644565b34801561011f57600080fd5b506100cc61012e36600461123c565b61064e565b34801561013f57600080fd5b506100cc61014e3660046112e7565b61078d565b34801561015f57600080fd5b506100e36107ac565b6100cc61017636600461131e565b6107c4565b34801561018757600080fd5b506100cc6101963660046111d7565b61092e565b3480156101a757600080fd5b506100e3610942565b3480156101bc57600080fd5b506101d06101cb366004611397565b61096c565b6040516001600160a01b0390911681526020016100ed565b3480156101f457600080fd5b506100e36109e7565b61020633610a11565b61023a576000356001600160e01b031916604051638f47e7e360e01b815260040161023191906113b9565b60405180910390fd5b60006102446107ac565b90506000610252600861096c565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b391906113ce565b90508181116102e3576000356001600160e01b03191660405163053265f160e01b815260040161023191906113b9565b806102ee84846113fd565b111561031b576000356001600160e01b03191660405163053265f160e01b815260040161023191906113b9565b61033360008051602061173a83398151915284610a8f565b506000610340600b61096c565b6001600160a01b0316639b19dbfd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103a5919081019061147b565b905060006103b3600361096c565b905060015b85811161051a5761051283836001600160a01b031663f67e815288876040518363ffffffff1660e01b81526004016103f192919061155e565b600060405180830381865afa15801561040e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610436919081019061157f565b60405163692f6a6360e11b8152600481018990526001600160a01b0386169063d25ed4c690602401602060405180830381865afa15801561047b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049f91906113ce565b604051637153af9b60e11b8152600481018a90526001600160a01b0387169063e2a75f3690602401602060405180830381865afa1580156104e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050891906113ce565b9885019889610aa6565b6001016103b8565b505050505050565b600061054c7f3663384f6436b31a97d9c9a02f64ab8b73ead575c5b6224fa0800a6bd57f62f45490565b905090565b600461055c81610ba6565b6000196105676107ac565b146105a95760405162461bcd60e51b815260206004820152601260248201527130b63932b0b23c9034b734ba103932b8101960711b6044820152606401610231565b61063560016105b8600861096c565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061991906113ce565b6106239190611605565b60008051602061173a83398151915255565b61064160046000610bf2565b50565b61064c610c96565b565b600361065981610ba6565b868514610687576000356001600160e01b0319166040516306b5667560e21b815260040161023191906113b9565b86156107835760006106976107ac565b9050806001018310156106cb576000356001600160e01b03191660405163053265f160e01b815260040161023191906113b9565b806001018311156106f957604051634e4e051560e01b81526004810184905260248101829052604401610231565b5061071160008051602061173a833981519152839055565b61078388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092019190915250899250889150879050610aa6565b5050505050505050565b610795610d77565b61079e81610dd1565b6107a88282610bf2565b5050565b600061054c60008051602061173a8339815191525490565b600054610100900460ff16158080156107e45750600054600160ff909116105b806107fe5750303b1580156107fe575060005460ff166001145b6108615760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610231565b6000805460ff191660011790558015610884576000805461ff0019166101001790555b61088f600b88610bf2565b61089a600387610bf2565b6108a5600c86610bf2565b6108b0600885610bf2565b6108bb600484610bf2565b60001960008051602061173a833981519152556108d782610e07565b6108df610c96565b8015610925576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600b61093981610ba6565b6107a882610e07565b600061054c7f90f7d557245e5dd9485f463e58974fa7cdc93c0abbd0a1afebb8f9640ec739105490565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f8111156109a3576109a3611618565b60ff1681526020810191909152604001600020546001600160a01b03169050806109e2578160405163409140df60e11b81526004016102319190611642565b919050565b600061054c7f9a8c9f129792436c37b7bd2d79c56132fc05bf26cc8070794648517c2a0c6c645490565b6000610a1d600b61096c565b604051635a02d57960e11b81526001600160a01b038481166004830152919091169063b405aaf290602401602060405180830381865afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a899190611650565b92915050565b6000610a8983610a9f8585610e66565b9250829055565b84516000610ab2610942565b90506000610abf88610e85565b90506000610ace87878a610f03565b90506000806000805b87811015610b6c57610b208589898f8581518110610af757610af7611672565b60200260200101518f8e8c8881518110610b1357610b13611672565b6020026020010151610f56565b909450925082610b305783610b33565b60005b610b3d90836113fd565b9150610b64898e8381518110610b5557610b55611672565b60200260200101518686610f77565b600101610ad7565b50610b977f3663384f6436b31a97d9c9a02f64ab8b73ead575c5b6224fa0800a6bd57f62f482610a8f565b50505050505050505050505050565b610baf8161096c565b6001600160a01b0316336001600160a01b031614610641576000356001600160e01b03191681336040516320e0f98d60e21b815260040161023193929190611688565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115610c2857610c28611618565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f811115610c6957610c69611618565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ced576000356001600160e01b031916604051638f47e7e360e01b815260040161023191906113b9565b337f7ae161a1f0ef2537f5ff1957021a50412e72abdc6a941a77d99361e91e7f3c3d610d377f9a8c9f129792436c37b7bd2d79c56132fc05bf26cc8070794648517c2a0c6c645490565b604080519182523460208301520160405180910390a26106417f9a8c9f129792436c37b7bd2d79c56132fc05bf26cc8070794648517c2a0c6c6434610a8f565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316331461064c576000356001600160e01b0319166001604051620f948f60ea1b81526004016102319291906116bf565b806001600160a01b03163b60000361064157604051630bfc64a360e21b81526001600160a01b0382166004820152602401610231565b610e307f90f7d557245e5dd9485f463e58974fa7cdc93c0abbd0a1afebb8f9640ec73910829055565b6040518181527f9b40b647582311cc8f5f7d27e7ce206d126605d1625b8299b7edaeefd869ef259060200160405180910390a150565b8154810181811015610a8957634e487b7160005260116020526024601cfd5b6060610e91600c61096c565b6001600160a01b0316635311153b836040518263ffffffff1660e01b8152600401610ebc91906116ed565b6000604051808303816000875af1158015610edb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a89919081019061157f565b600080610f118585856110cf565b905080610f42576040517f64ba7143ea5a17abea37667aa9ae137e3afba5033c5f504770c02829c128189c90600090a15b801580610f4d575084155b95945050505050565b600082821015610f69898989898961114c565b915097509795505050505050565b6001600160a01b03831660009081527f518cfd198acbffe95e740cfce1af28a3f7de51f0d784893d3d72c5cc59d7062a6020526040902081156110175782816001016000828254610fc891906113fd565b9091555050604080516001600160a01b03861681526020810185905286917fb3d061c3ef3991b0d4b09f4c8b551d137c3d1e014cf5326462d3d1f6a8dfb9c291015b60405180910390a26110c8565b8281600001600082825461102b91906113fd565b9091555061103d905084846000611177565b1561108357604080516001600160a01b03861681526020810185905286917fbab0baccb39371d4d5206b519fe58d21cae9cdd63a1d1b5146ecdf405fd93152910161100a565b604080516001600160a01b03861681526020810185905286917f74b217634c5a7790ce69770c5e35019970453d4da3973769e7d6cdb7ce6816a1910160405180910390a25b5050505050565b8051600190600090815b8181101561113457858582815181106110f4576110f4611672565b6020026020010151111561110b5760009350611134565b84818151811061111d5761111d611672565b6020026020010151830192508060010190506110d9565b508280156111425750858211155b9695505050505050565b60008561116d578161115e8486611700565b6111689190611717565b611142565b6111428585611717565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d80600081146111c7576040519150601f19603f3d011682016040523d82523d6000602084013e6111cc565b606091505b509095945050505050565b6000602082840312156111e957600080fd5b5035919050565b60008083601f84011261120257600080fd5b50813567ffffffffffffffff81111561121a57600080fd5b6020830191508360208260051b850101111561123557600080fd5b9250929050565b600080600080600080600060a0888a03121561125757600080fd5b873567ffffffffffffffff8082111561126f57600080fd5b61127b8b838c016111f0565b909950975060208a013591508082111561129457600080fd5b506112a18a828b016111f0565b989b979a50986040810135976060820135975060809091013595509350505050565b8035601081106109e257600080fd5b6001600160a01b038116811461064157600080fd5b600080604083850312156112fa57600080fd5b611303836112c3565b91506020830135611313816112d2565b809150509250929050565b60008060008060008060c0878903121561133757600080fd5b8635611342816112d2565b95506020870135611352816112d2565b94506040870135611362816112d2565b93506060870135611372816112d2565b92506080870135611382816112d2565b8092505060a087013590509295509295509295565b6000602082840312156113a957600080fd5b6113b2826112c3565b9392505050565b6001600160e01b031991909116815260200190565b6000602082840312156113e057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a8957610a896113e7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561144f5761144f611410565b604052919050565b600067ffffffffffffffff82111561147157611471611410565b5060051b60200190565b6000602080838503121561148e57600080fd5b825167ffffffffffffffff8111156114a557600080fd5b8301601f810185136114b657600080fd5b80516114c96114c482611457565b611426565b81815260059190911b820183019083810190878311156114e857600080fd5b928401925b8284101561150f578351611500816112d2565b825292840192908401906114ed565b979650505050505050565b600081518084526020808501945080840160005b838110156115535781516001600160a01b03168752958201959082019060010161152e565b509495945050505050565b828152604060208201526000611577604083018461151a565b949350505050565b6000602080838503121561159257600080fd5b825167ffffffffffffffff8111156115a957600080fd5b8301601f810185136115ba57600080fd5b80516115c86114c482611457565b81815260059190911b820183019083810190878311156115e757600080fd5b928401925b8284101561150f578351825292840192908401906115ec565b81810381811115610a8957610a896113e7565b634e487b7160e01b600052602160045260246000fd5b6010811061163e5761163e611618565b9052565b60208101610a89828461162e565b60006020828403121561166257600080fd5b815180151581146113b257600080fd5b634e487b7160e01b600052603260045260246000fd5b6001600160e01b031984168152606081016116a6602083018561162e565b6001600160a01b03929092166040919091015292915050565b6001600160e01b03198316815260408101600b83106116e0576116e0611618565b8260208301529392505050565b6020815260006113b2602083018461151a565b8082028115828204841417610a8957610a896113e7565b60008261173457634e487b7160e01b600052601260045260246000fd5b50049056fe2417f25874c1cdc139a787dd21df976d40d767090442b3a2496917ecfc93b619a2646970667358221220c1c598adda978082b59773d95adf13181c8fb2d5a7934f4d7411162caabd26ae64736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrInsufficientBalance(bytes4,uint256,uint256)": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInvalidArguments(bytes4)": [
        {
          "details": "Error indicating that arguments are invalid."
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrRecipientRevert(bytes4)": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnauthorizedCall(bytes4)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "execSyncReward(address[],uint256[],uint256,uint256,uint256)": {
        "details": "The `period` a.k.a. `latestSyncedPeriod` must equal to `latestRewardedPeriod` + 1."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getLatestRewardedPeriod()": {
        "details": "External function to retrieve the latest rewarded period in the contract.",
        "returns": {
          "_0": "latestRewardedPeriod The latest rewarded period value."
        }
      },
      "getRewardPerPeriod()": {
        "details": "Getter for all bridge operators per period."
      },
      "getTotalRewardScattered()": {
        "details": "Retrieve the total amount of rewards that have been scattered to bridge operators in the contract.",
        "returns": {
          "_0": "totalRewardScattered The total rewards scattered value."
        }
      },
      "getTotalRewardToppedUp()": {
        "details": "Retrieve the total amount of rewards that have been topped up in the contract.",
        "returns": {
          "_0": "totalRewardToppedUp The total rewards topped up value."
        }
      },
      "initializeREP2()": {
        "details": "Helper for running upgrade script, required to only revoked once by the DPoS's governance admin. The following must be assured after initializing REP2: `_lastSyncPeriod` == `{BridgeReward}.latestRewardedPeriod` == `currentPeriod()`"
      },
      "receiveRON()": {
        "details": "Receives RON from any address."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setRewardPerPeriod(uint256)": {
        "details": "Setter for all bridge operators per period."
      },
      "syncReward(uint256)": {
        "details": "This function allows bridge operators to manually synchronize the reward for a given period length.",
        "params": {
          "periodLength": "The length of the reward period for which synchronization is requested."
        }
      }
    },
    "stateVariables": {
      "LATEST_REWARDED_PERIOD_SLOT": {
        "details": "value is equal to keccak256(\"@ronin.dpos.gateway.BridgeReward.latestRewardedPeriod.slot\") - 1"
      },
      "REWARD_INFO_SLOT": {
        "details": "value is equal to keccak256(\"@ronin.dpos.gateway.BridgeReward.rewardInfo.slot\") - 1"
      },
      "REWARD_PER_PERIOD_SLOT": {
        "details": "value is equal to keccak256(\"@ronin.dpos.gateway.BridgeReward.rewardPerPeriod.slot\") - 1"
      },
      "TOTAL_REWARDS_SCATTERED_SLOT": {
        "details": "value is equal to keccak256(\"@ronin.dpos.gateway.BridgeReward.totalRewardScattered.slot\") - 1"
      },
      "TOTAL_REWARDS_TOPPED_UP_SLOT": {
        "details": "value is equal to keccak256(\"@ronin.dpos.gateway.BridgeReward.totalRewardToppedUp.slot\") - 1"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1373,
        "contract": "contracts/ronin/gateway/BridgeReward.sol:BridgeReward",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/gateway/BridgeReward.sol:BridgeReward",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}