{
  "address": "0x42Ee6A9aeC14Ca09f9d4F3eC44cd88f76b9b11F1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyRequestedEmergencyExit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyRequestedRevokingCandidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyRequestedUpdatingCommissionRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyWrappedEpoch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrAtEndOfEpochOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallPrecompiled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeBridgeTrackingContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeCoinbase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeMaintenanceContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeRoninTrustedOrgContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeSlashIndicatorContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeStakingContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeStakingVestingContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ErrCannotBailout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrExceedsMaxNumberOfCandidate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        }
      ],
      "name": "ErrExistentBridgeOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrExistentCandidate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAdminAddr",
          "type": "address"
        }
      ],
      "name": "ErrExistentCandidateAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddr",
          "type": "address"
        }
      ],
      "name": "ErrExistentTreasury",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidCommissionRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidEffectiveDaysOnwards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidMaxPrioritizedValidatorNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidMinEffectiveDaysOnwards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrNonExistentCandidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrRecipientRevert",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrTrustedOrgCannotRenounce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnauthorizedReceiveRON",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonExistentRecyclingInfo",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "BlockProducerSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinbaseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ICoinbaseExecution.BlockRewardDeprecatedType",
          "name": "deprecatedType",
          "type": "uint8"
        }
      ],
      "name": "BlockRewardDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinbaseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "submittedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusAmount",
          "type": "uint256"
        }
      ],
      "name": "BlockRewardSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeTrackingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "BridgeTrackingIncorrectlyResponded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasuryAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        }
      ],
      "name": "CandidateGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revokingTimestamp",
          "type": "uint256"
        }
      ],
      "name": "CandidateRevokingTimestampUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topupDeadline",
          "type": "uint256"
        }
      ],
      "name": "CandidateTopupDeadlineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "CandidatesRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateUpdateScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "DeprecatedRewardRecycleFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DeprecatedRewardRecycled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitLockedAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedAmount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitLockedFundReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitLockedFundReleasingFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExpiryDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "MaintenanceContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MaxPrioritizedValidatorNumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "MaxValidatorCandidateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MaxValidatorNumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numOfDays",
          "type": "uint256"
        }
      ],
      "name": "MinEffectiveDaysOnwardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MiningRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "MiningRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "SlashIndicatorContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "StakingRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakingVestingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jailedUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deductedStakingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "blockProducerRewardDeprecated",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "bridgeOperatorRewardDeprecated",
          "type": "bool"
        }
      ],
      "name": "ValidatorPunished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "ValidatorSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "ValidatorUnjailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "periodNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "periodEnding",
          "type": "bool"
        }
      ],
      "name": "WrappedUpEpoch",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADDITION_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERIOD_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeTrackingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "checkBridgeRewardDeprecatedAtLatestPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "checkBridgeRewardDeprecatedAtPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "checkJailed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "checkJailedAtBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addrList",
          "type": "address[]"
        }
      ],
      "name": "checkManyJailed",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blockProducer",
          "type": "address"
        }
      ],
      "name": "checkMiningRewardDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blockProducer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "checkMiningRewardDeprecatedAtPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriodStartAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExitLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExpiryDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "epochEndingAt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "epochOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "execApplyValidatorCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "execBailOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_secLeftToRevoke",
          "type": "uint256"
        }
      ],
      "name": "execEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "execReleaseLockedFundForEmergencyExitRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_secsLeft",
          "type": "uint256"
        }
      ],
      "name": "execRequestRenounceCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_effectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "execRequestUpdateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newJailedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_cannotBailout",
          "type": "bool"
        }
      ],
      "name": "execSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockProducers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validatorAddrs",
          "type": "address[]"
        }
      ],
      "name": "getBridgeOperatorsOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getCandidateInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOperatorAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "topupDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICandidateManager.ValidatorCandidate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidateInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOperatorAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "topupDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICandidateManager.ValidatorCandidate[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getCommissionChangeSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "effectiveTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICandidateManager.CommissionSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "getEmergencyExitInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recyclingAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICommonInfo.EmergencyExitInfo",
          "name": "_info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getJailedTimeLeft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isJailed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockLeft_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLeft_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "getJailedTimeLeftAtBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isJailed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockLeft_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLeft_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastUpdatedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorCandidates",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_validatorList",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeOperators",
          "type": "address[]"
        },
        {
          "internalType": "enum EnumFlags.ValidatorFlag[]",
          "name": "_flags",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__slashIndicatorContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__stakingVestingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__maintenanceContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__bridgeTrackingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__maxValidatorNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxValidatorCandidate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxPrioritizedValidatorNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__minEffectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__numberOfBlocksInEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "__emergencyExitConfigs",
          "type": "uint256[2]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isBlockProducer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        }
      ],
      "name": "isBridgeOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "isCandidateAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "isOperatingBridge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPeriodEnding",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidatorCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPrioritizedValidatorNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maximumPrioritizedValidatorNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidatorCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidatorNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maximumValidatorNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minEffectiveDaysOnwards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfBlocksInEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompilePickValidatorSetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompileSortValidatorsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeTrackingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emergencyExitLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "setEmergencyExitLockedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emergencyExpiryDuration",
          "type": "uint256"
        }
      ],
      "name": "setEmergencyExpiryDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setMaintenanceContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setMaxPrioritizedValidatorNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setMaxValidatorCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxValidatorNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numOfDays",
          "type": "uint256"
        }
      ],
      "name": "setMinEffectiveDaysOnwards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setSlashIndicatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setStakingVestingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slashIndicatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingVestingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submitBlockReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBlockProducers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgeOperators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeprecatedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "tryGetPeriodOfEpoch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_filled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_periodNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapUpEpoch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x47f8413470f0f37599d3564f9d77984021807ff3da8966fee0650f5a80744542",
  "receipt": {
    "to": null,
    "from": "0x0F68eDBE14C8f68481771016d7E2871d6a35DE11",
    "contractAddress": "0x42Ee6A9aeC14Ca09f9d4F3eC44cd88f76b9b11F1",
    "transactionIndex": 4,
    "gasUsed": "5376810",
    "logsBloom": "0x
    "blockHash": "0x4aab8d85046215e3087a5e0e0f432c1949e1373f16a10b16e9a5667c1fcf819a",
    "transactionHash": "0x47f8413470f0f37599d3564f9d77984021807ff3da8966fee0650f5a80744542",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 22608294,
        "transactionHash": "0x47f8413470f0f37599d3564f9d77984021807ff3da8966fee0650f5a80744542",
        "address": "0x42Ee6A9aeC14Ca09f9d4F3eC44cd88f76b9b11F1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 8,
        "blockHash": "0x4aab8d85046215e3087a5e0e0f432c1949e1373f16a10b16e9a5667c1fcf819a"
      }
    ],
    "blockNumber": 22608294,
    "cumulativeGasUsed": "5672618",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a50a3f056fa24c0b5a230a9cb29a1cb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedEmergencyExit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedRevokingCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedUpdatingCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyWrappedEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAtEndOfEpochOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeBridgeTrackingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeCoinbase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeMaintenanceContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeRoninTrustedOrgContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeSlashIndicatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeStakingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeStakingVestingContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ErrCannotBailout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExceedsMaxNumberOfCandidate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentBridgeOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExistentCandidate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAdminAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentCandidateAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidEffectiveDaysOnwards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMaxPrioritizedValidatorNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMinEffectiveDaysOnwards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNonExistentCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrTrustedOrgCannotRenounce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnauthorizedReceiveRON\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentRecyclingInfo\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"BlockProducerSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinbaseAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICoinbaseExecution.BlockRewardDeprecatedType\",\"name\":\"deprecatedType\",\"type\":\"uint8\"}],\"name\":\"BlockRewardDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinbaseAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submittedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"BlockRewardSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeTrackingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BridgeTrackingIncorrectlyResponded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"CandidateGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"}],\"name\":\"CandidateRevokingTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"name\":\"CandidateTopupDeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"CandidatesRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycleFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedFundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedFundReleasingFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExpiryDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MaintenanceContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxPrioritizedValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorCandidateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfDays\",\"type\":\"uint256\"}],\"name\":\"MinEffectiveDaysOnwardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SlashIndicatorContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StakingRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingVestingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deductedStakingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blockProducerRewardDeprecated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bridgeOperatorRewardDeprecated\",\"type\":\"bool\"}],\"name\":\"ValidatorPunished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"ValidatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ValidatorUnjailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"periodEnding\",\"type\":\"bool\"}],\"name\":\"WrappedUpEpoch\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADDITION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeTrackingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"checkBridgeRewardDeprecatedAtLatestPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"checkBridgeRewardDeprecatedAtPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"checkJailedAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"}],\"name\":\"checkManyJailed\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockProducer\",\"type\":\"address\"}],\"name\":\"checkMiningRewardDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockProducer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"checkMiningRewardDeprecatedAtPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodStartAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExitLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochEndingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"execApplyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"execBailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secLeftToRevoke\",\"type\":\"uint256\"}],\"name\":\"execEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"execReleaseLockedFundForEmergencyExitRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secsLeft\",\"type\":\"uint256\"}],\"name\":\"execRequestRenounceCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"execRequestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newJailedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_cannotBailout\",\"type\":\"bool\"}],\"name\":\"execSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockProducers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validatorAddrs\",\"type\":\"address[]\"}],\"name\":\"getBridgeOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCandidateInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCandidateInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCommissionChangeSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.CommissionSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"getEmergencyExitInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recyclingAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommonInfo.EmergencyExitInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getJailedTimeLeft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"getJailedTimeLeftAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_validatorList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeOperators\",\"type\":\"address[]\"},{\"internalType\":\"enum EnumFlags.ValidatorFlag[]\",\"name\":\"_flags\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__slashIndicatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingVestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__bridgeTrackingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorCandidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxPrioritizedValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__minEffectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__numberOfBlocksInEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"__emergencyExitConfigs\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isBlockProducer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"}],\"name\":\"isBridgeOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isCandidateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"isOperatingBridge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPeriodEnding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidatorCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrioritizedValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumPrioritizedValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEffectiveDaysOnwards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompilePickValidatorSetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileSortValidatorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeTrackingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emergencyExitLockedAmount\",\"type\":\"uint256\"}],\"name\":\"setEmergencyExitLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emergencyExpiryDuration\",\"type\":\"uint256\"}],\"name\":\"setEmergencyExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaintenanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxPrioritizedValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfDays\",\"type\":\"uint256\"}],\"name\":\"setMinEffectiveDaysOnwards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSlashIndicatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakingVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashIndicatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingVestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitBlockReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockProducers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgeOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeprecatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"tryGetPeriodOfEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_filled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_periodNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapUpEpoch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyRequestedEmergencyExit()\":[{\"details\":\"Error of already requested emergency exit before.\"}],\"ErrAlreadyRequestedRevokingCandidate()\":[{\"details\":\"Error of already requested revoking candidate before.\"}],\"ErrAlreadyRequestedUpdatingCommissionRate()\":[{\"details\":\"Error of commission change schedule exists.\"}],\"ErrAlreadyWrappedEpoch()\":[{\"details\":\"Error of query for already wrapped up epoch\"}],\"ErrAtEndOfEpochOnly()\":[{\"details\":\"Error of only allowed at the end of epoch\"}],\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrCallerMustBeBridgeTrackingContract()\":[{\"details\":\"Error of method caller must be bridge tracking contract.\"}],\"ErrCallerMustBeCoinbase()\":[{\"details\":\"Error of method caller must be coinbase\"}],\"ErrCallerMustBeMaintenanceContract()\":[{\"details\":\"Error of method caller must be maintenance contract.\"}],\"ErrCallerMustBeRoninTrustedOrgContract()\":[{\"details\":\"Error of method caller must be Ronin trusted org contract.\"}],\"ErrCallerMustBeSlashIndicatorContract()\":[{\"details\":\"Error of method caller must be slash indicator contract.\"}],\"ErrCallerMustBeStakingContract()\":[{\"details\":\"Error of method caller must be staking contract.\"}],\"ErrCallerMustBeStakingVestingContract()\":[{\"details\":\"Error of method caller must be staking vesting contract.\"}],\"ErrCannotBailout(address)\":[{\"details\":\"Error of cannot bailout due to high tier slash.\"}],\"ErrExceedsMaxNumberOfCandidate()\":[{\"details\":\"Error of exceeding maximum number of candidates.\"}],\"ErrExistentBridgeOperator(address)\":[{\"details\":\"Error of bridge operator already exists.\"}],\"ErrExistentCandidate()\":[{\"details\":\"Error of querying for already existent candidate.\"}],\"ErrExistentCandidateAdmin(address)\":[{\"details\":\"Error of candidate admin already exists.\"}],\"ErrExistentTreasury(address)\":[{\"details\":\"Error of treasury already exists.\"}],\"ErrInsufficientBalance()\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInvalidCommissionRate()\":[{\"details\":\"Error of invalid commission rate.\"}],\"ErrInvalidEffectiveDaysOnwards()\":[{\"details\":\"Error of invalid effective days onwards.\"}],\"ErrInvalidMaxPrioritizedValidatorNumber()\":[{\"details\":\"Error of number of prioritized greater than number of max validators.\"}],\"ErrInvalidMinEffectiveDaysOnwards()\":[{\"details\":\"Error of invalid min effective days onwards.\"}],\"ErrNonExistentCandidate()\":[{\"details\":\"Error of querying for non-existent candidate.\"}],\"ErrRecipientRevert()\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrTrustedOrgCannotRenounce()\":[{\"details\":\"Error of trusted org cannot renounce.\"}],\"ErrUnauthorizedReceiveRON()\":[{\"details\":\"Error thrown when receives RON from neither staking vesting contract nor staking contract\"}],\"ErrZeroCodeContract()\":[{\"details\":\"Error of set to non-contract.\"}],\"NonExistentRecyclingInfo()\":[{\"details\":\"Error thrown when queries for a non existent info.\"}]},\"kind\":\"dev\",\"methods\":{\"bridgeTrackingContract()\":{\"details\":\"Returns the bridge tracking contract.\"},\"checkBridgeRewardDeprecatedAtLatestPeriod(address)\":{\"details\":\"Because the information of deprecating bridge reward of a period is only determined at the end of that period, this method will return the deprecating info of the latest period. A method for querying that info of current period is no need.\"},\"checkBridgeRewardDeprecatedAtPeriod(address,uint256)\":{\"details\":\"Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the  `_period`.\"},\"checkJailed(address)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\"},\"checkJailedAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\"},\"checkManyJailed(address[])\":{\"details\":\"Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\"},\"checkMiningRewardDeprecated(address)\":{\"details\":\"Returns whether the incoming reward of the block producer is deprecated during the current period.\"},\"checkMiningRewardDeprecatedAtPeriod(address,uint256)\":{\"details\":\"Returns whether the incoming reward of the block producer is deprecated during a specific period.\"},\"currentPeriod()\":{\"details\":\"Returns the period index from the current block.\"},\"currentPeriodStartAtBlock()\":{\"details\":\"Returns the block number that the current period starts at.\"},\"emergencyExitLockedAmount()\":{\"details\":\"Returns the amount of RON to lock from a consensus address.\"},\"emergencyExpiryDuration()\":{\"details\":\"Returns the duration that an emergency request is expired and the fund will be recycled.\"},\"epochEndingAt(uint256)\":{\"details\":\"Returns whether the epoch ending is at the block number `_block`.\"},\"epochOf(uint256)\":{\"details\":\"Returns the epoch index from the block number.\"},\"execApplyValidatorCandidate(address,address,address,address,uint256)\":{\"details\":\"Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`.\"},\"execBailOut(address,uint256)\":{\"details\":\"Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`.\"},\"execEmergencyExit(address,uint256)\":{\"details\":\"Fallback function of `IStaking-requestEmergencyExit`. Requirements: - The method caller is staking contract.\"},\"execReleaseLockedFundForEmergencyExitRequest(address,address)\":{\"details\":\"Unlocks fund for emergency exit request. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked. Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\"},\"execRequestRenounceCandidate(address,uint256)\":{\"details\":\"Requests to revoke a validator candidate in next `_secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`.\"},\"execRequestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`.\"},\"execSlash(address,uint256,uint256,bool)\":{\"details\":\"Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`.\"},\"getBlockProducers()\":{\"details\":\"Returns the current block producer list.\"},\"getBridgeOperators()\":{\"details\":\"Returns the current bridge operator list.\"},\"getBridgeOperatorsOf(address[])\":{\"details\":\"Returns the bridge operator list corresponding to validator address list.\"},\"getCandidateInfo(address)\":{\"details\":\"Returns the info of a candidate.\"},\"getCandidateInfos()\":{\"details\":\"Returns all candidate info.\"},\"getCommissionChangeSchedule(address)\":{\"details\":\"Returns the schedule of changing commission rate of a candidate address.\"},\"getEmergencyExitInfo(address)\":{\"details\":\"Returns the emergency exit request.\"},\"getJailedTimeLeft(address)\":{\"details\":\"Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\"},\"getJailedTimeLeftAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\"},\"getLastUpdatedBlock()\":{\"details\":\"Returns the block that validator set was updated.\"},\"getValidatorCandidates()\":{\"details\":\"Returns the validator candidate.\"},\"getValidators()\":{\"details\":\"Returns the current validator list.\"},\"initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256[2])\":{\"details\":\"Initializes the contract storage.\"},\"isBlockProducer(address)\":{\"details\":\"Returns whether the address is block producer or not.\"},\"isBridgeOperator(address)\":{\"details\":\"Returns whether the address is bridge operator.\"},\"isCandidateAdmin(address,address)\":{\"details\":\"Returns whether the address is the candidate admin.\"},\"isOperatingBridge(address)\":{\"details\":\"Returns whether the consensus address is operating the bridge or not.\"},\"isPeriodEnding()\":{\"details\":\"Returns whether the period ending at the current block number.\"},\"isValidator(address)\":{\"details\":\"Returns whether the address is either a bridge operator or a block producer.\"},\"isValidatorCandidate(address)\":{\"details\":\"Returns whether the address is a validator (candidate).\"},\"maintenanceContract()\":{\"details\":\"Returns the maintenance contract.\"},\"maxPrioritizedValidatorNumber()\":{\"details\":\"Returns the number of reserved slots for prioritized validators.\"},\"maxValidatorCandidate()\":{\"details\":\"Returns the maximum number of validator candidate.\"},\"maxValidatorNumber()\":{\"details\":\"Returns the maximum number of validators in the epoch.\"},\"minEffectiveDaysOnwards()\":{\"details\":\"Returns the minimum number of days to the effective date of commission rate change.\"},\"numberOfBlocksInEpoch()\":{\"details\":\"Returns the number of blocks in a epoch.\"},\"precompilePickValidatorSetAddress()\":{\"details\":\"Gets the address of the precompile of picking validator set\"},\"precompileSortValidatorsAddress()\":{\"details\":\"Gets the address of the precompile of sorting validators\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeTrackingContract(address)\":{\"details\":\"Sets the bridge tracking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeTrackingContractUpdated`.\"},\"setEmergencyExitLockedAmount(uint256)\":{\"details\":\"Sets the amount of RON to lock from a consensus address. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedAmountUpdated`.\"},\"setEmergencyExpiryDuration(uint256)\":{\"details\":\"Sets the duration that an emergency request is expired and the fund will be recycled. Requirements: - The method caller is admin. Emits the event `EmergencyExpiryDurationUpdated`.\"},\"setMaintenanceContract(address)\":{\"details\":\"Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`.\"},\"setMaxPrioritizedValidatorNumber(uint256)\":{\"details\":\"Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`\"},\"setMaxValidatorCandidate(uint256)\":{\"details\":\"Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event.\"},\"setMaxValidatorNumber(uint256)\":{\"details\":\"Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`\"},\"setMinEffectiveDaysOnwards(uint256)\":{\"details\":\"Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"setSlashIndicatorContract(address)\":{\"details\":\"Sets the slash indicator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `SlashIndicatorContractUpdated`.\"},\"setStakingContract(address)\":{\"details\":\"Sets the staking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingContractUpdated`.\"},\"setStakingVestingContract(address)\":{\"details\":\"Sets the staking vesting contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingVestingContractUpdated`.\"},\"slashIndicatorContract()\":{\"details\":\"Returns the slash indicator contract.\"},\"stakingContract()\":{\"details\":\"Returns the staking contract.\"},\"stakingVestingContract()\":{\"details\":\"Returns the staking vesting contract.\"},\"submitBlockReward()\":{\"details\":\"Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call.\"},\"totalBlockProducers()\":{\"details\":\"Returns total numbers of the block producers.\"},\"totalBridgeOperators()\":{\"details\":\"Returns total numbers of the bridge operators.\"},\"totalDeprecatedReward()\":{\"details\":\"Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\"},\"tryGetPeriodOfEpoch(uint256)\":{\"details\":\"Tries to get the period index from the epoch number.\"},\"wrapUpEpoch()\":{\"details\":\"Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/validator/RoninValidatorSet.sol\":\"RoninValidatorSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert();\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance();\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable _recipient, uint256 _amount) internal {\\n    if (!_sendRON(_recipient, _amount)) revert ErrRecipientRevert();\\n  }\\n\\n  /**\\n   * @dev Send `_amount` RON to the address `_recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    if (address(this).balance < _amount) revert ErrInsufficientBalance();\\n    return _unsafeSendRON(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `_amount` RON to the address `_recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRON(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRON(\\n    address payable _recipient,\\n    uint256 _amount,\\n    uint256 _gas\\n  ) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount, gas: _gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xbf47d40b2431cf190fa737b803e4cb6fb55aee3f8804470da57a9e340f7914f8\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeTrackingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeTrackingContract.sol\\\";\\nimport \\\"../../interfaces/IBridgeTracking.sol\\\";\\n\\ncontract HasBridgeTrackingContract is IHasBridgeTrackingContract, HasProxyAdmin {\\n  IBridgeTracking internal _bridgeTrackingContract;\\n\\n  modifier onlyBridgeTrackingContract() {\\n    if (bridgeTrackingContract() != msg.sender) revert ErrCallerMustBeBridgeTrackingContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeTrackingContract\\n   */\\n  function bridgeTrackingContract() public view override returns (address) {\\n    return address(_bridgeTrackingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeTrackingContract\\n   */\\n  function setBridgeTrackingContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setBridgeTrackingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge tracking contract.\\n   *\\n   * Emits the event `BridgeTrackingContractUpdated`.\\n   *\\n   */\\n  function _setBridgeTrackingContract(address _addr) internal {\\n    _bridgeTrackingContract = IBridgeTracking(_addr);\\n    emit BridgeTrackingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x195b0d3fc2305aa4620f5091ba161f3e983b4cef2272d80f5f5b180a8ab98a34\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasMaintenanceContract.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\n\\ncontract HasMaintenanceContract is IHasMaintenanceContract, HasProxyAdmin {\\n  IMaintenance internal _maintenanceContract;\\n\\n  modifier onlyMaintenanceContract() {\\n    if (maintenanceContract() != msg.sender) revert ErrCallerMustBeMaintenanceContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function maintenanceContract() public view override returns (address) {\\n    return address(_maintenanceContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function setMaintenanceContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setMaintenanceContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the scheduled maintenance contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function _setMaintenanceContract(address _addr) internal {\\n    _maintenanceContract = IMaintenance(_addr);\\n    emit MaintenanceContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x117a29d878d44a20350df8ab539d34335713ba0f3b2c768a58124f61efb74357\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    if (roninTrustedOrganizationContract() != msg.sender) revert ErrCallerMustBeRoninTrustedOrgContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x951fd730f4853d8c932da5484ea093f3094c8186735b603d31fb53035c395751\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasSlashIndicatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasSlashIndicatorContract.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\n\\ncontract HasSlashIndicatorContract is IHasSlashIndicatorContract, HasProxyAdmin {\\n  ISlashIndicator internal _slashIndicatorContract;\\n\\n  modifier onlySlashIndicatorContract() {\\n    if (slashIndicatorContract() != msg.sender) revert ErrCallerMustBeSlashIndicatorContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasSlashIndicatorContract\\n   */\\n  function slashIndicatorContract() public view override returns (address) {\\n    return address(_slashIndicatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasSlashIndicatorContract\\n   */\\n  function setSlashIndicatorContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setSlashIndicatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the slash indicator contract.\\n   *\\n   * Emits the event `SlashIndicatorContractUpdated`.\\n   *\\n   */\\n  function _setSlashIndicatorContract(address _addr) internal {\\n    _slashIndicatorContract = ISlashIndicator(_addr);\\n    emit SlashIndicatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x280c56e53c53bf1438cf7d3e71026baf383d24332359bce59282074c94abe5bb\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasStakingContract.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\n\\ncontract HasStakingContract is IHasStakingContract, HasProxyAdmin {\\n  IStaking internal _stakingContract;\\n\\n  modifier onlyStakingContract() {\\n    if (stakingContract() != msg.sender) revert ErrCallerMustBeStakingContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingContract\\n   */\\n  function stakingContract() public view override returns (address) {\\n    return address(_stakingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingContract\\n   */\\n  function setStakingContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setStakingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the staking contract.\\n   *\\n   * Emits the event `StakingContractUpdated`.\\n   *\\n   */\\n  function _setStakingContract(address _addr) internal {\\n    _stakingContract = IStaking(_addr);\\n    emit StakingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x54d2a4608e0a8819ebd7fdb4ae784d3c709285e93f002034f9e2e787a6607923\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasStakingVestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasStakingVestingContract.sol\\\";\\nimport \\\"../../interfaces/IStakingVesting.sol\\\";\\n\\ncontract HasStakingVestingContract is IHasStakingVestingContract, HasProxyAdmin {\\n  IStakingVesting internal _stakingVestingContract;\\n\\n  modifier onlyStakingVestingContract() {\\n    if (stakingVestingContract() != msg.sender) revert ErrCallerMustBeStakingVestingContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingVestingContract\\n   */\\n  function stakingVestingContract() public view override returns (address) {\\n    return address(_stakingVestingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingVestingContract\\n   */\\n  function setStakingVestingContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setStakingVestingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the staking vesting contract.\\n   *\\n   * Emits the event `StakingVestingContractUpdated`.\\n   *\\n   */\\n  function _setStakingVestingContract(address _addr) internal {\\n    _stakingVestingContract = IStakingVesting(_addr);\\n    emit StakingVestingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x1893fae5d612b0d78f6d66695194aa6b03817a3b92be602887918781fba29e37\",\"license\":\"MIT\"},\"contracts/extensions/consumers/GlobalConfigConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract GlobalConfigConsumer {\\n  /// @dev The addition amount of gas sending along in external calls. Total gas stipend is added with default 2300 gas.\\n  uint256 public constant DEFAULT_ADDITION_GAS = 1200;\\n  /// @dev The length of a period in second.\\n  uint256 public constant PERIOD_DURATION = 1 days;\\n}\\n\",\"keccak256\":\"0x96d6b1ea4c8e126a8c2468683e7513d195f8e05456d85dd8f259ab049347b527\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  struct Request {\\n    VoteKind kind;\\n    uint256 id;\\n  }\\n\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVotes(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallots(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(uint256 _period, address[] calldata _bridgeOperators)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6066ff36c2ad0494a676dfeb4289c3cbe48d0d70266e8ec0930014a41f2a39a3\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMaintenance {\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed consensusAddr, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed consensusAddr);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(address _consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `_block` or not.\\n   */\\n  function checkManyMaintained(address[] calldata _addrList, uint256 _block) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    address[] calldata _addrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` has scheduled.\\n   */\\n  function checkScheduled(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr`\\n   */\\n  function checkCooldownEnds(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `_consensusAddr`.\\n   */\\n  function getSchedule(address _consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedules() external view returns (uint256 _count);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules,\\n    uint256 _cooldownSecsToMaintain\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedules() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - The candidate `_consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(\\n    address _consensusAddr,\\n    uint256 _startedAtBlock,\\n    uint256 _endedAtBlock\\n  ) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - A schedule for the `_consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x4f06c8f3ad7ec8b863882c655ddf443675d557272445e51d8a1e1f3454089d09\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BridgeOperatorsBallot.sol\\\";\\n\\ninterface IRoninGovernanceAdmin {\\n  /// @dev Emitted when the bridge operators are approved.\\n  event BridgeOperatorsApproved(uint256 _period, uint256 _epoch, address[] _operators);\\n  /// @dev Emitted when an emergency exit poll is created.\\n  event EmergencyExitPollCreated(\\n    bytes32 _voteHash,\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  );\\n  /// @dev Emitted when an emergency exit poll is approved.\\n  event EmergencyExitPollApproved(bytes32 _voteHash);\\n  /// @dev Emitted when an emergency exit poll is expired.\\n  event EmergencyExitPollExpired(bytes32 _voteHash);\\n\\n  /**\\n   * @dev Returns the last voted block of the bridge voter.\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the synced bridge operator set info.\\n   */\\n  function lastSyncedBridgeOperatorSetInfo()\\n    external\\n    view\\n    returns (BridgeOperatorsBallot.BridgeOperatorSet memory _bridgeOperatorSetInfo);\\n\\n  /**\\n   * @dev Create a vote to agree that an emergency exit is valid and should return the locked funds back.a\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   */\\n  function createEmergencyExitPoll(\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1aa218f9a8cad8fa9f865c179b257aa8f2614e034100dedebdd352da9a7d96d9\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStakingVesting {\\n  /// @dev Emitted when the block bonus for block producer is transferred.\\n  event BonusTransferred(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount\\n  );\\n  /// @dev Emitted when the transfer of block bonus for block producer is failed.\\n  event BonusTransferFailed(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the block bonus for block producer is updated\\n  event BlockProducerBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the block bonus for bridge operator is updated\\n  event BridgeOperatorBonusPerBlockUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the block producer at `_block`.\\n   */\\n  function blockProducerBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the bridge validator at `_block`.\\n   */\\n  function bridgeOperatorBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Receives RON from any address.\\n   */\\n  function receiveRON() external payable;\\n\\n  /**\\n   * @dev Returns the last block number that the staking vesting is sent.\\n   */\\n  function lastBlockSendingBonus() external view returns (uint256);\\n\\n  /**\\n   * @dev Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   * - The method must be called only once per block.\\n   *\\n   * Emits the event `BonusTransferred` or `BonusTransferFailed`.\\n   *\\n   * Notes:\\n   * - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method\\n   * will not be reverted, and the underlying nodes does not hang.\\n   *\\n   * @param _forBlockProducer Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.\\n   * @param _forBridgeOperator Indicates whether requesting the bonus for the bridge operator.\\n   *\\n   * @return _success Whether the transfer is successfully. This returns false mostly because this contract is out of balance.\\n   * @return _blockProducerBonus The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.\\n   * @return _bridgeOperatorBonus The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.\\n   *\\n   */\\n  function requestBonus(bool _forBlockProducer, bool _forBridgeOperator)\\n    external\\n    returns (\\n      bool _success,\\n      uint256 _blockProducerBonus,\\n      uint256 _bridgeOperatorBonus\\n    );\\n\\n  /**\\n   * @dev Sets the bonus amount per block for block producer.\\n   *\\n   * Emits the event `BlockProducerBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBlockProducerBonusPerBlock(uint256 _amount) external;\\n\\n  /**\\n   * @dev Sets the bonus amount per block for bridge operator.\\n   *\\n   * Emits the event `BridgeOperatorBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBridgeOperatorBonusPerBlock(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x6705fdccf03c4acd34ceb1034c2ab556c901781d6d5597e63f257eafe75cf1ae\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeTrackingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasBridgeTrackingContract is IHasContract {\\n  /// @dev Emitted when the bridge tracking contract is updated.\\n  event BridgeTrackingContractUpdated(address);\\n\\n  /// @dev Error of method caller must be bridge tracking contract.\\n  error ErrCallerMustBeBridgeTrackingContract();\\n\\n  /**\\n   * @dev Returns the bridge tracking contract.\\n   */\\n  function bridgeTrackingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge tracking contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeTrackingContractUpdated`.\\n   *\\n   */\\n  function setBridgeTrackingContract(address) external;\\n}\\n\",\"keccak256\":\"0x2d1b7e356826bfe1c2a3348137d828f46ca931f7c2f48197379ad987e713714b\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasContract {\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract();\\n}\\n\",\"keccak256\":\"0x8a17785d841137fcae5b5d542f1714de0492c85b54ca074f0b9c1c490ad3f342\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasMaintenanceContract is IHasContract {\\n  /// @dev Emitted when the maintenance contract is updated.\\n  event MaintenanceContractUpdated(address);\\n\\n  /// @dev Error of method caller must be maintenance contract.\\n  error ErrCallerMustBeMaintenanceContract();\\n\\n  /**\\n   * @dev Returns the maintenance contract.\\n   */\\n  function maintenanceContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the maintenance contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function setMaintenanceContract(address) external;\\n}\\n\",\"keccak256\":\"0x0a0ef6ba14e2929c7c8dda0642a7a831c9997d1b0d049eb83f64dfc21ff0e72e\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasRoninTrustedOrganizationContract is IHasContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /// @dev Error of method caller must be Ronin trusted org contract.\\n  error ErrCallerMustBeRoninTrustedOrgContract();\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x7d0a0b1d658e9cf4d69f4934748e0a5c1d22183024d26927f5d621fc61aff0b2\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasSlashIndicatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasSlashIndicatorContract is IHasContract {\\n  /// @dev Emitted when the slash indicator contract is updated.\\n  event SlashIndicatorContractUpdated(address);\\n\\n  /// @dev Error of method caller must be slash indicator contract.\\n  error ErrCallerMustBeSlashIndicatorContract();\\n\\n  /**\\n   * @dev Returns the slash indicator contract.\\n   */\\n  function slashIndicatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `SlashIndicatorContractUpdated`.\\n   *\\n   */\\n  function setSlashIndicatorContract(address) external;\\n}\\n\",\"keccak256\":\"0xfaaeec87f74039a55fe451c07c341b88794e62a8a331c878a8d9e91f55f1ff45\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasStakingContract is IHasContract {\\n  /// @dev Emitted when the staking contract is updated.\\n  event StakingContractUpdated(address);\\n\\n  /// @dev Error of method caller must be staking contract.\\n  error ErrCallerMustBeStakingContract();\\n\\n  /**\\n   * @dev Returns the staking contract.\\n   */\\n  function stakingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the staking contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingContractUpdated`.\\n   *\\n   */\\n  function setStakingContract(address) external;\\n}\\n\",\"keccak256\":\"0xd5e9b017f7ba0157fa41152a8bb166edbc6ef54a97fa3bb71a2a9b333d846c0b\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasStakingVestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasStakingVestingContract is IHasContract {\\n  /// @dev Emitted when the staking vesting contract is updated.\\n  event StakingVestingContractUpdated(address);\\n\\n  /// @dev Error of method caller must be staking vesting contract.\\n  error ErrCallerMustBeStakingVestingContract();\\n\\n  /**\\n   * @dev Returns the staking vesting contract.\\n   */\\n  function stakingVestingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the staking vesting contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingVestingContractUpdated`.\\n   *\\n   */\\n  function setStakingVestingContract(address) external;\\n}\\n\",\"keccak256\":\"0xfc5f14854b15f81d5b535e4baaeca7cedca69b26813bfc6ade75fdabc4eaffcf\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2,\\n    UNAVAILABILITY_TIER_3\\n  }\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed validator, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0x04d449f2852840566dfff4e3673929f6e9b8d9b5fc5b29744bf4f344dc7f9bc0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICreditScore {\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore,\\n    uint256 maxCreditScore,\\n    uint256 bailOutCostMultiplier,\\n    uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated.\\n  event CreditScoresUpdated(address[] validators, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail.\\n  event BailedOut(address indexed validator, uint256 period, uint256 usedCreditScore);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function updateCreditScores(address[] calldata _validators, uint256 _period) external;\\n\\n  /**\\n   * @dev Resets the credit score for the revoked validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execResetCreditScores(address[] calldata _validators) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(address[] calldata _validators) external view returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `_validator` has been bailed out at the `_period`.\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5364db88efb971f73aac569e27e5604758a123f28567af757b9933fdddd14f8\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeOperator is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method\\n   * `getBridgeOperatorSlashingConfigs` for param details.\\n   */\\n  event BridgeOperatorSlashingConfigsUpdated(\\n    uint256 missingVotesRatioTier1,\\n    uint256 missingVotesRatioTier2,\\n    uint256 jailDurationForMissingVotesRatioTier2,\\n    uint256 skipBridgeOperatorSlashingThreshold\\n  );\\n\\n  /**\\n   * @dev Acknowledges bridge operator slash and emit `Slashed` event correspondingly.\\n   * @param _tier The tier of the slash, in value of {1, 2}, corresponding to `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_1`\\n   * and `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_2`\\n   *\\n   * Requirements:\\n   * - Only validator contract can invoke this method.\\n   * - Should be called only at the end of period.\\n   * - Should be called only when there is slash of bridge operator.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function execSlashBridgeOperator(\\n    address _consensusAddr,\\n    uint256 _tier,\\n    uint256 _period\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge operator slashing.\\n   *\\n   * @return _missingVotesRatioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio.\\n   * @return _missingVotesRatioTier2 The bridge reward and mining reward will be deprecated and the corresponding\\n   * block producer will be put in jail if (s)he misses more than this ratio.\\n   * @return _jailDurationForMissingVotesRatioTier2 The number of blocks to jail the corresponding block producer when\\n   * its bridge operator is slashed tier-2.\\n   * @return _skipBridgeOperatorSlashingThreshold The threshold to skip slashing the bridge operator in case the total\\n   * number of votes in the bridge is too small.\\n   *\\n   */\\n  function getBridgeOperatorSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2,\\n      uint256 _skipBridgeOperatorSlashingThreshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash bridge operators.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _ratioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map\\n   * to 0%-100%.\\n   * @param _ratioTier2 The bridge reward and mining reward will be deprecated and the corresponding block producer will\\n   * be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.\\n   * @param _jailDurationTier2 The number of blocks to jail the corresponding block producer when its bridge operator is\\n   * slashed tier-2.\\n   * @param _skipSlashingThreshold The threshold to skip slashing the bridge operator in case the total number of votes\\n   * in the bridge is too small.\\n   *\\n   */\\n  function setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5c09ac11ead005bfa25ae58e970c441144849b14d58fd5f53fadc3b9be16e5d6\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeVoting is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge voting is updated. See the method `getBridgeVotingSlashingConfigs` for param\\n   * details.\\n   */\\n  event BridgeVotingSlashingConfigsUpdated(uint256 bridgeVotingThreshold, uint256 bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Slashes for bridge voter governance.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function slashBridgeVoting(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge voting slashing.\\n   *\\n   * @return _bridgeVotingThreshold The threshold to slash when a trusted organization does not vote for bridge\\n   * operators.\\n   * @return _bridgeVotingSlashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function getBridgeVotingSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _bridgeVotingThreshold, uint256 _bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Sets the configs to slash bridge voting.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeVotingSlashingConfigsUpdated`.\\n   *\\n   * @param _threshold The threshold to slash when a trusted organization does not vote for bridge operators.\\n   * @param _slashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) external;\\n}\\n\",\"keccak256\":\"0x72c3bcfe3c49f946651caa3066bd5296d007871c9a56fa113e2d3c0f3db7eb99\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(\\n    uint256 slashDoubleSignAmount,\\n    uint256 doubleSigningJailUntilBlock,\\n    uint256 doubleSigningOffsetLimitBlock\\n  );\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(\\n    address _validatorAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _slashDoubleSignAmount,\\n      uint256 _doubleSigningJailUntilBlock,\\n      uint256 _doubleSigningOffsetLimitBlock\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _doubleSigningOffsetLimitBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe72708c42d468b0c40ffa0c72b3386899f11273e4149425aab490a78d5312222\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashBridgeVoting.sol\\\";\\nimport \\\"./ISlashBridgeOperator.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is\\n  ISlashDoubleSign,\\n  ISlashBridgeVoting,\\n  ISlashBridgeOperator,\\n  ISlashUnavailability,\\n  ICreditScore\\n{}\\n\",\"keccak256\":\"0xe8b8fde3af614735cb304bc1eb82b05d65ede4df804b5d555787e5d5ecb95ec0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the unavailability indicator in the period `_period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold. This threshold is applied for tier-1 and tier-3 slash.\\n   * @return _unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   * @return _slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed with tier-2 or tier-3.\\n   * @return _jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed with tier-2 or tier-3.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _unavailabilityTier1Threshold,\\n      uint256 _unavailabilityTier2Threshold,\\n      uint256 _slashAmountForUnavailabilityTier2Threshold,\\n      uint256 _jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param _tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param _slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param _jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x92f7d8e9c6f80d4fedab80515c68db0a46cf4f8da143f8d766bf5f7582aa0a21\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    // Address of the pool i.e. consensus address of the validator\\n    address addr;\\n    // Pool admin address\\n    address admin;\\n    // Self-staking amount\\n    uint256 stakingAmount;\\n    // Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    // Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    // Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(address poolAddr);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `_poolAdminAddr` is currently active.\\n   */\\n  function isAdminOfActivePool(address _poolAdminAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address _poolAdminAddr) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool detail.\\n   */\\n  function getPoolDetail(address)\\n    external\\n    view\\n    returns (\\n      address _admin,\\n      uint256 _stakingAmount,\\n      uint256 _stakingTotal\\n    );\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(address[] calldata) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external;\\n}\\n\",\"keccak256\":\"0x008b3d42a3104820de7b7edb5ea4b21c75d4417767fc0791f89f00ac9a2cce8d\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the max commission rate is updated.\\n  event MaxCommissionRateUpdated(uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed validator, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] validator);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed validator,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed validator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of three operation addresses must be distinct in applying for validator candidate.\\n  error ErrThreeOperationAddrsNotDistinct();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max commission rate that the candidate can set.\\n   */\\n  function maxCommissionRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the max commission rate that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxCommissionRateUpdated` event.\\n   *\\n   */\\n  function setMaxCommissionRate(uint256 _maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param _candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata _pools, uint256 _period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x4160e8b8dc00df59a35823589d69dcbf5655d7024f5d8e17e823e243ffb44b9d\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(address _user, address[] calldata _poolAddrList)\\n    external\\n    view\\n    returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList) external returns (uint256 _amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(address[] calldata _consensusAddrList, address _consensusAddrDst)\\n    external\\n    returns (uint256 _amount);\\n}\\n\",\"keccak256\":\"0x5ce840a920ed06139f9e33d306c8ee50b2a81e4bd2ac6ed24b47297c348576b8\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolAddr, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolAddr, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolAddr, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolAddrs, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolAddrs, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolAddrs);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(address[] calldata _poolAddrs, address[] calldata _userList)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(address _poolAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `_poolAddrs`.\\n   */\\n  function getManyStakingTotals(address[] calldata _poolAddrs) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x92315ca9d6d93f55a7752adf2567adb86745f708198bfcd74b9a626b6570208f\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking {\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address _consensusAddr, uint256 _amount)\\n    external\\n    returns (uint256 _actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xb7942c5032c16ea567ac0bfc07ecacd84840d6de134735ea538aa22fc6da05a5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xc382bd50ca507308ec23826308bc9ff0a22cfb9b3fcd09c7ac7a63c37729d33e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n  /// @dev Emitted when the bridge tracking contract's response is incorrect\\n  event BridgeTrackingIncorrectlyResponded();\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x42ed0bff5f8233dc6de28bd3283f98a0c16df6abc26655fc777bdc07a83ff3f5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xc00b1bda0c6076c9aa0631dc0c01e849d8f42cc616fe4c036f73cda0a9afe9ef\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the latest wrapped up period.\\n   */\\n  function checkBridgeRewardDeprecatedAtLatestPeriod(address _consensusAddr) external view returns (bool _result);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the  `_period`.\\n   */\\n  function checkBridgeRewardDeprecatedAtPeriod(address _consensusAddr, uint256 _period)\\n    external\\n    view\\n    returns (bool _result);\\n}\\n\",\"keccak256\":\"0x19b85ce95caf9deb4aff9614d1ca2d89712b89e8609dc6ab772e989164a51139\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /// @dev Error of number of prioritized greater than number of max validators.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators()\\n    external\\n    view\\n    returns (\\n      address[] memory _validatorList,\\n      address[] memory _bridgeOperators,\\n      EnumFlags.ValidatorFlag[] memory _flags\\n    );\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the bridge operator list corresponding to validator address list.\\n   */\\n  function getBridgeOperatorsOf(address[] memory _validatorAddrs) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool isOperator);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x86189a2fee2e5dccba27728db15e1bd19f647cdb97c02b52d9ab07c5d98a2a75\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  struct BridgeOperatorSet {\\n    uint256 period;\\n    uint256 epoch;\\n    address[] operators;\\n  }\\n\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,uint256 epoch,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a;\\n\\n  /**\\n   * @dev Verifies whether the ballot is valid or not.\\n   *\\n   * Requirements:\\n   * - The ballot is not for an empty operator set.\\n   * - The operator address list is in order.\\n   *\\n   */\\n  function verifyBallot(BridgeOperatorSet calldata _ballot) internal pure {\\n    require(_ballot.operators.length > 0, \\\"BridgeOperatorsBallot: invalid array length\\\");\\n    address _addr = _ballot.operators[0];\\n    for (uint _i = 1; _i < _ballot.operators.length; _i++) {\\n      require(_addr < _ballot.operators[_i], \\\"BridgeOperatorsBallot: invalid order of bridge operators\\\");\\n      _addr = _ballot.operators[_i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(BridgeOperatorSet calldata _ballot) internal pure returns (bytes32) {\\n    bytes32 _operatorsHash;\\n    address[] memory _operators = _ballot.operators;\\n\\n    assembly {\\n      _operatorsHash := keccak256(add(_operators, 32), mul(mload(_operators), 32))\\n    }\\n\\n    return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _ballot.period, _ballot.epoch, _operatorsHash));\\n  }\\n}\\n\",\"keccak256\":\"0x986425ebae2dcfcfa266c9ca825232ff300ec8ce796e8975da6714d87e921793\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - min(a, b);\\n  }\\n}\\n\",\"keccak256\":\"0xa9e2a3ad43d7999a3cdbfb040b0f2dec282eae91ff8fe6ad26fdd19087121ce7\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUPickValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUPickValidatorSet is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of picking validator set\\n  function precompilePickValidatorSetAddress() public view virtual returns (address) {\\n    return address(0x68);\\n  }\\n\\n  /**\\n   * @dev Sorts and arranges to return a new validator set.\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcPickValidatorSet(\\n    address[] memory _candidates,\\n    uint256[] memory _weights,\\n    uint256[] memory _trustedWeights,\\n    uint256 _maxValidatorNumber,\\n    uint256 _maxPrioritizedValidatorNumber\\n  ) internal view virtual returns (address[] memory _result, uint256 _newValidatorCount) {\\n    address _smc = precompilePickValidatorSetAddress();\\n    bytes memory _payload = abi.encodeWithSignature(\\n      \\\"pickValidatorSet(address[],uint256[],uint256[],uint256,uint256)\\\",\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    bool _success = true;\\n\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n\\n    _newValidatorCount = _result.length;\\n  }\\n}\\n\",\"keccak256\":\"0xcb57a021897a773d11be9d98a195e0653f2124b7e95e84c4832b57d9d36d67e1\",\"license\":\"MIT\"},\"contracts/precompile-usages/PCUSortValidators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUSortValidators is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of sorting validators\\n  function precompileSortValidatorsAddress() public view virtual returns (address) {\\n    return address(0x66);\\n  }\\n\\n  /**\\n   * @dev Sorts candidates descending by their weights by calling precompile contract.\\n   *\\n   * Note: This function is marked as virtual for being wrapping in mock contract for testing purpose.\\n   */\\n  function _pcSortCandidates(address[] memory _candidates, uint256[] memory _weights)\\n    internal\\n    view\\n    virtual\\n    returns (address[] memory _result)\\n  {\\n    address _smc = precompileSortValidatorsAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload = abi.encodeWithSignature(\\\"sortValidators(address[],uint256[])\\\", _candidates, _weights);\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n  }\\n}\\n\",\"keccak256\":\"0xc779a5a5e29fb4416450b2eb6608a09e2cf63f6d9af5b2c1eec130dd16b0d22a\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/validator/CandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasStakingContract.sol\\\";\\nimport \\\"../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\n\\nabstract contract CandidateManager is ICandidateManager, PercentageConsumer, GlobalConfigConsumer, HasStakingContract {\\n  /// @dev Maximum number of validator candidate\\n  uint256 private _maxValidatorCandidate;\\n\\n  /// @dev The validator candidate array\\n  address[] internal _candidates;\\n  /// @dev Mapping from candidate consensus address => bitwise negation of validator index in `_candidates`\\n  mapping(address => uint256) internal _candidateIndex;\\n  /// @dev Mapping from candidate consensus address => their info\\n  mapping(address => ValidatorCandidate) internal _candidateInfo;\\n\\n  /**\\n   * @dev The minimum offset in day from current date to the effective date of a new commission schedule.\\n   * Value of 1 means the change gets affected at the beginning of the following day.\\n   **/\\n  uint256 internal _minEffectiveDaysOnwards;\\n  /// @dev Mapping from candidate consensus address => schedule commission change.\\n  mapping(address => CommissionSchedule) internal _candidateCommissionChangeSchedule;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function maxValidatorCandidate() public view override returns (uint256) {\\n    return _maxValidatorCandidate;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function minEffectiveDaysOnwards() external view override returns (uint256) {\\n    return _minEffectiveDaysOnwards;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMaxValidatorCandidate(uint256 _number) external override onlyAdmin {\\n    _setMaxValidatorCandidate(_number);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external override onlyAdmin {\\n    _setMinEffectiveDaysOnwards(_numOfDays);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function execApplyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external override onlyStakingContract {\\n    uint256 _length = _candidates.length;\\n    if (_length >= maxValidatorCandidate()) revert ErrExceedsMaxNumberOfCandidate();\\n    if (isValidatorCandidate(_consensusAddr)) revert ErrExistentCandidate();\\n    if (_commissionRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n\\n    for (uint _i; _i < _candidates.length; _i++) {\\n      ValidatorCandidate storage existentInfo = _candidateInfo[_candidates[_i]];\\n      if (_candidateAdmin == existentInfo.admin) revert ErrExistentCandidateAdmin(_candidateAdmin);\\n      if (_treasuryAddr == existentInfo.treasuryAddr) revert ErrExistentTreasury(_treasuryAddr);\\n      if (_bridgeOperatorAddr == existentInfo.bridgeOperatorAddr) revert ErrExistentBridgeOperator(_bridgeOperatorAddr);\\n    }\\n\\n    _candidateIndex[_consensusAddr] = ~_length;\\n    _candidates.push(_consensusAddr);\\n\\n    ValidatorCandidate storage _info = _candidateInfo[_consensusAddr];\\n    _info.admin = _candidateAdmin;\\n    _info.consensusAddr = _consensusAddr;\\n    _info.treasuryAddr = _treasuryAddr;\\n    _info.bridgeOperatorAddr = _bridgeOperatorAddr;\\n    _info.commissionRate = _commissionRate;\\n    emit CandidateGranted(_consensusAddr, _treasuryAddr, _candidateAdmin, _bridgeOperatorAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function execRequestRenounceCandidate(address _consensusAddr, uint256 _secsLeft)\\n    external\\n    override\\n    onlyStakingContract\\n  {\\n    if (_isTrustedOrg(_consensusAddr)) revert ErrTrustedOrgCannotRenounce();\\n\\n    ValidatorCandidate storage _info = _candidateInfo[_consensusAddr];\\n    if (_info.revokingTimestamp != 0) revert ErrAlreadyRequestedRevokingCandidate();\\n    _setRevokingTimestamp(_info, block.timestamp + _secsLeft);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external override onlyStakingContract {\\n    if (_candidateCommissionChangeSchedule[_consensusAddr].effectiveTimestamp != 0) {\\n      revert ErrAlreadyRequestedUpdatingCommissionRate();\\n    }\\n    if (_commissionRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n    if (_effectiveDaysOnwards < _minEffectiveDaysOnwards) revert ErrInvalidEffectiveDaysOnwards();\\n\\n    CommissionSchedule storage _schedule = _candidateCommissionChangeSchedule[_consensusAddr];\\n    uint256 _effectiveTimestamp = ((block.timestamp / PERIOD_DURATION) + _effectiveDaysOnwards) * PERIOD_DURATION;\\n    _schedule.effectiveTimestamp = _effectiveTimestamp;\\n    _schedule.commissionRate = _commissionRate;\\n\\n    emit CommissionRateUpdateScheduled(_consensusAddr, _effectiveTimestamp, _commissionRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isValidatorCandidate(address _addr) public view override returns (bool) {\\n    return _candidateIndex[_addr] != 0;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfos() external view override returns (ValidatorCandidate[] memory _list) {\\n    _list = new ValidatorCandidate[](_candidates.length);\\n    for (uint _i; _i < _list.length; _i++) {\\n      _list[_i] = _candidateInfo[_candidates[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfo(address _candidate) external view override returns (ValidatorCandidate memory) {\\n    if (!isValidatorCandidate(_candidate)) revert ErrNonExistentCandidate();\\n    return _candidateInfo[_candidate];\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getValidatorCandidates() public view override returns (address[] memory) {\\n    return _candidates;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view override returns (CommissionSchedule memory) {\\n    return _candidateCommissionChangeSchedule[_candidate];\\n  }\\n\\n  /**\\n   * @dev Removes unsastisfied candidates, the ones who have insufficient minimum candidate staking amount,\\n   * or the ones who requested to renounce their candidate role.\\n   *\\n   * Emits the event `CandidatesRevoked` when a candidate is revoked.\\n   *\\n   */\\n  function _syncCandidateSet(uint256 _nextPeriod) internal returns (address[] memory _unsatisfiedCandidates) {\\n    IStaking _staking = _stakingContract;\\n    uint256 _waitingSecsToRevoke = _staking.waitingSecsToRevoke();\\n    uint256 _minStakingAmount = _staking.minValidatorStakingAmount();\\n    uint256[] memory _selfStakings = _staking.getManySelfStakings(_candidates);\\n\\n    uint256 _length = _candidates.length;\\n    uint256 _unsatisfiedCount;\\n    _unsatisfiedCandidates = new address[](_length);\\n\\n    {\\n      uint256 _i;\\n      address _addr;\\n      ValidatorCandidate storage _info;\\n      while (_i < _length) {\\n        _addr = _candidates[_i];\\n        _info = _candidateInfo[_addr];\\n\\n        // Checks for under-balance status of candidates\\n        bool _hasTopupDeadline = _info.topupDeadline != 0;\\n        if (_selfStakings[_i] < _minStakingAmount) {\\n          // Updates deadline on the first time unsatisfied the staking amount condition\\n          if (!_hasTopupDeadline) {\\n            uint256 _topupDeadline = block.timestamp + _waitingSecsToRevoke;\\n            _info.topupDeadline = _topupDeadline;\\n            emit CandidateTopupDeadlineUpdated(_addr, _topupDeadline);\\n          }\\n        } else if (_hasTopupDeadline) {\\n          // Removes the deadline if the staking amount condition is satisfied\\n          delete _info.topupDeadline;\\n          emit CandidateTopupDeadlineUpdated(_addr, 0);\\n        }\\n\\n        // Removes unsastisfied candidates\\n        bool _revokingActivated = (_info.revokingTimestamp != 0 && _info.revokingTimestamp <= block.timestamp) ||\\n          _emergencyExitLockedFundReleased(_addr);\\n        bool _topupDeadlineMissed = _info.topupDeadline != 0 && _info.topupDeadline <= block.timestamp;\\n        if (_revokingActivated || _topupDeadlineMissed) {\\n          _selfStakings[_i] = _selfStakings[--_length];\\n          _unsatisfiedCandidates[_unsatisfiedCount++] = _addr;\\n          _removeCandidate(_addr);\\n          continue;\\n        }\\n\\n        // Checks for schedule of commission change and updates commission rate\\n        uint256 _scheduleTimestamp = _candidateCommissionChangeSchedule[_addr].effectiveTimestamp;\\n        if (_scheduleTimestamp != 0 && _scheduleTimestamp <= block.timestamp) {\\n          uint256 _commisionRate = _candidateCommissionChangeSchedule[_addr].commissionRate;\\n          delete _candidateCommissionChangeSchedule[_addr];\\n          _info.commissionRate = _commisionRate;\\n          emit CommissionRateUpdated(_addr, _commisionRate);\\n        }\\n\\n        _i++;\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_unsatisfiedCandidates, _unsatisfiedCount)\\n    }\\n\\n    if (_unsatisfiedCount > 0) {\\n      emit CandidatesRevoked(_unsatisfiedCandidates);\\n      _staking.execDeprecatePools(_unsatisfiedCandidates, _nextPeriod);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view override returns (bool) {\\n    return _candidateInfo[_candidate].admin == _admin;\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr) internal view virtual returns (address) {\\n    return _candidateInfo[_consensusAddr].bridgeOperatorAddr;\\n  }\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function _setMaxValidatorCandidate(uint256 _threshold) internal {\\n    _maxValidatorCandidate = _threshold;\\n    emit MaxValidatorCandidateUpdated(_threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the minimum number of days onwards to the effective date of commission rate change.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function _setMinEffectiveDaysOnwards(uint256 _numOfDays) internal {\\n    if (_numOfDays < 1) revert ErrInvalidMinEffectiveDaysOnwards();\\n    _minEffectiveDaysOnwards = _numOfDays;\\n    emit MinEffectiveDaysOnwardsUpdated(_numOfDays);\\n  }\\n\\n  /**\\n   * @dev Removes the candidate.\\n   */\\n  function _removeCandidate(address _addr) internal virtual {\\n    uint256 _idx = _candidateIndex[_addr];\\n    if (_idx == 0) {\\n      return;\\n    }\\n\\n    delete _candidateInfo[_addr];\\n    delete _candidateIndex[_addr];\\n    delete _candidateCommissionChangeSchedule[_addr];\\n\\n    address _lastCandidate = _candidates[_candidates.length - 1];\\n    if (_lastCandidate != _addr) {\\n      _candidateIndex[_lastCandidate] = _idx;\\n      _candidates[~_idx] = _lastCandidate;\\n    }\\n\\n    _candidates.pop();\\n  }\\n\\n  /**\\n   * @dev Sets timestamp to revoke a candidate.\\n   */\\n  function _setRevokingTimestamp(ValidatorCandidate storage _candidate, uint256 _timestamp) internal {\\n    if (!isValidatorCandidate(_candidate.consensusAddr)) revert ErrNonExistentCandidate();\\n    _candidate.revokingTimestamp = _timestamp;\\n    emit CandidateRevokingTimestampUpdated(_candidate.consensusAddr, _timestamp);\\n  }\\n\\n  /**\\n   * @dev Returns a flag indicating whether the fund is unlocked.\\n   */\\n  function _emergencyExitLockedFundReleased(address _consensusAddr) internal virtual returns (bool);\\n\\n  /**\\n   * @dev Returns whether the consensus address is a trusted org or not.\\n   */\\n  function _isTrustedOrg(address _consensusAddr) internal virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x118e406abfbaba67fdb5a282740674f4e2442f55fe182fee6d0bd82ea8d7a8e7\",\"license\":\"MIT\"},\"contracts/ronin/validator/CoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasBridgeTrackingContract.sol\\\";\\nimport \\\"../../extensions/collections/HasMaintenanceContract.sol\\\";\\nimport \\\"../../extensions/collections/HasSlashIndicatorContract.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingVestingContract.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/validator/ICoinbaseExecution.sol\\\";\\nimport \\\"../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../precompile-usages/PCUSortValidators.sol\\\";\\nimport \\\"../../precompile-usages/PCUPickValidatorSet.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport \\\"./CandidateManager.sol\\\";\\nimport \\\"./EmergencyExit.sol\\\";\\n\\nabstract contract CoinbaseExecution is\\n  ICoinbaseExecution,\\n  RONTransferHelper,\\n  PCUSortValidators,\\n  PCUPickValidatorSet,\\n  HasStakingVestingContract,\\n  HasBridgeTrackingContract,\\n  HasMaintenanceContract,\\n  HasSlashIndicatorContract,\\n  EmergencyExit\\n{\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  modifier onlyCoinbase() {\\n    if (msg.sender != block.coinbase) revert ErrCallerMustBeCoinbase();\\n    _;\\n  }\\n\\n  modifier whenEpochEnding() {\\n    if (!epochEndingAt(block.number)) revert ErrAtEndOfEpochOnly();\\n    _;\\n  }\\n\\n  modifier oncePerEpoch() {\\n    if (epochOf(_lastUpdatedBlock) >= epochOf(block.number)) revert ErrAlreadyWrappedEpoch();\\n    _lastUpdatedBlock = block.number;\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function submitBlockReward() external payable override onlyCoinbase {\\n    bool _requestForBlockProducer = isBlockProducer(msg.sender) &&\\n      !_jailed(msg.sender) &&\\n      !_miningRewardDeprecated(msg.sender, currentPeriod());\\n\\n    (, uint256 _blockProducerBonus, uint256 _bridgeOperatorBonus) = _stakingVestingContract.requestBonus(\\n      _requestForBlockProducer,\\n      true // _requestForBridgeOperator\\n    );\\n\\n    _totalBridgeReward += _bridgeOperatorBonus;\\n\\n    // Deprecates reward for non-validator or slashed validator\\n    if (!_requestForBlockProducer) {\\n      _totalDeprecatedReward += msg.value;\\n      emit BlockRewardDeprecated(msg.sender, msg.value, BlockRewardDeprecatedType.UNAVAILABILITY);\\n      return;\\n    }\\n\\n    emit BlockRewardSubmitted(msg.sender, msg.value, _blockProducerBonus);\\n\\n    uint256 _period = currentPeriod();\\n    uint256 _reward = msg.value + _blockProducerBonus;\\n    uint256 _cutOffReward;\\n    if (_miningRewardBailoutCutOffAtPeriod[msg.sender][_period]) {\\n      (, , , uint256 _cutOffPercentage) = _slashIndicatorContract.getCreditScoreConfigs();\\n      _cutOffReward = (_reward * _cutOffPercentage) / _MAX_PERCENTAGE;\\n      _totalDeprecatedReward += _cutOffReward;\\n      emit BlockRewardDeprecated(msg.sender, _cutOffReward, BlockRewardDeprecatedType.AFTER_BAILOUT);\\n    }\\n\\n    _reward -= _cutOffReward;\\n    uint256 _maxRate = _stakingContract.maxCommissionRate();\\n    uint256 _rate = Math.min(_candidateInfo[msg.sender].commissionRate, _maxRate);\\n    uint256 _miningAmount = (_rate * _reward) / _MAX_PERCENTAGE;\\n    _miningReward[msg.sender] += _miningAmount;\\n\\n    uint256 _delegatingAmount = _reward - _miningAmount;\\n    _delegatingReward[msg.sender] += _delegatingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function wrapUpEpoch() external payable virtual override onlyCoinbase whenEpochEnding oncePerEpoch {\\n    uint256 _newPeriod = _computePeriod(block.timestamp);\\n    bool _periodEnding = _isPeriodEnding(_newPeriod);\\n\\n    (address[] memory _currentValidators, , ) = getValidators();\\n    address[] memory _revokedCandidates;\\n    uint256 _epoch = epochOf(block.number);\\n    uint256 _nextEpoch = _epoch + 1;\\n    uint256 _lastPeriod = currentPeriod();\\n\\n    if (_periodEnding) {\\n      _syncBridgeOperatingReward(_lastPeriod, _currentValidators);\\n      (\\n        uint256 _totalDelegatingReward,\\n        uint256[] memory _delegatingRewards\\n      ) = _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(_lastPeriod, _currentValidators);\\n      _settleAndTransferDelegatingRewards(_lastPeriod, _currentValidators, _totalDelegatingReward, _delegatingRewards);\\n      _tryRecycleLockedFundsFromEmergencyExits();\\n      _recycleDeprecatedRewards();\\n      _slashIndicatorContract.updateCreditScores(_currentValidators, _lastPeriod);\\n      (_currentValidators, _revokedCandidates) = _syncValidatorSet(_newPeriod);\\n      if (_revokedCandidates.length > 0) {\\n        _slashIndicatorContract.execResetCreditScores(_revokedCandidates);\\n      }\\n      _currentPeriodStartAtBlock = block.number + 1;\\n    }\\n    _revampRoles(_newPeriod, _nextEpoch, _currentValidators);\\n    emit WrappedUpEpoch(_lastPeriod, _epoch, _periodEnding);\\n    _periodOf[_nextEpoch] = _newPeriod;\\n    _lastUpdatedPeriod = _newPeriod;\\n  }\\n\\n  /**\\n   * @dev This loop over the all current validators to sync the bridge operating reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncBridgeOperatingReward(uint256 _lastPeriod, address[] memory _currentValidators) internal {\\n    uint256 _totalBridgeBallots = _bridgeTrackingContract.totalBallots(_lastPeriod);\\n    uint256 _totalBridgeVotes = _bridgeTrackingContract.totalVotes(_lastPeriod);\\n    uint256[] memory _bridgeBallots = _bridgeTrackingContract.getManyTotalBallots(\\n      _lastPeriod,\\n      getBridgeOperatorsOf(_currentValidators)\\n    );\\n\\n    if (\\n      !_validateBridgeTrackingResponse(_totalBridgeBallots, _totalBridgeVotes, _bridgeBallots) || _totalBridgeVotes == 0\\n    ) {\\n      // Shares equally in case the bridge has nothing to vote or bridge tracking response is incorrect\\n      for (uint256 _i; _i < _currentValidators.length; _i++) {\\n        _bridgeOperatingReward[_currentValidators[_i]] = _totalBridgeReward / _currentValidators.length;\\n      }\\n      return;\\n    }\\n\\n    (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2,\\n      uint256 _skipBridgeOperatorSlashingThreshold\\n    ) = _slashIndicatorContract.getBridgeOperatorSlashingConfigs();\\n\\n    // Slashes the bridge reward if the total of votes exceeds the slashing threshold.\\n    bool _shouldSlash = _totalBridgeVotes > _skipBridgeOperatorSlashingThreshold;\\n    for (uint256 _i; _i < _currentValidators.length; _i++) {\\n      // Shares the bridge operators reward proportionally.\\n      _bridgeOperatingReward[_currentValidators[_i]] = (_totalBridgeReward * _bridgeBallots[_i]) / _totalBridgeBallots;\\n      if (_shouldSlash) {\\n        _slashBridgeOperatorBasedOnPerformance(\\n          _lastPeriod,\\n          _currentValidators[_i],\\n          _MAX_PERCENTAGE - (_bridgeBallots[_i] * _MAX_PERCENTAGE) / _totalBridgeVotes,\\n          _jailDurationForMissingVotesRatioTier2,\\n          _missingVotesRatioTier1,\\n          _missingVotesRatioTier2\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the responses from bridge tracking are correct.\\n   */\\n  function _validateBridgeTrackingResponse(\\n    uint256 _totalBridgeBallots,\\n    uint256 _totalBridgeVotes,\\n    uint256[] memory _bridgeBallots\\n  ) private returns (bool _valid) {\\n    _valid = true;\\n    uint256 _sumBallots;\\n    for (uint _i; _i < _bridgeBallots.length; _i++) {\\n      if (_bridgeBallots[_i] > _totalBridgeVotes) {\\n        _valid = false;\\n        break;\\n      }\\n      _sumBallots += _bridgeBallots[_i];\\n    }\\n    _valid = _valid && (_sumBallots <= _totalBridgeBallots);\\n    if (!_valid) {\\n      emit BridgeTrackingIncorrectlyResponded();\\n    }\\n  }\\n\\n  /**\\n   * @dev Slashes the validator on the corresponding bridge operator performance. Updates the status of the deprecated reward. Not update the reward amount.\\n   *\\n   * Consider validating the bridge tracking response by using the method `_validateBridgeTrackingResponse` before calling this function.\\n   */\\n  function _slashBridgeOperatorBasedOnPerformance(\\n    uint256 _period,\\n    address _validator,\\n    uint256 _missedRatio,\\n    uint256 _jailDurationTier2,\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2\\n  ) internal {\\n    if (_missedRatio >= _ratioTier2) {\\n      _bridgeRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      _miningRewardDeprecatedAtPeriod[_validator][_period] = true;\\n\\n      // Cannot saving gas by temp variable here due to too deep stack.\\n      _blockProducerJailedBlock[_validator] = Math.max(\\n        block.number + _jailDurationTier2,\\n        _blockProducerJailedBlock[_validator]\\n      );\\n      _cannotBailoutUntilBlock[_validator] = Math.max(\\n        block.number + _jailDurationTier2,\\n        _cannotBailoutUntilBlock[_validator]\\n      );\\n\\n      _slashIndicatorContract.execSlashBridgeOperator(_validator, 2, _period);\\n      emit ValidatorPunished(_validator, _period, _blockProducerJailedBlock[_validator], 0, true, true);\\n    } else if (_missedRatio >= _ratioTier1) {\\n      _bridgeRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      _slashIndicatorContract.execSlashBridgeOperator(_validator, 1, _period);\\n      emit ValidatorPunished(_validator, _period, _blockProducerJailedBlock[_validator], 0, false, true);\\n    }\\n  }\\n\\n  /**\\n   * @dev This loops over all current validators to:\\n   * - Update delegating reward for and calculate total delegating rewards to be sent to the staking contract,\\n   * - Distribute the reward of block producers and bridge operators to their treasury addresses,\\n   * - Update the total deprecated reward if the two previous conditions do not sastify.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(\\n    uint256 _lastPeriod,\\n    address[] memory _currentValidators\\n  ) private returns (uint256 _totalDelegatingReward, uint256[] memory _delegatingRewards) {\\n    address _consensusAddr;\\n    address payable _treasury;\\n    _delegatingRewards = new uint256[](_currentValidators.length);\\n    for (uint _i; _i < _currentValidators.length; _i++) {\\n      _consensusAddr = _currentValidators[_i];\\n      _treasury = _candidateInfo[_consensusAddr].treasuryAddr;\\n\\n      if (!_bridgeRewardDeprecated(_consensusAddr, _lastPeriod)) {\\n        _distributeBridgeOperatingReward(_consensusAddr, _candidateInfo[_consensusAddr].bridgeOperatorAddr, _treasury);\\n      } else {\\n        _totalDeprecatedReward += _bridgeOperatingReward[_consensusAddr];\\n      }\\n\\n      if (!_jailed(_consensusAddr) && !_miningRewardDeprecated(_consensusAddr, _lastPeriod)) {\\n        _totalDelegatingReward += _delegatingReward[_consensusAddr];\\n        _delegatingRewards[_i] = _delegatingReward[_consensusAddr];\\n        _distributeMiningReward(_consensusAddr, _treasury);\\n      } else {\\n        _totalDeprecatedReward += _miningReward[_consensusAddr] + _delegatingReward[_consensusAddr];\\n      }\\n\\n      delete _delegatingReward[_consensusAddr];\\n      delete _miningReward[_consensusAddr];\\n      delete _bridgeOperatingReward[_consensusAddr];\\n    }\\n    delete _totalBridgeReward;\\n  }\\n\\n  /**\\n   * @dev Distributes bonus of staking vesting and mining fee for the block producer.\\n   *\\n   * Emits the `MiningRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `MiningRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeMiningReward(address _consensusAddr, address payable _treasury) private {\\n    uint256 _amount = _miningReward[_consensusAddr];\\n    if (_amount > 0) {\\n      if (_unsafeSendRON(_treasury, _amount, DEFAULT_ADDITION_GAS)) {\\n        emit MiningRewardDistributed(_consensusAddr, _treasury, _amount);\\n        return;\\n      }\\n\\n      emit MiningRewardDistributionFailed(_consensusAddr, _treasury, _amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Distribute bonus of staking vesting for the bridge operator.\\n   *\\n   * Emits the `BridgeOperatorRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `BridgeOperatorRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeBridgeOperatingReward(\\n    address _consensusAddr,\\n    address _bridgeOperator,\\n    address payable _treasury\\n  ) private {\\n    uint256 _amount = _bridgeOperatingReward[_consensusAddr];\\n    if (_amount > 0) {\\n      if (_unsafeSendRON(_treasury, _amount, DEFAULT_ADDITION_GAS)) {\\n        emit BridgeOperatorRewardDistributed(_consensusAddr, _bridgeOperator, _treasury, _amount);\\n        return;\\n      }\\n\\n      emit BridgeOperatorRewardDistributionFailed(\\n        _consensusAddr,\\n        _bridgeOperator,\\n        _treasury,\\n        _amount,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper function to settle rewards for delegators of `_currentValidators` at the end of each period,\\n   * then transfer the rewards from this contract to the staking contract, in order to finalize a period.\\n   *\\n   * Emits the `StakingRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `StakingRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _settleAndTransferDelegatingRewards(\\n    uint256 _period,\\n    address[] memory _currentValidators,\\n    uint256 _totalDelegatingReward,\\n    uint256[] memory _delegatingRewards\\n  ) private {\\n    IStaking _staking = _stakingContract;\\n    if (_totalDelegatingReward > 0) {\\n      if (_unsafeSendRON(payable(address(_staking)), _totalDelegatingReward)) {\\n        _staking.execRecordRewards(_currentValidators, _delegatingRewards, _period);\\n        emit StakingRewardDistributed(_totalDelegatingReward, _currentValidators, _delegatingRewards);\\n        return;\\n      }\\n\\n      emit StakingRewardDistributionFailed(\\n        _totalDelegatingReward,\\n        _currentValidators,\\n        _delegatingRewards,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer the deprecated rewards e.g. the rewards that get deprecated when validator is slashed/maintained,\\n   * to the staking vesting contract\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   */\\n  function _recycleDeprecatedRewards() private {\\n    uint256 _withdrawAmount = _totalDeprecatedReward;\\n\\n    if (_withdrawAmount != 0) {\\n      address _withdrawTarget = stakingVestingContract();\\n\\n      delete _totalDeprecatedReward;\\n\\n      (bool _success, ) = _withdrawTarget.call{ value: _withdrawAmount }(\\n        abi.encodeWithSelector(IStakingVesting.receiveRON.selector)\\n      );\\n\\n      if (_success) {\\n        emit DeprecatedRewardRecycled(_withdrawTarget, _withdrawAmount);\\n      } else {\\n        emit DeprecatedRewardRecycleFailed(_withdrawTarget, _withdrawAmount, address(this).balance);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the validator set based on the validator candidates from the Staking contract.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncValidatorSet(uint256 _newPeriod)\\n    private\\n    returns (address[] memory _newValidators, address[] memory _unsastifiedCandidates)\\n  {\\n    _unsastifiedCandidates = _syncCandidateSet(_newPeriod);\\n    uint256[] memory _weights = _stakingContract.getManyStakingTotals(_candidates);\\n    uint256[] memory _trustedWeights = _roninTrustedOrganizationContract.getConsensusWeights(_candidates);\\n    uint256 _newValidatorCount;\\n    (_newValidators, _newValidatorCount) = _pcPickValidatorSet(\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    _setNewValidatorSet(_newValidators, _newValidatorCount, _newPeriod);\\n  }\\n\\n  /**\\n   * @dev Private helper function helps writing the new validator set into the contract storage.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _setNewValidatorSet(\\n    address[] memory _newValidators,\\n    uint256 _newValidatorCount,\\n    uint256 _newPeriod\\n  ) private {\\n    // Remove exceeding validators in the current set\\n    for (uint256 _i = _newValidatorCount; _i < validatorCount; _i++) {\\n      delete _validatorMap[_validators[_i]];\\n      delete _validators[_i];\\n    }\\n\\n    // Remove flag for all validator in the current set\\n    for (uint _i; _i < _newValidatorCount; _i++) {\\n      delete _validatorMap[_validators[_i]];\\n    }\\n\\n    // Update new validator set and set flag correspondingly.\\n    for (uint256 _i; _i < _newValidatorCount; _i++) {\\n      address _newValidator = _newValidators[_i];\\n      _validatorMap[_newValidator] = EnumFlags.ValidatorFlag.Both;\\n      _validators[_i] = _newValidator;\\n    }\\n\\n    validatorCount = _newValidatorCount;\\n    emit ValidatorSetUpdated(_newPeriod, _newValidators);\\n  }\\n\\n  /**\\n   * @dev Activate/Deactivate the validators from producing blocks, based on their in jail status and maintenance status.\\n   *\\n   * Requirements:\\n   * - This method is called at the end of each epoch\\n   *\\n   * Emits the `BlockProducerSetUpdated` event.\\n   * Emits the `BridgeOperatorSetUpdated` event.\\n   *\\n   */\\n  function _revampRoles(\\n    uint256 _newPeriod,\\n    uint256 _nextEpoch,\\n    address[] memory _currentValidators\\n  ) private {\\n    bool[] memory _maintainedList = _maintenanceContract.checkManyMaintained(_currentValidators, block.number + 1);\\n\\n    for (uint _i; _i < _currentValidators.length; _i++) {\\n      address _validator = _currentValidators[_i];\\n      bool _emergencyExitRequested = block.timestamp <= _emergencyExitJailedTimestamp[_validator];\\n      bool _isProducerBefore = isBlockProducer(_validator);\\n      bool _isProducerAfter = !(_jailed(_validator) || _maintainedList[_i] || _emergencyExitRequested);\\n\\n      if (!_isProducerBefore && _isProducerAfter) {\\n        _validatorMap[_validator] = _validatorMap[_validator].addFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n      } else if (_isProducerBefore && !_isProducerAfter) {\\n        _validatorMap[_validator] = _validatorMap[_validator].removeFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n      }\\n\\n      bool _isBridgeOperatorBefore = isOperatingBridge(_validator);\\n      bool _isBridgeOperatorAfter = !_emergencyExitRequested;\\n      if (!_isBridgeOperatorBefore && _isBridgeOperatorAfter) {\\n        _validatorMap[_validator] = _validatorMap[_validator].addFlag(EnumFlags.ValidatorFlag.BridgeOperator);\\n      } else if (_isBridgeOperatorBefore && !_isBridgeOperatorAfter) {\\n        _validatorMap[_validator] = _validatorMap[_validator].removeFlag(EnumFlags.ValidatorFlag.BridgeOperator);\\n      }\\n    }\\n\\n    emit BlockProducerSetUpdated(_newPeriod, _nextEpoch, getBlockProducers());\\n    emit BridgeOperatorSetUpdated(_newPeriod, _nextEpoch, getBridgeOperators());\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_isTrustedOrg`.\\n   */\\n  function _isTrustedOrg(address _consensusAddr) internal view override returns (bool) {\\n    return _roninTrustedOrganizationContract.getConsensusWeight(_consensusAddr) > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x998a3bf2745849cdffd502001288e15ce3e32fec347ae1fb67f6fde3a8ca3619\",\"license\":\"MIT\"},\"contracts/ronin/validator/EmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/IRoninGovernanceAdmin.sol\\\";\\nimport \\\"../../interfaces/validator/IEmergencyExit.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport \\\"./CandidateManager.sol\\\";\\n\\nabstract contract EmergencyExit is IEmergencyExit, RONTransferHelper, CandidateManager, CommonStorage {\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function emergencyExitLockedAmount() external view returns (uint256) {\\n    return _emergencyExitLockedAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function emergencyExpiryDuration() external view returns (uint256) {\\n    return _emergencyExpiryDuration;\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external onlyStakingContract {\\n    EmergencyExitInfo storage _info = _exitInfo[_consensusAddr];\\n    if (_info.recyclingAt != 0) revert ErrAlreadyRequestedEmergencyExit();\\n\\n    uint256 _revokingTimestamp = block.timestamp + _secLeftToRevoke;\\n    _setRevokingTimestamp(_candidateInfo[_consensusAddr], _revokingTimestamp);\\n    _emergencyExitJailedTimestamp[_consensusAddr] = _revokingTimestamp;\\n    _bridgeRewardDeprecatedAtPeriod[_consensusAddr][currentPeriod()] = true;\\n\\n    uint256 _deductedAmount = _stakingContract.execDeductStakingAmount(_consensusAddr, _emergencyExitLockedAmount);\\n    if (_deductedAmount > 0) {\\n      uint256 _recyclingAt = block.timestamp + _emergencyExpiryDuration;\\n      _lockedConsensusList.push(_consensusAddr);\\n      _info.lockedAmount = _deductedAmount;\\n      _info.recyclingAt = _recyclingAt;\\n      IRoninGovernanceAdmin(_getAdmin()).createEmergencyExitPoll(\\n        _consensusAddr,\\n        _candidateInfo[_consensusAddr].treasuryAddr,\\n        block.timestamp,\\n        _recyclingAt\\n      );\\n    }\\n    emit EmergencyExitRequested(_consensusAddr, _deductedAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external onlyAdmin {\\n    _setEmergencyExitLockedAmount(_emergencyExitLockedAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external onlyAdmin {\\n    _setEmergencyExpiryDuration(_emergencyExpiryDuration);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient)\\n    external\\n    onlyAdmin\\n  {\\n    if (_exitInfo[_consensusAddr].recyclingAt == 0) {\\n      return;\\n    }\\n\\n    uint256 _length = _lockedConsensusList.length;\\n    uint256 _index = _length;\\n\\n    for (uint _i; _i < _length; _i++) {\\n      if (_lockedConsensusList[_i] == _consensusAddr) {\\n        _index = _i;\\n        break;\\n      }\\n    }\\n\\n    // The locked amount might be recycled\\n    if (_index == _length) {\\n      return;\\n    }\\n\\n    uint256 _amount = _exitInfo[_consensusAddr].lockedAmount;\\n    if (_amount > 0) {\\n      delete _exitInfo[_consensusAddr];\\n      if (_length > 1) {\\n        _lockedConsensusList[_index] = _lockedConsensusList[_length - 1];\\n      }\\n      _lockedConsensusList.pop();\\n\\n      _lockedFundReleased[_consensusAddr] = true;\\n      if (_unsafeSendRON(_recipient, _amount, DEFAULT_ADDITION_GAS)) {\\n        emit EmergencyExitLockedFundReleased(_consensusAddr, _recipient, _amount);\\n        return;\\n      }\\n\\n      emit EmergencyExitLockedFundReleasingFailed(_consensusAddr, _recipient, _amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tries to recycle the locked funds from emergency exit requests.\\n   */\\n  function _tryRecycleLockedFundsFromEmergencyExits() internal {\\n    uint256 _length = _lockedConsensusList.length;\\n\\n    uint256 _i;\\n    address _addr;\\n    EmergencyExitInfo storage _info;\\n\\n    while (_i < _length) {\\n      _addr = _lockedConsensusList[_i];\\n      _info = _exitInfo[_addr];\\n\\n      if (_info.recyclingAt <= block.timestamp) {\\n        _totalDeprecatedReward += _info.lockedAmount;\\n\\n        delete _exitInfo[_addr];\\n        if (--_length > 0) {\\n          _lockedConsensusList[_i] = _lockedConsensusList[_length];\\n        }\\n        _lockedConsensusList.pop();\\n        continue;\\n      }\\n\\n      _i++;\\n    }\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_emergencyExitLockedFundReleased`.\\n   */\\n  function _emergencyExitLockedFundReleased(address _consensusAddr) internal virtual override returns (bool) {\\n    return _lockedFundReleased[_consensusAddr];\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_removeCandidate`.\\n   */\\n  function _removeCandidate(address _consensusAddr) internal override {\\n    delete _lockedFundReleased[_consensusAddr];\\n    super._removeCandidate(_consensusAddr);\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr)\\n    internal\\n    view\\n    virtual\\n    override(CandidateManager, ValidatorInfoStorage)\\n    returns (address)\\n  {\\n    return CandidateManager._bridgeOperatorOf(_consensusAddr);\\n  }\\n\\n  /**\\n   * @dev See `setEmergencyExitLockedAmount.\\n   */\\n  function _setEmergencyExitLockedAmount(uint256 _amount) internal {\\n    _emergencyExitLockedAmount = _amount;\\n    emit EmergencyExitLockedAmountUpdated(_amount);\\n  }\\n\\n  /**\\n   * @dev See `setEmergencyExpiryDuration`.\\n   */\\n  function _setEmergencyExpiryDuration(uint256 _duration) internal {\\n    _emergencyExpiryDuration = _duration;\\n    emit EmergencyExpiryDurationUpdated(_duration);\\n  }\\n}\\n\",\"keccak256\":\"0x829dd3adae7a2171205dacc768d47f398be52669de1bb32ed3f8b91db6fc8885\",\"license\":\"MIT\"},\"contracts/ronin/validator/RoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./CoinbaseExecution.sol\\\";\\nimport \\\"./SlashingExecution.sol\\\";\\n\\ncontract RoninValidatorSet is Initializable, CoinbaseExecution, SlashingExecution {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __slashIndicatorContract,\\n    address __stakingContract,\\n    address __stakingVestingContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address __bridgeTrackingContract,\\n    uint256 __maxValidatorNumber,\\n    uint256 __maxValidatorCandidate,\\n    uint256 __maxPrioritizedValidatorNumber,\\n    uint256 __minEffectiveDaysOnwards,\\n    uint256 __numberOfBlocksInEpoch,\\n    // __emergencyExitConfigs[0]: emergencyExitLockedAmount\\n    // __emergencyExitConfigs[1]: emergencyExpiryDuration\\n    uint256[2] calldata __emergencyExitConfigs\\n  ) external initializer {\\n    _setSlashIndicatorContract(__slashIndicatorContract);\\n    _setStakingContract(__stakingContract);\\n    _setStakingVestingContract(__stakingVestingContract);\\n    _setMaintenanceContract(__maintenanceContract);\\n    _setBridgeTrackingContract(__bridgeTrackingContract);\\n    _setRoninTrustedOrganizationContract(__roninTrustedOrganizationContract);\\n    _setMaxValidatorNumber(__maxValidatorNumber);\\n    _setMaxValidatorCandidate(__maxValidatorCandidate);\\n    _setMaxPrioritizedValidatorNumber(__maxPrioritizedValidatorNumber);\\n    _setMinEffectiveDaysOnwards(__minEffectiveDaysOnwards);\\n    _setEmergencyExitLockedAmount(__emergencyExitConfigs[0]);\\n    _setEmergencyExpiryDuration(__emergencyExitConfigs[1]);\\n    _numberOfBlocksInEpoch = __numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @dev Only receives RON from staking vesting contract (for topping up bonus), and from staking contract (for transferring\\n   * deducting amount on slashing).\\n   */\\n  function _fallback() internal view {\\n    if (msg.sender != stakingVestingContract() && msg.sender != stakingContract()) revert ErrUnauthorizedReceiveRON();\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr)\\n    internal\\n    view\\n    override(EmergencyExit, ValidatorInfoStorage)\\n    returns (address)\\n  {\\n    return super._bridgeOperatorOf(_consensusAddr);\\n  }\\n}\\n\",\"keccak256\":\"0xd7a2ac4d3a2c8edbd1bbfb1ef3549ef0a019b4c9b4f1c12f1fd07b116b1adab3\",\"license\":\"MIT\"},\"contracts/ronin/validator/SlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasSlashIndicatorContract.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingContract.sol\\\";\\nimport \\\"../../interfaces/validator/ISlashingExecution.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\n\\nabstract contract SlashingExecution is\\n  ISlashingExecution,\\n  HasSlashIndicatorContract,\\n  HasStakingContract,\\n  CommonStorage\\n{\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external override onlySlashIndicatorContract {\\n    uint256 _period = currentPeriod();\\n    _miningRewardDeprecatedAtPeriod[_validatorAddr][_period] = true;\\n\\n    _totalDeprecatedReward += _miningReward[_validatorAddr] + _delegatingReward[_validatorAddr];\\n\\n    delete _miningReward[_validatorAddr];\\n    delete _delegatingReward[_validatorAddr];\\n\\n    _blockProducerJailedBlock[_validatorAddr] = Math.max(_newJailedUntil, _blockProducerJailedBlock[_validatorAddr]);\\n\\n    if (_slashAmount > 0) {\\n      uint256 _actualAmount = _stakingContract.execDeductStakingAmount(_validatorAddr, _slashAmount);\\n      _totalDeprecatedReward += _actualAmount;\\n    }\\n\\n    if (_cannotBailout) {\\n      _cannotBailoutUntilBlock[_validatorAddr] = Math.max(_newJailedUntil, _cannotBailoutUntilBlock[_validatorAddr]);\\n    }\\n\\n    emit ValidatorPunished(\\n      _validatorAddr,\\n      _period,\\n      _blockProducerJailedBlock[_validatorAddr],\\n      _slashAmount,\\n      true,\\n      false\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external override onlySlashIndicatorContract {\\n    if (block.number <= _cannotBailoutUntilBlock[_validatorAddr]) revert ErrCannotBailout(_validatorAddr);\\n\\n    // Note: Removing rewards of validator in `bailOut` function is not needed, since the rewards have been\\n    // removed previously in the `slash` function.\\n    _miningRewardBailoutCutOffAtPeriod[_validatorAddr][_period] = true;\\n    _miningRewardDeprecatedAtPeriod[_validatorAddr][_period] = false;\\n    _blockProducerJailedBlock[_validatorAddr] = block.number - 1;\\n\\n    emit ValidatorUnjailed(_validatorAddr, _period);\\n  }\\n}\\n\",\"keccak256\":\"0xf10b8566c1397e3dc86c6c16dcd20bf91011726b01dbff7da3a9d9a59bdee9b0\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/CommonStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./JailingStorage.sol\\\";\\nimport \\\"./TimingStorage.sol\\\";\\nimport \\\"./ValidatorInfoStorage.sol\\\";\\n\\nabstract contract CommonStorage is ICommonInfo, TimingStorage, JailingStorage, ValidatorInfoStorage {\\n  /// @dev Mapping from consensus address => pending reward from producing block\\n  mapping(address => uint256) internal _miningReward;\\n  /// @dev Mapping from consensus address => pending reward from delegating\\n  mapping(address => uint256) internal _delegatingReward;\\n\\n  /// @dev The total reward for bridge operators\\n  uint256 internal _totalBridgeReward;\\n  /// @dev Mapping from consensus address => pending reward for being bridge operator\\n  mapping(address => uint256) internal _bridgeOperatingReward;\\n\\n  /// @dev The deprecated reward that has not been withdrawn by admin\\n  uint256 internal _totalDeprecatedReward;\\n\\n  /// @dev The amount of RON to lock from a consensus address.\\n  uint256 internal _emergencyExitLockedAmount;\\n  /// @dev The duration that an emergency request is expired and the fund will be recycled.\\n  uint256 internal _emergencyExpiryDuration;\\n  /// @dev The address list of consensus addresses that being locked fund.\\n  address[] internal _lockedConsensusList;\\n  /// @dev Mapping from consensus => request exist info\\n  mapping(address => EmergencyExitInfo) internal _exitInfo;\\n  /// @dev Mapping from consensus => flag indicating whether the locked fund is released\\n  mapping(address => bool) internal _lockedFundReleased;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[44] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr)\\n    external\\n    view\\n    override\\n    returns (EmergencyExitInfo memory _info)\\n  {\\n    _info = _exitInfo[_consensusAddr];\\n    if (_info.recyclingAt == 0) revert NonExistentRecyclingInfo();\\n  }\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function totalDeprecatedReward() external view override returns (uint256) {\\n    return _totalDeprecatedReward;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block)\\n    public\\n    view\\n    virtual\\n    override(ITimingInfo, JailingStorage, TimingStorage)\\n    returns (uint256)\\n  {\\n    return TimingStorage.epochOf(_block);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override(ITimingInfo, JailingStorage, TimingStorage) returns (uint256) {\\n    return TimingStorage.currentPeriod();\\n  }\\n}\\n\",\"keccak256\":\"0x7372a3febdddcd1fa0fdfd06eba11c58d1c3113ea1b408c0ab13b99eeeeb7b22\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/JailingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/IJailingInfo.sol\\\";\\nimport \\\"./TimingStorage.sol\\\";\\n\\nabstract contract JailingStorage is IJailingInfo {\\n  /// @dev Mapping from consensus address => period number => block producer has no pending reward.\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardDeprecatedAtPeriod;\\n  /// @dev Mapping from consensus address => period number => whether the block producer get cut off reward, due to bailout.\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardBailoutCutOffAtPeriod;\\n  /// @dev Mapping from consensus address => period number => block operator has no pending reward.\\n  mapping(address => mapping(uint256 => bool)) internal _bridgeRewardDeprecatedAtPeriod;\\n\\n  /// @dev Mapping from consensus address => the last block that the block producer is jailed.\\n  mapping(address => uint256) internal _blockProducerJailedBlock;\\n  /// @dev Mapping from consensus address => the last timestamp that the bridge operator is jailed.\\n  mapping(address => uint256) internal _emergencyExitJailedTimestamp;\\n  /// @dev Mapping from consensus address => the last block that the block producer cannot bailout.\\n  mapping(address => uint256) internal _cannotBailoutUntilBlock;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailed(address _addr) external view override returns (bool) {\\n    return checkJailedAtBlock(_addr, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    override\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    )\\n  {\\n    return getJailedTimeLeftAtBlock(_addr, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) public view override returns (bool) {\\n    return _jailedAtBlock(_addr, _blockNum);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    public\\n    view\\n    override\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    )\\n  {\\n    uint256 _jailedBlock = _blockProducerJailedBlock[_addr];\\n    if (_jailedBlock < _blockNum) {\\n      return (false, 0, 0);\\n    }\\n\\n    isJailed_ = true;\\n    blockLeft_ = _jailedBlock - _blockNum + 1;\\n    epochLeft_ = epochOf(_jailedBlock) - epochOf(_blockNum) + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkManyJailed(address[] calldata _addrList) external view override returns (bool[] memory _result) {\\n    _result = new bool[](_addrList.length);\\n    for (uint256 _i; _i < _addrList.length; _i++) {\\n      _result[_i] = _jailed(_addrList[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view override returns (bool _result) {\\n    uint256 _period = currentPeriod();\\n    return _miningRewardDeprecated(_blockProducer, _period);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period)\\n    external\\n    view\\n    override\\n    returns (bool _result)\\n  {\\n    return _miningRewardDeprecated(_blockProducer, _period);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   *\\n   * @dev Because the information of deprecating bridge reward of a period is only determined at the end of that period, this\\n   * method will return the deprecating info of the latest period. A method for querying that info of current period is no need.\\n   */\\n  function checkBridgeRewardDeprecatedAtLatestPeriod(address _consensusAddr)\\n    external\\n    view\\n    override\\n    returns (bool _result)\\n  {\\n    uint256 _period = currentPeriod() - 1;\\n    return _bridgeRewardDeprecated(_consensusAddr, _period);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkBridgeRewardDeprecatedAtPeriod(address _consensusAddr, uint256 _period)\\n    external\\n    view\\n    override\\n    returns (bool _result)\\n  {\\n    return _bridgeRewardDeprecated(_consensusAddr, _period);\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-epochOf`\\n   */\\n  function epochOf(uint256 _block) public view virtual returns (uint256);\\n\\n  /**\\n   * @dev See `ITimingInfo-currentPeriod`\\n   */\\n  function currentPeriod() public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function _jailed(address _validatorAddr) internal view returns (bool) {\\n    return _jailedAtBlock(_validatorAddr, block.number);\\n  }\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function _jailedAtBlock(address _validatorAddr, uint256 _blockNum) internal view returns (bool) {\\n    return _blockNum <= _blockProducerJailedBlock[_validatorAddr];\\n  }\\n\\n  /**\\n   * @dev Returns whether the block producer has no pending reward in that period.\\n   */\\n  function _miningRewardDeprecated(address _validatorAddr, uint256 _period) internal view returns (bool) {\\n    return _miningRewardDeprecatedAtPeriod[_validatorAddr][_period];\\n  }\\n\\n  /**\\n   * @dev Returns whether the bridge operator has no pending reward in the period.\\n   */\\n  function _bridgeRewardDeprecated(address _validatorAddr, uint256 _period) internal view returns (bool) {\\n    return _bridgeRewardDeprecatedAtPeriod[_validatorAddr][_period];\\n  }\\n}\\n\",\"keccak256\":\"0x14ae5cc1f190f1b3e4517677b013638afc39a35d538303b8f0280fe1a52042c6\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/TimingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../../interfaces/validator/info-fragments/ITimingInfo.sol\\\";\\n\\nabstract contract TimingStorage is ITimingInfo, GlobalConfigConsumer {\\n  /// @dev The number of blocks in a epoch\\n  uint256 internal _numberOfBlocksInEpoch;\\n  /// @dev The last updated block\\n  uint256 internal _lastUpdatedBlock;\\n  /// @dev The last updated period\\n  uint256 internal _lastUpdatedPeriod;\\n  /// @dev The starting block of the last updated period\\n  uint256 internal _currentPeriodStartAtBlock;\\n\\n  /// @dev Mapping from epoch index => period index\\n  mapping(uint256 => uint256) internal _periodOf;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function getLastUpdatedBlock() external view override returns (uint256) {\\n    return _lastUpdatedBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block) public view virtual override returns (uint256) {\\n    return _block / _numberOfBlocksInEpoch + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber) {\\n    return (_epoch <= epochOf(block.number) || _periodOf[_epoch] > 0, _periodOf[_epoch]);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function isPeriodEnding() external view override returns (bool) {\\n    return _isPeriodEnding(_computePeriod(block.timestamp));\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochEndingAt(uint256 _block) public view virtual override returns (bool) {\\n    return _block % _numberOfBlocksInEpoch == _numberOfBlocksInEpoch - 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override returns (uint256) {\\n    return _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriodStartAtBlock() public view override returns (uint256) {\\n    return _currentPeriodStartAtBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function numberOfBlocksInEpoch() public view virtual override returns (uint256 _numberOfBlocks) {\\n    return _numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-isPeriodEnding`\\n   */\\n  function _isPeriodEnding(uint256 _newPeriod) internal view virtual returns (bool) {\\n    return _newPeriod > _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @dev Returns the calculated period.\\n   */\\n  function _computePeriod(uint256 _timestamp) internal pure returns (uint256) {\\n    return _timestamp / PERIOD_DURATION;\\n  }\\n}\\n\",\"keccak256\":\"0xc545f119b8b8978d793b62f2495dc2d49c3f416791459b9833bdc65f4dae8e7f\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/ValidatorInfoStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../../interfaces/validator/info-fragments/IValidatorInfo.sol\\\";\\n\\nabstract contract ValidatorInfoStorage is IValidatorInfo, HasRoninTrustedOrganizationContract {\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  /// @dev The maximum number of validator.\\n  uint256 internal _maxValidatorNumber;\\n\\n  /// @dev The total of validators\\n  uint256 public validatorCount;\\n  /// @dev Mapping from validator index => validator address\\n  mapping(uint256 => address) internal _validators;\\n  /// @dev Mapping from address => flag indicating the validator ability: producing block, operating bridge\\n  mapping(address => EnumFlags.ValidatorFlag) internal _validatorMap;\\n  /// @dev The number of slot that is reserved for prioritized validators\\n  uint256 internal _maxPrioritizedValidatorNumber;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getValidators()\\n    public\\n    view\\n    override\\n    returns (\\n      address[] memory _validatorList,\\n      address[] memory _bridgeOperators,\\n      EnumFlags.ValidatorFlag[] memory _flags\\n    )\\n  {\\n    _validatorList = new address[](validatorCount);\\n    _bridgeOperators = new address[](validatorCount);\\n    _flags = new EnumFlags.ValidatorFlag[](validatorCount);\\n    for (uint _i; _i < _validatorList.length; _i++) {\\n      address _validator = _validators[_i];\\n      _validatorList[_i] = _validator;\\n      _bridgeOperators[_i] = _bridgeOperatorOf(_validator);\\n      _flags[_i] = _validatorMap[_validator];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isValidator(address _addr) public view override returns (bool) {\\n    return !_validatorMap[_addr].isNone();\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getBlockProducers() public view override returns (address[] memory _result) {\\n    _result = new address[](validatorCount);\\n    uint256 _count = 0;\\n    for (uint _i; _i < _result.length; _i++) {\\n      if (isBlockProducer(_validators[_i])) {\\n        _result[_count++] = _validators[_i];\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_result, _count)\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isBlockProducer(address _addr) public view override returns (bool) {\\n    return _validatorMap[_addr].hasFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function totalBlockProducers() external view returns (uint256 _total) {\\n    for (uint _i; _i < validatorCount; _i++) {\\n      if (isBlockProducer(_validators[_i])) {\\n        _total++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getBridgeOperators() public view override returns (address[] memory _result) {\\n    _result = new address[](validatorCount);\\n    uint256 _count = 0;\\n    for (uint _i; _i < _result.length; _i++) {\\n      if (isOperatingBridge(_validators[_i])) {\\n        _result[_count++] = _bridgeOperatorOf(_validators[_i]);\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_result, _count)\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getBridgeOperatorsOf(address[] memory _validatorAddrs)\\n    public\\n    view\\n    override\\n    returns (address[] memory _result)\\n  {\\n    _result = new address[](_validatorAddrs.length);\\n    for (uint _i; _i < _result.length; _i++) {\\n      _result[_i] = _bridgeOperatorOf(_validatorAddrs[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isBridgeOperator(address _bridgeOperatorAddr) external view override returns (bool _isOperator) {\\n    for (uint _i; _i < validatorCount; _i++) {\\n      if (_bridgeOperatorOf(_validators[_i]) == _bridgeOperatorAddr && isOperatingBridge(_validators[_i])) {\\n        _isOperator = true;\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isOperatingBridge(address _consensusAddr) public view override returns (bool) {\\n    return _validatorMap[_consensusAddr].hasFlag(EnumFlags.ValidatorFlag.BridgeOperator);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function maxValidatorNumber() external view override returns (uint256 _maximumValidatorNumber) {\\n    return _maxValidatorNumber;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function maxPrioritizedValidatorNumber() external view override returns (uint256 _maximumPrioritizedValidatorNumber) {\\n    return _maxPrioritizedValidatorNumber;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function totalBridgeOperators() public view returns (uint256 _total) {\\n    for (uint _i; _i < validatorCount; _i++) {\\n      if (isOperatingBridge(_validators[_i])) {\\n        _total++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function setMaxValidatorNumber(uint256 _max) external override onlyAdmin {\\n    _setMaxValidatorNumber(_max);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _number) external override onlyAdmin {\\n    _setMaxPrioritizedValidatorNumber(_number);\\n  }\\n\\n  /**\\n   * @dev Returns the bridge operator of a consensus address.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr) internal view virtual returns (address);\\n\\n  /**\\n   * @dev See `IValidatorInfo-setMaxValidatorNumber`\\n   */\\n  function _setMaxValidatorNumber(uint256 _number) internal {\\n    _maxValidatorNumber = _number;\\n    emit MaxValidatorNumberUpdated(_number);\\n  }\\n\\n  /**\\n   * @dev See `IValidatorInfo-setMaxPrioritizedValidatorNumber`\\n   */\\n  function _setMaxPrioritizedValidatorNumber(uint256 _number) internal {\\n    if (_number > _maxValidatorNumber) revert ErrInvalidMaxPrioritizedValidatorNumber();\\n    _maxPrioritizedValidatorNumber = _number;\\n    emit MaxPrioritizedValidatorNumberUpdated(_number);\\n  }\\n}\\n\",\"keccak256\":\"0x19dca6ad64bd68923a8eaa9983ccfe0adb8cd7ad5d94b4ba708c35483adc430e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615fcc80620000f46000396000f3fe6080604052600436106103555760003560e01c806365244ece116101b957806365244ece146108075780636558954f146108275780636611f8431461083e578063690b75361461085e5780636aa1c2ef1461087357806372e46810146108885780637593ff7114610890578063823a7b9c146108b0578063873a5a70146108d057806387c891bd146108f05780638d559c381461090557806396585fc2146109195780639b19dbfd146109395780639c8d98da1461094e5780639dd373b91461096e5780639e94b9ec1461098e578063a0c3f2d2146109a3578063a3d545f5146109c3578063a66c0f77146109e3578063a7c2f119146109f8578063ad29578314610a18578063b405aaf214610a38578063b5e337de14610a58578063b7ab4db514610a78578063ba77b06c14610a9c578063c3c8b5d614610ab1578063c94aaa0214610ad1578063cba44de914610af1578063d09f1ab414610b06578063d2cb215e14610b1b578063d5a0744f14610b39578063dd716ad314610b59578063e5125a1d14610b79578063edb194bb14610b99578063ee99205c14610bfb578063eeb629a814610c10578063facd743b14610c2557610364565b8063038278841461036c57806304d971ab1461039557806306040618146103c55780630f43a677146103da5780631104e528146103f057806311662dc2146104105780631196ab661461044d57806315b5ebde1461046d5780631ab4a34c1461048d5780631f628801146104ad578063217f35c2146104cd57806323c65eb0146104e257806328bde1e1146105025780632924de711461052f578063297a8fca1461054f5780632bcf3d15146105645780632d784a98146105845780632f78204c146105b157806331a8aef5146105d15780633529214b146105f1578063367ec12b146106135780633b3159b6146106335780634244d4c9146106475780634493421e14610674578063468c96ae1461069257806346fe9311146106c957806349096d26146106e95780634d8df063146106fe5780634de2b7351461071e5780634ee4d72b1461074b5780634f2a693f1461076057806352091f17146107805780635248184a146107885780635511cde1146107aa578063562d5304146107c85780635a08482d146107dd578063605239a1146107f257610364565b3661036457610362610c45565b005b610362610c45565b34801561037857600080fd5b506103826104b081565b6040519081526020015b60405180910390f35b3480156103a157600080fd5b506103b56103b036600461542e565b610caa565b604051901515815260200161038c565b3480156103d157600080fd5b50610382610cd1565b3480156103e657600080fd5b5061038260aa5481565b3480156103fc57600080fd5b5061036261040b366004615467565b610ce1565b34801561041c57600080fd5b5061043061042b3660046154cb565b610f6c565b60408051931515845260208401929092529082015260600161038c565b34801561045957600080fd5b506103626104683660046154f7565b610fef565b34801561047957600080fd5b506103626104883660046154cb565b611033565b34801561049957600080fd5b506103b56104a8366004615510565b61114f565b3480156104b957600080fd5b506103b56104c8366004615510565b611179565b3480156104d957600080fd5b506103b56111b3565b3480156104ee57600080fd5b506103b56104fd3660046154cb565b6111c8565b34801561050e57600080fd5b5061052261051d366004615510565b6111d4565b60405161038c9190615581565b34801561053b57600080fd5b506103b561054a366004615510565b611277565b34801561055b57600080fd5b50600454610382565b34801561057057600080fd5b5061036261057f366004615510565b611283565b34801561059057600080fd5b506105a461059f366004615510565b6112ef565b60405161038c919061558f565b3480156105bd57600080fd5b506103626105cc3660046155b4565b611351565b3480156105dd57600080fd5b506103b56105ec3660046154cb565b61156d565b3480156105fd57600080fd5b50610606611579565b60405161038c91906155fe565b34801561061f57600080fd5b5061036261062e366004615623565b611588565b34801561063f57600080fd5b506068610606565b34801561065357600080fd5b50610667610662366004615752565b611713565b60405161038c9190615834565b34801561068057600080fd5b50606e546001600160a01b0316610606565b34801561069e57600080fd5b506106b26106ad3660046154f7565b6117ca565b60408051921515835260208301919091520161038c565b3480156106d557600080fd5b506103626106e4366004615510565b611808565b3480156106f557600080fd5b50610667611874565b34801561070a57600080fd5b506103626107193660046154f7565b61195d565b34801561072a57600080fd5b5061073e610739366004615847565b61199e565b60405161038c91906158bb565b34801561075757600080fd5b5060e454610382565b34801561076c57600080fd5b5061036261077b3660046154f7565b611a59565b610362611a9a565b34801561079457600080fd5b5061079d611e57565b60405161038c9190615901565b3480156107b657600080fd5b5060a8546001600160a01b0316610606565b3480156107d457600080fd5b50610382611f87565b3480156107e957600080fd5b50610606611fdb565b3480156107fe57600080fd5b50607254610382565b34801561081357600080fd5b506103b5610822366004615510565b611fea565b34801561083357600080fd5b506103826201518081565b34801561084a57600080fd5b506103626108593660046154f7565b61201e565b34801561086a57600080fd5b5060e554610382565b34801561087f57600080fd5b50600154610382565b61036261205f565b34801561089c57600080fd5b506103b56108ab3660046154f7565b6122bf565b3480156108bc57600080fd5b506103626108cb3660046154f7565b6122e3565b3480156108dc57600080fd5b506103b56108eb366004615510565b612324565b3480156108fc57600080fd5b50600254610382565b34801561091157600080fd5b506066610606565b34801561092557600080fd5b50610430610934366004615510565b61233b565b34801561094557600080fd5b50610667612357565b34801561095a57600080fd5b50610362610969366004615510565b612443565b34801561097a57600080fd5b50610362610989366004615510565b6124af565b34801561099a57600080fd5b5061038261251b565b3480156109af57600080fd5b506103b56109be366004615510565b61256f565b3480156109cf57600080fd5b506103826109de3660046154f7565b61258c565b3480156109ef57600080fd5b5060e654610382565b348015610a0457600080fd5b50610362610a133660046154cb565b612597565b348015610a2457600080fd5b50610362610a33366004615510565b612843565b348015610a4457600080fd5b506103b5610a53366004615510565b6128af565b348015610a6457600080fd5b50610362610a73366004615510565b612934565b348015610a8457600080fd5b50610a8d6129a0565b60405161038c93929190615959565b348015610aa857600080fd5b50610667612b7e565b348015610abd57600080fd5b50610362610acc36600461542e565b612be0565b348015610add57600080fd5b50610362610aec3660046154f7565b612e63565b348015610afd57600080fd5b50607654610382565b348015610b1257600080fd5b5060a954610382565b348015610b2757600080fd5b50606f546001600160a01b0316610606565b348015610b4557600080fd5b506103b5610b543660046154cb565b612ea4565b348015610b6557600080fd5b50610362610b743660046154cb565b612eb0565b348015610b8557600080fd5b50610362610b943660046159d2565b612f5a565b348015610ba557600080fd5b506105a4610bb4366004615510565b6040805180820190915260008082526020820152506001600160a01b0316600090815260776020908152604091829020825180840190935280548352600101549082015290565b348015610c0757600080fd5b5061060661308d565b348015610c1c57600080fd5b5060ad54610382565b348015610c3157600080fd5b506103b5610c40366004615510565b61309c565b610c4d611579565b6001600160a01b0316336001600160a01b031614158015610c875750610c7161308d565b6001600160a01b0316336001600160a01b031614155b15610ca85760405160016234baed60e01b0319815260040160405180910390fd5b565b6001600160a01b038281166000908152607560205260409020548116908216145b92915050565b6000610cdc60035490565b905090565b33610cea61308d565b6001600160a01b031614610d1157604051638aaf4a0760e01b815260040160405180910390fd5b6073546072548110610d3657604051638616841b60e01b815260040160405180910390fd5b610d3f8561256f565b15610d5d57604051638ad9cdf960e01b815260040160405180910390fd5b612710821115610d8057604051631b8454a360e21b815260040160405180910390fd5b60005b607354811015610e7b5760006075600060738481548110610da657610da6615a07565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250811690891603610e02578760405163fc3d8c7560e01b8152600401610df991906155fe565b60405180910390fd5b60028101546001600160a01b0390811690871603610e355785604051632d33a7e760e11b8152600401610df991906155fe565b60038101546001600160a01b0390811690861603610e6857846040516350e1263b60e01b8152600401610df991906155fe565b5080610e7381615a33565b915050610d83565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b03199081168717909155607590935292819020805483168c87169081178255938101805484168617905560028101805484168b8816908117909155600382018054909416968a1696909617909255600482018790555190939192907fd690f592ed983cfbc05717fbcf06c4e10ae328432c309fe49246cf4a4be69fcd90610f5b9089906155fe565b60405180910390a450505050505050565b6001600160a01b0382166000908152603a60205260408120548190819084811015610fa257600080600093509350935050610fe8565b60019350610fb08582615a4c565b610fbb906001615a5f565b9250610fc68561258c565b610fcf8261258c565b610fd99190615a4c565b610fe4906001615a5f565b9150505b9250925092565b610ff76130d9565b6001600160a01b0316336001600160a01b0316146110275760405162461bcd60e51b8152600401610df990615a72565b61103081613107565b50565b3361103c611fdb565b6001600160a01b031614611063576040516328b9c24b60e21b815260040160405180910390fd5b6001600160a01b0382166000908152603c6020526040902054431161109d57816040516353e0424d60e01b8152600401610df991906155fe565b6001600160a01b038216600081815260386020908152604080832085845282528083208054600160ff1991821681179092559484526037835281842086855290925290912080549092169091556110f49043615a4c565b6001600160a01b0383166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e906111439084815260200190565b60405180910390a25050565b600080600161115c610cd1565b6111669190615a4c565b90506111728382613165565b9392505050565b6001600160a01b038116600090815260ac6020526040812054610ccb9060029060ff1660038111156111ad576111ad615943565b90613190565b6000610cdc6111c1426131c3565b6003541090565b600061117283836131d2565b6111dc6153dd565b6111e58261256f565b6112025760405163a64b34ad60e01b815260040160405180910390fd5b506001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015290565b6000610ccb82436111c8565b61128b6130d9565b6001600160a01b0316336001600160a01b0316146112bb5760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b6000036112e657604051637bcd509160e01b815260040160405180910390fd5b611030816131f2565b604080518082018252600080825260209182018190526001600160a01b038416815260e88252828120835180850190945280548452600101549183018290520361134c576040516370fdd4f160e11b815260040160405180910390fd5b919050565b3361135a611fdb565b6001600160a01b031614611381576040516328b9c24b60e21b815260040160405180910390fd5b600061138b610cd1565b6001600160a01b03861660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e0909152919020549192506113d991615a5f565b60e460008282546113ea9190615a5f565b90915550506001600160a01b038516600090815260e06020908152604080832083905560e18252808320839055603a90915290205461142a90859061323d565b6001600160a01b0386166000908152603a602052604090205582156114da5760715460405163138ac02f60e11b81526000916001600160a01b031690632715805e9061147c9089908890600401615ab4565b6020604051808303816000875af115801561149b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bf9190615acd565b90508060e460008282546114d39190615a5f565b9091555050505b811561151e576001600160a01b0385166000908152603c602052604090205461150490859061323d565b6001600160a01b0386166000908152603c60205260409020555b6001600160a01b0385166000818152603a6020526040808220549051849392600080516020615f778339815191529261155e929091899160019190615ae6565b60405180910390a35050505050565b60006111728383613254565b606d546001600160a01b031690565b600054610100900460ff16158080156115a85750600054600160ff909116105b806115c25750303b1580156115c2575060005460ff166001145b6116255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610df9565b6000805460ff191660011790558015611648576000805461ff0019166101001790555b6116518d6131f2565b61165a8c61327f565b6116638b6132ca565b61166c8a613315565b61167588613360565b61167e896133ab565b611687876133f6565b6116908661342b565b61169985613460565b6116a284613107565b6116ac82356134b8565b6116b960208301356134ed565b60018390558015611704576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b606081516001600160401b0381111561172e5761172e6156e9565b604051908082528060200260200182016040528015611757578160200160208202803683370190505b50905060005b81518110156117c45761178883828151811061177b5761177b615a07565b6020026020010151613522565b82828151811061179a5761179a615a07565b6001600160a01b0390921660209283029190910190910152806117bc81615a33565b91505061175d565b50919050565b6000806117d64361258c565b831115806117f1575060008381526005602052604090205415155b600093845260056020526040909320549293915050565b6118106130d9565b6001600160a01b0316336001600160a01b0316146118405760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b60000361186b57604051637bcd509160e01b815260040160405180910390fd5b61103081613315565b606060aa546001600160401b03811115611890576118906156e9565b6040519080825280602002602001820160405280156118b9578160200160208202803683370190505b5090506000805b825181101561195757600081815260ab60205260409020546118ea906001600160a01b0316611fea565b1561194557600081815260ab60205260409020546001600160a01b0316838361191281615a33565b94508151811061192457611924615a07565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061194f81615a33565b9150506118c0565b50815290565b6119656130d9565b6001600160a01b0316336001600160a01b0316146119955760405162461bcd60e51b8152600401610df990615a72565b611030816134ed565b6060816001600160401b038111156119b8576119b86156e9565b6040519080825280602002602001820160405280156119e1578160200160208202803683370190505b50905060005b82811015611a5257611a1e848483818110611a0457611a04615a07565b9050602002016020810190611a199190615510565b61352d565b828281518110611a3057611a30615a07565b9115156020928302919091019091015280611a4a81615a33565b9150506119e7565b5092915050565b611a616130d9565b6001600160a01b0316336001600160a01b031614611a915760405162461bcd60e51b8152600401610df990615a72565b6110308161342b565b334114611aba576040516309f358fd60e01b815260040160405180910390fd5b6000611ac533611fea565b8015611ad75750611ad53361352d565b155b8015611af15750611aef33611aea610cd1565b613254565b155b606d54604051630634f5b960e01b815282151560048201526001602482015291925060009182916001600160a01b031690630634f5b9906044016060604051808303816000875af1158015611b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6e9190615b05565b92509250508060e26000828254611b859190615a5f565b90915550839050611bd7573460e46000828254611ba29190615a5f565b90915550506040513390600080516020615f5783398151915290611bca903490600190615b3c565b60405180910390a2505050565b336001600160a01b03167f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b13484604051611c12929190615b60565b60405180910390a26000611c24610cd1565b90506000611c328434615a5f565b3360009081526038602090815260408083208684529091528120549192509060ff1615611d2b576070546040805163631c8fd160e11b815290516000926001600160a01b03169163c6391fa29160048083019260809291908290030181865afa158015611ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc79190615b6e565b93505050506127108184611cdb9190615ba4565b611ce59190615bd1565b91508160e46000828254611cf99190615a5f565b90915550506040513390600080516020615f5783398151915290611d21908590600290615b3c565b60405180910390a2505b611d358183615a4c565b91506000607160009054906101000a90046001600160a01b03166001600160a01b031663c673316c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db09190615acd565b3360009081526075602052604081206004015491925090611dd19083613539565b90506000612710611de28684615ba4565b611dec9190615bd1565b33600090815260e06020526040812080549293508392909190611e10908490615a5f565b9091555060009050611e228287615a4c565b33600090815260e16020526040812080549293508392909190611e46908490615a5f565b909155505050505050505050505050565b6073546060906001600160401b03811115611e7457611e746156e9565b604051908082528060200260200182016040528015611ead57816020015b611e9a6153dd565b815260200190600190039081611e925790505b50905060005b8151811015611f83576075600060738381548110611ed357611ed3615a07565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c08201528251839083908110611f6557611f65615a07565b60200260200101819052508080611f7b90615a33565b915050611eb3565b5090565b6000805b60aa54811015611f8357600081815260ab6020526040902054611fb6906001600160a01b0316611179565b15611fc95781611fc581615a33565b9250505b80611fd381615a33565b915050611f8b565b6070546001600160a01b031690565b6001600160a01b038116600090815260ac6020526040812054610ccb9060019060ff1660038111156111ad576111ad615943565b6120266130d9565b6001600160a01b0316336001600160a01b0316146120565760405162461bcd60e51b8152600401610df990615a72565b611030816134b8565b33411461207f576040516309f358fd60e01b815260040160405180910390fd5b612088436122bf565b6120a557604051636c74eecf60e01b815260040160405180910390fd5b6120ae4361258c565b6120b960025461258c565b106120d757604051632458f64160e01b815260040160405180910390fd5b4360025560006120e6426131c3565b905060006120f5826003541090565b905060006121016129a0565b50509050606060006121124361258c565b90506000612121826001615a5f565b9050600061212d610cd1565b905085156122595761213f8186613548565b60008061214c83886138d3565b9150915061215c83888484613b05565b612164613c0e565b61216c613d69565b607054604051631da0214360e21b81526001600160a01b0390911690637680850c9061219e908a908790600401615be5565b600060405180830381600087803b1580156121b857600080fd5b505af11580156121cc573d6000803e3d6000fd5b505050506121d989613e8b565b8051919850965015612248576070546040516303e1697b60e11b81526001600160a01b03909116906307c2d2f690612215908990600401615834565b600060405180830381600087803b15801561222f57600080fd5b505af1158015612243573d6000803e3d6000fd5b505050505b612253436001615a5f565b60045550505b612264878387614016565b82817f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce788604051612299911515815260200190565b60405180910390a350600090815260056020526040902085905550505060039190915550565b6000600180546122cf9190615a4c565b6001546122dc9084615c07565b1492915050565b6122eb6130d9565b6001600160a01b0316336001600160a01b03161461231b5760405162461bcd60e51b8152600401610df990615a72565b611030816133f6565b60008061232f610cd1565b90506111728382613254565b600080600061234a8443610f6c565b9250925092509193909250565b606060aa546001600160401b03811115612373576123736156e9565b60405190808252806020026020018201604052801561239c578160200160208202803683370190505b5090506000805b825181101561195757600081815260ab60205260409020546123cd906001600160a01b0316611179565b1561243157600081815260ab60205260409020546123f3906001600160a01b0316613522565b83836123fe81615a33565b94508151811061241057612410615a07565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061243b81615a33565b9150506123a3565b61244b6130d9565b6001600160a01b0316336001600160a01b03161461247b5760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b6000036124a657604051637bcd509160e01b815260040160405180910390fd5b61103081613360565b6124b76130d9565b6001600160a01b0316336001600160a01b0316146124e75760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b60000361251257604051637bcd509160e01b815260040160405180910390fd5b6110308161327f565b6000805b60aa54811015611f8357600081815260ab602052604090205461254a906001600160a01b0316611fea565b1561255d578161255981615a33565b9250505b8061256781615a33565b91505061251f565b6001600160a01b0316600090815260746020526040902054151590565b6000610ccb826143db565b336125a061308d565b6001600160a01b0316146125c757604051638aaf4a0760e01b815260040160405180910390fd5b6001600160a01b038216600090815260e8602052604090206001810154156126025760405163057aab3160e31b815260040160405180910390fd5b600061260e8342615a5f565b6001600160a01b038516600090815260756020526040902090915061263390826143f6565b6001600160a01b0384166000908152603b6020908152604080832084905560399091528120600191612663610cd1565b8152602081019190915260409081016000908120805460ff19169315159390931790925560715460e554915163138ac02f60e11b81526001600160a01b0390911691632715805e916126b9918991600401615ab4565b6020604051808303816000875af11580156126d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc9190615acd565b905080156127f957600060e654426127149190615a5f565b60e78054600180820183556000929092527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a10180546001600160a01b0319166001600160a01b038a16179055838655850181905590506127726130d9565b6001600160a01b0387811660008181526075602052604090819020600201549051630a2fae5760e41b81526004810192909252821660248201524260448201526064810184905291169063a2fae57090608401600060405180830381600087803b1580156127df57600080fd5b505af11580156127f3573d6000803e3d6000fd5b50505050505b846001600160a01b03167f77a1a819870c0f4d04c3ca4cc2881a0393136abc28bd651af50aedade94a27c48260405161283491815260200190565b60405180910390a25050505050565b61284b6130d9565b6001600160a01b0316336001600160a01b03161461287b5760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b6000036128a657604051637bcd509160e01b815260040160405180910390fd5b611030816132ca565b6000805b60aa548110156117c457600081815260ab60205260409020546001600160a01b03808516916128e29116613522565b6001600160a01b03161480156129145750600081815260ab6020526040902054612914906001600160a01b0316611179565b1561292257600191506117c4565b8061292c81615a33565b9150506128b3565b61293c6130d9565b6001600160a01b0316336001600160a01b03161461296c5760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b60000361299757604051637bcd509160e01b815260040160405180910390fd5b611030816133ab565b606080606060aa546001600160401b038111156129bf576129bf6156e9565b6040519080825280602002602001820160405280156129e8578160200160208202803683370190505b50925060aa546001600160401b03811115612a0557612a056156e9565b604051908082528060200260200182016040528015612a2e578160200160208202803683370190505b50915060aa546001600160401b03811115612a4b57612a4b6156e9565b604051908082528060200260200182016040528015612a74578160200160208202803683370190505b50905060005b8351811015612b7857600081815260ab602052604090205484516001600160a01b03909116908190869084908110612ab457612ab4615a07565b60200260200101906001600160a01b031690816001600160a01b031681525050612add81613522565b848381518110612aef57612aef615a07565b6001600160a01b03928316602091820292909201810191909152908216600090815260ac9091526040902054835160ff90911690849084908110612b3557612b35615a07565b60200260200101906003811115612b4e57612b4e615943565b90816003811115612b6157612b61615943565b905250819050612b7081615a33565b915050612a7a565b50909192565b60606073805480602002602001604051908101604052809291908181526020018280548015612bd657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612bb8575b5050505050905090565b612be86130d9565b6001600160a01b0316336001600160a01b031614612c185760405162461bcd60e51b8152600401610df990615a72565b6001600160a01b038216600090815260e8602052604090206001015415612e5f5760e7548060005b82811015612c9957846001600160a01b031660e78281548110612c6557612c65615a07565b6000918252602090912001546001600160a01b031603612c8757809150612c99565b80612c9181615a33565b915050612c40565b50818103612ca75750505050565b6001600160a01b038416600090815260e860205260409020548015612e5b576001600160a01b038516600090815260e860205260408120818155600190810191909155831115612d695760e7612cfe600185615a4c565b81548110612d0e57612d0e615a07565b60009182526020909120015460e780546001600160a01b039092169184908110612d3a57612d3a615a07565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480612d7a57612d7a615c1b565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260e9905260409020805460ff19166001179055612dcc84826104b0614472565b15612e1657836001600160a01b0316856001600160a01b03167f7229136a18186c71a86246c012af3bb1df6460ef163934bbdccd6368abdd41e48360405161155e91815260200190565b836001600160a01b0316856001600160a01b03167f3747d14eb72ad3e35cba9c3e00dab3b8d15b40cac6bdbd08402356e4f69f30a1834760405161155e929190615b60565b5050505b5050565b612e6b6130d9565b6001600160a01b0316336001600160a01b031614612e9b5760405162461bcd60e51b8152600401610df990615a72565b61103081613460565b60006111728383613165565b33612eb961308d565b6001600160a01b031614612ee057604051638aaf4a0760e01b815260040160405180910390fd5b612ee9826144d2565b15612f075760405163030081e760e01b815260040160405180910390fd5b6001600160a01b0382166000908152607560205260409020600581015415612f425760405163fab9167360e01b815260040160405180910390fd5b612f5581612f508442615a5f565b6143f6565b505050565b33612f6361308d565b6001600160a01b031614612f8a57604051638aaf4a0760e01b815260040160405180910390fd5b6001600160a01b03831660009081526077602052604090205415612fc157604051632f32dcdd60e11b815260040160405180910390fd5b612710811115612fe457604051631b8454a360e21b815260040160405180910390fd5b6076548210156130075760405163fa0ae69360e01b815260040160405180910390fd5b6001600160a01b038316600090815260776020526040812090620151808461302f8242615bd1565b6130399190615a5f565b6130439190615ba4565b808355600183018490556040519091506001600160a01b038616907f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f21906128349084908790615b60565b6071546001600160a01b031690565b6001600160a01b038116600090815260ac60205260408120546130d29060ff1660038111156130cd576130cd615943565b61454f565b1592915050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001811015613129576040516317b8970f60e01b815260040160405180910390fd5b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a25267906020015b60405180910390a150565b6001600160a01b03919091166000908152603960209081526040808320938352929052205460ff1690565b60008160038111156131a4576131a4615943565b8360038111156131b6576131b6615943565b1660ff1615159392505050565b6000610ccb6201518083615bd1565b6001600160a01b03919091166000908152603a6020526040902054101590565b607080546001600160a01b0319166001600160a01b0383161790556040517faa5b07dd43aa44c69b70a6a2b9c3fcfed12b6e5f6323596ba7ac91035ab80a4f9061315a9083906155fe565b60008183101561324d5781611172565b5090919050565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b607180546001600160a01b0319166001600160a01b0383161790556040517f6397f5b135542bb3f477cb346cfab5abdec1251d08dc8f8d4efb4ffe122ea0bf9061315a9083906155fe565b606d80546001600160a01b0319166001600160a01b0383161790556040517fc328090a37d855191ab58469296f98f87a851ca57d5cdfd1e9ac3c83e9e7096d9061315a9083906155fe565b606f80546001600160a01b0319166001600160a01b0383161790556040517f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b9061315a9083906155fe565b606e80546001600160a01b0319166001600160a01b0383161790556040517f034c8da497df28467c79ddadbba1cc3cdd41f510ea73faae271e6f16a61116219061315a9083906155fe565b60a880546001600160a01b0319166001600160a01b0383161790556040517ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d79061315a9083906155fe565b60a98190556040518181527fb5464c05fd0e0f000c535850116cda2742ee1f7b34384cb920ad7b8e802138b59060200161315a565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab49060200161315a565b60a954811115613483576040516355408ce960e11b815260040160405180910390fd5b60ad8190556040518181527fa9588dc77416849bd922605ce4fc806712281ad8a8f32d4238d6c8cca548e15e9060200161315a565b60e58190556040518181527f17a6c3eb965cdd7439982da25abf85be88f0f772ca33198f548e2f99fee0289a9060200161315a565b60e68190556040518181527f0a50c66137118f386332efb949231ddd3946100dbf880003daca37ddd9e0662b9060200161315a565b6000610ccb8261456d565b6000610ccb82436131d2565b600081831061324d5781611172565b606e5460405163889998ef60e01b8152600481018490526000916001600160a01b03169063889998ef90602401602060405180830381865afa158015613592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b69190615acd565b606e5460405163033cdc2b60e31b8152600481018690529192506000916001600160a01b03909116906319e6e15890602401602060405180830381865afa158015613605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136299190615acd565b606e549091506000906001600160a01b031663f67e81528661364a87611713565b6040518363ffffffff1660e01b8152600401613667929190615c31565b600060405180830381865afa158015613684573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136ac9190810190615c52565b90506136b9838383614592565b15806136c3575081155b156137405760005b845181101561373857845160e2546136e39190615bd1565b60e360008784815181106136f9576136f9615a07565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061373090615a33565b9150506136cb565b505050505050565b600080600080607060009054906101000a90046001600160a01b03166001600160a01b0316631079402a6040518163ffffffff1660e01b8152600401608060405180830381865afa158015613799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137bd9190615b6e565b9296509094509250905080861160005b89518110156138c657888782815181106137e9576137e9615a07565b602002602001015160e2546137fe9190615ba4565b6138089190615bd1565b60e360008c848151811061381e5761381e615a07565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555081156138b4576138b48b8b838151811061386657613866615a07565b60200260200101518a6127108b868151811061388457613884615a07565b60200260200101516138969190615ba4565b6138a09190615bd1565b6138ac90612710615a4c565b878a8a61464b565b806138be81615a33565b9150506137cd565b5050505050505050505050565b6000606060008084516001600160401b038111156138f3576138f36156e9565b60405190808252806020026020018201604052801561391c578160200160208202803683370190505b50925060005b8551811015613af55785818151811061393d5761393d615a07565b6020908102919091018101516001600160a01b03808216600090815260759093526040909220600201549094501691506139778388613165565b6139aa576001600160a01b038084166000908152607560205260409020600301546139a591859116846148b8565b6139dc565b6001600160a01b038316600090815260e3602052604081205460e48054919290916139d6908490615a5f565b90915550505b6139e58361352d565b1580156139f957506139f78388613254565b155b15613a6d576001600160a01b038316600090815260e16020526040902054613a219086615a5f565b6001600160a01b038416600090815260e16020526040902054855191965090859083908110613a5257613a52615a07565b602002602001018181525050613a688383614995565b613ab3565b6001600160a01b038316600090815260e1602090815260408083205460e090925290912054613a9c9190615a5f565b60e46000828254613aad9190615a5f565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e390915281205580613aed81615a33565b915050613922565b5060e26000905550509250929050565b6071546001600160a01b03168215612e5b57613b218184614a5d565b15613bc95760405163566bce2360e11b81526001600160a01b0382169063acd79c4690613b5690879086908a90600401615d07565b600060405180830381600087803b158015613b7057600080fd5b505af1158015613b84573d6000803e3d6000fd5b505050507f9e242ca1ef9dde96eb71ef8d19a3f0f6a619b63e4c0d3998771387103656d087838584604051613bbb93929190615d3d565b60405180910390a150613c08565b7fe5668ec1bb2b6bb144a50f810e388da4b1d7d3fc05fcb9d588a1aac59d248f8983858447604051613bfe9493929190615d72565b60405180910390a1505b50505050565b60e754600080805b83831015613c085760e78381548110613c3157613c31615a07565b60009182526020808320909101546001600160a01b031680835260e89091526040909120600181015491935091504210613d5757805460e48054600090613c79908490615a5f565b90915550506001600160a01b038216600090815260e860205260408120818155600101819055613ca885615daf565b9450841115613d1f5760e78481548110613cc457613cc4615a07565b60009182526020909120015460e780546001600160a01b039092169185908110613cf057613cf0615a07565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480613d3057613d30615c1b565b600082815260209020810160001990810180546001600160a01b0319169055019055613c16565b82613d6181615a33565b935050613c16565b60e4548015611030576000613d7c611579565b600060e481905560408051600481526024810182526020810180516001600160e01b03166359f778df60e01b179052905192935090916001600160a01b038416918591613dc99190615dc6565b60006040518083038185875af1925050503d8060008114613e06576040519150601f19603f3d011682016040523d82523d6000602084013e613e0b565b606091505b505090508015613e5057816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc884604051611bca91815260200190565b816001600160a01b03167fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b738447604051611bca929190615b60565b606080613e9783614ab9565b6071546040516391f8723f60e01b81529192506000916001600160a01b03909116906391f8723f90613ece90607390600401615df5565b600060405180830381865afa158015613eeb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f139190810190615c52565b60a854604051632907e73160e11b81529192506000916001600160a01b039091169063520fce6290613f4a90607390600401615df5565b600060405180830381865afa158015613f67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f8f9190810190615c52565b90506000613ffe6073805480602002602001604051908101604052809291908181526020018280548015613fec57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613fce575b5050505050848460a95460ad54614fac565b909550905061400e858288615076565b505050915091565b606f546000906001600160a01b031663fdadda8183614036436001615a5f565b6040518363ffffffff1660e01b8152600401614053929190615be5565b600060405180830381865afa158015614070573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140989190810190615e39565b905060005b82518110156143545760008382815181106140ba576140ba615a07565b6020908102919091018101516001600160a01b0381166000908152603b9092526040822054909250421115906140ef83611fea565b905060006140fc8461352d565b8061411d575085858151811061411457614114615a07565b60200260200101515b806141255750825b159050811580156141335750805b156141ae576001600160a01b038416600090815260ac60205260409020546141729060019060ff16600381111561416c5761416c615943565b906151d4565b6001600160a01b038516600090815260ac60205260409020805460ff191660018360038111156141a4576141a4615943565b0217905550614230565b8180156141b9575080155b15614230576001600160a01b038416600090815260ac60205260409020546141f89060019060ff1660038111156141f2576141f2615943565b9061520f565b6001600160a01b038516600090815260ac60205260409020805460ff1916600183600381111561422a5761422a615943565b02179055505b600061423b85611179565b905083158115801561424a5750805b156142bf576001600160a01b038616600090815260ac60205260409020546142839060029060ff16600381111561416c5761416c615943565b6001600160a01b038716600090815260ac60205260409020805460ff191660018360038111156142b5576142b5615943565b021790555061433b565b8180156142ca575080155b1561433b576001600160a01b038616600090815260ac60205260409020546143039060029060ff1660038111156141f2576141f2615943565b6001600160a01b038716600090815260ac60205260409020805460ff1916600183600381111561433557614335615943565b02179055505b505050505050808061434c90615a33565b91505061409d565b5082847f283b50d76057d5f828df85bc87724c6af604e9b55c363a07c9faa2a2cd688b82614380611874565b60405161438d9190615834565b60405180910390a382847f773d1888df530d69716b183a92450d45f97fba49f2a4bb34fae3b23da0e2cc6f6143c0612357565b6040516143cd9190615834565b60405180910390a350505050565b6000600154826143eb9190615bd1565b610ccb906001615a5f565b600182015461440d906001600160a01b031661256f565b61442a5760405163a64b34ad60e01b815260040160405180910390fd5b6005820181905560018201546040518281526001600160a01b03909116907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e790602001611143565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d80600081146144c2576040519150601f19603f3d011682016040523d82523d6000602084013e6144c7565b606091505b509095945050505050565b60a85460405163107fbb4760e21b815260009182916001600160a01b03909116906341feed1c906145079086906004016155fe565b602060405180830381865afa158015614524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145489190615acd565b1192915050565b600081600381111561456357614563615943565b60ff161592915050565b6001600160a01b03808216600090815260756020526040812060030154909116610ccb565b60016000805b835181101561460457848482815181106145b4576145b4615a07565b602002602001015111156145cb5760009250614604565b8381815181106145dd576145dd615a07565b6020026020010151826145f09190615a5f565b9150806145fc81615a33565b915050614598565b508180156146125750848111155b915081614643576040517f64ba7143ea5a17abea37667aa9ae137e3afba5033c5f504770c02829c128189c90600090a15b509392505050565b8084106147d4576001600160a01b03851660008181526039602090815260408083208a845282528083208054600160ff199182168117909255948452603783528184208b855290925290912080549092161790556146ca6146ac8443615a5f565b6001600160a01b0387166000908152603a602052604090205461323d565b6001600160a01b0386166000908152603a602052604090205561470e6146f08443615a5f565b6001600160a01b0387166000908152603c602052604090205461323d565b6001600160a01b038087166000908152603c60205260409081902092909255607054915163c008ce3960e01b815291169063c008ce39906147589088906002908b90600401615ec7565b600060405180830381600087803b15801561477257600080fd5b505af1158015614786573d6000803e3d6000fd5b5050506001600160a01b0386166000818152603a60205260408082205490518a9450600080516020615f77833981519152926147c792916001908190615ae6565b60405180910390a3613738565b818410613738576001600160a01b0380861660009081526039602090815260408083208a845290915290819020805460ff19166001908117909155607054915163c008ce3960e01b8152919092169163c008ce39916148399189918b90600401615ec7565b600060405180830381600087803b15801561485357600080fd5b505af1158015614867573d6000803e3d6000fd5b5050506001600160a01b0386166000818152603a60205260408082205490518a9450600080516020615f77833981519152926148a892918190600190615ae6565b60405180910390a3505050505050565b6001600160a01b038316600090815260e360205260409020548015613c08576148e482826104b0614472565b1561494657816001600160a01b0316836001600160a01b0316856001600160a01b03167f72a57dc38837a1cba7881b7b1a5594d9e6b65cec6a985b54e2cee3e89369691c8460405161493891815260200190565b60405180910390a450505050565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fd35d76d87d51ed89407fc7ceaaccf32cf72784b94530892ce33546540e141b728447604051614938929190615b60565b6001600160a01b038216600090815260e060205260409020548015612f55576149c182826104b0614472565b15614a1857816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec83604051614a0b91815260200190565b60405180910390a3505050565b816001600160a01b0316836001600160a01b03167f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e8347604051614a0b929190615b60565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614aaa576040519150601f19603f3d011682016040523d82523d6000602084013e614aaf565b606091505b5090949350505050565b6071546040805163af24542960e01b815290516060926001600160a01b031691600091839163af2454299160048083019260209291908290030181865afa158015614b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2c9190615acd565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b929190615acd565b90506000836001600160a01b03166342ef3c3460736040518263ffffffff1660e01b8152600401614bc39190615df5565b600060405180830381865afa158015614be0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614c089190810190615c52565b6073549091506000816001600160401b03811115614c2857614c286156e9565b604051908082528060200260200182016040528015614c51578160200160208202803683370190505b50965060008060005b84831015614efd5760738381548110614c7557614c75615a07565b60009182526020808320909101546001600160a01b031680835260759091526040909120600681015488519294509092501515908890889086908110614cbd57614cbd615a07565b60200260200101511015614d195780614d14576000614cdc8a42615a5f565b600684018190556040518181529091506001600160a01b03851690600080516020615f378339815191529060200160405180910390a2505b614d5a565b8015614d5a578160060160009055826001600160a01b0316600080516020615f378339815191526000604051614d5191815260200190565b60405180910390a25b60008260050154600014158015614d75575042836005015411155b80614d9857506001600160a01b038416600090815260e9602052604090205460ff165b905060008360060154600014158015614db5575042846006015411155b90508180614dc05750805b15614e565788614dcf89615daf565b98508881518110614de257614de2615a07565b6020026020010151898781518110614dfc57614dfc615a07565b6020908102919091010152848d88614e1381615a33565b995081518110614e2557614e25615a07565b60200260200101906001600160a01b031690816001600160a01b031681525050614e4e8561524b565b505050614c5a565b6001600160a01b0385166000908152607760205260409020548015801590614e7e5750428111155b15614ee7576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b86614ef181615a33565b97505050505050614c5a565b5050508087528015614fa1577f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c9187604051614f389190615834565b60405180910390a160405163e22d1c9d60e01b81526001600160a01b0387169063e22d1c9d90614f6e908a908c90600401615be5565b600060405180830381600087803b158015614f8857600080fd5b505af1158015614f9c573d6000803e3d6000fd5b505050505b505050505050919050565b60606000806068905060008888888888604051602401614fd0959493929190615ee8565b60408051601f19818403018152919052602080820180516001600160e01b0316633bca0a8960e11b17905281518b51929350600192909160009161501391615ba4565b61501e906040615a5f565b90506020840181888483895afa61503457600093505b503d61503f57600092505b6020870196508261506357604051630fc2632160e01b815260040160405180910390fd5b8651955050505050509550959350505050565b815b60aa548110156150d457600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b0319169055806150cc81615a33565b915050615078565b5060005b8281101561511e57600081815260ab60209081526040808320546001600160a01b0316835260ac9091529020805460ff191690558061511681615a33565b9150506150d8565b5060005b8281101561519c57600084828151811061513e5761513e615a07565b6020908102919091018101516001600160a01b0316600081815260ac83526040808220805460ff1916600317905585825260ab9093529190912080546001600160a01b0319169091179055508061519481615a33565b915050615122565b508160aa81905550807f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e84604051611bca9190615834565b60008160038111156151e8576151e8615943565b8360038111156151fa576151fa615943565b1760ff16600381111561117257611172615943565b600081600381111561522357615223615943565b1983600381111561523657615236615943565b1660ff16600381111561117257611172615943565b6001600160a01b038116600090815260e960209081526040808320805460ff19169055607490915281205461103091839190819003615288575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b03199081168255600180830180548316905560028301805483169055600383018054909216909155600482018590556005820185905560069091018490556074835281842084905560779092528220828155810182905560738054909161531291615a4c565b8154811061532257615322615a07565b6000918252602090912001546001600160a01b039081169150831681146153a5576001600160a01b038116600090815260746020526040902082905560738054829190841990811061537657615376615a07565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60738054806153b6576153b6615c1b565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6001600160a01b038116811461103057600080fd5b6000806040838503121561544157600080fd5b823561544c81615419565b9150602083013561545c81615419565b809150509250929050565b600080600080600060a0868803121561547f57600080fd5b853561548a81615419565b9450602086013561549a81615419565b935060408601356154aa81615419565b925060608601356154ba81615419565b949793965091946080013592915050565b600080604083850312156154de57600080fd5b82356154e981615419565b946020939093013593505050565b60006020828403121561550957600080fd5b5035919050565b60006020828403121561552257600080fd5b813561117281615419565b60018060a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60e08101610ccb828461552d565b815181526020808301519082015260408101610ccb565b801515811461103057600080fd5b600080600080608085870312156155ca57600080fd5b84356155d581615419565b9350602085013592506040850135915060608501356155f3816155a6565b939692955090935050565b6001600160a01b0391909116815260200190565b8060408101831015610ccb57600080fd5b6000806000806000806000806000806000806101a08d8f03121561564657600080fd5b8c3561565181615419565b9b5060208d013561566181615419565b9a5060408d013561567181615419565b995060608d013561568181615419565b985060808d013561569181615419565b975060a08d01356156a181615419565b965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d013591506156d78e6101608f01615612565b90509295989b509295989b509295989b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715615727576157276156e9565b604052919050565b60006001600160401b03821115615748576157486156e9565b5060051b60200190565b6000602080838503121561576557600080fd5b82356001600160401b0381111561577b57600080fd5b8301601f8101851361578c57600080fd5b803561579f61579a8261572f565b6156ff565b81815260059190911b820183019083810190878311156157be57600080fd5b928401925b828410156157e55783356157d681615419565b825292840192908401906157c3565b979650505050505050565b600081518084526020808501945080840160005b838110156158295781516001600160a01b031687529582019590820190600101615804565b509495945050505050565b60208152600061117260208301846157f0565b6000806020838503121561585a57600080fd5b82356001600160401b038082111561587157600080fd5b818501915085601f83011261588557600080fd5b81358181111561589457600080fd5b8660208260051b85010111156158a957600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b818110156158f55783511515835292840192918401916001016158d7565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156158f55761593083855161552d565b9284019260e0929092019160010161591d565b634e487b7160e01b600052602160045260246000fd5b60608152600061596c60608301866157f0565b60208382038185015261597f82876157f0565b8481036040860152855180825282870193509082019060005b818110156159c4578451600481106159b2576159b2615943565b83529383019391830191600101615998565b509098975050505050505050565b6000806000606084860312156159e757600080fd5b83356159f281615419565b95602085013595506040909401359392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615a4557615a45615a1d565b5060010190565b81810381811115610ccb57610ccb615a1d565b80820180821115610ccb57610ccb615a1d565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b6001600160a01b03929092168252602082015260400190565b600060208284031215615adf57600080fd5b5051919050565b9384526020840192909252151560408301521515606082015260800190565b600080600060608486031215615b1a57600080fd5b8351615b25816155a6565b602085015160409095015190969495509392505050565b8281526040810160038310615b5357615b53615943565b8260208301529392505050565b918252602082015260400190565b60008060008060808587031215615b8457600080fd5b505082516020840151604085015160609095015191969095509092509050565b8082028115828204841417610ccb57610ccb615a1d565b634e487b7160e01b600052601260045260246000fd5b600082615be057615be0615bbb565b500490565b604081526000615bf860408301856157f0565b90508260208301529392505050565b600082615c1657615c16615bbb565b500690565b634e487b7160e01b600052603160045260246000fd5b828152604060208201526000615c4a60408301846157f0565b949350505050565b60006020808385031215615c6557600080fd5b82516001600160401b03811115615c7b57600080fd5b8301601f81018513615c8c57600080fd5b8051615c9a61579a8261572f565b81815260059190911b82018301908381019087831115615cb957600080fd5b928401925b828410156157e557835182529284019290840190615cbe565b600081518084526020808501945080840160005b8381101561582957815187529582019590820190600101615ceb565b606081526000615d1a60608301866157f0565b8281036020840152615d2c8186615cd7565b915050826040830152949350505050565b838152606060208201526000615d5660608301856157f0565b8281036040840152615d688185615cd7565b9695505050505050565b848152608060208201526000615d8b60808301866157f0565b8281036040840152615d9d8186615cd7565b91505082606083015295945050505050565b600081615dbe57615dbe615a1d565b506000190190565b6000825160005b81811015615de75760208186018101518583015201615dcd565b506000920191825250919050565b6020808252825482820181905260008481528281209092916040850190845b818110156158f55783546001600160a01b031683526001938401939285019201615e14565b60006020808385031215615e4c57600080fd5b82516001600160401b03811115615e6257600080fd5b8301601f81018513615e7357600080fd5b8051615e8161579a8261572f565b81815260059190911b82018301908381019087831115615ea057600080fd5b928401925b828410156157e5578351615eb8816155a6565b82529284019290840190615ea5565b6001600160a01b039390931683526020830191909152604082015260600190565b60a081526000615efb60a08301886157f0565b8281036020840152615f0d8188615cd7565b90508281036040840152615f218187615cd7565b6060840195909552505060800152939250505056fe88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342754042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68aa264697066735822122056ba1e30ea69f53e18ae0fcc8fb00b1ee0eb05eb676c1c7bf5666f712fa8752264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103555760003560e01c806365244ece116101b957806365244ece146108075780636558954f146108275780636611f8431461083e578063690b75361461085e5780636aa1c2ef1461087357806372e46810146108885780637593ff7114610890578063823a7b9c146108b0578063873a5a70146108d057806387c891bd146108f05780638d559c381461090557806396585fc2146109195780639b19dbfd146109395780639c8d98da1461094e5780639dd373b91461096e5780639e94b9ec1461098e578063a0c3f2d2146109a3578063a3d545f5146109c3578063a66c0f77146109e3578063a7c2f119146109f8578063ad29578314610a18578063b405aaf214610a38578063b5e337de14610a58578063b7ab4db514610a78578063ba77b06c14610a9c578063c3c8b5d614610ab1578063c94aaa0214610ad1578063cba44de914610af1578063d09f1ab414610b06578063d2cb215e14610b1b578063d5a0744f14610b39578063dd716ad314610b59578063e5125a1d14610b79578063edb194bb14610b99578063ee99205c14610bfb578063eeb629a814610c10578063facd743b14610c2557610364565b8063038278841461036c57806304d971ab1461039557806306040618146103c55780630f43a677146103da5780631104e528146103f057806311662dc2146104105780631196ab661461044d57806315b5ebde1461046d5780631ab4a34c1461048d5780631f628801146104ad578063217f35c2146104cd57806323c65eb0146104e257806328bde1e1146105025780632924de711461052f578063297a8fca1461054f5780632bcf3d15146105645780632d784a98146105845780632f78204c146105b157806331a8aef5146105d15780633529214b146105f1578063367ec12b146106135780633b3159b6146106335780634244d4c9146106475780634493421e14610674578063468c96ae1461069257806346fe9311146106c957806349096d26146106e95780634d8df063146106fe5780634de2b7351461071e5780634ee4d72b1461074b5780634f2a693f1461076057806352091f17146107805780635248184a146107885780635511cde1146107aa578063562d5304146107c85780635a08482d146107dd578063605239a1146107f257610364565b3661036457610362610c45565b005b610362610c45565b34801561037857600080fd5b506103826104b081565b6040519081526020015b60405180910390f35b3480156103a157600080fd5b506103b56103b036600461542e565b610caa565b604051901515815260200161038c565b3480156103d157600080fd5b50610382610cd1565b3480156103e657600080fd5b5061038260aa5481565b3480156103fc57600080fd5b5061036261040b366004615467565b610ce1565b34801561041c57600080fd5b5061043061042b3660046154cb565b610f6c565b60408051931515845260208401929092529082015260600161038c565b34801561045957600080fd5b506103626104683660046154f7565b610fef565b34801561047957600080fd5b506103626104883660046154cb565b611033565b34801561049957600080fd5b506103b56104a8366004615510565b61114f565b3480156104b957600080fd5b506103b56104c8366004615510565b611179565b3480156104d957600080fd5b506103b56111b3565b3480156104ee57600080fd5b506103b56104fd3660046154cb565b6111c8565b34801561050e57600080fd5b5061052261051d366004615510565b6111d4565b60405161038c9190615581565b34801561053b57600080fd5b506103b561054a366004615510565b611277565b34801561055b57600080fd5b50600454610382565b34801561057057600080fd5b5061036261057f366004615510565b611283565b34801561059057600080fd5b506105a461059f366004615510565b6112ef565b60405161038c919061558f565b3480156105bd57600080fd5b506103626105cc3660046155b4565b611351565b3480156105dd57600080fd5b506103b56105ec3660046154cb565b61156d565b3480156105fd57600080fd5b50610606611579565b60405161038c91906155fe565b34801561061f57600080fd5b5061036261062e366004615623565b611588565b34801561063f57600080fd5b506068610606565b34801561065357600080fd5b50610667610662366004615752565b611713565b60405161038c9190615834565b34801561068057600080fd5b50606e546001600160a01b0316610606565b34801561069e57600080fd5b506106b26106ad3660046154f7565b6117ca565b60408051921515835260208301919091520161038c565b3480156106d557600080fd5b506103626106e4366004615510565b611808565b3480156106f557600080fd5b50610667611874565b34801561070a57600080fd5b506103626107193660046154f7565b61195d565b34801561072a57600080fd5b5061073e610739366004615847565b61199e565b60405161038c91906158bb565b34801561075757600080fd5b5060e454610382565b34801561076c57600080fd5b5061036261077b3660046154f7565b611a59565b610362611a9a565b34801561079457600080fd5b5061079d611e57565b60405161038c9190615901565b3480156107b657600080fd5b5060a8546001600160a01b0316610606565b3480156107d457600080fd5b50610382611f87565b3480156107e957600080fd5b50610606611fdb565b3480156107fe57600080fd5b50607254610382565b34801561081357600080fd5b506103b5610822366004615510565b611fea565b34801561083357600080fd5b506103826201518081565b34801561084a57600080fd5b506103626108593660046154f7565b61201e565b34801561086a57600080fd5b5060e554610382565b34801561087f57600080fd5b50600154610382565b61036261205f565b34801561089c57600080fd5b506103b56108ab3660046154f7565b6122bf565b3480156108bc57600080fd5b506103626108cb3660046154f7565b6122e3565b3480156108dc57600080fd5b506103b56108eb366004615510565b612324565b3480156108fc57600080fd5b50600254610382565b34801561091157600080fd5b506066610606565b34801561092557600080fd5b50610430610934366004615510565b61233b565b34801561094557600080fd5b50610667612357565b34801561095a57600080fd5b50610362610969366004615510565b612443565b34801561097a57600080fd5b50610362610989366004615510565b6124af565b34801561099a57600080fd5b5061038261251b565b3480156109af57600080fd5b506103b56109be366004615510565b61256f565b3480156109cf57600080fd5b506103826109de3660046154f7565b61258c565b3480156109ef57600080fd5b5060e654610382565b348015610a0457600080fd5b50610362610a133660046154cb565b612597565b348015610a2457600080fd5b50610362610a33366004615510565b612843565b348015610a4457600080fd5b506103b5610a53366004615510565b6128af565b348015610a6457600080fd5b50610362610a73366004615510565b612934565b348015610a8457600080fd5b50610a8d6129a0565b60405161038c93929190615959565b348015610aa857600080fd5b50610667612b7e565b348015610abd57600080fd5b50610362610acc36600461542e565b612be0565b348015610add57600080fd5b50610362610aec3660046154f7565b612e63565b348015610afd57600080fd5b50607654610382565b348015610b1257600080fd5b5060a954610382565b348015610b2757600080fd5b50606f546001600160a01b0316610606565b348015610b4557600080fd5b506103b5610b543660046154cb565b612ea4565b348015610b6557600080fd5b50610362610b743660046154cb565b612eb0565b348015610b8557600080fd5b50610362610b943660046159d2565b612f5a565b348015610ba557600080fd5b506105a4610bb4366004615510565b6040805180820190915260008082526020820152506001600160a01b0316600090815260776020908152604091829020825180840190935280548352600101549082015290565b348015610c0757600080fd5b5061060661308d565b348015610c1c57600080fd5b5060ad54610382565b348015610c3157600080fd5b506103b5610c40366004615510565b61309c565b610c4d611579565b6001600160a01b0316336001600160a01b031614158015610c875750610c7161308d565b6001600160a01b0316336001600160a01b031614155b15610ca85760405160016234baed60e01b0319815260040160405180910390fd5b565b6001600160a01b038281166000908152607560205260409020548116908216145b92915050565b6000610cdc60035490565b905090565b33610cea61308d565b6001600160a01b031614610d1157604051638aaf4a0760e01b815260040160405180910390fd5b6073546072548110610d3657604051638616841b60e01b815260040160405180910390fd5b610d3f8561256f565b15610d5d57604051638ad9cdf960e01b815260040160405180910390fd5b612710821115610d8057604051631b8454a360e21b815260040160405180910390fd5b60005b607354811015610e7b5760006075600060738481548110610da657610da6615a07565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250811690891603610e02578760405163fc3d8c7560e01b8152600401610df991906155fe565b60405180910390fd5b60028101546001600160a01b0390811690871603610e355785604051632d33a7e760e11b8152600401610df991906155fe565b60038101546001600160a01b0390811690861603610e6857846040516350e1263b60e01b8152600401610df991906155fe565b5080610e7381615a33565b915050610d83565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b03199081168717909155607590935292819020805483168c87169081178255938101805484168617905560028101805484168b8816908117909155600382018054909416968a1696909617909255600482018790555190939192907fd690f592ed983cfbc05717fbcf06c4e10ae328432c309fe49246cf4a4be69fcd90610f5b9089906155fe565b60405180910390a450505050505050565b6001600160a01b0382166000908152603a60205260408120548190819084811015610fa257600080600093509350935050610fe8565b60019350610fb08582615a4c565b610fbb906001615a5f565b9250610fc68561258c565b610fcf8261258c565b610fd99190615a4c565b610fe4906001615a5f565b9150505b9250925092565b610ff76130d9565b6001600160a01b0316336001600160a01b0316146110275760405162461bcd60e51b8152600401610df990615a72565b61103081613107565b50565b3361103c611fdb565b6001600160a01b031614611063576040516328b9c24b60e21b815260040160405180910390fd5b6001600160a01b0382166000908152603c6020526040902054431161109d57816040516353e0424d60e01b8152600401610df991906155fe565b6001600160a01b038216600081815260386020908152604080832085845282528083208054600160ff1991821681179092559484526037835281842086855290925290912080549092169091556110f49043615a4c565b6001600160a01b0383166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e906111439084815260200190565b60405180910390a25050565b600080600161115c610cd1565b6111669190615a4c565b90506111728382613165565b9392505050565b6001600160a01b038116600090815260ac6020526040812054610ccb9060029060ff1660038111156111ad576111ad615943565b90613190565b6000610cdc6111c1426131c3565b6003541090565b600061117283836131d2565b6111dc6153dd565b6111e58261256f565b6112025760405163a64b34ad60e01b815260040160405180910390fd5b506001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015290565b6000610ccb82436111c8565b61128b6130d9565b6001600160a01b0316336001600160a01b0316146112bb5760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b6000036112e657604051637bcd509160e01b815260040160405180910390fd5b611030816131f2565b604080518082018252600080825260209182018190526001600160a01b038416815260e88252828120835180850190945280548452600101549183018290520361134c576040516370fdd4f160e11b815260040160405180910390fd5b919050565b3361135a611fdb565b6001600160a01b031614611381576040516328b9c24b60e21b815260040160405180910390fd5b600061138b610cd1565b6001600160a01b03861660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e0909152919020549192506113d991615a5f565b60e460008282546113ea9190615a5f565b90915550506001600160a01b038516600090815260e06020908152604080832083905560e18252808320839055603a90915290205461142a90859061323d565b6001600160a01b0386166000908152603a602052604090205582156114da5760715460405163138ac02f60e11b81526000916001600160a01b031690632715805e9061147c9089908890600401615ab4565b6020604051808303816000875af115801561149b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bf9190615acd565b90508060e460008282546114d39190615a5f565b9091555050505b811561151e576001600160a01b0385166000908152603c602052604090205461150490859061323d565b6001600160a01b0386166000908152603c60205260409020555b6001600160a01b0385166000818152603a6020526040808220549051849392600080516020615f778339815191529261155e929091899160019190615ae6565b60405180910390a35050505050565b60006111728383613254565b606d546001600160a01b031690565b600054610100900460ff16158080156115a85750600054600160ff909116105b806115c25750303b1580156115c2575060005460ff166001145b6116255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610df9565b6000805460ff191660011790558015611648576000805461ff0019166101001790555b6116518d6131f2565b61165a8c61327f565b6116638b6132ca565b61166c8a613315565b61167588613360565b61167e896133ab565b611687876133f6565b6116908661342b565b61169985613460565b6116a284613107565b6116ac82356134b8565b6116b960208301356134ed565b60018390558015611704576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b606081516001600160401b0381111561172e5761172e6156e9565b604051908082528060200260200182016040528015611757578160200160208202803683370190505b50905060005b81518110156117c45761178883828151811061177b5761177b615a07565b6020026020010151613522565b82828151811061179a5761179a615a07565b6001600160a01b0390921660209283029190910190910152806117bc81615a33565b91505061175d565b50919050565b6000806117d64361258c565b831115806117f1575060008381526005602052604090205415155b600093845260056020526040909320549293915050565b6118106130d9565b6001600160a01b0316336001600160a01b0316146118405760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b60000361186b57604051637bcd509160e01b815260040160405180910390fd5b61103081613315565b606060aa546001600160401b03811115611890576118906156e9565b6040519080825280602002602001820160405280156118b9578160200160208202803683370190505b5090506000805b825181101561195757600081815260ab60205260409020546118ea906001600160a01b0316611fea565b1561194557600081815260ab60205260409020546001600160a01b0316838361191281615a33565b94508151811061192457611924615a07565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061194f81615a33565b9150506118c0565b50815290565b6119656130d9565b6001600160a01b0316336001600160a01b0316146119955760405162461bcd60e51b8152600401610df990615a72565b611030816134ed565b6060816001600160401b038111156119b8576119b86156e9565b6040519080825280602002602001820160405280156119e1578160200160208202803683370190505b50905060005b82811015611a5257611a1e848483818110611a0457611a04615a07565b9050602002016020810190611a199190615510565b61352d565b828281518110611a3057611a30615a07565b9115156020928302919091019091015280611a4a81615a33565b9150506119e7565b5092915050565b611a616130d9565b6001600160a01b0316336001600160a01b031614611a915760405162461bcd60e51b8152600401610df990615a72565b6110308161342b565b334114611aba576040516309f358fd60e01b815260040160405180910390fd5b6000611ac533611fea565b8015611ad75750611ad53361352d565b155b8015611af15750611aef33611aea610cd1565b613254565b155b606d54604051630634f5b960e01b815282151560048201526001602482015291925060009182916001600160a01b031690630634f5b9906044016060604051808303816000875af1158015611b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6e9190615b05565b92509250508060e26000828254611b859190615a5f565b90915550839050611bd7573460e46000828254611ba29190615a5f565b90915550506040513390600080516020615f5783398151915290611bca903490600190615b3c565b60405180910390a2505050565b336001600160a01b03167f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b13484604051611c12929190615b60565b60405180910390a26000611c24610cd1565b90506000611c328434615a5f565b3360009081526038602090815260408083208684529091528120549192509060ff1615611d2b576070546040805163631c8fd160e11b815290516000926001600160a01b03169163c6391fa29160048083019260809291908290030181865afa158015611ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc79190615b6e565b93505050506127108184611cdb9190615ba4565b611ce59190615bd1565b91508160e46000828254611cf99190615a5f565b90915550506040513390600080516020615f5783398151915290611d21908590600290615b3c565b60405180910390a2505b611d358183615a4c565b91506000607160009054906101000a90046001600160a01b03166001600160a01b031663c673316c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db09190615acd565b3360009081526075602052604081206004015491925090611dd19083613539565b90506000612710611de28684615ba4565b611dec9190615bd1565b33600090815260e06020526040812080549293508392909190611e10908490615a5f565b9091555060009050611e228287615a4c565b33600090815260e16020526040812080549293508392909190611e46908490615a5f565b909155505050505050505050505050565b6073546060906001600160401b03811115611e7457611e746156e9565b604051908082528060200260200182016040528015611ead57816020015b611e9a6153dd565b815260200190600190039081611e925790505b50905060005b8151811015611f83576075600060738381548110611ed357611ed3615a07565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c08201528251839083908110611f6557611f65615a07565b60200260200101819052508080611f7b90615a33565b915050611eb3565b5090565b6000805b60aa54811015611f8357600081815260ab6020526040902054611fb6906001600160a01b0316611179565b15611fc95781611fc581615a33565b9250505b80611fd381615a33565b915050611f8b565b6070546001600160a01b031690565b6001600160a01b038116600090815260ac6020526040812054610ccb9060019060ff1660038111156111ad576111ad615943565b6120266130d9565b6001600160a01b0316336001600160a01b0316146120565760405162461bcd60e51b8152600401610df990615a72565b611030816134b8565b33411461207f576040516309f358fd60e01b815260040160405180910390fd5b612088436122bf565b6120a557604051636c74eecf60e01b815260040160405180910390fd5b6120ae4361258c565b6120b960025461258c565b106120d757604051632458f64160e01b815260040160405180910390fd5b4360025560006120e6426131c3565b905060006120f5826003541090565b905060006121016129a0565b50509050606060006121124361258c565b90506000612121826001615a5f565b9050600061212d610cd1565b905085156122595761213f8186613548565b60008061214c83886138d3565b9150915061215c83888484613b05565b612164613c0e565b61216c613d69565b607054604051631da0214360e21b81526001600160a01b0390911690637680850c9061219e908a908790600401615be5565b600060405180830381600087803b1580156121b857600080fd5b505af11580156121cc573d6000803e3d6000fd5b505050506121d989613e8b565b8051919850965015612248576070546040516303e1697b60e11b81526001600160a01b03909116906307c2d2f690612215908990600401615834565b600060405180830381600087803b15801561222f57600080fd5b505af1158015612243573d6000803e3d6000fd5b505050505b612253436001615a5f565b60045550505b612264878387614016565b82817f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce788604051612299911515815260200190565b60405180910390a350600090815260056020526040902085905550505060039190915550565b6000600180546122cf9190615a4c565b6001546122dc9084615c07565b1492915050565b6122eb6130d9565b6001600160a01b0316336001600160a01b03161461231b5760405162461bcd60e51b8152600401610df990615a72565b611030816133f6565b60008061232f610cd1565b90506111728382613254565b600080600061234a8443610f6c565b9250925092509193909250565b606060aa546001600160401b03811115612373576123736156e9565b60405190808252806020026020018201604052801561239c578160200160208202803683370190505b5090506000805b825181101561195757600081815260ab60205260409020546123cd906001600160a01b0316611179565b1561243157600081815260ab60205260409020546123f3906001600160a01b0316613522565b83836123fe81615a33565b94508151811061241057612410615a07565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061243b81615a33565b9150506123a3565b61244b6130d9565b6001600160a01b0316336001600160a01b03161461247b5760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b6000036124a657604051637bcd509160e01b815260040160405180910390fd5b61103081613360565b6124b76130d9565b6001600160a01b0316336001600160a01b0316146124e75760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b60000361251257604051637bcd509160e01b815260040160405180910390fd5b6110308161327f565b6000805b60aa54811015611f8357600081815260ab602052604090205461254a906001600160a01b0316611fea565b1561255d578161255981615a33565b9250505b8061256781615a33565b91505061251f565b6001600160a01b0316600090815260746020526040902054151590565b6000610ccb826143db565b336125a061308d565b6001600160a01b0316146125c757604051638aaf4a0760e01b815260040160405180910390fd5b6001600160a01b038216600090815260e8602052604090206001810154156126025760405163057aab3160e31b815260040160405180910390fd5b600061260e8342615a5f565b6001600160a01b038516600090815260756020526040902090915061263390826143f6565b6001600160a01b0384166000908152603b6020908152604080832084905560399091528120600191612663610cd1565b8152602081019190915260409081016000908120805460ff19169315159390931790925560715460e554915163138ac02f60e11b81526001600160a01b0390911691632715805e916126b9918991600401615ab4565b6020604051808303816000875af11580156126d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc9190615acd565b905080156127f957600060e654426127149190615a5f565b60e78054600180820183556000929092527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a10180546001600160a01b0319166001600160a01b038a16179055838655850181905590506127726130d9565b6001600160a01b0387811660008181526075602052604090819020600201549051630a2fae5760e41b81526004810192909252821660248201524260448201526064810184905291169063a2fae57090608401600060405180830381600087803b1580156127df57600080fd5b505af11580156127f3573d6000803e3d6000fd5b50505050505b846001600160a01b03167f77a1a819870c0f4d04c3ca4cc2881a0393136abc28bd651af50aedade94a27c48260405161283491815260200190565b60405180910390a25050505050565b61284b6130d9565b6001600160a01b0316336001600160a01b03161461287b5760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b6000036128a657604051637bcd509160e01b815260040160405180910390fd5b611030816132ca565b6000805b60aa548110156117c457600081815260ab60205260409020546001600160a01b03808516916128e29116613522565b6001600160a01b03161480156129145750600081815260ab6020526040902054612914906001600160a01b0316611179565b1561292257600191506117c4565b8061292c81615a33565b9150506128b3565b61293c6130d9565b6001600160a01b0316336001600160a01b03161461296c5760405162461bcd60e51b8152600401610df990615a72565b806001600160a01b03163b60000361299757604051637bcd509160e01b815260040160405180910390fd5b611030816133ab565b606080606060aa546001600160401b038111156129bf576129bf6156e9565b6040519080825280602002602001820160405280156129e8578160200160208202803683370190505b50925060aa546001600160401b03811115612a0557612a056156e9565b604051908082528060200260200182016040528015612a2e578160200160208202803683370190505b50915060aa546001600160401b03811115612a4b57612a4b6156e9565b604051908082528060200260200182016040528015612a74578160200160208202803683370190505b50905060005b8351811015612b7857600081815260ab602052604090205484516001600160a01b03909116908190869084908110612ab457612ab4615a07565b60200260200101906001600160a01b031690816001600160a01b031681525050612add81613522565b848381518110612aef57612aef615a07565b6001600160a01b03928316602091820292909201810191909152908216600090815260ac9091526040902054835160ff90911690849084908110612b3557612b35615a07565b60200260200101906003811115612b4e57612b4e615943565b90816003811115612b6157612b61615943565b905250819050612b7081615a33565b915050612a7a565b50909192565b60606073805480602002602001604051908101604052809291908181526020018280548015612bd657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612bb8575b5050505050905090565b612be86130d9565b6001600160a01b0316336001600160a01b031614612c185760405162461bcd60e51b8152600401610df990615a72565b6001600160a01b038216600090815260e8602052604090206001015415612e5f5760e7548060005b82811015612c9957846001600160a01b031660e78281548110612c6557612c65615a07565b6000918252602090912001546001600160a01b031603612c8757809150612c99565b80612c9181615a33565b915050612c40565b50818103612ca75750505050565b6001600160a01b038416600090815260e860205260409020548015612e5b576001600160a01b038516600090815260e860205260408120818155600190810191909155831115612d695760e7612cfe600185615a4c565b81548110612d0e57612d0e615a07565b60009182526020909120015460e780546001600160a01b039092169184908110612d3a57612d3a615a07565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480612d7a57612d7a615c1b565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260e9905260409020805460ff19166001179055612dcc84826104b0614472565b15612e1657836001600160a01b0316856001600160a01b03167f7229136a18186c71a86246c012af3bb1df6460ef163934bbdccd6368abdd41e48360405161155e91815260200190565b836001600160a01b0316856001600160a01b03167f3747d14eb72ad3e35cba9c3e00dab3b8d15b40cac6bdbd08402356e4f69f30a1834760405161155e929190615b60565b5050505b5050565b612e6b6130d9565b6001600160a01b0316336001600160a01b031614612e9b5760405162461bcd60e51b8152600401610df990615a72565b61103081613460565b60006111728383613165565b33612eb961308d565b6001600160a01b031614612ee057604051638aaf4a0760e01b815260040160405180910390fd5b612ee9826144d2565b15612f075760405163030081e760e01b815260040160405180910390fd5b6001600160a01b0382166000908152607560205260409020600581015415612f425760405163fab9167360e01b815260040160405180910390fd5b612f5581612f508442615a5f565b6143f6565b505050565b33612f6361308d565b6001600160a01b031614612f8a57604051638aaf4a0760e01b815260040160405180910390fd5b6001600160a01b03831660009081526077602052604090205415612fc157604051632f32dcdd60e11b815260040160405180910390fd5b612710811115612fe457604051631b8454a360e21b815260040160405180910390fd5b6076548210156130075760405163fa0ae69360e01b815260040160405180910390fd5b6001600160a01b038316600090815260776020526040812090620151808461302f8242615bd1565b6130399190615a5f565b6130439190615ba4565b808355600183018490556040519091506001600160a01b038616907f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f21906128349084908790615b60565b6071546001600160a01b031690565b6001600160a01b038116600090815260ac60205260408120546130d29060ff1660038111156130cd576130cd615943565b61454f565b1592915050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001811015613129576040516317b8970f60e01b815260040160405180910390fd5b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a25267906020015b60405180910390a150565b6001600160a01b03919091166000908152603960209081526040808320938352929052205460ff1690565b60008160038111156131a4576131a4615943565b8360038111156131b6576131b6615943565b1660ff1615159392505050565b6000610ccb6201518083615bd1565b6001600160a01b03919091166000908152603a6020526040902054101590565b607080546001600160a01b0319166001600160a01b0383161790556040517faa5b07dd43aa44c69b70a6a2b9c3fcfed12b6e5f6323596ba7ac91035ab80a4f9061315a9083906155fe565b60008183101561324d5781611172565b5090919050565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b607180546001600160a01b0319166001600160a01b0383161790556040517f6397f5b135542bb3f477cb346cfab5abdec1251d08dc8f8d4efb4ffe122ea0bf9061315a9083906155fe565b606d80546001600160a01b0319166001600160a01b0383161790556040517fc328090a37d855191ab58469296f98f87a851ca57d5cdfd1e9ac3c83e9e7096d9061315a9083906155fe565b606f80546001600160a01b0319166001600160a01b0383161790556040517f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b9061315a9083906155fe565b606e80546001600160a01b0319166001600160a01b0383161790556040517f034c8da497df28467c79ddadbba1cc3cdd41f510ea73faae271e6f16a61116219061315a9083906155fe565b60a880546001600160a01b0319166001600160a01b0383161790556040517ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d79061315a9083906155fe565b60a98190556040518181527fb5464c05fd0e0f000c535850116cda2742ee1f7b34384cb920ad7b8e802138b59060200161315a565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab49060200161315a565b60a954811115613483576040516355408ce960e11b815260040160405180910390fd5b60ad8190556040518181527fa9588dc77416849bd922605ce4fc806712281ad8a8f32d4238d6c8cca548e15e9060200161315a565b60e58190556040518181527f17a6c3eb965cdd7439982da25abf85be88f0f772ca33198f548e2f99fee0289a9060200161315a565b60e68190556040518181527f0a50c66137118f386332efb949231ddd3946100dbf880003daca37ddd9e0662b9060200161315a565b6000610ccb8261456d565b6000610ccb82436131d2565b600081831061324d5781611172565b606e5460405163889998ef60e01b8152600481018490526000916001600160a01b03169063889998ef90602401602060405180830381865afa158015613592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b69190615acd565b606e5460405163033cdc2b60e31b8152600481018690529192506000916001600160a01b03909116906319e6e15890602401602060405180830381865afa158015613605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136299190615acd565b606e549091506000906001600160a01b031663f67e81528661364a87611713565b6040518363ffffffff1660e01b8152600401613667929190615c31565b600060405180830381865afa158015613684573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136ac9190810190615c52565b90506136b9838383614592565b15806136c3575081155b156137405760005b845181101561373857845160e2546136e39190615bd1565b60e360008784815181106136f9576136f9615a07565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061373090615a33565b9150506136cb565b505050505050565b600080600080607060009054906101000a90046001600160a01b03166001600160a01b0316631079402a6040518163ffffffff1660e01b8152600401608060405180830381865afa158015613799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137bd9190615b6e565b9296509094509250905080861160005b89518110156138c657888782815181106137e9576137e9615a07565b602002602001015160e2546137fe9190615ba4565b6138089190615bd1565b60e360008c848151811061381e5761381e615a07565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555081156138b4576138b48b8b838151811061386657613866615a07565b60200260200101518a6127108b868151811061388457613884615a07565b60200260200101516138969190615ba4565b6138a09190615bd1565b6138ac90612710615a4c565b878a8a61464b565b806138be81615a33565b9150506137cd565b5050505050505050505050565b6000606060008084516001600160401b038111156138f3576138f36156e9565b60405190808252806020026020018201604052801561391c578160200160208202803683370190505b50925060005b8551811015613af55785818151811061393d5761393d615a07565b6020908102919091018101516001600160a01b03808216600090815260759093526040909220600201549094501691506139778388613165565b6139aa576001600160a01b038084166000908152607560205260409020600301546139a591859116846148b8565b6139dc565b6001600160a01b038316600090815260e3602052604081205460e48054919290916139d6908490615a5f565b90915550505b6139e58361352d565b1580156139f957506139f78388613254565b155b15613a6d576001600160a01b038316600090815260e16020526040902054613a219086615a5f565b6001600160a01b038416600090815260e16020526040902054855191965090859083908110613a5257613a52615a07565b602002602001018181525050613a688383614995565b613ab3565b6001600160a01b038316600090815260e1602090815260408083205460e090925290912054613a9c9190615a5f565b60e46000828254613aad9190615a5f565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e390915281205580613aed81615a33565b915050613922565b5060e26000905550509250929050565b6071546001600160a01b03168215612e5b57613b218184614a5d565b15613bc95760405163566bce2360e11b81526001600160a01b0382169063acd79c4690613b5690879086908a90600401615d07565b600060405180830381600087803b158015613b7057600080fd5b505af1158015613b84573d6000803e3d6000fd5b505050507f9e242ca1ef9dde96eb71ef8d19a3f0f6a619b63e4c0d3998771387103656d087838584604051613bbb93929190615d3d565b60405180910390a150613c08565b7fe5668ec1bb2b6bb144a50f810e388da4b1d7d3fc05fcb9d588a1aac59d248f8983858447604051613bfe9493929190615d72565b60405180910390a1505b50505050565b60e754600080805b83831015613c085760e78381548110613c3157613c31615a07565b60009182526020808320909101546001600160a01b031680835260e89091526040909120600181015491935091504210613d5757805460e48054600090613c79908490615a5f565b90915550506001600160a01b038216600090815260e860205260408120818155600101819055613ca885615daf565b9450841115613d1f5760e78481548110613cc457613cc4615a07565b60009182526020909120015460e780546001600160a01b039092169185908110613cf057613cf0615a07565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480613d3057613d30615c1b565b600082815260209020810160001990810180546001600160a01b0319169055019055613c16565b82613d6181615a33565b935050613c16565b60e4548015611030576000613d7c611579565b600060e481905560408051600481526024810182526020810180516001600160e01b03166359f778df60e01b179052905192935090916001600160a01b038416918591613dc99190615dc6565b60006040518083038185875af1925050503d8060008114613e06576040519150601f19603f3d011682016040523d82523d6000602084013e613e0b565b606091505b505090508015613e5057816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc884604051611bca91815260200190565b816001600160a01b03167fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b738447604051611bca929190615b60565b606080613e9783614ab9565b6071546040516391f8723f60e01b81529192506000916001600160a01b03909116906391f8723f90613ece90607390600401615df5565b600060405180830381865afa158015613eeb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f139190810190615c52565b60a854604051632907e73160e11b81529192506000916001600160a01b039091169063520fce6290613f4a90607390600401615df5565b600060405180830381865afa158015613f67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f8f9190810190615c52565b90506000613ffe6073805480602002602001604051908101604052809291908181526020018280548015613fec57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613fce575b5050505050848460a95460ad54614fac565b909550905061400e858288615076565b505050915091565b606f546000906001600160a01b031663fdadda8183614036436001615a5f565b6040518363ffffffff1660e01b8152600401614053929190615be5565b600060405180830381865afa158015614070573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140989190810190615e39565b905060005b82518110156143545760008382815181106140ba576140ba615a07565b6020908102919091018101516001600160a01b0381166000908152603b9092526040822054909250421115906140ef83611fea565b905060006140fc8461352d565b8061411d575085858151811061411457614114615a07565b60200260200101515b806141255750825b159050811580156141335750805b156141ae576001600160a01b038416600090815260ac60205260409020546141729060019060ff16600381111561416c5761416c615943565b906151d4565b6001600160a01b038516600090815260ac60205260409020805460ff191660018360038111156141a4576141a4615943565b0217905550614230565b8180156141b9575080155b15614230576001600160a01b038416600090815260ac60205260409020546141f89060019060ff1660038111156141f2576141f2615943565b9061520f565b6001600160a01b038516600090815260ac60205260409020805460ff1916600183600381111561422a5761422a615943565b02179055505b600061423b85611179565b905083158115801561424a5750805b156142bf576001600160a01b038616600090815260ac60205260409020546142839060029060ff16600381111561416c5761416c615943565b6001600160a01b038716600090815260ac60205260409020805460ff191660018360038111156142b5576142b5615943565b021790555061433b565b8180156142ca575080155b1561433b576001600160a01b038616600090815260ac60205260409020546143039060029060ff1660038111156141f2576141f2615943565b6001600160a01b038716600090815260ac60205260409020805460ff1916600183600381111561433557614335615943565b02179055505b505050505050808061434c90615a33565b91505061409d565b5082847f283b50d76057d5f828df85bc87724c6af604e9b55c363a07c9faa2a2cd688b82614380611874565b60405161438d9190615834565b60405180910390a382847f773d1888df530d69716b183a92450d45f97fba49f2a4bb34fae3b23da0e2cc6f6143c0612357565b6040516143cd9190615834565b60405180910390a350505050565b6000600154826143eb9190615bd1565b610ccb906001615a5f565b600182015461440d906001600160a01b031661256f565b61442a5760405163a64b34ad60e01b815260040160405180910390fd5b6005820181905560018201546040518281526001600160a01b03909116907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e790602001611143565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d80600081146144c2576040519150601f19603f3d011682016040523d82523d6000602084013e6144c7565b606091505b509095945050505050565b60a85460405163107fbb4760e21b815260009182916001600160a01b03909116906341feed1c906145079086906004016155fe565b602060405180830381865afa158015614524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145489190615acd565b1192915050565b600081600381111561456357614563615943565b60ff161592915050565b6001600160a01b03808216600090815260756020526040812060030154909116610ccb565b60016000805b835181101561460457848482815181106145b4576145b4615a07565b602002602001015111156145cb5760009250614604565b8381815181106145dd576145dd615a07565b6020026020010151826145f09190615a5f565b9150806145fc81615a33565b915050614598565b508180156146125750848111155b915081614643576040517f64ba7143ea5a17abea37667aa9ae137e3afba5033c5f504770c02829c128189c90600090a15b509392505050565b8084106147d4576001600160a01b03851660008181526039602090815260408083208a845282528083208054600160ff199182168117909255948452603783528184208b855290925290912080549092161790556146ca6146ac8443615a5f565b6001600160a01b0387166000908152603a602052604090205461323d565b6001600160a01b0386166000908152603a602052604090205561470e6146f08443615a5f565b6001600160a01b0387166000908152603c602052604090205461323d565b6001600160a01b038087166000908152603c60205260409081902092909255607054915163c008ce3960e01b815291169063c008ce39906147589088906002908b90600401615ec7565b600060405180830381600087803b15801561477257600080fd5b505af1158015614786573d6000803e3d6000fd5b5050506001600160a01b0386166000818152603a60205260408082205490518a9450600080516020615f77833981519152926147c792916001908190615ae6565b60405180910390a3613738565b818410613738576001600160a01b0380861660009081526039602090815260408083208a845290915290819020805460ff19166001908117909155607054915163c008ce3960e01b8152919092169163c008ce39916148399189918b90600401615ec7565b600060405180830381600087803b15801561485357600080fd5b505af1158015614867573d6000803e3d6000fd5b5050506001600160a01b0386166000818152603a60205260408082205490518a9450600080516020615f77833981519152926148a892918190600190615ae6565b60405180910390a3505050505050565b6001600160a01b038316600090815260e360205260409020548015613c08576148e482826104b0614472565b1561494657816001600160a01b0316836001600160a01b0316856001600160a01b03167f72a57dc38837a1cba7881b7b1a5594d9e6b65cec6a985b54e2cee3e89369691c8460405161493891815260200190565b60405180910390a450505050565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fd35d76d87d51ed89407fc7ceaaccf32cf72784b94530892ce33546540e141b728447604051614938929190615b60565b6001600160a01b038216600090815260e060205260409020548015612f55576149c182826104b0614472565b15614a1857816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec83604051614a0b91815260200190565b60405180910390a3505050565b816001600160a01b0316836001600160a01b03167f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e8347604051614a0b929190615b60565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614aaa576040519150601f19603f3d011682016040523d82523d6000602084013e614aaf565b606091505b5090949350505050565b6071546040805163af24542960e01b815290516060926001600160a01b031691600091839163af2454299160048083019260209291908290030181865afa158015614b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2c9190615acd565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b929190615acd565b90506000836001600160a01b03166342ef3c3460736040518263ffffffff1660e01b8152600401614bc39190615df5565b600060405180830381865afa158015614be0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614c089190810190615c52565b6073549091506000816001600160401b03811115614c2857614c286156e9565b604051908082528060200260200182016040528015614c51578160200160208202803683370190505b50965060008060005b84831015614efd5760738381548110614c7557614c75615a07565b60009182526020808320909101546001600160a01b031680835260759091526040909120600681015488519294509092501515908890889086908110614cbd57614cbd615a07565b60200260200101511015614d195780614d14576000614cdc8a42615a5f565b600684018190556040518181529091506001600160a01b03851690600080516020615f378339815191529060200160405180910390a2505b614d5a565b8015614d5a578160060160009055826001600160a01b0316600080516020615f378339815191526000604051614d5191815260200190565b60405180910390a25b60008260050154600014158015614d75575042836005015411155b80614d9857506001600160a01b038416600090815260e9602052604090205460ff165b905060008360060154600014158015614db5575042846006015411155b90508180614dc05750805b15614e565788614dcf89615daf565b98508881518110614de257614de2615a07565b6020026020010151898781518110614dfc57614dfc615a07565b6020908102919091010152848d88614e1381615a33565b995081518110614e2557614e25615a07565b60200260200101906001600160a01b031690816001600160a01b031681525050614e4e8561524b565b505050614c5a565b6001600160a01b0385166000908152607760205260409020548015801590614e7e5750428111155b15614ee7576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b86614ef181615a33565b97505050505050614c5a565b5050508087528015614fa1577f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c9187604051614f389190615834565b60405180910390a160405163e22d1c9d60e01b81526001600160a01b0387169063e22d1c9d90614f6e908a908c90600401615be5565b600060405180830381600087803b158015614f8857600080fd5b505af1158015614f9c573d6000803e3d6000fd5b505050505b505050505050919050565b60606000806068905060008888888888604051602401614fd0959493929190615ee8565b60408051601f19818403018152919052602080820180516001600160e01b0316633bca0a8960e11b17905281518b51929350600192909160009161501391615ba4565b61501e906040615a5f565b90506020840181888483895afa61503457600093505b503d61503f57600092505b6020870196508261506357604051630fc2632160e01b815260040160405180910390fd5b8651955050505050509550959350505050565b815b60aa548110156150d457600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b0319169055806150cc81615a33565b915050615078565b5060005b8281101561511e57600081815260ab60209081526040808320546001600160a01b0316835260ac9091529020805460ff191690558061511681615a33565b9150506150d8565b5060005b8281101561519c57600084828151811061513e5761513e615a07565b6020908102919091018101516001600160a01b0316600081815260ac83526040808220805460ff1916600317905585825260ab9093529190912080546001600160a01b0319169091179055508061519481615a33565b915050615122565b508160aa81905550807f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e84604051611bca9190615834565b60008160038111156151e8576151e8615943565b8360038111156151fa576151fa615943565b1760ff16600381111561117257611172615943565b600081600381111561522357615223615943565b1983600381111561523657615236615943565b1660ff16600381111561117257611172615943565b6001600160a01b038116600090815260e960209081526040808320805460ff19169055607490915281205461103091839190819003615288575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b03199081168255600180830180548316905560028301805483169055600383018054909216909155600482018590556005820185905560069091018490556074835281842084905560779092528220828155810182905560738054909161531291615a4c565b8154811061532257615322615a07565b6000918252602090912001546001600160a01b039081169150831681146153a5576001600160a01b038116600090815260746020526040902082905560738054829190841990811061537657615376615a07565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60738054806153b6576153b6615c1b565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6001600160a01b038116811461103057600080fd5b6000806040838503121561544157600080fd5b823561544c81615419565b9150602083013561545c81615419565b809150509250929050565b600080600080600060a0868803121561547f57600080fd5b853561548a81615419565b9450602086013561549a81615419565b935060408601356154aa81615419565b925060608601356154ba81615419565b949793965091946080013592915050565b600080604083850312156154de57600080fd5b82356154e981615419565b946020939093013593505050565b60006020828403121561550957600080fd5b5035919050565b60006020828403121561552257600080fd5b813561117281615419565b60018060a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60e08101610ccb828461552d565b815181526020808301519082015260408101610ccb565b801515811461103057600080fd5b600080600080608085870312156155ca57600080fd5b84356155d581615419565b9350602085013592506040850135915060608501356155f3816155a6565b939692955090935050565b6001600160a01b0391909116815260200190565b8060408101831015610ccb57600080fd5b6000806000806000806000806000806000806101a08d8f03121561564657600080fd5b8c3561565181615419565b9b5060208d013561566181615419565b9a5060408d013561567181615419565b995060608d013561568181615419565b985060808d013561569181615419565b975060a08d01356156a181615419565b965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d013591506156d78e6101608f01615612565b90509295989b509295989b509295989b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715615727576157276156e9565b604052919050565b60006001600160401b03821115615748576157486156e9565b5060051b60200190565b6000602080838503121561576557600080fd5b82356001600160401b0381111561577b57600080fd5b8301601f8101851361578c57600080fd5b803561579f61579a8261572f565b6156ff565b81815260059190911b820183019083810190878311156157be57600080fd5b928401925b828410156157e55783356157d681615419565b825292840192908401906157c3565b979650505050505050565b600081518084526020808501945080840160005b838110156158295781516001600160a01b031687529582019590820190600101615804565b509495945050505050565b60208152600061117260208301846157f0565b6000806020838503121561585a57600080fd5b82356001600160401b038082111561587157600080fd5b818501915085601f83011261588557600080fd5b81358181111561589457600080fd5b8660208260051b85010111156158a957600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b818110156158f55783511515835292840192918401916001016158d7565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156158f55761593083855161552d565b9284019260e0929092019160010161591d565b634e487b7160e01b600052602160045260246000fd5b60608152600061596c60608301866157f0565b60208382038185015261597f82876157f0565b8481036040860152855180825282870193509082019060005b818110156159c4578451600481106159b2576159b2615943565b83529383019391830191600101615998565b509098975050505050505050565b6000806000606084860312156159e757600080fd5b83356159f281615419565b95602085013595506040909401359392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615a4557615a45615a1d565b5060010190565b81810381811115610ccb57610ccb615a1d565b80820180821115610ccb57610ccb615a1d565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b6001600160a01b03929092168252602082015260400190565b600060208284031215615adf57600080fd5b5051919050565b9384526020840192909252151560408301521515606082015260800190565b600080600060608486031215615b1a57600080fd5b8351615b25816155a6565b602085015160409095015190969495509392505050565b8281526040810160038310615b5357615b53615943565b8260208301529392505050565b918252602082015260400190565b60008060008060808587031215615b8457600080fd5b505082516020840151604085015160609095015191969095509092509050565b8082028115828204841417610ccb57610ccb615a1d565b634e487b7160e01b600052601260045260246000fd5b600082615be057615be0615bbb565b500490565b604081526000615bf860408301856157f0565b90508260208301529392505050565b600082615c1657615c16615bbb565b500690565b634e487b7160e01b600052603160045260246000fd5b828152604060208201526000615c4a60408301846157f0565b949350505050565b60006020808385031215615c6557600080fd5b82516001600160401b03811115615c7b57600080fd5b8301601f81018513615c8c57600080fd5b8051615c9a61579a8261572f565b81815260059190911b82018301908381019087831115615cb957600080fd5b928401925b828410156157e557835182529284019290840190615cbe565b600081518084526020808501945080840160005b8381101561582957815187529582019590820190600101615ceb565b606081526000615d1a60608301866157f0565b8281036020840152615d2c8186615cd7565b915050826040830152949350505050565b838152606060208201526000615d5660608301856157f0565b8281036040840152615d688185615cd7565b9695505050505050565b848152608060208201526000615d8b60808301866157f0565b8281036040840152615d9d8186615cd7565b91505082606083015295945050505050565b600081615dbe57615dbe615a1d565b506000190190565b6000825160005b81811015615de75760208186018101518583015201615dcd565b506000920191825250919050565b6020808252825482820181905260008481528281209092916040850190845b818110156158f55783546001600160a01b031683526001938401939285019201615e14565b60006020808385031215615e4c57600080fd5b82516001600160401b03811115615e6257600080fd5b8301601f81018513615e7357600080fd5b8051615e8161579a8261572f565b81815260059190911b82018301908381019087831115615ea057600080fd5b928401925b828410156157e5578351615eb8816155a6565b82529284019290840190615ea5565b6001600160a01b039390931683526020830191909152604082015260600190565b60a081526000615efb60a08301886157f0565b8281036020840152615f0d8188615cd7565b90508281036040840152615f218187615cd7565b6060840195909552505060800152939250505056fe88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342754042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68aa264697066735822122056ba1e30ea69f53e18ae0fcc8fb00b1ee0eb05eb676c1c7bf5666f712fa8752264736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ErrAlreadyRequestedEmergencyExit()": [
        {
          "details": "Error of already requested emergency exit before."
        }
      ],
      "ErrAlreadyRequestedRevokingCandidate()": [
        {
          "details": "Error of already requested revoking candidate before."
        }
      ],
      "ErrAlreadyRequestedUpdatingCommissionRate()": [
        {
          "details": "Error of commission change schedule exists."
        }
      ],
      "ErrAlreadyWrappedEpoch()": [
        {
          "details": "Error of query for already wrapped up epoch"
        }
      ],
      "ErrAtEndOfEpochOnly()": [
        {
          "details": "Error of only allowed at the end of epoch"
        }
      ],
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrCallerMustBeBridgeTrackingContract()": [
        {
          "details": "Error of method caller must be bridge tracking contract."
        }
      ],
      "ErrCallerMustBeCoinbase()": [
        {
          "details": "Error of method caller must be coinbase"
        }
      ],
      "ErrCallerMustBeMaintenanceContract()": [
        {
          "details": "Error of method caller must be maintenance contract."
        }
      ],
      "ErrCallerMustBeRoninTrustedOrgContract()": [
        {
          "details": "Error of method caller must be Ronin trusted org contract."
        }
      ],
      "ErrCallerMustBeSlashIndicatorContract()": [
        {
          "details": "Error of method caller must be slash indicator contract."
        }
      ],
      "ErrCallerMustBeStakingContract()": [
        {
          "details": "Error of method caller must be staking contract."
        }
      ],
      "ErrCallerMustBeStakingVestingContract()": [
        {
          "details": "Error of method caller must be staking vesting contract."
        }
      ],
      "ErrCannotBailout(address)": [
        {
          "details": "Error of cannot bailout due to high tier slash."
        }
      ],
      "ErrExceedsMaxNumberOfCandidate()": [
        {
          "details": "Error of exceeding maximum number of candidates."
        }
      ],
      "ErrExistentBridgeOperator(address)": [
        {
          "details": "Error of bridge operator already exists."
        }
      ],
      "ErrExistentCandidate()": [
        {
          "details": "Error of querying for already existent candidate."
        }
      ],
      "ErrExistentCandidateAdmin(address)": [
        {
          "details": "Error of candidate admin already exists."
        }
      ],
      "ErrExistentTreasury(address)": [
        {
          "details": "Error of treasury already exists."
        }
      ],
      "ErrInsufficientBalance()": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInvalidCommissionRate()": [
        {
          "details": "Error of invalid commission rate."
        }
      ],
      "ErrInvalidEffectiveDaysOnwards()": [
        {
          "details": "Error of invalid effective days onwards."
        }
      ],
      "ErrInvalidMaxPrioritizedValidatorNumber()": [
        {
          "details": "Error of number of prioritized greater than number of max validators."
        }
      ],
      "ErrInvalidMinEffectiveDaysOnwards()": [
        {
          "details": "Error of invalid min effective days onwards."
        }
      ],
      "ErrNonExistentCandidate()": [
        {
          "details": "Error of querying for non-existent candidate."
        }
      ],
      "ErrRecipientRevert()": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrTrustedOrgCannotRenounce()": [
        {
          "details": "Error of trusted org cannot renounce."
        }
      ],
      "ErrUnauthorizedReceiveRON()": [
        {
          "details": "Error thrown when receives RON from neither staking vesting contract nor staking contract"
        }
      ],
      "ErrZeroCodeContract()": [
        {
          "details": "Error of set to non-contract."
        }
      ],
      "NonExistentRecyclingInfo()": [
        {
          "details": "Error thrown when queries for a non existent info."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bridgeTrackingContract()": {
        "details": "Returns the bridge tracking contract."
      },
      "checkBridgeRewardDeprecatedAtLatestPeriod(address)": {
        "details": "Because the information of deprecating bridge reward of a period is only determined at the end of that period, this method will return the deprecating info of the latest period. A method for querying that info of current period is no need."
      },
      "checkBridgeRewardDeprecatedAtPeriod(address,uint256)": {
        "details": "Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the  `_period`."
      },
      "checkJailed(address)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) during the current period."
      },
      "checkJailedAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) at a specific block."
      },
      "checkManyJailed(address[])": {
        "details": "Returns whether the validators are put in jail (cannot join the set of validators) during the current period."
      },
      "checkMiningRewardDeprecated(address)": {
        "details": "Returns whether the incoming reward of the block producer is deprecated during the current period."
      },
      "checkMiningRewardDeprecatedAtPeriod(address,uint256)": {
        "details": "Returns whether the incoming reward of the block producer is deprecated during a specific period."
      },
      "currentPeriod()": {
        "details": "Returns the period index from the current block."
      },
      "currentPeriodStartAtBlock()": {
        "details": "Returns the block number that the current period starts at."
      },
      "emergencyExitLockedAmount()": {
        "details": "Returns the amount of RON to lock from a consensus address."
      },
      "emergencyExpiryDuration()": {
        "details": "Returns the duration that an emergency request is expired and the fund will be recycled."
      },
      "epochEndingAt(uint256)": {
        "details": "Returns whether the epoch ending is at the block number `_block`."
      },
      "epochOf(uint256)": {
        "details": "Returns the epoch index from the block number."
      },
      "execApplyValidatorCandidate(address,address,address,address,uint256)": {
        "details": "Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`."
      },
      "execBailOut(address,uint256)": {
        "details": "Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`."
      },
      "execEmergencyExit(address,uint256)": {
        "details": "Fallback function of `IStaking-requestEmergencyExit`. Requirements: - The method caller is staking contract."
      },
      "execReleaseLockedFundForEmergencyExitRequest(address,address)": {
        "details": "Unlocks fund for emergency exit request. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked. Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock."
      },
      "execRequestRenounceCandidate(address,uint256)": {
        "details": "Requests to revoke a validator candidate in next `_secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`."
      },
      "execRequestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`."
      },
      "execSlash(address,uint256,uint256,bool)": {
        "details": "Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`."
      },
      "getBlockProducers()": {
        "details": "Returns the current block producer list."
      },
      "getBridgeOperators()": {
        "details": "Returns the current bridge operator list."
      },
      "getBridgeOperatorsOf(address[])": {
        "details": "Returns the bridge operator list corresponding to validator address list."
      },
      "getCandidateInfo(address)": {
        "details": "Returns the info of a candidate."
      },
      "getCandidateInfos()": {
        "details": "Returns all candidate info."
      },
      "getCommissionChangeSchedule(address)": {
        "details": "Returns the schedule of changing commission rate of a candidate address."
      },
      "getEmergencyExitInfo(address)": {
        "details": "Returns the emergency exit request."
      },
      "getJailedTimeLeft(address)": {
        "details": "Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail."
      },
      "getJailedTimeLeftAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail."
      },
      "getLastUpdatedBlock()": {
        "details": "Returns the block that validator set was updated."
      },
      "getValidatorCandidates()": {
        "details": "Returns the validator candidate."
      },
      "getValidators()": {
        "details": "Returns the current validator list."
      },
      "initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256[2])": {
        "details": "Initializes the contract storage."
      },
      "isBlockProducer(address)": {
        "details": "Returns whether the address is block producer or not."
      },
      "isBridgeOperator(address)": {
        "details": "Returns whether the address is bridge operator."
      },
      "isCandidateAdmin(address,address)": {
        "details": "Returns whether the address is the candidate admin."
      },
      "isOperatingBridge(address)": {
        "details": "Returns whether the consensus address is operating the bridge or not."
      },
      "isPeriodEnding()": {
        "details": "Returns whether the period ending at the current block number."
      },
      "isValidator(address)": {
        "details": "Returns whether the address is either a bridge operator or a block producer."
      },
      "isValidatorCandidate(address)": {
        "details": "Returns whether the address is a validator (candidate)."
      },
      "maintenanceContract()": {
        "details": "Returns the maintenance contract."
      },
      "maxPrioritizedValidatorNumber()": {
        "details": "Returns the number of reserved slots for prioritized validators."
      },
      "maxValidatorCandidate()": {
        "details": "Returns the maximum number of validator candidate."
      },
      "maxValidatorNumber()": {
        "details": "Returns the maximum number of validators in the epoch."
      },
      "minEffectiveDaysOnwards()": {
        "details": "Returns the minimum number of days to the effective date of commission rate change."
      },
      "numberOfBlocksInEpoch()": {
        "details": "Returns the number of blocks in a epoch."
      },
      "precompilePickValidatorSetAddress()": {
        "details": "Gets the address of the precompile of picking validator set"
      },
      "precompileSortValidatorsAddress()": {
        "details": "Gets the address of the precompile of sorting validators"
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeTrackingContract(address)": {
        "details": "Sets the bridge tracking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeTrackingContractUpdated`."
      },
      "setEmergencyExitLockedAmount(uint256)": {
        "details": "Sets the amount of RON to lock from a consensus address. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedAmountUpdated`."
      },
      "setEmergencyExpiryDuration(uint256)": {
        "details": "Sets the duration that an emergency request is expired and the fund will be recycled. Requirements: - The method caller is admin. Emits the event `EmergencyExpiryDurationUpdated`."
      },
      "setMaintenanceContract(address)": {
        "details": "Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`."
      },
      "setMaxPrioritizedValidatorNumber(uint256)": {
        "details": "Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`"
      },
      "setMaxValidatorCandidate(uint256)": {
        "details": "Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event."
      },
      "setMaxValidatorNumber(uint256)": {
        "details": "Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`"
      },
      "setMinEffectiveDaysOnwards(uint256)": {
        "details": "Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "setSlashIndicatorContract(address)": {
        "details": "Sets the slash indicator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `SlashIndicatorContractUpdated`."
      },
      "setStakingContract(address)": {
        "details": "Sets the staking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingContractUpdated`."
      },
      "setStakingVestingContract(address)": {
        "details": "Sets the staking vesting contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingVestingContractUpdated`."
      },
      "slashIndicatorContract()": {
        "details": "Returns the slash indicator contract."
      },
      "stakingContract()": {
        "details": "Returns the staking contract."
      },
      "stakingVestingContract()": {
        "details": "Returns the staking vesting contract."
      },
      "submitBlockReward()": {
        "details": "Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call."
      },
      "totalBlockProducers()": {
        "details": "Returns total numbers of the block producers."
      },
      "totalBridgeOperators()": {
        "details": "Returns total numbers of the bridge operators."
      },
      "totalDeprecatedReward()": {
        "details": "Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators"
      },
      "tryGetPeriodOfEpoch(uint256)": {
        "details": "Tries to get the period index from the epoch number."
      },
      "wrapUpEpoch()": {
        "details": "Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1373,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 33622,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_numberOfBlocksInEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 33625,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 33628,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 33631,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_currentPeriodStartAtBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 33636,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_periodOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 33641,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33268,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 33275,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardBailoutCutOffAtPeriod",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 33282,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 33287,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_blockProducerJailedBlock",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33292,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExitJailedTimestamp",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33297,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_cannotBailoutUntilBlock",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33302,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "61",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 6972,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_stakingVestingContract",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IStakingVesting)10271"
      },
      {
        "astId": 6465,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeTrackingContract",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(IBridgeTracking)9283"
      },
      {
        "astId": 6544,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maintenanceContract",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(IMaintenance)9657"
      },
      {
        "astId": 6814,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_slashIndicatorContract",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(ISlashIndicator)10849"
      },
      {
        "astId": 6893,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_stakingContract",
        "offset": 0,
        "slot": "113",
        "type": "t_contract(IStaking)11483"
      },
      {
        "astId": 30031,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorCandidate",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 30035,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidates",
        "offset": 0,
        "slot": "115",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30040,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateIndex",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30046,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateInfo",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_address,t_struct(ValidatorCandidate)11500_storage)"
      },
      {
        "astId": 30049,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_minEffectiveDaysOnwards",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 30055,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateCommissionChangeSchedule",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_struct(CommissionSchedule)11505_storage)"
      },
      {
        "astId": 30060,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "120",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 6735,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "168",
        "type": "t_contract(IRoninTrustedOrganization)10182"
      },
      {
        "astId": 33801,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorNumber",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 33804,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "validatorCount",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 33809,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validators",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 33815,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorMap",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_enum(ValidatorFlag)12612)"
      },
      {
        "astId": 33818,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxPrioritizedValidatorNumber",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 33823,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "174",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 33144,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningReward",
        "offset": 0,
        "slot": "224",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33149,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_delegatingReward",
        "offset": 0,
        "slot": "225",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33152,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalBridgeReward",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 33157,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeOperatingReward",
        "offset": 0,
        "slot": "227",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33160,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalDeprecatedReward",
        "offset": 0,
        "slot": "228",
        "type": "t_uint256"
      },
      {
        "astId": 33163,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExitLockedAmount",
        "offset": 0,
        "slot": "229",
        "type": "t_uint256"
      },
      {
        "astId": 33166,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExpiryDuration",
        "offset": 0,
        "slot": "230",
        "type": "t_uint256"
      },
      {
        "astId": 33170,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lockedConsensusList",
        "offset": 0,
        "slot": "231",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 33176,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_exitInfo",
        "offset": 0,
        "slot": "232",
        "type": "t_mapping(t_address,t_struct(EmergencyExitInfo)12033_storage)"
      },
      {
        "astId": 33181,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lockedFundReleased",
        "offset": 0,
        "slot": "233",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 33186,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "234",
        "type": "t_array(t_uint256)44_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBridgeTracking)9283": {
        "encoding": "inplace",
        "label": "contract IBridgeTracking",
        "numberOfBytes": "20"
      },
      "t_contract(IMaintenance)9657": {
        "encoding": "inplace",
        "label": "contract IMaintenance",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)10182": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(ISlashIndicator)10849": {
        "encoding": "inplace",
        "label": "contract ISlashIndicator",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)11483": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingVesting)10271": {
        "encoding": "inplace",
        "label": "contract IStakingVesting",
        "numberOfBytes": "20"
      },
      "t_enum(ValidatorFlag)12612": {
        "encoding": "inplace",
        "label": "enum EnumFlags.ValidatorFlag",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ValidatorFlag)12612)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum EnumFlags.ValidatorFlag)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidatorFlag)12612"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(CommissionSchedule)11505_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.CommissionSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(CommissionSchedule)11505_storage"
      },
      "t_mapping(t_address,t_struct(EmergencyExitInfo)12033_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICommonInfo.EmergencyExitInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(EmergencyExitInfo)12033_storage"
      },
      "t_mapping(t_address,t_struct(ValidatorCandidate)11500_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.ValidatorCandidate)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorCandidate)11500_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CommissionSchedule)11505_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.CommissionSchedule",
        "members": [
          {
            "astId": 11502,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "effectiveTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11504,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(EmergencyExitInfo)12033_storage": {
        "encoding": "inplace",
        "label": "struct ICommonInfo.EmergencyExitInfo",
        "members": [
          {
            "astId": 12030,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12032,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "recyclingAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ValidatorCandidate)11500_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.ValidatorCandidate",
        "members": [
          {
            "astId": 11487,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11489,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "consensusAddr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11491,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "treasuryAddr",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 11493,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "bridgeOperatorAddr",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11495,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11497,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "revokingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11499,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "topupDeadline",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}