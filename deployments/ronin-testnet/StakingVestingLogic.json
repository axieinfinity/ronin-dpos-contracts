{
  "address": "0xf116348Bc2c766Bf29E545c107e0BF4eacAb635a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrBonusAlreadySent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sendAmount",
          "type": "uint256"
        }
      ],
      "name": "ErrInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrRecipientRevert",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum ContractType",
          "name": "expectedContractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "ErrUnexpectedInternalCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BlockProducerBonusPerBlockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockProducerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeOperatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "BonusTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockProducerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeOperatorAmount",
          "type": "uint256"
        }
      ],
      "name": "BonusTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorBonusPerBlockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockProducerBlockBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bridgeOperatorBlockBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__blockProducerBonusPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__bridgeOperatorBonusPerBlock",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBlockSendingBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiveRON",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_forBlockProducer",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_forBridgeOperator",
          "type": "bool"
        }
      ],
      "name": "requestBonus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_blockProducerBonus",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bridgeOperatorBonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setBlockProducerBonusPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setBridgeOperatorBonusPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e7931e35ab53a2626e4fec6eac9b35cfb40f4c9163cf582b9b45cab1af431eb",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xf116348Bc2c766Bf29E545c107e0BF4eacAb635a",
    "transactionIndex": 0,
    "gasUsed": "645174",
    "logsBloom": "0x
    "blockHash": "0x49ae2fb88bcb1e226c1b8e54f2ff2bb0b25c9eafb70997f95863499161da313f",
    "transactionHash": "0x2e7931e35ab53a2626e4fec6eac9b35cfb40f4c9163cf582b9b45cab1af431eb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18032249,
        "transactionHash": "0x2e7931e35ab53a2626e4fec6eac9b35cfb40f4c9163cf582b9b45cab1af431eb",
        "address": "0xf116348Bc2c766Bf29E545c107e0BF4eacAb635a",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x49ae2fb88bcb1e226c1b8e54f2ff2bb0b25c9eafb70997f95863499161da313f"
      }
    ],
    "blockNumber": 18032249,
    "cumulativeGasUsed": "645174",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "6bc16cc8f779fe2f1f4f2733e87f867e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrBonusAlreadySent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BlockProducerBonusPerBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockProducerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeOperatorAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"BonusTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockProducerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeOperatorAmount\",\"type\":\"uint256\"}],\"name\":\"BonusTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorBonusPerBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockProducerBlockBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeOperatorBlockBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__blockProducerBonusPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__bridgeOperatorBonusPerBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockSendingBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveRON\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_forBlockProducer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_forBridgeOperator\",\"type\":\"bool\"}],\"name\":\"requestBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_blockProducerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bridgeOperatorBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBlockProducerBonusPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBridgeOperatorBonusPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrBonusAlreadySent()\":[{\"details\":\"Error thrown when attempting to send a bonus that has already been sent.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrInsufficientBalance(bytes4,uint256,uint256)\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrRecipientRevert(bytes4)\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"blockProducerBlockBonus(uint256)\":{\"details\":\"Returns the bonus amount for the block producer at `_block`.\"},\"bridgeOperatorBlockBonus(uint256)\":{\"details\":\"Returns the bonus amount for the bridge validator at `_block`.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"initialize(address,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"receiveRON()\":{\"details\":\"Receives RON from any address.\"},\"requestBonus(bool,bool)\":{\"details\":\"Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined. Requirements: - The method caller must be validator contract. - The method must be called only once per block. Emits the event `BonusTransferred` or `BonusTransferFailed`. Notes: - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method will not be reverted, and the underlying nodes does not hang.\",\"params\":{\"_forBlockProducer\":\"Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.\",\"_forBridgeOperator\":\"Indicates whether requesting the bonus for the bridge operator.\"},\"returns\":{\"_blockProducerBonus\":\"The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.\",\"_bridgeOperatorBonus\":\"The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.\",\"_success\":\"Whether the transfer is successfully. This returns false mostly because this contract is out of balance.\"}},\"setBlockProducerBonusPerBlock(uint256)\":{\"details\":\"Sets the bonus amount per block for block producer. Emits the event `BlockProducerBonusPerBlockUpdated`. Requirements: - The method caller is admin.\"},\"setBridgeOperatorBonusPerBlock(uint256)\":{\"details\":\"Sets the bonus amount per block for bridge operator. Emits the event `BridgeOperatorBonusPerBlockUpdated`. Requirements: - The method caller is admin.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}}},\"stateVariables\":{\"_blockProducerBonusPerBlock\":{\"details\":\"The block bonus for the block producer whenever a new block is mined.\"},\"_bridgeOperatorBonusPerBlock\":{\"details\":\"The block bonus for the bridge operator whenever a new block is mined.\"},\"lastBlockSendingBonus\":{\"details\":\"The last block number that the staking vesting sent.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/StakingVesting.sol\":\"StakingVesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ronin/contracts/=./contracts/\",\":bridge-operator-governance/=contracts/extensions/bridge-operator-governance/\",\":collections/=contracts/extensions/collections/\",\":consumers/=contracts/extensions/consumers/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":forwarder/=contracts/extensions/forwarder/\",\":sequential-governance/=contracts/extensions/sequential-governance/\",\":slash-indicator/=contracts/interfaces/slash-indicator/\",\":staking/=contracts/interfaces/staking/\",\":validator/=contracts/interfaces/validator/\",\":version-control/=contracts/extensions/version-control/\"]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance(bytes4 msgSig, uint256 currentBalance, uint256 sendAmount);\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert(bytes4 msgSig);\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable _recipient, uint256 _amount) internal {\\n    if (!_sendRON(_recipient, _amount)) revert ErrRecipientRevert(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Send `_amount` RON to the address `_recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    if (address(this).balance < _amount) revert ErrInsufficientBalance(msg.sig, address(this).balance, _amount);\\n    return _unsafeSendRON(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `_amount` RON to the address `_recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRON(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount, uint256 _gas) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount, gas: _gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xf5cc672e96cd11640db34e1be785d5865c1d79abdbcf55df0926b0f6244db906\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0d5cda6bbab5672cc7983efd0cf1f9a4e4fb1a7a2c1cfb50d38aedd052230f91\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStakingVesting {\\n  /**\\n   * @dev Error thrown when attempting to send a bonus that has already been sent.\\n   */\\n  error ErrBonusAlreadySent();\\n\\n  /// @dev Emitted when the block bonus for block producer is transferred.\\n  event BonusTransferred(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount\\n  );\\n  /// @dev Emitted when the transfer of block bonus for block producer is failed.\\n  event BonusTransferFailed(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the block bonus for block producer is updated\\n  event BlockProducerBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the block bonus for bridge operator is updated\\n  event BridgeOperatorBonusPerBlockUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the block producer at `_block`.\\n   */\\n  function blockProducerBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the bridge validator at `_block`.\\n   */\\n  function bridgeOperatorBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Receives RON from any address.\\n   */\\n  function receiveRON() external payable;\\n\\n  /**\\n   * @dev Returns the last block number that the staking vesting is sent.\\n   */\\n  function lastBlockSendingBonus() external view returns (uint256);\\n\\n  /**\\n   * @dev Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   * - The method must be called only once per block.\\n   *\\n   * Emits the event `BonusTransferred` or `BonusTransferFailed`.\\n   *\\n   * Notes:\\n   * - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method\\n   * will not be reverted, and the underlying nodes does not hang.\\n   *\\n   * @param _forBlockProducer Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.\\n   * @param _forBridgeOperator Indicates whether requesting the bonus for the bridge operator.\\n   *\\n   * @return _success Whether the transfer is successfully. This returns false mostly because this contract is out of balance.\\n   * @return _blockProducerBonus The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.\\n   * @return _bridgeOperatorBonus The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.\\n   *\\n   */\\n  function requestBonus(\\n    bool _forBlockProducer,\\n    bool _forBridgeOperator\\n  ) external returns (bool _success, uint256 _blockProducerBonus, uint256 _bridgeOperatorBonus);\\n\\n  /**\\n   * @dev Sets the bonus amount per block for block producer.\\n   *\\n   * Emits the event `BlockProducerBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBlockProducerBonusPerBlock(uint256 _amount) external;\\n\\n  /**\\n   * @dev Sets the bonus amount per block for bridge operator.\\n   *\\n   * Emits the event `BridgeOperatorBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBridgeOperatorBonusPerBlock(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2ff4922cdba4d9094210734d890ec7e644bc25efb711f741bbe2016a9dff9e2a\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract(address addr);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x5947f7f706685ce9a692da732cc0f296fcf88d38a625708354180133b3451089\",\"license\":\"MIT\"},\"contracts/ronin/StakingVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IStakingVesting.sol\\\";\\nimport \\\"../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../extensions/RONTransferHelper.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../utils/DeprecatedSlots.sol\\\";\\n\\ncontract StakingVesting is IStakingVesting, HasValidatorDeprecated, HasContracts, RONTransferHelper, Initializable {\\n  /// @dev The block bonus for the block producer whenever a new block is mined.\\n  uint256 internal _blockProducerBonusPerBlock;\\n  /// @dev The block bonus for the bridge operator whenever a new block is mined.\\n  uint256 internal _bridgeOperatorBonusPerBlock;\\n  /// @dev The last block number that the staking vesting sent.\\n  uint256 public lastBlockSendingBonus;\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    uint256 __blockProducerBonusPerBlock,\\n    uint256 __bridgeOperatorBonusPerBlock\\n  ) external payable initializer {\\n    _setContract(ContractType.VALIDATOR, __validatorContract);\\n    _setBlockProducerBonusPerBlock(__blockProducerBonusPerBlock);\\n    _setBridgeOperatorBonusPerBlock(__bridgeOperatorBonusPerBlock);\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n    delete ______deprecatedValidator;\\n  }\\n\\n  /**\\n   * @inheritdoc IStakingVesting\\n   */\\n  function receiveRON() external payable {}\\n\\n  /**\\n   * @inheritdoc IStakingVesting\\n   */\\n  function blockProducerBlockBonus(uint256 /* _block */) public view override returns (uint256) {\\n    return _blockProducerBonusPerBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IStakingVesting\\n   */\\n  function bridgeOperatorBlockBonus(uint256 /* _block */) public view override returns (uint256) {\\n    return _bridgeOperatorBonusPerBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IStakingVesting\\n   */\\n  function requestBonus(\\n    bool _forBlockProducer,\\n    bool _forBridgeOperator\\n  )\\n    external\\n    override\\n    onlyContract(ContractType.VALIDATOR)\\n    returns (bool _success, uint256 _blockProducerBonus, uint256 _bridgeOperatorBonus)\\n  {\\n    if (block.number <= lastBlockSendingBonus) revert ErrBonusAlreadySent();\\n\\n    lastBlockSendingBonus = block.number;\\n\\n    _blockProducerBonus = _forBlockProducer ? blockProducerBlockBonus(block.number) : 0;\\n    _bridgeOperatorBonus = _forBridgeOperator ? bridgeOperatorBlockBonus(block.number) : 0;\\n\\n    uint256 _totalAmount = _blockProducerBonus + _bridgeOperatorBonus;\\n\\n    if (_totalAmount > 0) {\\n      address payable _validatorContractAddr = payable(msg.sender);\\n\\n      _success = _unsafeSendRON(_validatorContractAddr, _totalAmount);\\n\\n      if (!_success) {\\n        emit BonusTransferFailed(\\n          block.number,\\n          _validatorContractAddr,\\n          _blockProducerBonus,\\n          _bridgeOperatorBonus,\\n          address(this).balance\\n        );\\n        return (_success, 0, 0);\\n      }\\n\\n      emit BonusTransferred(block.number, _validatorContractAddr, _blockProducerBonus, _bridgeOperatorBonus);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IStakingVesting\\n   */\\n  function setBlockProducerBonusPerBlock(uint256 _amount) external override onlyAdmin {\\n    _setBlockProducerBonusPerBlock(_amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IStakingVesting\\n   */\\n  function setBridgeOperatorBonusPerBlock(uint256 _amount) external override onlyAdmin {\\n    _setBridgeOperatorBonusPerBlock(_amount);\\n  }\\n\\n  /**\\n   * @dev Sets the bonus amount per block for block producer.\\n   *\\n   * Emits the event `BlockProducerBonusPerBlockUpdated`.\\n   *\\n   */\\n  function _setBlockProducerBonusPerBlock(uint256 _amount) internal {\\n    _blockProducerBonusPerBlock = _amount;\\n    emit BlockProducerBonusPerBlockUpdated(_amount);\\n  }\\n\\n  /**\\n   * @dev Sets the bonus amount per block for bridge operator.\\n   *\\n   * Emits the event `BridgeOperatorBonusPerBlockUpdated`.\\n   *\\n   */\\n  function _setBridgeOperatorBonusPerBlock(uint256 _amount) internal {\\n    _bridgeOperatorBonusPerBlock = _amount;\\n    emit BridgeOperatorBonusPerBlockUpdated(_amount);\\n  }\\n}\\n\",\"keccak256\":\"0x730984db176e4bcde1ae49cfe21132d1374d1f7d1a4b9072ca36c331fefad5ba\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\",\"keccak256\":\"0xe0c75a4a82f3dc7dcf89dd5cab9ae1ec93c136b7d8210b3f9e18f3215aa69ffb\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION\\n}\\n\",\"keccak256\":\"0x65a0b062c8f963b4679a128abb3840167de1b10b32a8528787f47915a7d9ccc3\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xb3e242a9cb967a64e0ef6419a6b260b647b40082102ce3ab899ab690c84957fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100eb565b600054600160a81b900460ff161561008c5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff600160a01b909104811610156100e9576000805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610a38806100fa6000396000f3fe60806040526004361061009c5760003560e01c80637a1ac61e116100645780637a1ac61e1461013e578063865e6fd314610151578063d8209d0714610171578063de981f1b14610193578063f13ba644146101cb578063fa8674a1146101eb57600080fd5b80630634f5b9146100a15780630d9160e7146100e357806359f778df146101075780635cd8a76b1461010957806367e9941c1461011e575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004610828565b61020d565b6040805193151584526020840192909252908201526060015b60405180910390f35b3480156100ef57600080fd5b506100f960035481565b6040519081526020016100da565b005b34801561011557600080fd5b5061010761033c565b34801561012a57600080fd5b5061010761013936600461085b565b610416565b61010761014c36600461088b565b61042a565b34801561015d57600080fd5b5061010761016c3660046108cd565b610527565b34801561017d57600080fd5b506100f961018c36600461085b565b5060015490565b34801561019f57600080fd5b506101b36101ae3660046108f7565b610546565b6040516001600160a01b0390911681526020016100da565b3480156101d757600080fd5b506101076101e636600461085b565b6105c1565b3480156101f757600080fd5b506100f961020636600461085b565b5060025490565b6000806000600861021d816105d2565b600354431161023f576040516301cb9f2b60e71b815260040160405180910390fd5b436003558561024f576000610253565b6001545b925084610261576000610265565b6002545b915060006102738385610919565b905080156103305733610286818361061e565b9550856102e8576040805186815260208101869052478183015290516001600160a01b0383169143917f137e697384eeada9cf7614b88e4ac940aeff18d0fef7e86bce1abdc812b95e099181900360600190a350600093508392506103329050565b60408051868152602081018690526001600160a01b0383169143917f60200441f885b45b3b7f1fdc45a47bb0d0a0884a6a17722f8dd7232830de9bd2910160405180910390a3505b505b509250925092565b565b600054600290600160a81b900460ff16158015610367575060005460ff808316600160a01b90920416105b61038c5760405162461bcd60e51b815260040161038390610940565b60405180910390fd5b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b17908190556103cb906008906001600160a01b031661067a565b60008054600161ff0160a01b031916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b61041e61071e565b61042781610778565b50565b600054600160a81b900460ff161580801561045257506000546001600160a01b90910460ff16105b806104735750303b1580156104735750600054600160a01b900460ff166001145b61048f5760405162461bcd60e51b815260040161038390610940565b6000805460ff60a01b1916600160a01b17905580156104bc576000805460ff60a81b1916600160a81b1790555b6104c760088561067a565b6104d0836107ad565b6104d982610778565b8015610521576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b61052f61071e565b610538816107e2565b610542828261067a565b5050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600a81111561057d5761057d61098e565b60ff1681526020810191909152604001600020546001600160a01b03169050806105bc578160405163409140df60e11b815260040161038391906109b8565b919050565b6105c961071e565b610427816107ad565b6105db81610546565b6001600160a01b0316336001600160a01b031614610427576000356001600160e01b03191681336040516320e0f98d60e21b8152600401610383939291906109c6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461066b576040519150601f19603f3d011682016040523d82523d6000602084013e610670565b606091505b5090949350505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a8111156106b0576106b061098e565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a8111156106f1576106f161098e565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316331461033a576000356001600160e01b0319166001604051620f948f60ea1b81526004016103839291906109fd565b60028190556040518181527f57a23b4b11f619fb9dea21a5a8115bb90103c1043eb3318d773558829d25f12c9060200161040b565b60018190556040518181527f861f03c645467325a586235bb3155834f1dddf12413d0a802f416eb6d4035e6d9060200161040b565b806001600160a01b03163b60000361042757604051630bfc64a360e21b81526001600160a01b0382166004820152602401610383565b803580151581146105bc57600080fd5b6000806040838503121561083b57600080fd5b61084483610818565b915061085260208401610818565b90509250929050565b60006020828403121561086d57600080fd5b5035919050565b80356001600160a01b03811681146105bc57600080fd5b6000806000606084860312156108a057600080fd5b6108a984610874565b95602085013595506040909401359392505050565b8035600b81106105bc57600080fd5b600080604083850312156108e057600080fd5b6108e9836108be565b915061085260208401610874565b60006020828403121561090957600080fd5b610912826108be565b9392505050565b8082018082111561093a57634e487b7160e01b600052601160045260246000fd5b92915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b600b81106109b4576109b461098e565b9052565b6020810161093a82846109a4565b6001600160e01b031984168152606081016109e460208301856109a4565b6001600160a01b03929092166040919091015292915050565b6001600160e01b0319831681526040810160098310610a1e57610a1e61098e565b826020830152939250505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80637a1ac61e116100645780637a1ac61e1461013e578063865e6fd314610151578063d8209d0714610171578063de981f1b14610193578063f13ba644146101cb578063fa8674a1146101eb57600080fd5b80630634f5b9146100a15780630d9160e7146100e357806359f778df146101075780635cd8a76b1461010957806367e9941c1461011e575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004610828565b61020d565b6040805193151584526020840192909252908201526060015b60405180910390f35b3480156100ef57600080fd5b506100f960035481565b6040519081526020016100da565b005b34801561011557600080fd5b5061010761033c565b34801561012a57600080fd5b5061010761013936600461085b565b610416565b61010761014c36600461088b565b61042a565b34801561015d57600080fd5b5061010761016c3660046108cd565b610527565b34801561017d57600080fd5b506100f961018c36600461085b565b5060015490565b34801561019f57600080fd5b506101b36101ae3660046108f7565b610546565b6040516001600160a01b0390911681526020016100da565b3480156101d757600080fd5b506101076101e636600461085b565b6105c1565b3480156101f757600080fd5b506100f961020636600461085b565b5060025490565b6000806000600861021d816105d2565b600354431161023f576040516301cb9f2b60e71b815260040160405180910390fd5b436003558561024f576000610253565b6001545b925084610261576000610265565b6002545b915060006102738385610919565b905080156103305733610286818361061e565b9550856102e8576040805186815260208101869052478183015290516001600160a01b0383169143917f137e697384eeada9cf7614b88e4ac940aeff18d0fef7e86bce1abdc812b95e099181900360600190a350600093508392506103329050565b60408051868152602081018690526001600160a01b0383169143917f60200441f885b45b3b7f1fdc45a47bb0d0a0884a6a17722f8dd7232830de9bd2910160405180910390a3505b505b509250925092565b565b600054600290600160a81b900460ff16158015610367575060005460ff808316600160a01b90920416105b61038c5760405162461bcd60e51b815260040161038390610940565b60405180910390fd5b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b17908190556103cb906008906001600160a01b031661067a565b60008054600161ff0160a01b031916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b61041e61071e565b61042781610778565b50565b600054600160a81b900460ff161580801561045257506000546001600160a01b90910460ff16105b806104735750303b1580156104735750600054600160a01b900460ff166001145b61048f5760405162461bcd60e51b815260040161038390610940565b6000805460ff60a01b1916600160a01b17905580156104bc576000805460ff60a81b1916600160a81b1790555b6104c760088561067a565b6104d0836107ad565b6104d982610778565b8015610521576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b61052f61071e565b610538816107e2565b610542828261067a565b5050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600a81111561057d5761057d61098e565b60ff1681526020810191909152604001600020546001600160a01b03169050806105bc578160405163409140df60e11b815260040161038391906109b8565b919050565b6105c961071e565b610427816107ad565b6105db81610546565b6001600160a01b0316336001600160a01b031614610427576000356001600160e01b03191681336040516320e0f98d60e21b8152600401610383939291906109c6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461066b576040519150601f19603f3d011682016040523d82523d6000602084013e610670565b606091505b5090949350505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a8111156106b0576106b061098e565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a8111156106f1576106f161098e565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316331461033a576000356001600160e01b0319166001604051620f948f60ea1b81526004016103839291906109fd565b60028190556040518181527f57a23b4b11f619fb9dea21a5a8115bb90103c1043eb3318d773558829d25f12c9060200161040b565b60018190556040518181527f861f03c645467325a586235bb3155834f1dddf12413d0a802f416eb6d4035e6d9060200161040b565b806001600160a01b03163b60000361042757604051630bfc64a360e21b81526001600160a01b0382166004820152602401610383565b803580151581146105bc57600080fd5b6000806040838503121561083b57600080fd5b61084483610818565b915061085260208401610818565b90509250929050565b60006020828403121561086d57600080fd5b5035919050565b80356001600160a01b03811681146105bc57600080fd5b6000806000606084860312156108a057600080fd5b6108a984610874565b95602085013595506040909401359392505050565b8035600b81106105bc57600080fd5b600080604083850312156108e057600080fd5b6108e9836108be565b915061085260208401610874565b60006020828403121561090957600080fd5b610912826108be565b9392505050565b8082018082111561093a57634e487b7160e01b600052601160045260246000fd5b92915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b600b81106109b4576109b461098e565b9052565b6020810161093a82846109a4565b6001600160e01b031984168152606081016109e460208301856109a4565b6001600160a01b03929092166040919091015292915050565b6001600160e01b0319831681526040810160098310610a1e57610a1e61098e565b826020830152939250505056fea164736f6c6343000811000a",
  "devdoc": {
    "errors": {
      "ErrBonusAlreadySent()": [
        {
          "details": "Error thrown when attempting to send a bonus that has already been sent."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrInsufficientBalance(bytes4,uint256,uint256)": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrRecipientRevert(bytes4)": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "blockProducerBlockBonus(uint256)": {
        "details": "Returns the bonus amount for the block producer at `_block`."
      },
      "bridgeOperatorBlockBonus(uint256)": {
        "details": "Returns the bonus amount for the bridge validator at `_block`."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "initialize(address,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "receiveRON()": {
        "details": "Receives RON from any address."
      },
      "requestBonus(bool,bool)": {
        "details": "Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined. Requirements: - The method caller must be validator contract. - The method must be called only once per block. Emits the event `BonusTransferred` or `BonusTransferFailed`. Notes: - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method will not be reverted, and the underlying nodes does not hang.",
        "params": {
          "_forBlockProducer": "Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.",
          "_forBridgeOperator": "Indicates whether requesting the bonus for the bridge operator."
        },
        "returns": {
          "_blockProducerBonus": "The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.",
          "_bridgeOperatorBonus": "The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.",
          "_success": "Whether the transfer is successfully. This returns false mostly because this contract is out of balance."
        }
      },
      "setBlockProducerBonusPerBlock(uint256)": {
        "details": "Sets the bonus amount per block for block producer. Emits the event `BlockProducerBonusPerBlockUpdated`. Requirements: - The method caller is admin."
      },
      "setBridgeOperatorBonusPerBlock(uint256)": {
        "details": "Sets the bonus amount per block for bridge operator. Emits the event `BridgeOperatorBonusPerBlockUpdated`. Requirements: - The method caller is admin."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      }
    },
    "stateVariables": {
      "_blockProducerBonusPerBlock": {
        "details": "The block bonus for the block producer whenever a new block is mined."
      },
      "_bridgeOperatorBonusPerBlock": {
        "details": "The block bonus for the bridge operator whenever a new block is mined."
      },
      "lastBlockSendingBonus": {
        "details": "The last block number that the staking vesting sent."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35464,
        "contract": "contracts/ronin/StakingVesting.sol:StakingVesting",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/StakingVesting.sol:StakingVesting",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/StakingVesting.sol:StakingVesting",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22926,
        "contract": "contracts/ronin/StakingVesting.sol:StakingVesting",
        "label": "_blockProducerBonusPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 22929,
        "contract": "contracts/ronin/StakingVesting.sol:StakingVesting",
        "label": "_bridgeOperatorBonusPerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22932,
        "contract": "contracts/ronin/StakingVesting.sol:StakingVesting",
        "label": "lastBlockSendingBonus",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}