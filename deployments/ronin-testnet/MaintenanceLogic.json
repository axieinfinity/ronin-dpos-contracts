{
  "address": "0xeD2550669c015e26f5cf772764fd07e76D67b090",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minMaintenanceDurationInBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMaintenanceDurationInBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minOffsetToStartSchedule",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxOffsetToStartSchedule",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSchedules",
          "type": "uint256"
        }
      ],
      "name": "MaintenanceConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedBlock",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMaintenance.Schedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "MaintenanceScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addrList",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "bulkMaintaining",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_resList",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addrList",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_fromBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toBlock",
          "type": "uint256"
        }
      ],
      "name": "bulkMaintainingInBlockRange",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_resList",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "getSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMaintenance.Schedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minMaintenanceDurationInBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMaintenanceDurationInBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOffsetToStartSchedule",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxOffsetToStartSchedule",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSchedules",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "maintaining",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toBlock",
          "type": "uint256"
        }
      ],
      "name": "maintainingInBlockRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMaintenanceDurationInBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxOffsetToStartSchedule",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSchedules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMaintenanceDurationInBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minOffsetToStartSchedule",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endedAtBlock",
          "type": "uint256"
        }
      ],
      "name": "schedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "scheduled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minMaintenanceDurationInBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMaintenanceDurationInBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOffsetToStartSchedule",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxOffsetToStartSchedule",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSchedules",
          "type": "uint256"
        }
      ],
      "name": "setMaintenanceConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSchedules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x960cffcb15306f0267b14c779d597170f400cfab384f6ab38a8bcbca82ea93fe",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xeD2550669c015e26f5cf772764fd07e76D67b090",
    "transactionIndex": 0,
    "gasUsed": "1230929",
    "logsBloom": "0x
    "blockHash": "0xe81b126affe39b475af8f2df655f2a63e27928a0b5c7b231902d4457b3669e5a",
    "transactionHash": "0x960cffcb15306f0267b14c779d597170f400cfab384f6ab38a8bcbca82ea93fe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11705046,
        "transactionHash": "0x960cffcb15306f0267b14c779d597170f400cfab384f6ab38a8bcbca82ea93fe",
        "address": "0xeD2550669c015e26f5cf772764fd07e76D67b090",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xe81b126affe39b475af8f2df655f2a63e27928a0b5c7b231902d4457b3669e5a"
      }
    ],
    "blockNumber": 11705046,
    "cumulativeGasUsed": "1230929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2dccd829348aefebbef587667549cd38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOffsetToStartSchedule\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxOffsetToStartSchedule\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSchedules\",\"type\":\"uint256\"}],\"name\":\"MaintenanceConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMaintenance.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"MaintenanceScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"bulkMaintaining\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_resList\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBlock\",\"type\":\"uint256\"}],\"name\":\"bulkMaintainingInBlockRange\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_resList\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IMaintenance.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOffsetToStartSchedule\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxOffsetToStartSchedule\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSchedules\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"maintaining\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBlock\",\"type\":\"uint256\"}],\"name\":\"maintainingInBlockRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMaintenanceDurationInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOffsetToStartSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMaintenanceDurationInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOffsetToStartSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endedAtBlock\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"scheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOffsetToStartSchedule\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxOffsetToStartSchedule\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSchedules\",\"type\":\"uint256\"}],\"name\":\"setMaintenanceConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkMaintaining(address[],uint256)\":{\"details\":\"Returns the bool array indicating the validator is maintaining or not.\"},\"bulkMaintainingInBlockRange(address[],uint256,uint256)\":{\"details\":\"Returns a bool array indicating the validator was maintaining in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\"},\"getSchedule(address)\":{\"details\":\"Returns the detailed schedule of the validator `_consensusAddr`.\"},\"initialize(address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"maintaining(address,uint256)\":{\"details\":\"Returns whether the validator `_consensusAddr` is maintaining at the block number `_block`.\"},\"maintainingInBlockRange(address,uint256,uint256)\":{\"details\":\"Returns whether the validator `_consensusAddr` was maintaining in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\"},\"schedule(address,uint256,uint256)\":{\"details\":\"Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`. Requirements: - The candidate `_consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `_consensusAddr`. - The candidate `_consensusAddr` has no schedule yet or the previous is done. - The total number of schedules is not larger than `maxSchedules()`. - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block. - The end block is larger than the start block. - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`. - The start block is at the start of an epoch. - The end block is at the end of an epoch. Emits the event `MaintenanceScheduled`.\"},\"scheduled(address)\":{\"details\":\"Returns whether the validator `_consensusAddr` has scheduled.\"},\"setMaintenanceConfig(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the duration restriction, start time restriction, and max allowed for maintenance. Requirements: - The method caller is admin. - The max duration is larger than the min duration. - The max offset is larger than the min offset. Emits the event `MaintenanceConfigUpdated`.\"},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"totalSchedules()\":{\"details\":\"Returns the total of current schedules.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"}},\"stateVariables\":{\"_schedule\":{\"details\":\"Mapping from consensus address => maintenance schedule.\"},\"maxMaintenanceDurationInBlock\":{\"details\":\"The max duration to maintenance in blocks.\"},\"maxOffsetToStartSchedule\":{\"details\":\"The offset to the max block number that the schedule can start.\"},\"maxSchedules\":{\"details\":\"The max number of scheduled maintenances.\"},\"minMaintenanceDurationInBlock\":{\"details\":\"The min duration to maintenance in blocks.\"},\"minOffsetToStartSchedule\":{\"details\":\"The offset to the min block number that the schedule can start.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/Maintenance.sol\":\"Maintenance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    require(validatorContract() == msg.sender, \\\"HasValidatorContract: method caller must be validator contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasValidatorContract: set to non-contract\\\");\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xfc2ef0f8358960702307626dc4ccbab066c5e0763e04e8a794f0dc4711789bdd\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMaintenance {\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed consensusAddr, Schedule);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` is maintaining at the block number `_block`.\\n   */\\n  function maintaining(address _consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` was maintaining in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function maintainingInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validator is maintaining or not.\\n   */\\n  function bulkMaintaining(address[] calldata _addrList, uint256 _block) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validator was maintaining in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function bulkMaintainingInBlockRange(\\n    address[] calldata _addrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` has scheduled.\\n   */\\n  function scheduled(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `_consensusAddr`.\\n   */\\n  function getSchedule(address _consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules\\n  ) external;\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedules() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedules() external view returns (uint256 _count);\\n\\n  /**\\n   * @dev Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - The candidate `_consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(\\n    address _consensusAddr,\\n    uint256 _startedAtBlock,\\n    uint256 _endedAtBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe1886f6414990514cbd4905c68300f9660c24c29e351bb11bede02163dc5ef32\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasValidatorContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0xb6e39a02969091decbb50633286855c157502a7d15a988e436644b8d419e13d3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that the candidate to be revoked.\\n    uint256 revokedTimestamp;\\n    // Extra data\\n    bytes extraData;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoked timestamp of a candidate is updated.\\n  event CandidateRevokedTimestampUpdated(address indexed consensusAddr, uint256 revokedTimestamp);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function grantValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokedTimestampUpdated`.\\n   *\\n   */\\n  function requestRevokeCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfc2253c897b3e450bffc701885463492c0ab94542db3f1a4cfad25c4866dc9be\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 amount);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(uint256 amount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xd0aef1d05e99c82fd733c97a45f3a999898c4ded0cace2cb901864e2ddc3904a\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface IRoninValidatorSet is ICandidateManager, ICommonInfo, ISlashingExecution, ICoinbaseExecution {}\\n\",\"keccak256\":\"0x2475cf9c7007277ddfeade823196d0913a6d5c3e3fc9a1a10800734c0fdef062\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0xdeb929875d06c5dfb8562029ccc2922e1c5238f2dc67c8c61acad614f5fe1e28\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {}\\n\",\"keccak256\":\"0x3ce4ec5ccabb3abb8a27ac2134f3b51dffcc0742da89e23eee37d0263018b3bc\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function jailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function jailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function jailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function jailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function bulkJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function miningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function miningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0xc29b2f9b1bed2442cc2de2f06e3b37faa0ce50ca1cb11826facd7e5fb7154bc2\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbaf184267f8a587b6c2a79868f7acde00d9372e8283baf5baab34ad19ab4abd2\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xf7f30bacc63b2e4e9548c83e45eac727eeafa46e60312f936bf189480e413323\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - min(a, b);\\n  }\\n}\\n\",\"keccak256\":\"0xa9e2a3ad43d7999a3cdbfb040b0f2dec282eae91ff8fe6ad26fdd19087121ce7\",\"license\":\"UNLICENSED\"},\"contracts/ronin/Maintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IMaintenance.sol\\\";\\nimport \\\"../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\n\\ncontract Maintenance is IMaintenance, HasValidatorContract, Initializable {\\n  using Math for uint256;\\n\\n  /// @dev Mapping from consensus address => maintenance schedule.\\n  mapping(address => Schedule) internal _schedule;\\n\\n  /// @dev The min duration to maintenance in blocks.\\n  uint256 public minMaintenanceDurationInBlock;\\n  /// @dev The max duration to maintenance in blocks.\\n  uint256 public maxMaintenanceDurationInBlock;\\n  /// @dev The offset to the min block number that the schedule can start.\\n  uint256 public minOffsetToStartSchedule;\\n  /// @dev The offset to the max block number that the schedule can start.\\n  uint256 public maxOffsetToStartSchedule;\\n  /// @dev The max number of scheduled maintenances.\\n  uint256 public maxSchedules;\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules\\n  ) external initializer {\\n    _setValidatorContract(__validatorContract);\\n    _setMaintenanceConfig(\\n      _minMaintenanceDurationInBlock,\\n      _maxMaintenanceDurationInBlock,\\n      _minOffsetToStartSchedule,\\n      _maxOffsetToStartSchedule,\\n      _maxSchedules\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules\\n  ) external onlyAdmin {\\n    _setMaintenanceConfig(\\n      _minMaintenanceDurationInBlock,\\n      _maxMaintenanceDurationInBlock,\\n      _minOffsetToStartSchedule,\\n      _maxOffsetToStartSchedule,\\n      _maxSchedules\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function schedule(\\n    address _consensusAddr,\\n    uint256 _startedAtBlock,\\n    uint256 _endedAtBlock\\n  ) external override {\\n    IRoninValidatorSet _validator = _validatorContract;\\n\\n    require(_validator.isBlockProducer(_consensusAddr), \\\"Maintenance: consensus address must be a block producer\\\");\\n    require(\\n      _validator.isCandidateAdmin(_consensusAddr, msg.sender),\\n      \\\"Maintenance: method caller must be a candidate admin\\\"\\n    );\\n    require(!scheduled(_consensusAddr), \\\"Maintenance: already scheduled\\\");\\n    require(totalSchedules() < maxSchedules, \\\"Maintenance: exceeds total of schedules\\\");\\n    require(\\n      _startedAtBlock.inRange(block.number + minOffsetToStartSchedule, block.number + maxOffsetToStartSchedule),\\n      \\\"Maintenance: start block is out of offset\\\"\\n    );\\n    require(_startedAtBlock < _endedAtBlock, \\\"Maintenance: start block must be less than end block\\\");\\n    uint256 _blockPeriod = _endedAtBlock - _startedAtBlock;\\n    require(\\n      _blockPeriod.inRange(minMaintenanceDurationInBlock, maxMaintenanceDurationInBlock),\\n      \\\"Maintenance: invalid maintenance duration\\\"\\n    );\\n    require(_validator.epochEndingAt(_startedAtBlock - 1), \\\"Maintenance: start block is not at the start of an epoch\\\");\\n    require(_validator.epochEndingAt(_endedAtBlock), \\\"Maintenance: end block is not at the end of an epoch\\\");\\n\\n    Schedule storage _sSchedule = _schedule[_consensusAddr];\\n    _sSchedule.from = _startedAtBlock;\\n    _sSchedule.to = _endedAtBlock;\\n    _sSchedule.lastUpdatedBlock = block.number;\\n    emit MaintenanceScheduled(_consensusAddr, _sSchedule);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function getSchedule(address _consensusAddr) external view returns (Schedule memory) {\\n    return _schedule[_consensusAddr];\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function bulkMaintaining(address[] calldata _addrList, uint256 _block)\\n    external\\n    view\\n    override\\n    returns (bool[] memory _resList)\\n  {\\n    _resList = new bool[](_addrList.length);\\n    for (uint _i = 0; _i < _addrList.length; _i++) {\\n      _resList[_i] = maintaining(_addrList[_i], _block);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function bulkMaintainingInBlockRange(\\n    address[] calldata _addrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view override returns (bool[] memory _resList) {\\n    _resList = new bool[](_addrList.length);\\n    for (uint _i = 0; _i < _addrList.length; _i++) {\\n      _resList[_i] = _maintainingInBlockRange(_addrList[_i], _fromBlock, _toBlock);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function totalSchedules() public view override returns (uint256 _count) {\\n    address[] memory _validators = _validatorContract.getValidators();\\n    for (uint _i = 0; _i < _validators.length; _i++) {\\n      if (scheduled(_validators[_i])) {\\n        _count++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function maintaining(address _consensusAddr, uint256 _block) public view returns (bool) {\\n    Schedule storage _s = _schedule[_consensusAddr];\\n    return _s.from <= _block && _block <= _s.to;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function maintainingInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) public view override returns (bool) {\\n    return _maintainingInBlockRange(_consensusAddr, _fromBlock, _toBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function scheduled(address _consensusAddr) public view override returns (bool) {\\n    return block.number <= _schedule[_consensusAddr].to;\\n  }\\n\\n  /**\\n   * @dev Sets the min block period and max block period to maintenance.\\n   *\\n   * Requirements:\\n   * - The max period is larger than the min period.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function _setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules\\n  ) internal {\\n    require(\\n      _minMaintenanceDurationInBlock < _maxMaintenanceDurationInBlock,\\n      \\\"Maintenance: invalid maintenance duration configs\\\"\\n    );\\n    require(\\n      _minOffsetToStartSchedule < _maxOffsetToStartSchedule,\\n      \\\"Maintenance: invalid offset to start schedule configs\\\"\\n    );\\n    minMaintenanceDurationInBlock = _minMaintenanceDurationInBlock;\\n    maxMaintenanceDurationInBlock = _maxMaintenanceDurationInBlock;\\n    minOffsetToStartSchedule = _minOffsetToStartSchedule;\\n    maxOffsetToStartSchedule = _maxOffsetToStartSchedule;\\n    maxSchedules = _maxSchedules;\\n    emit MaintenanceConfigUpdated(\\n      _minMaintenanceDurationInBlock,\\n      _maxMaintenanceDurationInBlock,\\n      _minOffsetToStartSchedule,\\n      _maxOffsetToStartSchedule,\\n      _maxSchedules\\n    );\\n  }\\n\\n  /**\\n   * @dev Check if the validator was maintaining in the current period.\\n   *\\n   * Note: This method should be called at the end of the period.\\n   */\\n  function _maintainingInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) private view returns (bool) {\\n    Schedule storage _s = _schedule[_consensusAddr];\\n    return Math.twoRangeOverlap(_fromBlock, _toBlock, _s.from, _s.to);\\n  }\\n}\\n\",\"keccak256\":\"0x32cc4880802972c6abe674e5680c5735fd6b9ccbcf495ced89abb16453d15739\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100eb565b600054600160a81b900460ff161561008c5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff600160a01b909104811610156100e9576000805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6114d0806100fa6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063934e9a03116100a2578063bfa89b9b11610071578063bfa89b9b14610222578063c44cb2331461022b578063cdf64a7614610234578063d39fee3414610247578063f0a467091461027c57600080fd5b8063934e9a03146101e3578063965720af146101f657806399439089146101fe578063bc1710e91461021957600080fd5b8063374f6d0e116100de578063374f6d0e1461017457806345ff4c80146101b4578063799f3d4b146101c75780637a50802d146101da57600080fd5b806309e34c38146101105780630c4cea591461012c5780631033af36146101415780632d538c2c14610161575b600080fd5b61011960025481565b6040519081526020015b60405180910390f35b61013f61013a366004611085565b61028f565b005b61015461014f36600461110c565b6102f5565b604051610123919061115d565b61013f61016f3660046111b8565b6103b5565b6101a46101823660046111ed565b6001600160a01b03166000908152600160208190526040909120015443111590565b6040519015158152602001610123565b61013f6101c2366004611211565b610a25565b6101a46101d53660046111b8565b610b65565b61011960055481565b6101a46101f136600461125d565b610b7a565b610119610bac565b6000546040516001600160a01b039091168152602001610123565b61011960045481565b61011960035481565b61011960065481565b61013f6102423660046111ed565b610ca3565b61025a6102553660046111ed565b610d64565b6040805182518152602080840151908201529181015190820152606001610123565b61015461028a366004611289565b610dc9565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146102e15760405162461bcd60e51b81526004016102d8906112d5565b60405180910390fd5b6102ee8585858585610e87565b5050505050565b60608367ffffffffffffffff81111561031057610310611317565b604051908082528060200260200182016040528015610339578160200160208202803683370190505b50905060005b848110156103ac5761037886868381811061035c5761035c61132d565b905060200201602081019061037191906111ed565b8585610fcc565b82828151811061038a5761038a61132d565b91151560209283029190910190910152806103a481611359565b91505061033f565b50949350505050565b600054604051633292276760e11b81526001600160a01b0385811660048301529091169081906365244ece9060240160206040518083038186803b1580156103fc57600080fd5b505afa158015610410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104349190611374565b6104a65760405162461bcd60e51b815260206004820152603760248201527f4d61696e74656e616e63653a20636f6e73656e7375732061646472657373206d60448201527f757374206265206120626c6f636b2070726f647563657200000000000000000060648201526084016102d8565b6040516304d971ab60e01b81526001600160a01b0385811660048301523360248301528216906304d971ab9060440160206040518083038186803b1580156104ed57600080fd5b505afa158015610501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105259190611374565b61058e5760405162461bcd60e51b815260206004820152603460248201527f4d61696e74656e616e63653a206d6574686f642063616c6c6572206d75737420604482015273313290309031b0b73234b230ba329030b236b4b760611b60648201526084016102d8565b6001600160a01b0384166000908152600160208190526040909120015443116105f95760405162461bcd60e51b815260206004820152601e60248201527f4d61696e74656e616e63653a20616c7265616479207363686564756c6564000060448201526064016102d8565b600654610604610bac565b106106615760405162461bcd60e51b815260206004820152602760248201527f4d61696e74656e616e63653a206578636565647320746f74616c206f66207363604482015266686564756c657360c81b60648201526084016102d8565b610687600454436106729190611396565b60055461067f9043611396565b859190611004565b6106e55760405162461bcd60e51b815260206004820152602960248201527f4d61696e74656e616e63653a20737461727420626c6f636b206973206f7574206044820152681bd9881bd9999cd95d60ba1b60648201526084016102d8565b8183106107515760405162461bcd60e51b815260206004820152603460248201527f4d61696e74656e616e63653a20737461727420626c6f636b206d757374206265604482015273206c657373207468616e20656e6420626c6f636b60601b60648201526084016102d8565b600061075d84846113ae565b9050610778600254600354836110049092919063ffffffff16565b6107d65760405162461bcd60e51b815260206004820152602960248201527f4d61696e74656e616e63653a20696e76616c6964206d61696e74656e616e636560448201526810323ab930ba34b7b760b91b60648201526084016102d8565b6001600160a01b038216637593ff716107f06001876113ae565b6040518263ffffffff1660e01b815260040161080e91815260200190565b60206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190611374565b6108d05760405162461bcd60e51b815260206004820152603860248201527f4d61696e74656e616e63653a20737461727420626c6f636b206973206e6f742060448201527f617420746865207374617274206f6620616e2065706f6368000000000000000060648201526084016102d8565b604051637593ff7160e01b8152600481018490526001600160a01b03831690637593ff719060240160206040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190611374565b6109b15760405162461bcd60e51b815260206004820152603460248201527f4d61696e74656e616e63653a20656e6420626c6f636b206973206e6f74206174604482015273040e8d0ca40cadcc840decc40c2dc40cae0dec6d60631b60648201526084016102d8565b6001600160a01b038516600081815260016020818152604092839020888155918201879055436002830181905583518981529182018890528184015291519092917f3136fc9202ed1c3f8bc7ea3afb46704719833536485624cea83d7076f8785f43919081900360600190a2505050505050565b600054600160a81b900460ff1615808015610a4d57506000546001600160a01b90910460ff16105b80610a6e5750303b158015610a6e5750600054600160a01b900460ff166001145b610ad15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102d8565b6000805460ff60a01b1916600160a01b1790558015610afe576000805460ff60a81b1916600160a81b1790555b610b078761101b565b610b148686868686610e87565b8015610b5c576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6000610b72848484610fcc565b949350505050565b6001600160a01b038216600090815260016020526040812080548310801590610b725750600101549091111592915050565b600080546040805163b7ab4db560e01b8152905183926001600160a01b03169163b7ab4db59160048083019286929190829003018186803b158015610bf057600080fd5b505afa158015610c04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c2c91908101906113d5565b905060005b8151811015610c9e57610c79828281518110610c4f57610c4f61132d565b60200260200101516001600160a01b03166000908152600160208190526040909120015443111590565b15610c8c5782610c8881611359565b9350505b80610c9681611359565b915050610c31565b505090565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610cec5760405162461bcd60e51b81526004016102d8906112d5565b6000816001600160a01b03163b11610d585760405162461bcd60e51b815260206004820152602960248201527f48617356616c696461746f72436f6e74726163743a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b60648201526084016102d8565b610d618161101b565b50565b610d8860405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600160208181526040928390208351606081018552815481529281015491830191909152600201549181019190915290565b60608267ffffffffffffffff811115610de457610de4611317565b604051908082528060200260200182016040528015610e0d578160200160208202803683370190505b50905060005b83811015610e7f57610e4b858583818110610e3057610e3061132d565b9050602002016020810190610e4591906111ed565b84610b7a565b828281518110610e5d57610e5d61132d565b9115156020928302919091019091015280610e7781611359565b915050610e13565b509392505050565b838510610ef05760405162461bcd60e51b815260206004820152603160248201527f4d61696e74656e616e63653a20696e76616c6964206d61696e74656e616e6365604482015270206475726174696f6e20636f6e6669677360781b60648201526084016102d8565b818310610f5d5760405162461bcd60e51b815260206004820152603560248201527f4d61696e74656e616e63653a20696e76616c6964206f666673657420746f207360448201527474617274207363686564756c6520636f6e6669677360581b60648201526084016102d8565b60028590556003849055600483905560058290556006819055604080518681526020810186905290810184905260608101839052608081018290527fa95659ec997f7f4e9eb2cc9d46f0c1a257b876d8ebbb8938ff0bd4d5c7cce4fa9060a00160405180910390a15050505050565b6001600160a01b038316600090815260016020819052604082208054918101549091610ffb918691869161106f565b95945050505050565b6000838311158015610b7257505090911115919050565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b68361699060200160405180910390a150565b6000818511158015610ffb575050501115919050565b600080600080600060a0868803121561109d57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008083601f8401126110d257600080fd5b50813567ffffffffffffffff8111156110ea57600080fd5b6020830191508360208260051b850101111561110557600080fd5b9250929050565b6000806000806060858703121561112257600080fd5b843567ffffffffffffffff81111561113957600080fd5b611145878288016110c0565b90989097506020870135966040013595509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611197578351151583529284019291840191600101611179565b50909695505050505050565b6001600160a01b0381168114610d6157600080fd5b6000806000606084860312156111cd57600080fd5b83356111d8816111a3565b95602085013595506040909401359392505050565b6000602082840312156111ff57600080fd5b813561120a816111a3565b9392505050565b60008060008060008060c0878903121561122a57600080fd5b8635611235816111a3565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b6000806040838503121561127057600080fd5b823561127b816111a3565b946020939093013593505050565b60008060006040848603121561129e57600080fd5b833567ffffffffffffffff8111156112b557600080fd5b6112c1868287016110c0565b909790965060209590950135949350505050565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561136d5761136d611343565b5060010190565b60006020828403121561138657600080fd5b8151801515811461120a57600080fd5b600082198211156113a9576113a9611343565b500190565b6000828210156113c0576113c0611343565b500390565b80516113d0816111a3565b919050565b600060208083850312156113e857600080fd5b825167ffffffffffffffff8082111561140057600080fd5b818501915085601f83011261141457600080fd5b81518181111561142657611426611317565b8060051b604051601f19603f8301168101818110858211171561144b5761144b611317565b60405291825284820192508381018501918883111561146957600080fd5b938501935b8285101561148e5761147f856113c5565b8452938501939285019261146e565b9897505050505050505056fea264697066735822122085648eeb728f2e0e67be950bda4cb1ab8f145b82fa5b7f61800d825b1696348464736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bulkMaintaining(address[],uint256)": {
        "details": "Returns the bool array indicating the validator is maintaining or not."
      },
      "bulkMaintainingInBlockRange(address[],uint256,uint256)": {
        "details": "Returns a bool array indicating the validator was maintaining in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not."
      },
      "getSchedule(address)": {
        "details": "Returns the detailed schedule of the validator `_consensusAddr`."
      },
      "initialize(address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "maintaining(address,uint256)": {
        "details": "Returns whether the validator `_consensusAddr` is maintaining at the block number `_block`."
      },
      "maintainingInBlockRange(address,uint256,uint256)": {
        "details": "Returns whether the validator `_consensusAddr` was maintaining in the inclusive range [`_fromBlock`, `_toBlock`] of blocks."
      },
      "schedule(address,uint256,uint256)": {
        "details": "Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`. Requirements: - The candidate `_consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `_consensusAddr`. - The candidate `_consensusAddr` has no schedule yet or the previous is done. - The total number of schedules is not larger than `maxSchedules()`. - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block. - The end block is larger than the start block. - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`. - The start block is at the start of an epoch. - The end block is at the end of an epoch. Emits the event `MaintenanceScheduled`."
      },
      "scheduled(address)": {
        "details": "Returns whether the validator `_consensusAddr` has scheduled."
      },
      "setMaintenanceConfig(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Sets the duration restriction, start time restriction, and max allowed for maintenance. Requirements: - The method caller is admin. - The max duration is larger than the min duration. - The max offset is larger than the min offset. Emits the event `MaintenanceConfigUpdated`."
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "totalSchedules()": {
        "details": "Returns the total of current schedules."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      }
    },
    "stateVariables": {
      "_schedule": {
        "details": "Mapping from consensus address => maintenance schedule."
      },
      "maxMaintenanceDurationInBlock": {
        "details": "The max duration to maintenance in blocks."
      },
      "maxOffsetToStartSchedule": {
        "details": "The offset to the max block number that the schedule can start."
      },
      "maxSchedules": {
        "details": "The max number of scheduled maintenances."
      },
      "minMaintenanceDurationInBlock": {
        "details": "The min duration to maintenance in blocks."
      },
      "minOffsetToStartSchedule": {
        "details": "The offset to the min block number that the schedule can start."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6398,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRoninValidatorSet)10851"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18856,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_schedule",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Schedule)8928_storage)"
      },
      {
        "astId": 18859,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "minMaintenanceDurationInBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 18862,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "maxMaintenanceDurationInBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 18865,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "minOffsetToStartSchedule",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 18868,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "maxOffsetToStartSchedule",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 18871,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "maxSchedules",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoninValidatorSet)10851": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Schedule)8928_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMaintenance.Schedule)",
        "numberOfBytes": "32",
        "value": "t_struct(Schedule)8928_storage"
      },
      "t_struct(Schedule)8928_storage": {
        "encoding": "inplace",
        "label": "struct IMaintenance.Schedule",
        "members": [
          {
            "astId": 8923,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8925,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8927,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "lastUpdatedBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}