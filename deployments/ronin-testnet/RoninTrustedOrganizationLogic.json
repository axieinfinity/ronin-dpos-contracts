{
  "address": "0x8632bAB71eB2d23F3f8FE49914E2dC33170c7B78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrConsensusAddressIsAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrConsensusAddressIsNotAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrDuplicated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrEmptyArray",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrGovernorAddressIsAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidVoteWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForDupplicated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForNonExistentConsensusAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum ContractType",
          "name": "expectedContractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "ErrUnexpectedInternalCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization",
          "name": "orgAfterChanged",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "TConsensus",
          "name": "oldConsensus",
          "type": "address"
        }
      ],
      "name": "ConsensusAddressOfTrustedOrgChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "orgs",
          "type": "tuple[]"
        }
      ],
      "name": "TrustedOrganizationsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "TConsensus[]",
          "name": "orgs",
          "type": "address[]"
        }
      ],
      "name": "TrustedOrganizationsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "orgs",
          "type": "tuple[]"
        }
      ],
      "name": "TrustedOrganizationsUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "name": "addTrustedOrganizations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteWeight",
          "type": "uint256"
        }
      ],
      "name": "checkThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countTrustedOrganization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "oldAddr",
          "type": "address"
        },
        {
          "internalType": "TConsensus",
          "name": "newAddr",
          "type": "address"
        }
      ],
      "name": "execChangeConsensusAddressForTrustedOrg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTrustedOrganizations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "list",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        }
      ],
      "name": "getConsensusWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cid",
          "type": "address"
        }
      ],
      "name": "getConsensusWeightById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "name": "getConsensusWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cids",
          "type": "address[]"
        }
      ],
      "name": "getConsensusWeightsById",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "getGovernorWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "getGovernorWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "num_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denom_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "getTrustedOrganization",
      "outputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getTrustedOrganizationAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "trustedOrgs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denom",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "profileContract",
          "type": "address"
        }
      ],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVoteWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "name": "removeTrustedOrganizations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "sumConsensusWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "sumGovernorWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "TConsensus",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "__deprecatedBridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "name": "updateTrustedOrganizations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x65cd3feeb7c9e283108736051d95b78a4ed80c44cce1048e1587ea2f1f54a190",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x8632bAB71eB2d23F3f8FE49914E2dC33170c7B78",
    "transactionIndex": 0,
    "gasUsed": "2067725",
    "logsBloom": "0x
    "blockHash": "0xac88da2118af4a9e5cc7235c5d4308dc66e66e78dcc07247ab596dc6f5ae43fc",
    "transactionHash": "0x65cd3feeb7c9e283108736051d95b78a4ed80c44cce1048e1587ea2f1f54a190",
    "logs": [],
    "blockNumber": 21941081,
    "cumulativeGasUsed": "2067725",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "f5939ebe47e4086c92eac99ab2681ceb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrConsensusAddressIsAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrConsensusAddressIsNotAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrDuplicated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEmptyArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrGovernorAddressIsAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidVoteWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForDupplicated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForNonExistentConsensusAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization\",\"name\":\"orgAfterChanged\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"TConsensus\",\"name\":\"oldConsensus\",\"type\":\"address\"}],\"name\":\"ConsensusAddressOfTrustedOrgChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"orgs\",\"type\":\"tuple[]\"}],\"name\":\"TrustedOrganizationsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"TConsensus[]\",\"name\":\"orgs\",\"type\":\"address[]\"}],\"name\":\"TrustedOrganizationsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"orgs\",\"type\":\"tuple[]\"}],\"name\":\"TrustedOrganizationsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"name\":\"addTrustedOrganizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countTrustedOrganization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"oldAddr\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"execChangeConsensusAddressForTrustedOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTrustedOrganizations\",\"outputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getConsensusWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"getConsensusWeightById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"getConsensusWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"name\":\"getConsensusWeightsById\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"getGovernorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"getGovernorWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"getTrustedOrganization\",\"outputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getTrustedOrganizationAt\",\"outputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"trustedOrgs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileContract\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"removeTrustedOrganizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"sumConsensusWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"sumGovernorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__deprecatedBridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"name\":\"updateTrustedOrganizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrConsensusAddressIsAlreadyAdded(address)\":[{\"details\":\"Error indicating that a consensus address is already added.\",\"params\":{\"addr\":\"The address of the consensus contract that is already added.\"}}],\"ErrConsensusAddressIsNotAdded(address)\":[{\"details\":\"Error indicating that a consensus address is not added.\",\"params\":{\"addr\":\"The address of the consensus contract that is not added.\"}}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrDuplicated(bytes4)\":[{\"details\":\"Error thrown when a duplicated element is detected in an array.\",\"params\":{\"msgSig\":\"The function signature that invoke the error.\"}}],\"ErrEmptyArray()\":[{\"details\":\"Error indicating that an array is empty when it should contain elements.\"}],\"ErrGovernorAddressIsAlreadyAdded(address)\":[{\"details\":\"Error indicating that a governor address has already been added.\",\"params\":{\"addr\":\"The address of the governor that is already added.\"}}],\"ErrInvalidRequest()\":[{\"details\":\"Error indicating that a request is invalid.\"}],\"ErrInvalidThreshold(bytes4)\":[{\"details\":\"Error indicating that the provided threshold is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the invalid threshold applies to.\"}}],\"ErrInvalidVoteWeight(bytes4)\":[{\"details\":\"Error indicating that a vote weight is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that encountered an invalid vote weight.\"}}],\"ErrQueryForDupplicated()\":[{\"details\":\"Error indicating that a query for a duplicate entry was made.\"}],\"ErrQueryForNonExistentConsensusAddress()\":[{\"details\":\"Error indicating that a query was made for a non-existent consensus address.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"ConsensusAddressOfTrustedOrgChanged((address,address,address,uint256,uint256),address)\":{\"details\":\"Emitted when the consensus address of a trusted organization is changed.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the threshold is updated\"},\"TrustedOrganizationsAdded((address,address,address,uint256,uint256)[])\":{\"details\":\"Emitted when the trusted organization is added.\"},\"TrustedOrganizationsRemoved(address[])\":{\"details\":\"Emitted when the trusted organization is removed.\"},\"TrustedOrganizationsUpdated((address,address,address,uint256,uint256)[])\":{\"details\":\"Emitted when the trusted organization is updated.\"}},\"kind\":\"dev\",\"methods\":{\"addTrustedOrganizations((address,address,address,uint256,uint256)[])\":{\"details\":\"Adds a list of addresses into the trusted organization. Requirements: - The weights should larger than 0. - The method caller is admin. - The field `addedBlock` should be blank. Emits the event `TrustedOrganizationAdded` once an organization is added.\"},\"checkThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the threshold.\"},\"countTrustedOrganization()\":{\"details\":\"Returns the number of trusted organizations.\"},\"execChangeConsensusAddressForTrustedOrg(address,address)\":{\"details\":\"Fallback function of `Profile-requestChangeConsensusAddress`. Requirements: - The caller must be the Profile contract. Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\"},\"getAllTrustedOrganizations()\":{\"details\":\"Returns all of the trusted organizations.\"},\"getConsensusWeight(address)\":{\"details\":\"Returns the weight of a consensus.\"},\"getConsensusWeightById(address)\":{\"details\":\"Returns the weight of a consensus.\"},\"getConsensusWeights(address[])\":{\"details\":\"Returns the weights of a list of consensus addresses.\"},\"getConsensusWeightsById(address[])\":{\"details\":\"Returns the weights of a list of consensus addresses.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getGovernorWeight(address)\":{\"details\":\"Returns the weight of a governor.\"},\"getGovernorWeights(address[])\":{\"details\":\"Returns the weights of a list of governor addresses.\"},\"getThreshold()\":{\"details\":\"Returns the threshold.\"},\"getTrustedOrganization(address)\":{\"details\":\"Returns the trusted organization by consensus address. Reverts once the consensus address is non-existent.\"},\"getTrustedOrganizationAt(uint256)\":{\"details\":\"Returns the trusted organization at `_index`.\"},\"initialize((address,address,address,uint256,uint256)[],uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"minimumVoteWeight()\":{\"details\":\"Returns the minimum vote weight to pass the threshold.\"},\"removeTrustedOrganizations(address[])\":{\"details\":\"Removes a list of addresses from the trusted organization. Requirements: - The method caller is admin. Emits the event `TrustedOrganizationRemoved` once an organization is removed.\",\"params\":{\"consensusAddrs\":\"The list of consensus addresses linked to corresponding trusted organization that to be removed.\"}},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setThreshold(uint256,uint256)\":{\"details\":\"Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event.\"},\"sumConsensusWeight(address[])\":{\"details\":\"Returns total weights of the consensus list.\"},\"sumGovernorWeight(address[])\":{\"details\":\"Returns total weights of the governor list.\"},\"totalWeight()\":{\"details\":\"Returns total weights.\"},\"updateTrustedOrganizations((address,address,address,uint256,uint256)[])\":{\"details\":\"Updates weights for a list of existent trusted organization. Requirements: - The weights should larger than 0. - The method caller is admin. Emits the `TrustedOrganizationUpdated` event.\"}},\"stateVariables\":{\"__deprecatedBridgeVoterList\":{\"details\":\"Bridge voters array\"},\"__deprecatedBridgeVoterWeight\":{\"details\":\"Mapping from bridge voter address => weight\"},\"_addedBlock\":{\"details\":\"Mapping from consensus address => added block\"},\"_consensusList\":{\"details\":\"Consensus array\"},\"_consensusWeight\":{\"details\":\"Mapping from consensus address => weight\"},\"_governorList\":{\"details\":\"Governors array\"},\"_governorWeight\":{\"details\":\"Mapping from governor address => weight\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multi-chains/RoninTrustedOrganization.sol\":\"RoninTrustedOrganization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Add a new profile.\\n   *\\n   * @dev Requirements:\\n   * - The profile must not be existent before.\\n   * - Only contract admin can call this method.\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external;\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(address admin, address id, address treasury, bytes calldata pubkey) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey) external;\\n}\\n\",\"keccak256\":\"0x14dfb3198bf21724f5315198e1b23564902821ef56730c7db49e3d1165a36d36\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x0b2a44131128f965e20cbea424987817cb504502e5d83d6523ae45ffeb5e53fe\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/multi-chains/RoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../interfaces/IProfile.sol\\\";\\nimport \\\"../extensions/collections/HasProxyAdmin.sol\\\";\\nimport \\\"../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ncontract RoninTrustedOrganization is IRoninTrustedOrganization, HasProxyAdmin, HasContracts, Initializable {\\n  uint256 internal _num;\\n  uint256 internal _denom;\\n  uint256 internal _totalWeight;\\n  uint256 internal _nonce;\\n\\n  /// @dev Mapping from consensus address => weight\\n  mapping(TConsensus => uint256) internal _consensusWeight;\\n  /// @dev Mapping from governor address => weight\\n  mapping(address => uint256) internal _governorWeight;\\n  /// @dev Mapping from bridge voter address => weight\\n  mapping(address => uint256) internal __deprecatedBridgeVoterWeight;\\n\\n  /// @dev Mapping from consensus address => added block\\n  mapping(TConsensus => uint256) internal _addedBlock;\\n\\n  /// @dev Consensus array\\n  TConsensus[] internal _consensusList;\\n  /// @dev Governors array\\n  address[] internal _governorList;\\n  /// @dev Bridge voters array\\n  address[] internal __deprecatedBridgeVoterList;\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(TrustedOrganization[] calldata trustedOrgs, uint256 num, uint256 denom) external initializer {\\n    if (trustedOrgs.length > 0) {\\n      _addTrustedOrganizations(trustedOrgs);\\n    }\\n    _setThreshold(num, denom);\\n  }\\n\\n  function initializeV2(address profileContract) external reinitializer(2) {\\n    _setContract(ContractType.PROFILE, profileContract);\\n    for (uint i; i < __deprecatedBridgeVoterList.length; ++i) {\\n      delete __deprecatedBridgeVoterWeight[__deprecatedBridgeVoterList[i]];\\n    }\\n    delete __deprecatedBridgeVoterList;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function getThreshold() external view virtual returns (uint256 num_, uint256 denom_) {\\n    return (_num, _denom);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _denom >= _num * _totalWeight;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function minimumVoteWeight() external view virtual returns (uint256) {\\n    return (_num * _totalWeight + _denom - 1) / _denom;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external override onlyAdmin returns (uint256, uint256) {\\n    return _setThreshold(_numerator, _denominator);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata _list) external override onlyAdmin {\\n    _addTrustedOrganizations(_list);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external override onlyAdmin {\\n    if (_list.length == 0) revert ErrEmptyArray();\\n    for (uint256 _i; _i < _list.length; ) {\\n      _updateTrustedOrganization(_list[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit TrustedOrganizationsUpdated(_list);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata list) external override onlyAdmin {\\n    if (list.length == 0) revert ErrEmptyArray();\\n\\n    for (uint _i = 0; _i < list.length; ) {\\n      _removeTrustedOrganization(list[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit TrustedOrganizationsRemoved(list);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function totalWeight() external view virtual returns (uint256) {\\n    return _totalWeight;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256) {\\n    return _getConsensusWeightByConsensus(consensusAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256) {\\n    return _getConsensusWeightByConsensus(__cid2css(cid));\\n  }\\n\\n  function _getConsensusWeightByConsensus(TConsensus consensusAddr) internal view returns (uint256) {\\n    return _consensusWeight[consensusAddr];\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256) {\\n    return _governorWeight[_governor];\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory) {\\n    return _getManyConsensusWeightsByConsensus(list);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory) {\\n    TConsensus[] memory consensusList = __cid2cssBatch(cids);\\n    return _getManyConsensusWeightsByConsensus(consensusList);\\n  }\\n\\n  function _getManyConsensusWeightsByConsensus(TConsensus[] memory list) internal view returns (uint256[] memory res) {\\n    res = new uint256[](list.length);\\n    for (uint i = 0; i < res.length; ++i) {\\n      res[i] = _getConsensusWeightByConsensus(list[i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory _res) {\\n    _res = new uint256[](_list.length);\\n    for (uint _i = 0; _i < _res.length; ) {\\n      _res[_i] = _governorWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata _list) external view returns (uint256 _res) {\\n    for (uint _i = 0; _i < _list.length; ) {\\n      _res += _consensusWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function sumGovernorWeight(address[] calldata _list) external view returns (uint256 _res) {\\n    for (uint _i = 0; _i < _list.length; ) {\\n      _res += _governorWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function countTrustedOrganization() external view override returns (uint256) {\\n    return _consensusList.length;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getAllTrustedOrganizations() external view override returns (TrustedOrganization[] memory list) {\\n    list = new TrustedOrganization[](_consensusList.length);\\n    TConsensus consensus;\\n    for (uint256 _i; _i < list.length; ) {\\n      consensus = _consensusList[_i];\\n      list[_i].consensusAddr = consensus;\\n      list[_i].governor = _governorList[_i];\\n      list[_i].__deprecatedBridgeVoter = address(0);\\n      list[_i].weight = _consensusWeight[consensus];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getTrustedOrganization(TConsensus _consensusAddr) external view returns (TrustedOrganization memory) {\\n    for (uint i = 0; i < _consensusList.length; ++i) {\\n      if (_consensusList[i] == _consensusAddr) {\\n        return getTrustedOrganizationAt(i);\\n      }\\n    }\\n    revert ErrQueryForNonExistentConsensusAddress();\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getTrustedOrganizationAt(uint256 _idx) public view override returns (TrustedOrganization memory) {\\n    TConsensus consensus = _consensusList[_idx];\\n    return\\n      TrustedOrganization(\\n        consensus,\\n        _governorList[_idx],\\n        address(0),\\n        _consensusWeight[consensus],\\n        _addedBlock[consensus]\\n      );\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(\\n    TConsensus oldAddr,\\n    TConsensus newAddr\\n  ) external override onlyContract(ContractType.PROFILE) {\\n    uint256 index = _findTrustedOrgIndexByConsensus(oldAddr);\\n    _consensusList[index] = newAddr;\\n    _consensusWeight[newAddr] = _consensusWeight[oldAddr];\\n    _addedBlock[newAddr] = block.number;\\n\\n    _deleteConsensusInMappings(oldAddr);\\n\\n    emit ConsensusAddressOfTrustedOrgChanged(getTrustedOrganizationAt(index), oldAddr);\\n  }\\n\\n  /**\\n   * @dev Adds a list of trusted organizations.\\n   */\\n  function _addTrustedOrganizations(TrustedOrganization[] calldata _list) internal virtual {\\n    for (uint256 _i; _i < _list.length; ) {\\n      _addTrustedOrganization(_list[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit TrustedOrganizationsAdded(_list);\\n  }\\n\\n  /**\\n   * @dev Adds a trusted organization.\\n   *\\n   * Requirements:\\n   * - The weight is larger than 0.\\n   * - The consensus address is not added.\\n   * - The governor address is not added.\\n   * - The bridge voter address is not added.\\n   *\\n   */\\n  function _addTrustedOrganization(TrustedOrganization memory _v) internal virtual {\\n    if (_v.addedBlock != 0) revert ErrInvalidRequest();\\n    _sanityCheckTrustedOrganizationData(_v);\\n\\n    if (_consensusWeight[_v.consensusAddr] > 0) revert ErrConsensusAddressIsAlreadyAdded(_v.consensusAddr);\\n\\n    if (_governorWeight[_v.governor] > 0) revert ErrGovernorAddressIsAlreadyAdded(_v.governor);\\n\\n    _consensusList.push(_v.consensusAddr);\\n    _consensusWeight[_v.consensusAddr] = _v.weight;\\n\\n    _governorList.push(_v.governor);\\n    _governorWeight[_v.governor] = _v.weight;\\n\\n    _addedBlock[_v.consensusAddr] = block.number;\\n\\n    _totalWeight += _v.weight;\\n  }\\n\\n  /**\\n   * @dev Updates info of an existing trusted org.\\n   * Replace the governor address if they are different, set all weights to the new weight.\\n   *\\n   * Requirements:\\n   * - The weight is larger than 0.\\n   * - The consensus address is already added.\\n   *\\n   */\\n  function _updateTrustedOrganization(TrustedOrganization memory _v) internal virtual {\\n    _sanityCheckTrustedOrganizationData(_v);\\n\\n    uint256 _weight = _consensusWeight[_v.consensusAddr];\\n    if (_weight == 0) revert ErrConsensusAddressIsNotAdded(_v.consensusAddr);\\n\\n    uint256 _count = _consensusList.length;\\n    for (uint256 _i = 0; _i < _count; ) {\\n      if (_consensusList[_i] == _v.consensusAddr) {\\n        _totalWeight -= _weight;\\n        _totalWeight += _v.weight;\\n\\n        // Replace governor address\\n        if (_governorList[_i] != _v.governor) {\\n          if (_governorWeight[_v.governor] != 0) revert ErrQueryForDupplicated();\\n\\n          delete _governorWeight[_governorList[_i]];\\n          _governorList[_i] = _v.governor;\\n        }\\n\\n        // Add new weight for both consensus and governor address\\n        _consensusWeight[_v.consensusAddr] = _v.weight;\\n        _governorWeight[_v.governor] = _v.weight;\\n        return;\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a trusted organization by consensus address.\\n   *\\n   * Requirements:\\n   * - The consensus address is added.\\n   *\\n   */\\n  function _removeTrustedOrganization(TConsensus addr) internal virtual {\\n    uint256 weight = _consensusWeight[addr];\\n    if (weight == 0) revert ErrConsensusAddressIsNotAdded(addr);\\n\\n    uint256 index = _findTrustedOrgIndexByConsensus(addr);\\n\\n    _totalWeight -= weight;\\n    _deleteConsensusInMappings(addr);\\n\\n    uint256 count = _consensusList.length;\\n    _consensusList[index] = _consensusList[count - 1];\\n    _consensusList.pop();\\n\\n    delete _governorWeight[_governorList[index]];\\n    _governorList[index] = _governorList[count - 1];\\n    _governorList.pop();\\n  }\\n\\n  function _findTrustedOrgIndexByConsensus(TConsensus addr) private view returns (uint256 index) {\\n    uint256 count = _consensusList.length;\\n    for (uint256 i = 0; i < count; i++) {\\n      if (_consensusList[i] == addr) {\\n        return i;\\n      }\\n    }\\n  }\\n\\n  function _deleteConsensusInMappings(TConsensus addr) private {\\n    delete _addedBlock[addr];\\n    delete _consensusWeight[addr];\\n  }\\n\\n  /**\\n   * @dev Sets threshold and returns the old one.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function _setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) internal virtual returns (uint256 _previousNum, uint256 _previousDenom) {\\n    if (_numerator > _denominator) revert ErrInvalidThreshold(msg.sig);\\n\\n    _previousNum = _num;\\n    _previousDenom = _denom;\\n    _num = _numerator;\\n    _denom = _denominator;\\n    unchecked {\\n      emit ThresholdUpdated(_nonce++, _numerator, _denominator, _previousNum, _previousDenom);\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that checks trusted organization's data. Reverts if the requirements are not met.\\n   *\\n   * Requirements:\\n   * - The weight must be larger than 0.\\n   * - The consensus address, governor address, and bridge voter address are different.\\n   */\\n  function _sanityCheckTrustedOrganizationData(TrustedOrganization memory _v) private pure {\\n    if (_v.weight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n\\n    address[] memory _addresses = new address[](3);\\n    _addresses[0] = TConsensus.unwrap(_v.consensusAddr);\\n    _addresses[1] = _v.governor;\\n    _addresses[2] = _v.__deprecatedBridgeVoter;\\n\\n    if (AddressArrayUtils.hasDuplicate(_addresses)) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  function __cid2css(address cid) internal view returns (TConsensus) {\\n    return (IProfile(getContract(ContractType.PROFILE)).getId2Profile(cid)).consensus;\\n  }\\n\\n  function __cid2cssBatch(address[] memory cids) internal view returns (TConsensus[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyId2Consensus(cids);\\n  }\\n}\\n\",\"keccak256\":\"0x5629e9c9676597e386212588adf808c5ae511aecb6c3c950ab5450d74ac939e3\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612471806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063a0c302a7116100de578063cc7e6b3b11610097578063db6693a211610071578063db6693a214610349578063de981f1b14610369578063e75235b814610394578063f09267c21461039f57600080fd5b8063cc7e6b3b146102ea578063d78392f8146102fd578063dafae4081461032657600080fd5b8063a0c302a71461026e578063a85c7d6e14610281578063b505a07c14610294578063b7f67e97146102a7578063b8cc3a50146102af578063b9c36209146102c257600080fd5b8063691845a911610130578063691845a9146102125780637c37103c146102255780637de5dedd14610238578063865e6fd314610240578063903bb3c51461025357806396c82e571461026657600080fd5b80630ed285df14610178578063150740051461018d57806329b6eca9146101ab5780632cccb53c146101be57806341feed1c146101de578063520fce62146101ff575b600080fd5b61018b610186366004611b8d565b6103b2565b005b6101956103c8565b6040516101a29190611c0b565b60405180910390f35b61018b6101b9366004611c6e565b610584565b6101d16101cc366004611ccf565b610696565b6040516101a29190611d04565b6101f16101ec366004611c6e565b6106eb565b6040519081526020016101a2565b6101d161020d366004611ccf565b610709565b6101f1610220366004611ccf565b61074e565b61018b610233366004611d3c565b6107ba565b6101f161089c565b61018b61024e366004611d9b565b6108d9565b6101f1610261366004611ccf565b6108f4565b6003546101f1565b61018b61027c366004611dd2565b610959565b61018b61028f366004611ccf565b610a29565b61018b6102a2366004611b8d565b610ac7565b6009546101f1565b6101f16102bd366004611c6e565b610b66565b6102d56102d0366004611df0565b610b8f565b604080519283526020830191909152016101a2565b6101d16102f8366004611ccf565b610bb0565b6101f161030b366004611c6e565b6001600160a01b031660009081526006602052604090205490565b610339610334366004611e12565b610c73565b60405190151581526020016101a2565b61035c610357366004611c6e565b610c9a565b6040516101a29190611e2b565b61037c610377366004611e39565b610d3b565b6040516001600160a01b0390911681526020016101a2565b6001546002546102d5565b61035c6103ad366004611e12565b610db6565b6103ba610e95565b6103c48282610ef1565b5050565b6009546060906001600160401b038111156103e5576103e5611e54565b60405190808252806020026020018201604052801561043e57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816104035790505b5090506000805b825181101561057f576009818154811061046157610461611e6a565b9060005260206000200160009054906101000a90046001600160a01b031691508183828151811061049457610494611e6a565b60209081029190910101516001600160a01b039091169052600a8054829081106104c0576104c0611e6a565b9060005260206000200160009054906101000a90046001600160a01b03168382815181106104f0576104f0611e6a565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050600083828151811061052857610528611e6a565b6020908102919091018101516001600160a01b03928316604091820152918416600090815260059091522054835184908390811061056857610568611e6a565b602090810291909101015160600152600101610445565b505090565b600054600290610100900460ff161580156105a6575060005460ff8083169116105b6105cb5760405162461bcd60e51b81526004016105c290611e80565b60405180910390fd5b6000805461ffff191660ff8316176101001790556105ea600f83610f66565b60005b600b548110156106435760076000600b838154811061060e5761060e611e6a565b60009182526020808320909101546001600160a01b0316835282019290925260400181205561063c81611ee4565b90506105ed565b50610650600b6000611b17565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b606060006106d684848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061100a92505050565b90506106e181611086565b9150505b92915050565b6001600160a01b0381166000908152600560205260408120546106e5565b606061074783838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061108692505050565b9392505050565b6000805b828110156107b3576005600085858481811061077057610770611e6a565b90506020020160208101906107859190611c6e565b6001600160a01b031681526020810191909152604001600020546107a99083611efd565b9150600101610752565b5092915050565b600054610100900460ff16158080156107da5750600054600160ff909116105b806107f45750303b1580156107f4575060005460ff166001145b6108105760405162461bcd60e51b81526004016105c290611e80565b6000805460ff191660011790558015610833576000805461ff0019166101001790555b8315610843576108438585610ef1565b61084d8383611144565b50508015610895576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600060025460016002546003546001546108b69190611f10565b6108c09190611efd565b6108ca9190611f27565b6108d49190611f3a565b905090565b6108e1610e95565b6108ea816111da565b6103c48282610f66565b6000805b828110156107b3576006600085858481811061091657610916611e6a565b905060200201602081019061092b9190611c6e565b6001600160a01b0316815260208101919091526040016000205461094f9083611efd565b91506001016108f8565b600f61096481611213565b600061096f8461125f565b9050826009828154811061098557610985611e6a565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055868316808352600580835260408085208054968a1686528186209690965560088452808520439055918452908320839055905290557faf495cd00cf8595e5fc29a082a18b71cad844d97ab40237b7405693a910c50a2610a0c82610db6565b85604051610a1b929190611f5c565b60405180910390a150505050565b610a31610e95565b6000819003610a53576040516316ee9d3b60e11b815260040160405180910390fd5b60005b81811015610a9557610a8d838383818110610a7357610a73611e6a565b9050602002016020810190610a889190611c6e565b6112c7565b600101610a56565b507f121945697ac30ee0fc67821492cb685c65f0ea4d7f1b710fde44d6e2237f43a7828260405161068a929190611f82565b610acf610e95565b6000819003610af1576040516316ee9d3b60e11b815260040160405180910390fd5b60005b81811015610b3457610b2c838383818110610b1157610b11611e6a565b905060a00201803603810190610b279190612028565b6114f5565b600101610af4565b507fe887c8106c09d1770c0ef0bf8ca62c54766f18b07506801865501783376cbeda828260405161068a9291906120af565b60006106e5610b748361170e565b6001600160a01b031660009081526005602052604090205490565b600080610b9a610e95565b610ba48484611144565b915091505b9250929050565b6060816001600160401b03811115610bca57610bca611e54565b604051908082528060200260200182016040528015610bf3578160200160208202803683370190505b50905060005b81518110156107b35760066000858584818110610c1857610c18611e6a565b9050602002016020810190610c2d9190611c6e565b6001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610c6057610c60611e6a565b6020908102919091010152600101610bf9565b6000600354600154610c859190611f10565b600254610c929084611f10565b101592915050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052905b600954811015610d2157610d0360098281548110610ce657610ce6611e6a565b6000918252602090912001546001600160a01b0385811691161490565b15610d115761074781610db6565b610d1a81611ee4565b9050610cc6565b5060405163e57fdbef60e01b815260040160405180910390fd5b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610d7257610d72612140565b60ff1681526020810191909152604001600020546001600160a01b0316905080610db1578160405163409140df60e11b81526004016105c2919061216a565b919050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600060098381548110610df657610df6611e6a565b9060005260206000200160009054906101000a90046001600160a01b031690506040518060a00160405280826001600160a01b03168152602001600a8581548110610e4357610e43611e6a565b60009182526020808320909101546001600160a01b0390811684528382018390529490941680825260058552604080832054818501529082526008909452929092205460609092019190915292915050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610eef576000356001600160e01b0319166001604051620f948f60ea1b81526004016105c2929190612178565b565b60005b81811015610f3457610f2c838383818110610f1157610f11611e6a565b905060a00201803603810190610f279190612028565b611794565b600101610ef4565b507fc753dbf7952c70ff6b9fa7b626403aa1d2230d97136b635bd5e85bec72bcca6c828260405161068a9291906120af565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115610f9c57610f9c612140565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f811115610fdd57610fdd612140565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6060611016600f610d3b565b6001600160a01b031663b261596f836040518263ffffffff1660e01b815260040161104191906121a6565b600060405180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e591908101906121f2565b606081516001600160401b038111156110a1576110a1611e54565b6040519080825280602002602001820160405280156110ca578160200160208202803683370190505b50905060005b815181101561113e576111118382815181106110ee576110ee611e6a565b60200260200101516001600160a01b031660009081526005602052604090205490565b82828151811061112357611123611e6a565b602090810291909101015261113781611ee4565b90506110d0565b50919050565b60008082841115611176576040516387f6f09560e01b81526001600160e01b03196000351660048201526024016105c2565b50506001805460028054858455908490556004805493840190556040805183815260208101839052929391928592879290917f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f8910160405180910390a49250929050565b806001600160a01b03163b60000361121057604051630bfc64a360e21b81526001600160a01b03821660048201526024016105c2565b50565b61121c81610d3b565b6001600160a01b0316336001600160a01b031614611210576000356001600160e01b03191681336040516320e0f98d60e21b81526004016105c2939291906122a3565b600954600090815b818110156112c0576112a26009828154811061128557611285611e6a565b6000918252602090912001546001600160a01b0386811691161490565b156112ae579392505050565b806112b881611ee4565b915050611267565b5050919050565b6001600160a01b0381166000908152600560205260408120549081900361130c576040516349f748eb60e01b81526001600160a01b03831660048201526024016105c2565b60006113178361125f565b9050816003600082825461132b9190611f27565b90915550506001600160a01b038316600090815260086020908152604080832083905560059091528120556009805490611366600183611f27565b8154811061137657611376611e6a565b600091825260209091200154600980546001600160a01b0390921691849081106113a2576113a2611e6a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060098054806113e1576113e16122da565b6001900381819060005260206000200160006101000a8154906001600160a01b030219169055905560066000600a848154811061142057611420611e6a565b60009182526020808320909101546001600160a01b03168352820192909252604001812055600a611452600183611f27565b8154811061146257611462611e6a565b600091825260209091200154600a80546001600160a01b03909216918490811061148e5761148e611e6a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600a8054806114cd576114cd6122da565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b6114fe81611945565b80516001600160a01b0316600090815260056020526040812054908190036115475781516040516349f748eb60e01b81526001600160a01b0390911660048201526024016105c2565b60095460005b818110156117085761158a6009828154811061156b5761156b611e6a565b60009182526020909120015485516001600160a01b0390811691161490565b156117005782600360008282546115a19190611f27565b90915550506060840151600380546000906115bd908490611efd565b9250508190555083602001516001600160a01b0316600a82815481106115e5576115e5611e6a565b6000918252602090912001546001600160a01b0316146116c0576020808501516001600160a01b03166000908152600690915260409020541561163b576040516346da180960e01b815260040160405180910390fd5b60066000600a838154811061165257611652611e6a565b60009182526020808320909101546001600160a01b03168352828101939093526040909101812055840151600a80548390811061169157611691611e6a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505060608101805182516001600160a01b0390811660009081526005602090815260408083209490945593519484015190911681526006909252902055565b60010161154d565b50505050565b600061171a600f610d3b565b6040516303d1982560e61b81526001600160a01b038481166004830152919091169063f466094090602401600060405180830381865afa158015611762573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261178a9190810190612374565b6020015192915050565b6080810151156117b75760405163129c2ce160e31b815260040160405180910390fd5b6117c081611945565b80516001600160a01b03166000908152600560205260409020541561180657805160405163ada9a35360e01b81526001600160a01b0390911660048201526024016105c2565b6020808201516001600160a01b031660009081526006909152604090205415611853576020810151604051637f5e2f5960e11b81526001600160a01b0390911660048201526024016105c2565b8051600980546001808201835560009283527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90910180546001600160a01b03199081166001600160a01b0395861617909155606085018051865186168552600560209081526040808720929092558088018051600a8054978801815588527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890960180549095169588169590951790935581519351861685526006835280852093909355855190941683526008905281204390559051600380549192909161193d908490611efd565b909155505050565b806060015160000361197857604051637f11b8a360e11b81526001600160e01b03196000351660048201526024016105c2565b60408051600380825260808201909252600091602082016060803683370190505090508160000151816000815181106119b3576119b3611e6a565b60200260200101906001600160a01b031690816001600160a01b0316815250508160200151816001815181106119eb576119eb611e6a565b60200260200101906001600160a01b031690816001600160a01b031681525050816040015181600281518110611a2357611a23611e6a565b60200260200101906001600160a01b031690816001600160a01b031681525050611a4c81611a78565b156103c457604051630d697db160e11b81526001600160e01b03196000351660048201526024016105c2565b60008151600003611a8b57506000919050565b60005b6001835103811015611b0e57600181015b8351811015611b0557838181518110611aba57611aba611e6a565b60200260200101516001600160a01b0316848381518110611add57611add611e6a565b60200260200101516001600160a01b031603611afd575060019392505050565b600101611a9f565b50600101611a8e565b50600092915050565b508054600082559060005260206000209081019061121091905b80821115611b455760008155600101611b31565b5090565b60008083601f840112611b5b57600080fd5b5081356001600160401b03811115611b7257600080fd5b60208301915083602060a083028501011115610ba957600080fd5b60008060208385031215611ba057600080fd5b82356001600160401b03811115611bb657600080fd5b611bc285828601611b49565b90969095509350505050565b80516001600160a01b0390811683526020808301518216908401526040808301519091169083015260608082015190830152608090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015611c4d57611c3a838551611bce565b9284019260a09290920191600101611c27565b50909695505050505050565b6001600160a01b038116811461121057600080fd5b600060208284031215611c8057600080fd5b813561074781611c59565b60008083601f840112611c9d57600080fd5b5081356001600160401b03811115611cb457600080fd5b6020830191508360208260051b8501011115610ba957600080fd5b60008060208385031215611ce257600080fd5b82356001600160401b03811115611cf857600080fd5b611bc285828601611c8b565b6020808252825182820181905260009190848201906040850190845b81811015611c4d57835183529284019291840191600101611d20565b60008060008060608587031215611d5257600080fd5b84356001600160401b03811115611d6857600080fd5b611d7487828801611b49565b90989097506020870135966040013595509350505050565b803560108110610db157600080fd5b60008060408385031215611dae57600080fd5b611db783611d8c565b91506020830135611dc781611c59565b809150509250929050565b60008060408385031215611de557600080fd5b8235611db781611c59565b60008060408385031215611e0357600080fd5b50508035926020909101359150565b600060208284031215611e2457600080fd5b5035919050565b60a081016106e58284611bce565b600060208284031215611e4b57600080fd5b61074782611d8c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060018201611ef657611ef6611ece565b5060010190565b808201808211156106e5576106e5611ece565b80820281158282048414176106e5576106e5611ece565b818103818111156106e5576106e5611ece565b600082611f5757634e487b7160e01b600052601260045260246000fd5b500490565b60c08101611f6a8285611bce565b6001600160a01b039290921660a09190910152919050565b60208082528181018390526000908460408401835b86811015611fc5578235611faa81611c59565b6001600160a01b031682529183019190830190600101611f97565b509695505050505050565b60405160c081016001600160401b0381118282101715611ff257611ff2611e54565b60405290565b604051601f8201601f191681016001600160401b038111828210171561202057612020611e54565b604052919050565b600060a0828403121561203a57600080fd5b60405160a081018181106001600160401b038211171561205c5761205c611e54565b604052823561206a81611c59565b8152602083013561207a81611c59565b6020820152604083013561208d81611c59565b6040820152606083810135908201526080928301359281019290925250919050565b6020808252818101839052600090604080840186845b878110156121335781356120d881611c59565b6001600160a01b03908116845282860135906120f382611c59565b90811684870152828501359061210882611c59565b1683850152606082810135908401526080808301359084015260a092830192909101906001016120c5565b5090979650505050505050565b634e487b7160e01b600052602160045260246000fd5b6010811061216657612166612140565b9052565b602081016106e58284612156565b6001600160e01b03198316815260408101600b831061219957612199612140565b8260208301529392505050565b6020808252825182820181905260009190848201906040850190845b81811015611c4d5783516001600160a01b0316835292840192918401916001016121c2565b8051610db181611c59565b6000602080838503121561220557600080fd5b82516001600160401b038082111561221c57600080fd5b818501915085601f83011261223057600080fd5b81518181111561224257612242611e54565b8060051b9150612253848301611ff8565b818152918301840191848101908884111561226d57600080fd5b938501935b83851015612297578451925061228783611c59565b8282529385019390850190612272565b98975050505050505050565b6001600160e01b031984168152606081016122c16020830185612156565b6001600160a01b03929092166040919091015292915050565b634e487b7160e01b600052603160045260246000fd5b600082601f83011261230157600080fd5b81516001600160401b0381111561231a5761231a611e54565b602061232e601f8301601f19168201611ff8565b828152858284870101111561234257600080fd5b60005b83811015612360578581018301518282018401528201612345565b506000928101909101919091529392505050565b60006020828403121561238657600080fd5b81516001600160401b038082111561239d57600080fd5b9083019060c082860312156123b157600080fd5b6123b9611fd0565b82516123c481611c59565b815260208301516123d481611c59565b602082015260408301516123e781611c59565b60408201526123f8606084016121e7565b6060820152612409608084016121e7565b608082015260a08301518281111561242057600080fd5b61242c878286016122f0565b60a0830152509594505050505056fea26469706673582212206d2b21c3330e8dd570a3e1f28604df1654a7715ea24a32adbd252de98c97f87564736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063a0c302a7116100de578063cc7e6b3b11610097578063db6693a211610071578063db6693a214610349578063de981f1b14610369578063e75235b814610394578063f09267c21461039f57600080fd5b8063cc7e6b3b146102ea578063d78392f8146102fd578063dafae4081461032657600080fd5b8063a0c302a71461026e578063a85c7d6e14610281578063b505a07c14610294578063b7f67e97146102a7578063b8cc3a50146102af578063b9c36209146102c257600080fd5b8063691845a911610130578063691845a9146102125780637c37103c146102255780637de5dedd14610238578063865e6fd314610240578063903bb3c51461025357806396c82e571461026657600080fd5b80630ed285df14610178578063150740051461018d57806329b6eca9146101ab5780632cccb53c146101be57806341feed1c146101de578063520fce62146101ff575b600080fd5b61018b610186366004611b8d565b6103b2565b005b6101956103c8565b6040516101a29190611c0b565b60405180910390f35b61018b6101b9366004611c6e565b610584565b6101d16101cc366004611ccf565b610696565b6040516101a29190611d04565b6101f16101ec366004611c6e565b6106eb565b6040519081526020016101a2565b6101d161020d366004611ccf565b610709565b6101f1610220366004611ccf565b61074e565b61018b610233366004611d3c565b6107ba565b6101f161089c565b61018b61024e366004611d9b565b6108d9565b6101f1610261366004611ccf565b6108f4565b6003546101f1565b61018b61027c366004611dd2565b610959565b61018b61028f366004611ccf565b610a29565b61018b6102a2366004611b8d565b610ac7565b6009546101f1565b6101f16102bd366004611c6e565b610b66565b6102d56102d0366004611df0565b610b8f565b604080519283526020830191909152016101a2565b6101d16102f8366004611ccf565b610bb0565b6101f161030b366004611c6e565b6001600160a01b031660009081526006602052604090205490565b610339610334366004611e12565b610c73565b60405190151581526020016101a2565b61035c610357366004611c6e565b610c9a565b6040516101a29190611e2b565b61037c610377366004611e39565b610d3b565b6040516001600160a01b0390911681526020016101a2565b6001546002546102d5565b61035c6103ad366004611e12565b610db6565b6103ba610e95565b6103c48282610ef1565b5050565b6009546060906001600160401b038111156103e5576103e5611e54565b60405190808252806020026020018201604052801561043e57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816104035790505b5090506000805b825181101561057f576009818154811061046157610461611e6a565b9060005260206000200160009054906101000a90046001600160a01b031691508183828151811061049457610494611e6a565b60209081029190910101516001600160a01b039091169052600a8054829081106104c0576104c0611e6a565b9060005260206000200160009054906101000a90046001600160a01b03168382815181106104f0576104f0611e6a565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050600083828151811061052857610528611e6a565b6020908102919091018101516001600160a01b03928316604091820152918416600090815260059091522054835184908390811061056857610568611e6a565b602090810291909101015160600152600101610445565b505090565b600054600290610100900460ff161580156105a6575060005460ff8083169116105b6105cb5760405162461bcd60e51b81526004016105c290611e80565b60405180910390fd5b6000805461ffff191660ff8316176101001790556105ea600f83610f66565b60005b600b548110156106435760076000600b838154811061060e5761060e611e6a565b60009182526020808320909101546001600160a01b0316835282019290925260400181205561063c81611ee4565b90506105ed565b50610650600b6000611b17565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b606060006106d684848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061100a92505050565b90506106e181611086565b9150505b92915050565b6001600160a01b0381166000908152600560205260408120546106e5565b606061074783838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061108692505050565b9392505050565b6000805b828110156107b3576005600085858481811061077057610770611e6a565b90506020020160208101906107859190611c6e565b6001600160a01b031681526020810191909152604001600020546107a99083611efd565b9150600101610752565b5092915050565b600054610100900460ff16158080156107da5750600054600160ff909116105b806107f45750303b1580156107f4575060005460ff166001145b6108105760405162461bcd60e51b81526004016105c290611e80565b6000805460ff191660011790558015610833576000805461ff0019166101001790555b8315610843576108438585610ef1565b61084d8383611144565b50508015610895576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600060025460016002546003546001546108b69190611f10565b6108c09190611efd565b6108ca9190611f27565b6108d49190611f3a565b905090565b6108e1610e95565b6108ea816111da565b6103c48282610f66565b6000805b828110156107b3576006600085858481811061091657610916611e6a565b905060200201602081019061092b9190611c6e565b6001600160a01b0316815260208101919091526040016000205461094f9083611efd565b91506001016108f8565b600f61096481611213565b600061096f8461125f565b9050826009828154811061098557610985611e6a565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055868316808352600580835260408085208054968a1686528186209690965560088452808520439055918452908320839055905290557faf495cd00cf8595e5fc29a082a18b71cad844d97ab40237b7405693a910c50a2610a0c82610db6565b85604051610a1b929190611f5c565b60405180910390a150505050565b610a31610e95565b6000819003610a53576040516316ee9d3b60e11b815260040160405180910390fd5b60005b81811015610a9557610a8d838383818110610a7357610a73611e6a565b9050602002016020810190610a889190611c6e565b6112c7565b600101610a56565b507f121945697ac30ee0fc67821492cb685c65f0ea4d7f1b710fde44d6e2237f43a7828260405161068a929190611f82565b610acf610e95565b6000819003610af1576040516316ee9d3b60e11b815260040160405180910390fd5b60005b81811015610b3457610b2c838383818110610b1157610b11611e6a565b905060a00201803603810190610b279190612028565b6114f5565b600101610af4565b507fe887c8106c09d1770c0ef0bf8ca62c54766f18b07506801865501783376cbeda828260405161068a9291906120af565b60006106e5610b748361170e565b6001600160a01b031660009081526005602052604090205490565b600080610b9a610e95565b610ba48484611144565b915091505b9250929050565b6060816001600160401b03811115610bca57610bca611e54565b604051908082528060200260200182016040528015610bf3578160200160208202803683370190505b50905060005b81518110156107b35760066000858584818110610c1857610c18611e6a565b9050602002016020810190610c2d9190611c6e565b6001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610c6057610c60611e6a565b6020908102919091010152600101610bf9565b6000600354600154610c859190611f10565b600254610c929084611f10565b101592915050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052905b600954811015610d2157610d0360098281548110610ce657610ce6611e6a565b6000918252602090912001546001600160a01b0385811691161490565b15610d115761074781610db6565b610d1a81611ee4565b9050610cc6565b5060405163e57fdbef60e01b815260040160405180910390fd5b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610d7257610d72612140565b60ff1681526020810191909152604001600020546001600160a01b0316905080610db1578160405163409140df60e11b81526004016105c2919061216a565b919050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600060098381548110610df657610df6611e6a565b9060005260206000200160009054906101000a90046001600160a01b031690506040518060a00160405280826001600160a01b03168152602001600a8581548110610e4357610e43611e6a565b60009182526020808320909101546001600160a01b0390811684528382018390529490941680825260058552604080832054818501529082526008909452929092205460609092019190915292915050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610eef576000356001600160e01b0319166001604051620f948f60ea1b81526004016105c2929190612178565b565b60005b81811015610f3457610f2c838383818110610f1157610f11611e6a565b905060a00201803603810190610f279190612028565b611794565b600101610ef4565b507fc753dbf7952c70ff6b9fa7b626403aa1d2230d97136b635bd5e85bec72bcca6c828260405161068a9291906120af565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115610f9c57610f9c612140565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f811115610fdd57610fdd612140565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6060611016600f610d3b565b6001600160a01b031663b261596f836040518263ffffffff1660e01b815260040161104191906121a6565b600060405180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e591908101906121f2565b606081516001600160401b038111156110a1576110a1611e54565b6040519080825280602002602001820160405280156110ca578160200160208202803683370190505b50905060005b815181101561113e576111118382815181106110ee576110ee611e6a565b60200260200101516001600160a01b031660009081526005602052604090205490565b82828151811061112357611123611e6a565b602090810291909101015261113781611ee4565b90506110d0565b50919050565b60008082841115611176576040516387f6f09560e01b81526001600160e01b03196000351660048201526024016105c2565b50506001805460028054858455908490556004805493840190556040805183815260208101839052929391928592879290917f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f8910160405180910390a49250929050565b806001600160a01b03163b60000361121057604051630bfc64a360e21b81526001600160a01b03821660048201526024016105c2565b50565b61121c81610d3b565b6001600160a01b0316336001600160a01b031614611210576000356001600160e01b03191681336040516320e0f98d60e21b81526004016105c2939291906122a3565b600954600090815b818110156112c0576112a26009828154811061128557611285611e6a565b6000918252602090912001546001600160a01b0386811691161490565b156112ae579392505050565b806112b881611ee4565b915050611267565b5050919050565b6001600160a01b0381166000908152600560205260408120549081900361130c576040516349f748eb60e01b81526001600160a01b03831660048201526024016105c2565b60006113178361125f565b9050816003600082825461132b9190611f27565b90915550506001600160a01b038316600090815260086020908152604080832083905560059091528120556009805490611366600183611f27565b8154811061137657611376611e6a565b600091825260209091200154600980546001600160a01b0390921691849081106113a2576113a2611e6a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060098054806113e1576113e16122da565b6001900381819060005260206000200160006101000a8154906001600160a01b030219169055905560066000600a848154811061142057611420611e6a565b60009182526020808320909101546001600160a01b03168352820192909252604001812055600a611452600183611f27565b8154811061146257611462611e6a565b600091825260209091200154600a80546001600160a01b03909216918490811061148e5761148e611e6a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600a8054806114cd576114cd6122da565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b6114fe81611945565b80516001600160a01b0316600090815260056020526040812054908190036115475781516040516349f748eb60e01b81526001600160a01b0390911660048201526024016105c2565b60095460005b818110156117085761158a6009828154811061156b5761156b611e6a565b60009182526020909120015485516001600160a01b0390811691161490565b156117005782600360008282546115a19190611f27565b90915550506060840151600380546000906115bd908490611efd565b9250508190555083602001516001600160a01b0316600a82815481106115e5576115e5611e6a565b6000918252602090912001546001600160a01b0316146116c0576020808501516001600160a01b03166000908152600690915260409020541561163b576040516346da180960e01b815260040160405180910390fd5b60066000600a838154811061165257611652611e6a565b60009182526020808320909101546001600160a01b03168352828101939093526040909101812055840151600a80548390811061169157611691611e6a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505060608101805182516001600160a01b0390811660009081526005602090815260408083209490945593519484015190911681526006909252902055565b60010161154d565b50505050565b600061171a600f610d3b565b6040516303d1982560e61b81526001600160a01b038481166004830152919091169063f466094090602401600060405180830381865afa158015611762573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261178a9190810190612374565b6020015192915050565b6080810151156117b75760405163129c2ce160e31b815260040160405180910390fd5b6117c081611945565b80516001600160a01b03166000908152600560205260409020541561180657805160405163ada9a35360e01b81526001600160a01b0390911660048201526024016105c2565b6020808201516001600160a01b031660009081526006909152604090205415611853576020810151604051637f5e2f5960e11b81526001600160a01b0390911660048201526024016105c2565b8051600980546001808201835560009283527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90910180546001600160a01b03199081166001600160a01b0395861617909155606085018051865186168552600560209081526040808720929092558088018051600a8054978801815588527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890960180549095169588169590951790935581519351861685526006835280852093909355855190941683526008905281204390559051600380549192909161193d908490611efd565b909155505050565b806060015160000361197857604051637f11b8a360e11b81526001600160e01b03196000351660048201526024016105c2565b60408051600380825260808201909252600091602082016060803683370190505090508160000151816000815181106119b3576119b3611e6a565b60200260200101906001600160a01b031690816001600160a01b0316815250508160200151816001815181106119eb576119eb611e6a565b60200260200101906001600160a01b031690816001600160a01b031681525050816040015181600281518110611a2357611a23611e6a565b60200260200101906001600160a01b031690816001600160a01b031681525050611a4c81611a78565b156103c457604051630d697db160e11b81526001600160e01b03196000351660048201526024016105c2565b60008151600003611a8b57506000919050565b60005b6001835103811015611b0e57600181015b8351811015611b0557838181518110611aba57611aba611e6a565b60200260200101516001600160a01b0316848381518110611add57611add611e6a565b60200260200101516001600160a01b031603611afd575060019392505050565b600101611a9f565b50600101611a8e565b50600092915050565b508054600082559060005260206000209081019061121091905b80821115611b455760008155600101611b31565b5090565b60008083601f840112611b5b57600080fd5b5081356001600160401b03811115611b7257600080fd5b60208301915083602060a083028501011115610ba957600080fd5b60008060208385031215611ba057600080fd5b82356001600160401b03811115611bb657600080fd5b611bc285828601611b49565b90969095509350505050565b80516001600160a01b0390811683526020808301518216908401526040808301519091169083015260608082015190830152608090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015611c4d57611c3a838551611bce565b9284019260a09290920191600101611c27565b50909695505050505050565b6001600160a01b038116811461121057600080fd5b600060208284031215611c8057600080fd5b813561074781611c59565b60008083601f840112611c9d57600080fd5b5081356001600160401b03811115611cb457600080fd5b6020830191508360208260051b8501011115610ba957600080fd5b60008060208385031215611ce257600080fd5b82356001600160401b03811115611cf857600080fd5b611bc285828601611c8b565b6020808252825182820181905260009190848201906040850190845b81811015611c4d57835183529284019291840191600101611d20565b60008060008060608587031215611d5257600080fd5b84356001600160401b03811115611d6857600080fd5b611d7487828801611b49565b90989097506020870135966040013595509350505050565b803560108110610db157600080fd5b60008060408385031215611dae57600080fd5b611db783611d8c565b91506020830135611dc781611c59565b809150509250929050565b60008060408385031215611de557600080fd5b8235611db781611c59565b60008060408385031215611e0357600080fd5b50508035926020909101359150565b600060208284031215611e2457600080fd5b5035919050565b60a081016106e58284611bce565b600060208284031215611e4b57600080fd5b61074782611d8c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060018201611ef657611ef6611ece565b5060010190565b808201808211156106e5576106e5611ece565b80820281158282048414176106e5576106e5611ece565b818103818111156106e5576106e5611ece565b600082611f5757634e487b7160e01b600052601260045260246000fd5b500490565b60c08101611f6a8285611bce565b6001600160a01b039290921660a09190910152919050565b60208082528181018390526000908460408401835b86811015611fc5578235611faa81611c59565b6001600160a01b031682529183019190830190600101611f97565b509695505050505050565b60405160c081016001600160401b0381118282101715611ff257611ff2611e54565b60405290565b604051601f8201601f191681016001600160401b038111828210171561202057612020611e54565b604052919050565b600060a0828403121561203a57600080fd5b60405160a081018181106001600160401b038211171561205c5761205c611e54565b604052823561206a81611c59565b8152602083013561207a81611c59565b6020820152604083013561208d81611c59565b6040820152606083810135908201526080928301359281019290925250919050565b6020808252818101839052600090604080840186845b878110156121335781356120d881611c59565b6001600160a01b03908116845282860135906120f382611c59565b90811684870152828501359061210882611c59565b1683850152606082810135908401526080808301359084015260a092830192909101906001016120c5565b5090979650505050505050565b634e487b7160e01b600052602160045260246000fd5b6010811061216657612166612140565b9052565b602081016106e58284612156565b6001600160e01b03198316815260408101600b831061219957612199612140565b8260208301529392505050565b6020808252825182820181905260009190848201906040850190845b81811015611c4d5783516001600160a01b0316835292840192918401916001016121c2565b8051610db181611c59565b6000602080838503121561220557600080fd5b82516001600160401b038082111561221c57600080fd5b818501915085601f83011261223057600080fd5b81518181111561224257612242611e54565b8060051b9150612253848301611ff8565b818152918301840191848101908884111561226d57600080fd5b938501935b83851015612297578451925061228783611c59565b8282529385019390850190612272565b98975050505050505050565b6001600160e01b031984168152606081016122c16020830185612156565b6001600160a01b03929092166040919091015292915050565b634e487b7160e01b600052603160045260246000fd5b600082601f83011261230157600080fd5b81516001600160401b0381111561231a5761231a611e54565b602061232e601f8301601f19168201611ff8565b828152858284870101111561234257600080fd5b60005b83811015612360578581018301518282018401528201612345565b506000928101909101919091529392505050565b60006020828403121561238657600080fd5b81516001600160401b038082111561239d57600080fd5b9083019060c082860312156123b157600080fd5b6123b9611fd0565b82516123c481611c59565b815260208301516123d481611c59565b602082015260408301516123e781611c59565b60408201526123f8606084016121e7565b6060820152612409608084016121e7565b608082015260a08301518281111561242057600080fd5b61242c878286016122f0565b60a0830152509594505050505056fea26469706673582212206d2b21c3330e8dd570a3e1f28604df1654a7715ea24a32adbd252de98c97f87564736f6c63430008130033",
  "devdoc": {
    "errors": {
      "ErrConsensusAddressIsAlreadyAdded(address)": [
        {
          "details": "Error indicating that a consensus address is already added.",
          "params": {
            "addr": "The address of the consensus contract that is already added."
          }
        }
      ],
      "ErrConsensusAddressIsNotAdded(address)": [
        {
          "details": "Error indicating that a consensus address is not added.",
          "params": {
            "addr": "The address of the consensus contract that is not added."
          }
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrDuplicated(bytes4)": [
        {
          "details": "Error thrown when a duplicated element is detected in an array.",
          "params": {
            "msgSig": "The function signature that invoke the error."
          }
        }
      ],
      "ErrEmptyArray()": [
        {
          "details": "Error indicating that an array is empty when it should contain elements."
        }
      ],
      "ErrGovernorAddressIsAlreadyAdded(address)": [
        {
          "details": "Error indicating that a governor address has already been added.",
          "params": {
            "addr": "The address of the governor that is already added."
          }
        }
      ],
      "ErrInvalidRequest()": [
        {
          "details": "Error indicating that a request is invalid."
        }
      ],
      "ErrInvalidThreshold(bytes4)": [
        {
          "details": "Error indicating that the provided threshold is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that the invalid threshold applies to."
          }
        }
      ],
      "ErrInvalidVoteWeight(bytes4)": [
        {
          "details": "Error indicating that a vote weight is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that encountered an invalid vote weight."
          }
        }
      ],
      "ErrQueryForDupplicated()": [
        {
          "details": "Error indicating that a query for a duplicate entry was made."
        }
      ],
      "ErrQueryForNonExistentConsensusAddress()": [
        {
          "details": "Error indicating that a query was made for a non-existent consensus address."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "events": {
      "ConsensusAddressOfTrustedOrgChanged((address,address,address,uint256,uint256),address)": {
        "details": "Emitted when the consensus address of a trusted organization is changed."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ThresholdUpdated(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the threshold is updated"
      },
      "TrustedOrganizationsAdded((address,address,address,uint256,uint256)[])": {
        "details": "Emitted when the trusted organization is added."
      },
      "TrustedOrganizationsRemoved(address[])": {
        "details": "Emitted when the trusted organization is removed."
      },
      "TrustedOrganizationsUpdated((address,address,address,uint256,uint256)[])": {
        "details": "Emitted when the trusted organization is updated."
      }
    },
    "kind": "dev",
    "methods": {
      "addTrustedOrganizations((address,address,address,uint256,uint256)[])": {
        "details": "Adds a list of addresses into the trusted organization. Requirements: - The weights should larger than 0. - The method caller is admin. - The field `addedBlock` should be blank. Emits the event `TrustedOrganizationAdded` once an organization is added."
      },
      "checkThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the threshold."
      },
      "countTrustedOrganization()": {
        "details": "Returns the number of trusted organizations."
      },
      "execChangeConsensusAddressForTrustedOrg(address,address)": {
        "details": "Fallback function of `Profile-requestChangeConsensusAddress`. Requirements: - The caller must be the Profile contract. Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed."
      },
      "getAllTrustedOrganizations()": {
        "details": "Returns all of the trusted organizations."
      },
      "getConsensusWeight(address)": {
        "details": "Returns the weight of a consensus."
      },
      "getConsensusWeightById(address)": {
        "details": "Returns the weight of a consensus."
      },
      "getConsensusWeights(address[])": {
        "details": "Returns the weights of a list of consensus addresses."
      },
      "getConsensusWeightsById(address[])": {
        "details": "Returns the weights of a list of consensus addresses."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getGovernorWeight(address)": {
        "details": "Returns the weight of a governor."
      },
      "getGovernorWeights(address[])": {
        "details": "Returns the weights of a list of governor addresses."
      },
      "getThreshold()": {
        "details": "Returns the threshold."
      },
      "getTrustedOrganization(address)": {
        "details": "Returns the trusted organization by consensus address. Reverts once the consensus address is non-existent."
      },
      "getTrustedOrganizationAt(uint256)": {
        "details": "Returns the trusted organization at `_index`."
      },
      "initialize((address,address,address,uint256,uint256)[],uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "minimumVoteWeight()": {
        "details": "Returns the minimum vote weight to pass the threshold."
      },
      "removeTrustedOrganizations(address[])": {
        "details": "Removes a list of addresses from the trusted organization. Requirements: - The method caller is admin. Emits the event `TrustedOrganizationRemoved` once an organization is removed.",
        "params": {
          "consensusAddrs": "The list of consensus addresses linked to corresponding trusted organization that to be removed."
        }
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setThreshold(uint256,uint256)": {
        "details": "Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event."
      },
      "sumConsensusWeight(address[])": {
        "details": "Returns total weights of the consensus list."
      },
      "sumGovernorWeight(address[])": {
        "details": "Returns total weights of the governor list."
      },
      "totalWeight()": {
        "details": "Returns total weights."
      },
      "updateTrustedOrganizations((address,address,address,uint256,uint256)[])": {
        "details": "Updates weights for a list of existent trusted organization. Requirements: - The weights should larger than 0. - The method caller is admin. Emits the `TrustedOrganizationUpdated` event."
      }
    },
    "stateVariables": {
      "__deprecatedBridgeVoterList": {
        "details": "Bridge voters array"
      },
      "__deprecatedBridgeVoterWeight": {
        "details": "Mapping from bridge voter address => weight"
      },
      "_addedBlock": {
        "details": "Mapping from consensus address => added block"
      },
      "_consensusList": {
        "details": "Consensus array"
      },
      "_consensusWeight": {
        "details": "Mapping from consensus address => weight"
      },
      "_governorList": {
        "details": "Governors array"
      },
      "_governorWeight": {
        "details": "Mapping from governor address => weight"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 581,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 584,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5764,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_num",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5766,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_denom",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5768,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_totalWeight",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5770,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5776,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_consensusWeight",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_userDefinedValueType(TConsensus)10745,t_uint256)"
      },
      {
        "astId": 5781,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_governorWeight",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5786,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "__deprecatedBridgeVoterWeight",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5792,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_addedBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_userDefinedValueType(TConsensus)10745,t_uint256)"
      },
      {
        "astId": 5797,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_consensusList",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_userDefinedValueType(TConsensus)10745)dyn_storage"
      },
      {
        "astId": 5801,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_governorList",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5805,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "__deprecatedBridgeVoterList",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_userDefinedValueType(TConsensus)10745)dyn_storage": {
        "base": "t_userDefinedValueType(TConsensus)10745",
        "encoding": "dynamic_array",
        "label": "TConsensus[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(TConsensus)10745,t_uint256)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TConsensus)10745",
        "label": "mapping(TConsensus => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(TConsensus)10745": {
        "encoding": "inplace",
        "label": "TConsensus",
        "numberOfBytes": "20"
      }
    }
  }
}