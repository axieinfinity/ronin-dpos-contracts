{
  "address": "0xa7E978bD77b1B64D100eC0a62898395cb4B47a56",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "ErrBridgeVoterIsAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrConsensusAddressIsAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrConsensusAddressIsNotAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrDuplicated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrEmptyArray",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrGovernorAddressIsAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidVoteWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForDupplicated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForNonExistentConsensusAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "orgs",
          "type": "tuple[]"
        }
      ],
      "name": "TrustedOrganizationsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "orgs",
          "type": "address[]"
        }
      ],
      "name": "TrustedOrganizationsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "orgs",
          "type": "tuple[]"
        }
      ],
      "name": "TrustedOrganizationsUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "name": "addTrustedOrganizations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteWeight",
          "type": "uint256"
        }
      ],
      "name": "checkThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countTrustedOrganizations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTrustedOrganizations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getBridgeVoterWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "getBridgeVoterWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "getConsensusWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "getConsensusWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "getGovernorWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "getGovernorWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "num_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denom_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "getTrustedOrganization",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getTrustedOrganizationAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "_trustedOrgs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "__num",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__denom",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVoteWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "removeTrustedOrganizations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "sumBridgeVoterWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "sumConsensusWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "sumGovernorWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_res",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "governor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeVoter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "addedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoninTrustedOrganization.TrustedOrganization[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "name": "updateTrustedOrganizations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fe58ac15ac894d1830b577da8002ab437aba751fd649e0466cc49294916dd24",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xa7E978bD77b1B64D100eC0a62898395cb4B47a56",
    "transactionIndex": 0,
    "gasUsed": "1741402",
    "logsBloom": "0x
    "blockHash": "0x767997c534643e1402838ee4808de00a325423605694e47d6a54c2500f373098",
    "transactionHash": "0x4fe58ac15ac894d1830b577da8002ab437aba751fd649e0466cc49294916dd24",
    "logs": [],
    "blockNumber": 19351156,
    "cumulativeGasUsed": "1741402",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "95921af9e3b453fd5a2d5edf43163a69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"ErrBridgeVoterIsAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrConsensusAddressIsAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrConsensusAddressIsNotAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrDuplicated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEmptyArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrGovernorAddressIsAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidVoteWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForDupplicated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForNonExistentConsensusAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"orgs\",\"type\":\"tuple[]\"}],\"name\":\"TrustedOrganizationsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"orgs\",\"type\":\"address[]\"}],\"name\":\"TrustedOrganizationsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"orgs\",\"type\":\"tuple[]\"}],\"name\":\"TrustedOrganizationsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"name\":\"addTrustedOrganizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countTrustedOrganizations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTrustedOrganizations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getBridgeVoterWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"getBridgeVoterWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"getConsensusWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"getConsensusWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"getGovernorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"getGovernorWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"getTrustedOrganization\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getTrustedOrganizationAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"_trustedOrgs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"__num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__denom\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"removeTrustedOrganizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"sumBridgeVoterWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"sumConsensusWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"sumGovernorWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoninTrustedOrganization.TrustedOrganization[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"name\":\"updateTrustedOrganizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrBridgeVoterIsAlreadyAdded(address)\":[{\"details\":\"Error indicating that a bridge voter has already been added.\",\"params\":{\"voter\":\"The address of the bridge voter that is already added.\"}}],\"ErrConsensusAddressIsAlreadyAdded(address)\":[{\"details\":\"Error indicating that a consensus address is already added.\",\"params\":{\"addr\":\"The address of the consensus contract that is already added.\"}}],\"ErrConsensusAddressIsNotAdded(address)\":[{\"details\":\"Error indicating that a consensus address is not added.\",\"params\":{\"addr\":\"The address of the consensus contract that is not added.\"}}],\"ErrDuplicated(bytes4)\":[{\"details\":\"Error thrown when a duplicated element is detected in an array.\",\"params\":{\"msgSig\":\"The function signature that invoke the error.\"}}],\"ErrEmptyArray()\":[{\"details\":\"Error indicating that an array is empty when it should contain elements.\"}],\"ErrGovernorAddressIsAlreadyAdded(address)\":[{\"details\":\"Error indicating that a governor address has already been added.\",\"params\":{\"addr\":\"The address of the governor that is already added.\"}}],\"ErrInvalidRequest()\":[{\"details\":\"Error indicating that a request is invalid.\"}],\"ErrInvalidThreshold(bytes4)\":[{\"details\":\"Error indicating that the provided threshold is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the invalid threshold applies to.\"}}],\"ErrInvalidVoteWeight(bytes4)\":[{\"details\":\"Error indicating that a vote weight is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that encountered an invalid vote weight.\"}}],\"ErrQueryForDupplicated()\":[{\"details\":\"Error indicating that a query for a duplicate entry was made.\"}],\"ErrQueryForNonExistentConsensusAddress()\":[{\"details\":\"Error indicating that a query was made for a non-existent consensus address.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}]},\"kind\":\"dev\",\"methods\":{\"addTrustedOrganizations((address,address,address,uint256,uint256)[])\":{\"details\":\"Adds a list of addresses into the trusted organization. Requirements: - The weights should larger than 0. - The method caller is admin. - The field `addedBlock` should be blank. Emits the event `TrustedOrganizationAdded` once an organization is added.\"},\"checkThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the threshold.\"},\"countTrustedOrganizations()\":{\"details\":\"Returns the number of trusted organizations.\"},\"getAllTrustedOrganizations()\":{\"details\":\"Returns all of the trusted organizations.\"},\"getBridgeVoterWeight(address)\":{\"details\":\"Returns the weight of a bridge voter.\"},\"getBridgeVoterWeights(address[])\":{\"details\":\"Returns the weights of a list of bridge voter addresses.\"},\"getConsensusWeight(address)\":{\"details\":\"Returns the weight of a consensus.\"},\"getConsensusWeights(address[])\":{\"details\":\"Returns the weights of a list of consensus addresses.\"},\"getGovernorWeight(address)\":{\"details\":\"Returns the weight of a governor.\"},\"getGovernorWeights(address[])\":{\"details\":\"Returns the weights of a list of governor addresses.\"},\"getThreshold()\":{\"details\":\"Returns the threshold.\"},\"getTrustedOrganization(address)\":{\"details\":\"Returns the trusted organization by consensus address. Reverts once the consensus address is non-existent.\"},\"getTrustedOrganizationAt(uint256)\":{\"details\":\"Returns the trusted organization at `_index`.\"},\"initialize((address,address,address,uint256,uint256)[],uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"minimumVoteWeight()\":{\"details\":\"Returns the minimum vote weight to pass the threshold.\"},\"removeTrustedOrganizations(address[])\":{\"details\":\"Removes a list of addresses from the trusted organization. Requirements: - The method caller is admin. Emits the event `TrustedOrganizationRemoved` once an organization is removed.\",\"params\":{\"_consensusAddrs\":\"The list of consensus addresses linked to corresponding trusted organization that to be removed.\"}},\"setThreshold(uint256,uint256)\":{\"details\":\"Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event.\"},\"sumBridgeVoterWeights(address[])\":{\"details\":\"Returns total weights of the bridge voter list.\"},\"sumConsensusWeights(address[])\":{\"details\":\"Returns total weights of the consensus list.\"},\"sumGovernorWeights(address[])\":{\"details\":\"Returns total weights of the governor list.\"},\"totalWeights()\":{\"details\":\"Returns total weights.\"},\"updateTrustedOrganizations((address,address,address,uint256,uint256)[])\":{\"details\":\"Updates weights for a list of existent trusted organization. Requirements: - The weights should larger than 0. - The method caller is admin. Emits the `TrustedOrganizationUpdated` event.\"}},\"stateVariables\":{\"_addedBlock\":{\"details\":\"Mapping from consensus address => added block\"},\"_bridgeVoterList\":{\"details\":\"Bridge voters array\"},\"_bridgeVoterWeight\":{\"details\":\"Mapping from bridge voter address => weight\"},\"_consensusList\":{\"details\":\"Consensus array\"},\"_consensusWeight\":{\"details\":\"Mapping from consensus address => weight\"},\"_governorList\":{\"details\":\"Governors array\"},\"_governorWeight\":{\"details\":\"Mapping from governor address => weight\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multi-chains/RoninTrustedOrganization.sol\":\"RoninTrustedOrganization\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a bridge voter has already been added.\\n   * @param voter The address of the bridge voter that is already added.\\n   */\\n  error ErrBridgeVoterIsAlreadyAdded(address voter);\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(address addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x28b0407cf740164f3ddf4a44952423604439cda580f286c6ed1edcdb59b219d0\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/multi-chains/RoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../extensions/collections/HasProxyAdmin.sol\\\";\\n\\ncontract RoninTrustedOrganization is IRoninTrustedOrganization, HasProxyAdmin, Initializable {\\n  uint256 internal _num;\\n  uint256 internal _denom;\\n  uint256 internal _totalWeight;\\n  uint256 internal _nonce;\\n\\n  /// @dev Mapping from consensus address => weight\\n  mapping(address => uint256) internal _consensusWeight;\\n  /// @dev Mapping from governor address => weight\\n  mapping(address => uint256) internal _governorWeight;\\n  /// @dev Mapping from bridge voter address => weight\\n  mapping(address => uint256) internal _bridgeVoterWeight;\\n\\n  /// @dev Mapping from consensus address => added block\\n  mapping(address => uint256) internal _addedBlock;\\n\\n  /// @dev Consensus array\\n  address[] internal _consensusList;\\n  /// @dev Governors array\\n  address[] internal _governorList;\\n  /// @dev Bridge voters array\\n  address[] internal _bridgeVoterList;\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    TrustedOrganization[] calldata _trustedOrgs,\\n    uint256 __num,\\n    uint256 __denom\\n  ) external initializer {\\n    if (_trustedOrgs.length > 0) {\\n      _addTrustedOrganizations(_trustedOrgs);\\n    }\\n    _setThreshold(__num, __denom);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function getThreshold() external view virtual returns (uint256 num_, uint256 denom_) {\\n    return (_num, _denom);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _denom >= _num * _totalWeight;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function minimumVoteWeight() external view virtual returns (uint256) {\\n    return (_num * _totalWeight + _denom - 1) / _denom;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external override onlyAdmin returns (uint256, uint256) {\\n    return _setThreshold(_numerator, _denominator);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata _list) external override onlyAdmin {\\n    _addTrustedOrganizations(_list);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external override onlyAdmin {\\n    if (_list.length == 0) revert ErrEmptyArray();\\n    for (uint256 _i; _i < _list.length; ) {\\n      _updateTrustedOrganization(_list[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit TrustedOrganizationsUpdated(_list);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function removeTrustedOrganizations(address[] calldata _list) external override onlyAdmin {\\n    if (_list.length == 0) revert ErrEmptyArray();\\n\\n    for (uint _i = 0; _i < _list.length; ) {\\n      _removeTrustedOrganization(_list[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit TrustedOrganizationsRemoved(_list);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function totalWeights() external view virtual returns (uint256) {\\n    return _totalWeight;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256) {\\n    return _consensusWeight[_consensusAddr];\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256) {\\n    return _governorWeight[_governor];\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256) {\\n    return _bridgeVoterWeight[_addr];\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory _res) {\\n    _res = new uint256[](_list.length);\\n    for (uint _i = 0; _i < _res.length; ) {\\n      _res[_i] = _consensusWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory _res) {\\n    _res = new uint256[](_list.length);\\n    for (uint _i = 0; _i < _res.length; ) {\\n      _res[_i] = _governorWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory _res) {\\n    _res = new uint256[](_list.length);\\n    for (uint _i = 0; _i < _res.length; ) {\\n      _res[_i] = _bridgeVoterWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res) {\\n    for (uint _i = 0; _i < _list.length; ) {\\n      _res += _consensusWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res) {\\n    for (uint _i = 0; _i < _list.length; ) {\\n      _res += _governorWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res) {\\n    for (uint _i = 0; _i < _list.length; ) {\\n      _res += _bridgeVoterWeight[_list[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function countTrustedOrganizations() external view override returns (uint256) {\\n    return _consensusList.length;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getAllTrustedOrganizations() external view override returns (TrustedOrganization[] memory _list) {\\n    _list = new TrustedOrganization[](_consensusList.length);\\n    address _addr;\\n    for (uint256 _i; _i < _list.length; ) {\\n      _addr = _consensusList[_i];\\n      _list[_i].consensusAddr = _addr;\\n      _list[_i].governor = _governorList[_i];\\n      _list[_i].bridgeVoter = _bridgeVoterList[_i];\\n      _list[_i].weight = _consensusWeight[_addr];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory) {\\n    for (uint _i = 0; _i < _consensusList.length; ) {\\n      if (_consensusList[_i] == _consensusAddr) {\\n        return getTrustedOrganizationAt(_i);\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    revert ErrQueryForNonExistentConsensusAddress();\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninTrustedOrganization\\n   */\\n  function getTrustedOrganizationAt(uint256 _idx) public view override returns (TrustedOrganization memory) {\\n    address _addr = _consensusList[_idx];\\n    return\\n      TrustedOrganization(\\n        _addr,\\n        _governorList[_idx],\\n        _bridgeVoterList[_idx],\\n        _consensusWeight[_addr],\\n        _addedBlock[_addr]\\n      );\\n  }\\n\\n  /**\\n   * @dev Adds a list of trusted organizations.\\n   */\\n  function _addTrustedOrganizations(TrustedOrganization[] calldata _list) internal virtual {\\n    for (uint256 _i; _i < _list.length; ) {\\n      _addTrustedOrganization(_list[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit TrustedOrganizationsAdded(_list);\\n  }\\n\\n  /**\\n   * @dev Adds a trusted organization.\\n   *\\n   * Requirements:\\n   * - The weight is larger than 0.\\n   * - The consensus address is not added.\\n   * - The govenor address is not added.\\n   * - The bridge voter address is not added.\\n   *\\n   */\\n  function _addTrustedOrganization(TrustedOrganization memory _v) internal virtual {\\n    if (_v.addedBlock != 0) revert ErrInvalidRequest();\\n    _sanityCheckTrustedOrganizationData(_v);\\n\\n    if (_consensusWeight[_v.consensusAddr] > 0) revert ErrConsensusAddressIsAlreadyAdded(_v.consensusAddr);\\n\\n    if (_governorWeight[_v.governor] > 0) revert ErrGovernorAddressIsAlreadyAdded(_v.governor);\\n\\n    if (_bridgeVoterWeight[_v.bridgeVoter] > 0) revert ErrBridgeVoterIsAlreadyAdded(_v.bridgeVoter);\\n\\n    _consensusList.push(_v.consensusAddr);\\n    _consensusWeight[_v.consensusAddr] = _v.weight;\\n\\n    _governorList.push(_v.governor);\\n    _governorWeight[_v.governor] = _v.weight;\\n\\n    _bridgeVoterList.push(_v.bridgeVoter);\\n    _bridgeVoterWeight[_v.bridgeVoter] = _v.weight;\\n\\n    _addedBlock[_v.consensusAddr] = block.number;\\n\\n    _totalWeight += _v.weight;\\n  }\\n\\n  /**\\n   * @dev Updates a trusted organization.\\n   *\\n   * Requirements:\\n   * - The weight is larger than 0.\\n   * - The consensus address is already added.\\n   *\\n   */\\n  function _updateTrustedOrganization(TrustedOrganization memory _v) internal virtual {\\n    _sanityCheckTrustedOrganizationData(_v);\\n\\n    uint256 _weight = _consensusWeight[_v.consensusAddr];\\n    if (_weight == 0) revert ErrConsensusAddressIsNotAdded(_v.consensusAddr);\\n\\n    uint256 _count = _consensusList.length;\\n    for (uint256 _i = 0; _i < _count; ) {\\n      if (_consensusList[_i] == _v.consensusAddr) {\\n        _totalWeight -= _weight;\\n        _totalWeight += _v.weight;\\n\\n        if (_governorList[_i] != _v.governor) {\\n          if (_governorWeight[_v.governor] != 0) revert ErrQueryForDupplicated();\\n\\n          delete _governorWeight[_governorList[_i]];\\n          _governorList[_i] = _v.governor;\\n        }\\n\\n        if (_bridgeVoterList[_i] != _v.bridgeVoter) {\\n          if (_bridgeVoterWeight[_v.bridgeVoter] != 0) revert ErrQueryForDupplicated();\\n\\n          delete _bridgeVoterWeight[_bridgeVoterList[_i]];\\n          _bridgeVoterList[_i] = _v.bridgeVoter;\\n        }\\n\\n        _consensusWeight[_v.consensusAddr] = _v.weight;\\n        _governorWeight[_v.governor] = _v.weight;\\n        _bridgeVoterWeight[_v.bridgeVoter] = _v.weight;\\n        return;\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a trusted organization.\\n   *\\n   * Requirements:\\n   * - The consensus address is added.\\n   *\\n   */\\n  function _removeTrustedOrganization(address _addr) internal virtual {\\n    uint256 _weight = _consensusWeight[_addr];\\n    if (_weight == 0) revert ErrConsensusAddressIsNotAdded(_addr);\\n\\n    uint256 _index;\\n    uint256 _count = _consensusList.length;\\n    for (uint256 _i = 0; _i < _count; ) {\\n      if (_consensusList[_i] == _addr) {\\n        _index = _i;\\n        break;\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    _totalWeight -= _weight;\\n\\n    delete _addedBlock[_addr];\\n    delete _consensusWeight[_addr];\\n    _consensusList[_index] = _consensusList[_count - 1];\\n    _consensusList.pop();\\n\\n    delete _governorWeight[_governorList[_index]];\\n    _governorList[_index] = _governorList[_count - 1];\\n    _governorList.pop();\\n\\n    delete _bridgeVoterWeight[_bridgeVoterList[_index]];\\n    _bridgeVoterList[_index] = _bridgeVoterList[_count - 1];\\n    _bridgeVoterList.pop();\\n  }\\n\\n  /**\\n   * @dev Sets threshold and returns the old one.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function _setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) internal virtual returns (uint256 _previousNum, uint256 _previousDenom) {\\n    if (_numerator > _denominator) revert ErrInvalidThreshold(msg.sig);\\n\\n    _previousNum = _num;\\n    _previousDenom = _denom;\\n    _num = _numerator;\\n    _denom = _denominator;\\n    unchecked {\\n      emit ThresholdUpdated(_nonce++, _numerator, _denominator, _previousNum, _previousDenom);\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that checks trusted organization's data. Reverts if the requirements are not met.\\n   *\\n   * Requirements:\\n   * - The weight must be larger than 0.\\n   * - The consensus address, governor address, and bridge voter address are different.\\n   */\\n  function _sanityCheckTrustedOrganizationData(TrustedOrganization memory _v) private pure {\\n    if (_v.weight == 0) revert ErrInvalidVoteWeight(msg.sig);\\n\\n    address[] memory _addresses = new address[](3);\\n    _addresses[0] = _v.consensusAddr;\\n    _addresses[1] = _v.governor;\\n    _addresses[2] = _v.bridgeVoter;\\n\\n    if (AddressArrayUtils.hasDuplicate(_addresses)) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n}\\n\",\"keccak256\":\"0x7cf1258dab3c0071272f5733b3a9ce6b1dda9d12abd055f3359934c7c1fc34f2\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\",\"keccak256\":\"0x3914292a405307cba9e93085edcaf5f1203ca2d55abf998bf1d2af1e86f5a4c6\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD\\n}\\n\",\"keccak256\":\"0xf72feff9afafcb5cadc1b05c6e0b998ea5d66c7ece57c3e482e560d0a1bb4079\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xa98cec38c640c4e37f475debbcd366226f1188c3f5ea6e29de768bd33e021873\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e8a806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063b505a07c116100b8578063d9d5dadb1161007c578063d9d5dadb146102d5578063dafae408146102e8578063db6693a21461030b578063e75235b81461032b578063e8c0685e14610336578063f09267c21461034957600080fd5b8063b505a07c14610256578063b9c3620914610269578063cacf8fb514610291578063cc7e6b3b14610299578063d78392f8146102ac57600080fd5b80635f14a1c31161010a5780635f14a1c3146101fa578063708236251461020d5780637c37103c146102205780637de5dedd14610233578063926323d51461023b578063a85c7d6e1461024357600080fd5b80630ed285df14610147578063150740051461015c57806341feed1c1461017a578063520fce62146101b157806356241911146101d1575b600080fd5b61015a6101553660046119d3565b61035c565b005b610164610372565b6040516101719190611a52565b60405180910390f35b6101a3610188366004611abc565b6001600160a01b031660009081526005602052604090205490565b604051908152602001610171565b6101c46101bf366004611ad7565b61055e565b6040516101719190611b4c565b6101a36101df366004611abc565b6001600160a01b031660009081526007602052604090205490565b6101a3610208366004611ad7565b610629565b6101c461021b366004611ad7565b61068e565b61015a61022e366004611b84565b610752565b6101a3610880565b6003546101a3565b61015a610251366004611ad7565b6108bd565b61015a6102643660046119d3565b610967565b61027c610277366004611bd5565b610a06565b60408051928352602083019190915201610171565b6009546101a3565b6101c46102a7366004611ad7565b610a27565b6101a36102ba366004611abc565b6001600160a01b031660009081526006602052604090205490565b6101a36102e3366004611ad7565b610aeb565b6102fb6102f6366004611bf7565b610b50565b6040519015158152602001610171565b61031e610319366004611abc565b610b77565b6040516101719190611c10565b60015460025461027c565b6101a3610344366004611ad7565b610c16565b61031e610357366004611bf7565b610c7b565b610364610d81565b61036e8282610ddd565b5050565b60095460609067ffffffffffffffff81111561039057610390611c24565b6040519080825280602002602001820160405280156103e957816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816103ae5790505b5090506000805b8251811015610559576009818154811061040c5761040c611c3a565b9060005260206000200160009054906101000a90046001600160a01b031691508183828151811061043f5761043f611c3a565b60209081029190910101516001600160a01b039091169052600a80548290811061046b5761046b611c3a565b9060005260206000200160009054906101000a90046001600160a01b031683828151811061049b5761049b611c3a565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050600b81815481106104d2576104d2611c3a565b9060005260206000200160009054906101000a90046001600160a01b031683828151811061050257610502611c3a565b6020908102919091018101516001600160a01b03928316604091820152918416600090815260059091522054835184908390811061054257610542611c3a565b6020908102919091010151606001526001016103f0565b505090565b60608167ffffffffffffffff81111561057957610579611c24565b6040519080825280602002602001820160405280156105a2578160200160208202803683370190505b50905060005b815181101561062257600560008585848181106105c7576105c7611c3a565b90506020020160208101906105dc9190611abc565b6001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061060f5761060f611c3a565b60209081029190910101526001016105a8565b5092915050565b6000805b82811015610622576006600085858481811061064b5761064b611c3a565b90506020020160208101906106609190611abc565b6001600160a01b031681526020810191909152604001600020546106849083611c66565b915060010161062d565b60608167ffffffffffffffff8111156106a9576106a9611c24565b6040519080825280602002602001820160405280156106d2578160200160208202803683370190505b50905060005b815181101561062257600760008585848181106106f7576106f7611c3a565b905060200201602081019061070c9190611abc565b6001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061073f5761073f611c3a565b60209081029190910101526001016106d8565b600054610100900460ff16158080156107725750600054600160ff909116105b8061078c5750303b15801561078c575060005460ff166001145b6107f45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610817576000805461ff0019166101001790555b8315610827576108278585610ddd565b6108318383610e52565b50508015610879576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000600254600160025460035460015461089a9190611c79565b6108a49190611c66565b6108ae9190611c90565b6108b89190611ca3565b905090565b6108c5610d81565b60008190036108e7576040516316ee9d3b60e11b815260040160405180910390fd5b60005b818110156109295761092183838381811061090757610907611c3a565b905060200201602081019061091c9190611abc565b610ee8565b6001016108ea565b507f121945697ac30ee0fc67821492cb685c65f0ea4d7f1b710fde44d6e2237f43a7828260405161095b929190611cc5565b60405180910390a15050565b61096f610d81565b6000819003610991576040516316ee9d3b60e11b815260040160405180910390fd5b60005b818110156109d4576109cc8383838181106109b1576109b1611c3a565b905060a002018036038101906109c79190611d11565b61124a565b600101610994565b507fe887c8106c09d1770c0ef0bf8ca62c54766f18b07506801865501783376cbeda828260405161095b929190611da2565b600080610a11610d81565b610a1b8484610e52565b915091505b9250929050565b60608167ffffffffffffffff811115610a4257610a42611c24565b604051908082528060200260200182016040528015610a6b578160200160208202803683370190505b50905060005b81518110156106225760066000858584818110610a9057610a90611c3a565b9050602002016020810190610aa59190611abc565b6001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610ad857610ad8611c3a565b6020908102919091010152600101610a71565b6000805b828110156106225760076000858584818110610b0d57610b0d611c3a565b9050602002016020810190610b229190611abc565b6001600160a01b03168152602081019190915260400160002054610b469083611c66565b9150600101610aef565b6000600354600154610b629190611c79565b600254610b6f9084611c79565b101592915050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101829052905b600954811015610bfc57826001600160a01b031660098281548110610bca57610bca611c3a565b6000918252602090912001546001600160a01b031603610bf457610bed81610c7b565b9392505050565b600101610ba3565b5060405163e57fdbef60e01b815260040160405180910390fd5b6000805b828110156106225760056000858584818110610c3857610c38611c3a565b9050602002016020810190610c4d9190611abc565b6001600160a01b03168152602081019190915260400160002054610c719083611c66565b9150600101610c1a565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600060098381548110610cbb57610cbb611c3a565b9060005260206000200160009054906101000a90046001600160a01b031690506040518060a00160405280826001600160a01b03168152602001600a8581548110610d0857610d08611c3a565b600091825260209182902001546001600160a01b03168252600b8054929091019186908110610d3957610d39611c3a565b60009182526020808320909101546001600160a01b03908116845294909416808252600585526040808320548487015290825260089094528390205492019190915292915050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610ddb576000356001600160e01b0319166001604051620f948f60ea1b81526004016107eb929190611e2b565b565b60005b81811015610e2057610e18838383818110610dfd57610dfd611c3a565b905060a00201803603810190610e139190611d11565b611571565b600101610de0565b507fc753dbf7952c70ff6b9fa7b626403aa1d2230d97136b635bd5e85bec72bcca6c828260405161095b929190611da2565b60008082841115610e84576040516387f6f09560e01b81526001600160e01b03196000351660048201526024016107eb565b50506001805460028054858455908490556004805493840190556040805183815260208101839052929391928592879290917f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f8910160405180910390a49250929050565b6001600160a01b03811660009081526005602052604081205490819003610f2d576040516349f748eb60e01b81526001600160a01b03831660048201526024016107eb565b600954600090815b81811015610f8457846001600160a01b031660098281548110610f5a57610f5a611c3a565b6000918252602090912001546001600160a01b031603610f7c57809250610f84565b600101610f35565b508260036000828254610f979190611c90565b90915550506001600160a01b038416600090815260086020908152604080832083905560059091528120556009610fcf600183611c90565b81548110610fdf57610fdf611c3a565b600091825260209091200154600980546001600160a01b03909216918490811061100b5761100b611c3a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600980548061104a5761104a611e67565b6001900381819060005260206000200160006101000a8154906001600160a01b030219169055905560066000600a848154811061108957611089611c3a565b60009182526020808320909101546001600160a01b03168352820192909252604001812055600a6110bb600183611c90565b815481106110cb576110cb611c3a565b600091825260209091200154600a80546001600160a01b0390921691849081106110f7576110f7611c3a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600a80548061113657611136611e67565b6001900381819060005260206000200160006101000a8154906001600160a01b030219169055905560076000600b848154811061117557611175611c3a565b60009182526020808320909101546001600160a01b03168352820192909252604001812055600b6111a7600183611c90565b815481106111b7576111b7611c3a565b600091825260209091200154600b80546001600160a01b0390921691849081106111e3576111e3611c3a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b80548061122257611222611e67565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b611253816117bc565b80516001600160a01b03166000908152600560205260408120549081900361129c5781516040516349f748eb60e01b81526001600160a01b0390911660048201526024016107eb565b60095460005b8181101561156b5783600001516001600160a01b0316600982815481106112cb576112cb611c3a565b6000918252602090912001546001600160a01b0316036115635782600360008282546112f79190611c90565b9091555050606084015160038054600090611313908490611c66565b9250508190555083602001516001600160a01b0316600a828154811061133b5761133b611c3a565b6000918252602090912001546001600160a01b031614611416576020808501516001600160a01b031660009081526006909152604090205415611391576040516346da180960e01b815260040160405180910390fd5b60066000600a83815481106113a8576113a8611c3a565b60009182526020808320909101546001600160a01b03168352828101939093526040909101812055840151600a8054839081106113e7576113e7611c3a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b83604001516001600160a01b0316600b828154811061143757611437611c3a565b6000918252602090912001546001600160a01b031614611511576040808501516001600160a01b03166000908152600760205220541561148a576040516346da180960e01b815260040160405180910390fd5b60076000600b83815481106114a1576114a1611c3a565b60009182526020808320909101546001600160a01b031683528201929092526040908101822091909155840151600b8054839081106114e2576114e2611c3a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b50505060608101805182516001600160a01b0390811660009081526005602090815260408083209490945584518187015184168352600682528483205593519483015190911681526007909252902055565b6001016112a2565b50505050565b6080810151156115945760405163129c2ce160e31b815260040160405180910390fd5b61159d816117bc565b80516001600160a01b0316600090815260056020526040902054156115e357805160405163ada9a35360e01b81526001600160a01b0390911660048201526024016107eb565b6020808201516001600160a01b031660009081526006909152604090205415611630576020810151604051637f5e2f5960e11b81526001600160a01b0390911660048201526024016107eb565b6040808201516001600160a01b03166000908152600760205220541561167a576040808201519051630f69702d60e01b81526001600160a01b0390911660048201526024016107eb565b8051600980546001808201835560009283527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90910180546001600160a01b03199081166001600160a01b0395861617909155606085018051865186168552600560209081526040808720929092558088018051600a805480890182559089527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180548716918a16919091179055835190518816875260068252828720558188018051600b8054978801815588527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99096018054909516958816959095179093558151935186168552600783528085209390935585519094168352600890528120439055905160038054919290916117b4908490611c66565b909155505050565b80606001516000036117ef57604051637f11b8a360e11b81526001600160e01b03196000351660048201526024016107eb565b604080516003808252608082019092526000916020820160608036833701905050905081600001518160008151811061182a5761182a611c3a565b60200260200101906001600160a01b031690816001600160a01b03168152505081602001518160018151811061186257611862611c3a565b60200260200101906001600160a01b031690816001600160a01b03168152505081604001518160028151811061189a5761189a611c3a565b60200260200101906001600160a01b031690816001600160a01b0316815250506118c3816118ef565b1561036e57604051630d697db160e11b81526001600160e01b03196000351660048201526024016107eb565b6000815160000361190257506000919050565b60005b600183510381101561198557600181015b835181101561197c5783818151811061193157611931611c3a565b60200260200101516001600160a01b031684838151811061195457611954611c3a565b60200260200101516001600160a01b031603611974575060019392505050565b600101611916565b50600101611905565b50600092915050565b60008083601f8401126119a057600080fd5b50813567ffffffffffffffff8111156119b857600080fd5b60208301915083602060a083028501011115610a2057600080fd5b600080602083850312156119e657600080fd5b823567ffffffffffffffff8111156119fd57600080fd5b611a098582860161198e565b90969095509350505050565b80516001600160a01b0390811683526020808301518216908401526040808301519091169083015260608082015190830152608090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015611a9457611a81838551611a15565b9284019260a09290920191600101611a6e565b50909695505050505050565b80356001600160a01b0381168114611ab757600080fd5b919050565b600060208284031215611ace57600080fd5b610bed82611aa0565b60008060208385031215611aea57600080fd5b823567ffffffffffffffff80821115611b0257600080fd5b818501915085601f830112611b1657600080fd5b813581811115611b2557600080fd5b8660208260051b8501011115611b3a57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015611a9457835183529284019291840191600101611b68565b60008060008060608587031215611b9a57600080fd5b843567ffffffffffffffff811115611bb157600080fd5b611bbd8782880161198e565b90989097506020870135966040013595509350505050565b60008060408385031215611be857600080fd5b50508035926020909101359150565b600060208284031215611c0957600080fd5b5035919050565b60a08101611c1e8284611a15565b92915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115611c1e57611c1e611c50565b8082028115828204841417611c1e57611c1e611c50565b81810381811115611c1e57611c1e611c50565b600082611cc057634e487b7160e01b600052601260045260246000fd5b500490565b60208082528181018390526000908460408401835b86811015611d06576001600160a01b03611cf384611aa0565b1682529183019190830190600101611cda565b509695505050505050565b600060a08284031215611d2357600080fd5b60405160a0810181811067ffffffffffffffff82111715611d5457634e487b7160e01b600052604160045260246000fd5b604052611d6083611aa0565b8152611d6e60208401611aa0565b6020820152611d7f60408401611aa0565b604082015260608301356060820152608083013560808201528091505092915050565b6020808252818101839052600090604080840186845b87811015611e1e576001600160a01b0380611dd284611aa0565b16845280611de1878501611aa0565b168685015280611df2868501611aa0565b168486015250606082810135908401526080808301359084015260a09283019290910190600101611db8565b5090979650505050505050565b6001600160e01b0319831681526040810160098310611e5a57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b634e487b7160e01b600052603160045260246000fdfea164736f6c6343000811000a",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ErrBridgeVoterIsAlreadyAdded(address)": [
        {
          "details": "Error indicating that a bridge voter has already been added.",
          "params": {
            "voter": "The address of the bridge voter that is already added."
          }
        }
      ],
      "ErrConsensusAddressIsAlreadyAdded(address)": [
        {
          "details": "Error indicating that a consensus address is already added.",
          "params": {
            "addr": "The address of the consensus contract that is already added."
          }
        }
      ],
      "ErrConsensusAddressIsNotAdded(address)": [
        {
          "details": "Error indicating that a consensus address is not added.",
          "params": {
            "addr": "The address of the consensus contract that is not added."
          }
        }
      ],
      "ErrDuplicated(bytes4)": [
        {
          "details": "Error thrown when a duplicated element is detected in an array.",
          "params": {
            "msgSig": "The function signature that invoke the error."
          }
        }
      ],
      "ErrEmptyArray()": [
        {
          "details": "Error indicating that an array is empty when it should contain elements."
        }
      ],
      "ErrGovernorAddressIsAlreadyAdded(address)": [
        {
          "details": "Error indicating that a governor address has already been added.",
          "params": {
            "addr": "The address of the governor that is already added."
          }
        }
      ],
      "ErrInvalidRequest()": [
        {
          "details": "Error indicating that a request is invalid."
        }
      ],
      "ErrInvalidThreshold(bytes4)": [
        {
          "details": "Error indicating that the provided threshold is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that the invalid threshold applies to."
          }
        }
      ],
      "ErrInvalidVoteWeight(bytes4)": [
        {
          "details": "Error indicating that a vote weight is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that encountered an invalid vote weight."
          }
        }
      ],
      "ErrQueryForDupplicated()": [
        {
          "details": "Error indicating that a query for a duplicate entry was made."
        }
      ],
      "ErrQueryForNonExistentConsensusAddress()": [
        {
          "details": "Error indicating that a query was made for a non-existent consensus address."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addTrustedOrganizations((address,address,address,uint256,uint256)[])": {
        "details": "Adds a list of addresses into the trusted organization. Requirements: - The weights should larger than 0. - The method caller is admin. - The field `addedBlock` should be blank. Emits the event `TrustedOrganizationAdded` once an organization is added."
      },
      "checkThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the threshold."
      },
      "countTrustedOrganizations()": {
        "details": "Returns the number of trusted organizations."
      },
      "getAllTrustedOrganizations()": {
        "details": "Returns all of the trusted organizations."
      },
      "getBridgeVoterWeight(address)": {
        "details": "Returns the weight of a bridge voter."
      },
      "getBridgeVoterWeights(address[])": {
        "details": "Returns the weights of a list of bridge voter addresses."
      },
      "getConsensusWeight(address)": {
        "details": "Returns the weight of a consensus."
      },
      "getConsensusWeights(address[])": {
        "details": "Returns the weights of a list of consensus addresses."
      },
      "getGovernorWeight(address)": {
        "details": "Returns the weight of a governor."
      },
      "getGovernorWeights(address[])": {
        "details": "Returns the weights of a list of governor addresses."
      },
      "getThreshold()": {
        "details": "Returns the threshold."
      },
      "getTrustedOrganization(address)": {
        "details": "Returns the trusted organization by consensus address. Reverts once the consensus address is non-existent."
      },
      "getTrustedOrganizationAt(uint256)": {
        "details": "Returns the trusted organization at `_index`."
      },
      "initialize((address,address,address,uint256,uint256)[],uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "minimumVoteWeight()": {
        "details": "Returns the minimum vote weight to pass the threshold."
      },
      "removeTrustedOrganizations(address[])": {
        "details": "Removes a list of addresses from the trusted organization. Requirements: - The method caller is admin. Emits the event `TrustedOrganizationRemoved` once an organization is removed.",
        "params": {
          "_consensusAddrs": "The list of consensus addresses linked to corresponding trusted organization that to be removed."
        }
      },
      "setThreshold(uint256,uint256)": {
        "details": "Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event."
      },
      "sumBridgeVoterWeights(address[])": {
        "details": "Returns total weights of the bridge voter list."
      },
      "sumConsensusWeights(address[])": {
        "details": "Returns total weights of the consensus list."
      },
      "sumGovernorWeights(address[])": {
        "details": "Returns total weights of the governor list."
      },
      "totalWeights()": {
        "details": "Returns total weights."
      },
      "updateTrustedOrganizations((address,address,address,uint256,uint256)[])": {
        "details": "Updates weights for a list of existent trusted organization. Requirements: - The weights should larger than 0. - The method caller is admin. Emits the `TrustedOrganizationUpdated` event."
      }
    },
    "stateVariables": {
      "_addedBlock": {
        "details": "Mapping from consensus address => added block"
      },
      "_bridgeVoterList": {
        "details": "Bridge voters array"
      },
      "_bridgeVoterWeight": {
        "details": "Mapping from bridge voter address => weight"
      },
      "_consensusList": {
        "details": "Consensus array"
      },
      "_consensusWeight": {
        "details": "Mapping from consensus address => weight"
      },
      "_governorList": {
        "details": "Governors array"
      },
      "_governorWeight": {
        "details": "Mapping from governor address => weight"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1373,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22307,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_num",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 22309,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_denom",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22311,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_totalWeight",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 22313,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 22318,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_consensusWeight",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22323,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_governorWeight",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22328,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_bridgeVoterWeight",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22333,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_addedBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22337,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_consensusList",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22341,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_governorList",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22345,
        "contract": "contracts/multi-chains/RoninTrustedOrganization.sol:RoninTrustedOrganization",
        "label": "_bridgeVoterList",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}