{
  "address": "0x6C497568b7799aE5f57353E904104a5bDadDA4d8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minSecs",
          "type": "uint256"
        }
      ],
      "name": "CooldownSecsToUndelegateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "MinValidatorStakingAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "PoolApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PoolSharesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "validator",
          "type": "address[]"
        }
      ],
      "name": "PoolsDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        }
      ],
      "name": "PoolsUpdateConflicted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "name": "PoolsUpdateFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "aRps",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "PoolsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountDeductFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debited",
          "type": "uint256"
        }
      ],
      "name": "UserRewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secs",
          "type": "uint256"
        }
      ],
      "name": "WaitingSecsToRevokeUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "applyValidatorCandidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "bulkUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrList",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownSecsToUndelegate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deductStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_actualDeductingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrList",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_consensusAddrDst",
          "type": "address"
        }
      ],
      "name": "delegateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "deprecatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "getManySelfStakings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_selfStakings",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_poolAddrs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_userList",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_poolList",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingTotals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_poolAddrList",
          "type": "address[]"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        }
      ],
      "name": "getStakingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        }
      ],
      "name": "getStakingTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__minValidatorStakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__cooldownSecsToUndelegate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__waitingSecsToRevoke",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAdminAddr",
          "type": "address"
        }
      ],
      "name": "isActivePoolAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minValidatorStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "recordRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddrSrc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddrDst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "requestRenounce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_effectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "requestUpdateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cooldownSecs",
          "type": "uint256"
        }
      ],
      "name": "setCooldownSecsToUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setMinValidatorStakingAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_secs",
          "type": "uint256"
        }
      ],
      "name": "setWaitingSecsToRevoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "undelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waitingSecsToRevoke",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x21dfc44f7e166ee6bfb58be389f84f6ce5b8efe55e6ff92904aabb9ec9c9e0f9",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x6C497568b7799aE5f57353E904104a5bDadDA4d8",
    "transactionIndex": 0,
    "gasUsed": "3469606",
    "logsBloom": "0x
    "blockHash": "0x9df264d4b2810e6e266d71f98d1cc81a839591bd1704fca67a806afe76d27944",
    "transactionHash": "0x21dfc44f7e166ee6bfb58be389f84f6ce5b8efe55e6ff92904aabb9ec9c9e0f9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12502969,
        "transactionHash": "0x21dfc44f7e166ee6bfb58be389f84f6ce5b8efe55e6ff92904aabb9ec9c9e0f9",
        "address": "0x6C497568b7799aE5f57353E904104a5bDadDA4d8",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x9df264d4b2810e6e266d71f98d1cc81a839591bd1704fca67a806afe76d27944"
      }
    ],
    "blockNumber": 12502969,
    "cumulativeGasUsed": "3469606",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "9ed9cfd78768299e018b7787a7a517a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSecs\",\"type\":\"uint256\"}],\"name\":\"CooldownSecsToUndelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MinValidatorStakingAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"PoolApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PoolSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validator\",\"type\":\"address[]\"}],\"name\":\"PoolsDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"}],\"name\":\"PoolsUpdateConflicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdateFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"aRps\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountDeductFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debited\",\"type\":\"uint256\"}],\"name\":\"UserRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"WaitingSecsToRevokeUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"applyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrList\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSecsToUndelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deductStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualDeductingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_consensusAddrDst\",\"type\":\"address\"}],\"name\":\"delegateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"deprecatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"getManySelfStakings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_selfStakings\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolAddrs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_userList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingTotals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_poolAddrList\",\"type\":\"address[]\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"name\":\"getStakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"name\":\"getStakingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__minValidatorStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__cooldownSecsToUndelegate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__waitingSecsToRevoke\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAdminAddr\",\"type\":\"address\"}],\"name\":\"isActivePoolAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValidatorStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"recordRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddrSrc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddrDst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"requestRenounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"requestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownSecs\",\"type\":\"uint256\"}],\"name\":\"setCooldownSecsToUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setMinValidatorStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"setWaitingSecsToRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitingSecsToRevoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyValidatorCandidate(address,address,address,address,uint256)\":{\"details\":\"Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.\",\"params\":{\"_candidateAdmin\":\"the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance.\"}},\"bulkUndelegate(address[],uint256[])\":{\"details\":\"Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`.\"},\"claimRewards(address[])\":{\"details\":\"Claims the reward of method caller. Emits the `RewardClaimed` event.\"},\"cooldownSecsToUndelegate()\":{\"details\":\"Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\"},\"deductStakingAmount(address,uint256)\":{\"details\":\"Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller is validator contract. Emits the event `Unstaked`.\"},\"delegate(address)\":{\"details\":\"Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event.\"},\"delegateRewards(address[],address)\":{\"details\":\"Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event.\"},\"deprecatePools(address[])\":{\"details\":\"Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\"},\"getManySelfStakings(address[])\":{\"details\":\"Returns the self-staking amounts of the pools.\"},\"getManyStakingAmounts(address[],address[])\":{\"details\":\"Returns the staking amounts of the users.\"},\"getManyStakingTotals(address[])\":{\"details\":\"Returns the total staking amounts of all users for the pools `_poolAddrs`.\"},\"getReward(address,address)\":{\"details\":\"Returns the reward amount that user claimable.\"},\"getRewards(address,address[])\":{\"details\":\"Returns the claimable reward of the user `_user`.\"},\"getStakingAmount(address,address)\":{\"details\":\"Returns the staking amount of an user.\"},\"getStakingPool(address)\":{\"details\":\"Returns the staking pool detail.\"},\"getStakingTotal(address)\":{\"details\":\"Returns the total staking amount of all users for a pool.\"},\"initialize(address,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"isActivePoolAdmin(address)\":{\"details\":\"Returns whether the `_poolAdminAddr` is currently active.\"},\"minValidatorStakingAmount()\":{\"details\":\"Returns the minimum threshold for being a validator candidate.\"},\"recordRewards(address[],uint256[],uint256)\":{\"details\":\"Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller is validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending.\"},\"redelegate(address,address,uint256)\":{\"details\":\"Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event.\"},\"requestRenounce(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`.\"},\"setCooldownSecsToUndelegate(uint256)\":{\"details\":\"Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`.\"},\"setMinValidatorStakingAmount(uint256)\":{\"details\":\"Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event.\"},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"setWaitingSecsToRevoke(uint256)\":{\"details\":\"Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`.\"},\"stake(address)\":{\"details\":\"Self-delegates to the validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`.\"},\"undelegate(address,uint256)\":{\"details\":\"Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event.\"},\"unstake(address,uint256)\":{\"details\":\"Unstakes from the validator candidate `_consensusAddr` for `_amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"},\"waitingSecsToRevoke()\":{\"details\":\"Returns the number of seconds that a candidate must wait for the renounce request gets affected.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/staking/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable _recipient, uint256 _amount) internal {\\n    require(_sendRON(_recipient, _amount), \\\"RONTransfer: unable to transfer value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Send `_amount` RON to the address `_recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    require(address(this).balance >= _amount, \\\"RONTransfer: insufficient balance\\\");\\n    return _unsafeSendRON(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `_amount` RON to the address `_recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xd2d20123d75f4d4ca6441a791a3eb1b546b5c8652119ffc8406a11c8ed16529e\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    require(validatorContract() == msg.sender, \\\"HasValidatorContract: method caller must be validator contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasValidatorContract: set to non-contract\\\");\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xfc2ef0f8358960702307626dc4ccbab066c5e0763e04e8a794f0dc4711789bdd\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasValidatorContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0xb6e39a02969091decbb50633286855c157502a7d15a988e436644b8d419e13d3\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    // Address of the pool i.e. consensus address of the validator\\n    address addr;\\n    // Pool admin address\\n    address admin;\\n    // Self-staking amount\\n    uint256 stakingAmount;\\n    // Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    // Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    // Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /**\\n   * @dev Returns whether the `_poolAdminAddr` is currently active.\\n   */\\n  function isActivePoolAdmin(address _poolAdminAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external;\\n}\\n\",\"keccak256\":\"0xb903220353537f45b109b663df032dd818d984eb660453e1be38970dad9822ff\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed validator, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] validator);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed validator,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed validator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param _candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function deprecatePools(address[] calldata _pools) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x8ced5bc423094821a203e7100076868ca41a7176e0ebc0fd09d1fd5f6c5fac8a\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(address _user, address[] calldata _poolAddrList)\\n    external\\n    view\\n    returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList) external returns (uint256 _amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(address[] calldata _consensusAddrList, address _consensusAddrDst)\\n    external\\n    returns (uint256 _amount);\\n}\\n\",\"keccak256\":\"0xc937036bcda0a4632af4937c514230a7b301d1f42959bfb00c377cb76f3f61bc\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Min staking amount in the period.\\n    uint256 minAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolAddr, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolAddr, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolAddr, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolAddrs, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolAddrs, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolAddrs);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(address[] calldata _poolAddrs, address[] calldata _userList)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(address _poolAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `_poolAddrs`.\\n   */\\n  function getManyStakingTotals(address[] calldata _poolAddrs) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8a4d4ab84f0b343cea84b8e86f90f4b9286051a166e348f5ef6c7d2d2c2af09f\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking {\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function recordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function deductStakingAmount(address _consensusAddr, uint256 _amount)\\n    external\\n    returns (uint256 _actualDeductingAmount);\\n\\n  /**\\n   * @dev Returns the staking pool detail.\\n   */\\n  function getStakingPool(address)\\n    external\\n    view\\n    returns (\\n      address _admin,\\n      uint256 _stakingAmount,\\n      uint256 _stakingTotal\\n    );\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(address[] calldata) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x84a3f7dfb1d291808514207da26c29fba58479a780d8f955e1cf5ea413fbba83\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function grantValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function requestRevokeCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xacfc4038d51b7746d66351009c6f25e277d45eafd23eb057441ed6884f91dd19\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 amount);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(uint256 amount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xd0aef1d05e99c82fd733c97a45f3a999898c4ded0cace2cb901864e2ddc3904a\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface IRoninValidatorSet is ICandidateManager, ICommonInfo, ISlashingExecution, ICoinbaseExecution {}\\n\",\"keccak256\":\"0x2475cf9c7007277ddfeade823196d0913a6d5c3e3fc9a1a10800734c0fdef062\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0xdeb929875d06c5dfb8562029ccc2922e1c5238f2dc67c8c61acad614f5fe1e28\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x33a52025305948a8e71d32317e4cdb2cf779afc3bcdb5bcbd72df5e1513f449f\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x310f321625fac8b7dbabfdad36e82b960b0b1f7bf0e5b70b763e45438b8a8d30\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xf7f30bacc63b2e4e9548c83e45eac727eeafa46e60312f936bf189480e413323\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    for (uint256 i = 0; i < A.length - 1; i++) {\\n      for (uint256 j = i + 1; j < A.length; j++) {\\n        if (A[i] == A[j]) {\\n          return true;\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0xc64f39980a5f980a3a87b3e4c692e0dd4848950a568cb5a24c39c6f99080c864\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - min(a, b);\\n  }\\n}\\n\",\"keccak256\":\"0xa9e2a3ad43d7999a3cdbfb040b0f2dec282eae91ff8fe6ad26fdd19087121ce7\",\"license\":\"UNLICENSED\"},\"contracts/ronin/staking/BaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/staking/IBaseStaking.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"./RewardCalculation.sol\\\";\\n\\nabstract contract BaseStaking is\\n  RONTransferHelper,\\n  ReentrancyGuard,\\n  RewardCalculation,\\n  HasValidatorContract,\\n  IBaseStaking\\n{\\n  /// @dev Mapping from pool address => staking pool detail\\n  mapping(address => PoolDetail) internal _stakingPool;\\n\\n  /// @dev The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n  uint256 internal _cooldownSecsToUndelegate;\\n  /// @dev The number of seconds that a candidate must wait to be revoked and take the self-staking amount back.\\n  uint256 internal _waitingSecsToRevoke;\\n\\n  /// @dev Mapping from pool admin address => consensus address.\\n  mapping(address => address) internal _activePoolAdminMapping;\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  modifier noEmptyValue() {\\n    require(msg.value > 0, \\\"BaseStaking: query with empty value\\\");\\n    _;\\n  }\\n\\n  modifier notPoolAdmin(PoolDetail storage _pool, address _delegator) {\\n    require(_pool.admin != _delegator, \\\"BaseStaking: delegator must not be the pool admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin(PoolDetail storage _pool, address _requester) {\\n    require(_pool.admin == _requester, \\\"BaseStaking: requester must be the pool admin\\\");\\n    _;\\n  }\\n\\n  modifier poolExists(address _poolAddr) {\\n    require(_validatorContract.isValidatorCandidate(_poolAddr), \\\"BaseStaking: query for non-existent pool\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function isActivePoolAdmin(address _poolAdminAddr) public view override returns (bool) {\\n    return _activePoolAdminMapping[_poolAdminAddr] != address(0);\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingTotal(address _poolAddr) public view override returns (uint256) {\\n    return _stakingPool[_poolAddr].stakingTotal;\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingTotals(address[] calldata _poolList)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory _stakingAmounts)\\n  {\\n    _stakingAmounts = new uint256[](_poolList.length);\\n    for (uint _i = 0; _i < _poolList.length; _i++) {\\n      _stakingAmounts[_i] = getStakingTotal(_poolList[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) public view override returns (uint256) {\\n    return _stakingPool[_poolAddr].delegatingAmount[_user];\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingAmounts(address[] calldata _poolAddrs, address[] calldata _userList)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory _stakingAmounts)\\n  {\\n    require(_poolAddrs.length == _userList.length, \\\"BaseStaking: invalid input array\\\");\\n    _stakingAmounts = new uint256[](_poolAddrs.length);\\n    for (uint _i = 0; _i < _stakingAmounts.length; _i++) {\\n      _stakingAmounts[_i] = _stakingPool[_poolAddrs[_i]].delegatingAmount[_userList[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256) {\\n    return _cooldownSecsToUndelegate;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256) {\\n    return _waitingSecsToRevoke;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external override onlyAdmin {\\n    _setCooldownSecsToUndelegate(_cooldownSecs);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external override onlyAdmin {\\n    _setWaitingSecsToRevoke(_secs);\\n  }\\n\\n  /**\\n   * @dev Sets the minium number of seconds to undelegate.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function _setCooldownSecsToUndelegate(uint256 _cooldownSecs) internal {\\n    _cooldownSecsToUndelegate = _cooldownSecs;\\n    emit CooldownSecsToUndelegateUpdated(_cooldownSecs);\\n  }\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function _setWaitingSecsToRevoke(uint256 _secs) internal {\\n    _waitingSecsToRevoke = _secs;\\n    emit WaitingSecsToRevokeUpdated(_secs);\\n  }\\n\\n  /**\\n   * @dev Changes the delegate amount.\\n   */\\n  function _changeDelegatingAmount(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _newDelegatingAmount,\\n    uint256 _newStakingTotal\\n  ) internal {\\n    _syncUserReward(_pool.addr, _delegator, _newDelegatingAmount);\\n    _pool.stakingTotal = _newStakingTotal;\\n    _pool.delegatingAmount[_delegator] = _newDelegatingAmount;\\n  }\\n}\\n\",\"keccak256\":\"0x30a983ca66e6bc5a080164c8e072e304d04f855d42a1f3dc5e731da11e95cdd5\",\"license\":\"MIT\"},\"contracts/ronin/staking/CandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../libraries/AddressArrayUtils.sol\\\";\\nimport \\\"../../interfaces/staking/ICandidateStaking.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract CandidateStaking is BaseStaking, ICandidateStaking {\\n  /// @dev The minimum threshold for being a validator candidate.\\n  uint256 internal _minValidatorStakingAmount;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function minValidatorStakingAmount() public view override returns (uint256) {\\n    return _minValidatorStakingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setMinValidatorStakingAmount(uint256 _threshold) external override onlyAdmin {\\n    _setMinValidatorStakingAmount(_threshold);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable override nonReentrant {\\n    require(!isActivePoolAdmin(msg.sender), \\\"CandidateStaking: pool admin is active\\\");\\n\\n    uint256 _amount = msg.value;\\n    address payable _poolAdmin = payable(msg.sender);\\n    _applyValidatorCandidate(\\n      _poolAdmin,\\n      _candidateAdmin,\\n      _consensusAddr,\\n      _treasuryAddr,\\n      _bridgeOperatorAddr,\\n      _commissionRate,\\n      _amount\\n    );\\n\\n    PoolDetail storage _pool = _stakingPool[_consensusAddr];\\n    _pool.admin = _poolAdmin;\\n    _pool.addr = _consensusAddr;\\n    _activePoolAdminMapping[_poolAdmin] = _consensusAddr;\\n\\n    _stake(_stakingPool[_consensusAddr], _poolAdmin, _amount);\\n    emit PoolApproved(_consensusAddr, _poolAdmin);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external override poolExists(_consensusAddr) onlyPoolAdmin(_stakingPool[_consensusAddr], msg.sender) {\\n    _validatorContract.execRequestUpdateCommissionRate(_consensusAddr, _effectiveDaysOnwards, _commissionRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function deprecatePools(address[] calldata _pools) external override onlyValidatorContract {\\n    if (_pools.length == 0) {\\n      return;\\n    }\\n\\n    uint256 _amount;\\n    for (uint _i = 0; _i < _pools.length; _i++) {\\n      PoolDetail storage _pool = _stakingPool[_pools[_i]];\\n      // Deactivate the pool admin in the active mapping.\\n      delete _activePoolAdminMapping[_pool.admin];\\n\\n      // Deduct and transfer the self staking amount to the pool admin.\\n      _amount = _pool.stakingAmount;\\n      if (_amount > 0) {\\n        _deductStakingAmount(_pool, _amount);\\n        if (!_unsafeSendRON(payable(_pool.admin), _amount)) {\\n          emit StakingAmountTransferFailed(_pool.addr, _pool.admin, _amount, address(this).balance);\\n        }\\n      }\\n    }\\n\\n    emit PoolsDeprecated(_pools);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function stake(address _consensusAddr) external payable override noEmptyValue poolExists(_consensusAddr) {\\n    _stake(_stakingPool[_consensusAddr], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount) external override nonReentrant poolExists(_consensusAddr) {\\n    require(_amount > 0, \\\"CandidateStaking: invalid amount\\\");\\n    address _delegator = msg.sender;\\n    PoolDetail storage _pool = _stakingPool[_consensusAddr];\\n    uint256 _remainAmount = _pool.stakingAmount - _amount;\\n    require(_remainAmount >= _minValidatorStakingAmount, \\\"CandidateStaking: invalid staking amount left\\\");\\n\\n    _unstake(_pool, _delegator, _amount);\\n    require(_sendRON(payable(_delegator), _amount), \\\"CandidateStaking: could not transfer RON\\\");\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestRenounce(address _consensusAddr)\\n    external\\n    override\\n    poolExists(_consensusAddr)\\n    onlyPoolAdmin(_stakingPool[_consensusAddr], msg.sender)\\n  {\\n    _validatorContract.requestRevokeCandidate(_consensusAddr, _waitingSecsToRevoke);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-applyValidatorCandidate`\\n   */\\n  function _applyValidatorCandidate(\\n    address payable _poolAdmin,\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate,\\n    uint256 _amount\\n  ) internal {\\n    require(_sendRON(_poolAdmin, 0), \\\"CandidateStaking: pool admin cannot receive RON\\\");\\n    require(_sendRON(_treasuryAddr, 0), \\\"CandidateStaking: treasury cannot receive RON\\\");\\n    require(_amount >= _minValidatorStakingAmount, \\\"CandidateStaking: insufficient amount\\\");\\n\\n    require(\\n      _poolAdmin == _candidateAdmin && _candidateAdmin == _treasuryAddr,\\n      \\\"CandidateStaking: three interaction addresses must be of the same\\\"\\n    );\\n\\n    address[] memory _diffAddrs = new address[](3);\\n    _diffAddrs[0] = _poolAdmin;\\n    _diffAddrs[1] = _consensusAddr;\\n    _diffAddrs[2] = _bridgeOperatorAddr;\\n    require(\\n      !AddressArrayUtils.hasDuplicate(_diffAddrs),\\n      \\\"CandidateStaking: three operation addresses must be distinct\\\"\\n    );\\n\\n    _validatorContract.grantValidatorCandidate(\\n      _candidateAdmin,\\n      _consensusAddr,\\n      _treasuryAddr,\\n      _bridgeOperatorAddr,\\n      _commissionRate\\n    );\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-stake`\\n   */\\n  function _stake(\\n    PoolDetail storage _pool,\\n    address _requester,\\n    uint256 _amount\\n  ) internal onlyPoolAdmin(_pool, _requester) {\\n    _pool.stakingAmount += _amount;\\n    _changeDelegatingAmount(_pool, _requester, _pool.stakingAmount, _pool.stakingTotal + _amount);\\n    _pool.lastDelegatingTimestamp[_requester] = block.timestamp;\\n    emit Staked(_pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-unstake`\\n   */\\n  function _unstake(\\n    PoolDetail storage _pool,\\n    address _requester,\\n    uint256 _amount\\n  ) internal onlyPoolAdmin(_pool, _requester) {\\n    require(_amount <= _pool.stakingAmount, \\\"CandidateStaking: insufficient staking amount\\\");\\n    require(\\n      _pool.lastDelegatingTimestamp[_requester] + _cooldownSecsToUndelegate <= block.timestamp,\\n      \\\"CandidateStaking: unstake too early\\\"\\n    );\\n\\n    _pool.stakingAmount -= _amount;\\n    _changeDelegatingAmount(_pool, _requester, _pool.stakingAmount, _pool.stakingTotal - _amount);\\n    emit Unstaked(_pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   * @return The actual deducted amount\\n   */\\n  function _deductStakingAmount(PoolDetail storage _pool, uint256 _amount) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function _setMinValidatorStakingAmount(uint256 _threshold) internal {\\n    _minValidatorStakingAmount = _threshold;\\n    emit MinValidatorStakingAmountUpdated(_threshold);\\n  }\\n}\\n\",\"keccak256\":\"0xe80c374e9425772e3a50721371b108148b325bef59536e9ce7ca963f81d49f7e\",\"license\":\"MIT\"},\"contracts/ronin/staking/DelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IDelegatorStaking.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract DelegatorStaking is BaseStaking, IDelegatorStaking {\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegate(address _consensusAddr) external payable noEmptyValue poolExists(_consensusAddr) {\\n    require(!isActivePoolAdmin(msg.sender), \\\"DelegatorStaking: admin of an active pool cannot delegate\\\");\\n    _delegate(_stakingPool[_consensusAddr], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external nonReentrant {\\n    address payable _delegator = payable(msg.sender);\\n    _undelegate(_stakingPool[_consensusAddr], _delegator, _amount);\\n    require(_sendRON(_delegator, _amount), \\\"DelegatorStaking: could not transfer RON\\\");\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external nonReentrant {\\n    require(\\n      _consensusAddrs.length > 0 && _consensusAddrs.length == _amounts.length,\\n      \\\"DelegatorStaking: invalid array length\\\"\\n    );\\n\\n    address payable _delegator = payable(msg.sender);\\n    uint256 _total;\\n\\n    for (uint _i = 0; _i < _consensusAddrs.length; _i++) {\\n      _total += _amounts[_i];\\n      _undelegate(_stakingPool[_consensusAddrs[_i]], _delegator, _amounts[_i]);\\n    }\\n\\n    require(_sendRON(_delegator, _total), \\\"DelegatorStaking: could not transfer RON\\\");\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external nonReentrant poolExists(_consensusAddrDst) {\\n    address _delegator = msg.sender;\\n    _undelegate(_stakingPool[_consensusAddrSrc], _delegator, _amount);\\n    _delegate(_stakingPool[_consensusAddrDst], _delegator, _amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 _amount)\\n  {\\n    _amount = _claimRewards(msg.sender, _consensusAddrList);\\n    _transferRON(payable(msg.sender), _amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegateRewards(address[] calldata _consensusAddrList, address _consensusAddrDst)\\n    external\\n    override\\n    nonReentrant\\n    poolExists(_consensusAddrDst)\\n    returns (uint256 _amount)\\n  {\\n    return _delegateRewards(msg.sender, _consensusAddrList, _consensusAddrDst);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function getRewards(address _user, address[] calldata _poolAddrList)\\n    external\\n    view\\n    returns (uint256[] memory _rewards)\\n  {\\n    address _consensusAddr;\\n    uint256 _period = _validatorContract.currentPeriod();\\n    _rewards = new uint256[](_poolAddrList.length);\\n\\n    for (uint256 _i = 0; _i < _poolAddrList.length; _i++) {\\n      _consensusAddr = _poolAddrList[_i];\\n      _rewards[_i] = _getReward(_consensusAddr, _user, _period, getStakingAmount(_consensusAddr, _user));\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   * Note: This function does not verify the `msg.value` with the amount.\\n   *\\n   */\\n  function _delegate(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _amount\\n  ) internal notPoolAdmin(_pool, _delegator) {\\n    _changeDelegatingAmount(\\n      _pool,\\n      _delegator,\\n      _pool.delegatingAmount[_delegator] + _amount,\\n      _pool.stakingTotal + _amount\\n    );\\n    _pool.lastDelegatingTimestamp[_delegator] = block.timestamp;\\n    emit Delegated(_delegator, _pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Undelegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   * - The amount is larger than 0.\\n   * - The delegating amount is larger than or equal to the undelegating amount.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   * Note: Consider transferring back the amount of RON after calling this function.\\n   *\\n   */\\n  function _undelegate(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _amount\\n  ) private notPoolAdmin(_pool, _delegator) {\\n    require(_amount > 0, \\\"DelegatorStaking: invalid amount\\\");\\n    require(_pool.delegatingAmount[_delegator] >= _amount, \\\"DelegatorStaking: insufficient amount to undelegate\\\");\\n    require(\\n      _pool.lastDelegatingTimestamp[_delegator] + _cooldownSecsToUndelegate < block.timestamp,\\n      \\\"DelegatorStaking: undelegate too early\\\"\\n    );\\n    _changeDelegatingAmount(\\n      _pool,\\n      _delegator,\\n      _pool.delegatingAmount[_delegator] - _amount,\\n      _pool.stakingTotal - _amount\\n    );\\n    emit Undelegated(_delegator, _pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Claims rewards from the pools `_poolAddrList`.\\n   * Note: This function does not transfer reward to user.\\n   */\\n  function _claimRewards(address _user, address[] calldata _poolAddrList) internal returns (uint256 _amount) {\\n    for (uint256 _i = 0; _i < _poolAddrList.length; _i++) {\\n      _amount += _claimReward(_poolAddrList[_i], _user);\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   */\\n  function _delegateRewards(\\n    address _user,\\n    address[] calldata _poolAddrList,\\n    address _poolAddrDst\\n  ) internal returns (uint256 _amount) {\\n    _amount = _claimRewards(_user, _poolAddrList);\\n    _delegate(_stakingPool[_poolAddrDst], _user, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xf398428c3d6123e20f0f05c6d0ccaaea6f3e6366a52a66620c82b77954ce66ad\",\"license\":\"MIT\"},\"contracts/ronin/staking/RewardCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IRewardPool.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\n\\n/**\\n * @title RewardCalculation contract\\n * @dev This contract mainly contains the methods to calculate reward for staking contract.\\n */\\nabstract contract RewardCalculation is IRewardPool {\\n  /// @dev Mapping from pool address => period number => accumulated rewards per share (one unit staking)\\n  mapping(address => mapping(uint256 => PeriodWrapper)) private _accumulatedRps;\\n  /// @dev Mapping from the pool address => user address => the reward info of the user\\n  mapping(address => mapping(address => UserRewardFields)) private _userReward;\\n  /// @dev Mapping from the pool address => reward pool fields\\n  mapping(address => PoolFields) private _stakingPool;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256) {\\n    return _getReward(_poolAddr, _user, _currentPeriod(), getStakingAmount(_poolAddr, _user));\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) public view virtual returns (uint256);\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingTotal(address _poolAddr) public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function _getReward(\\n    address _poolAddr,\\n    address _user,\\n    uint256 _latestPeriod,\\n    uint256 _latestStakingAmount\\n  ) internal view returns (uint256) {\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n\\n    if (_reward.lastPeriod == _latestPeriod) {\\n      return _reward.debited;\\n    }\\n\\n    uint256 _aRps;\\n    uint256 _lastPeriodReward;\\n    PoolFields storage _pool = _stakingPool[_poolAddr];\\n    PeriodWrapper storage _wrappedArps = _accumulatedRps[_poolAddr][_reward.lastPeriod];\\n\\n    if (_wrappedArps.lastPeriod > 0) {\\n      // Calculates the last period reward if the aRps at the period is set\\n      _aRps = _accumulatedRps[_poolAddr][_reward.lastPeriod].inner;\\n      _lastPeriodReward = _reward.minAmount * (_aRps - _reward.aRps);\\n    } else {\\n      // Fallbacks to the previous aRps in case the aRps is not set\\n      _aRps = _reward.aRps;\\n    }\\n\\n    uint256 _newPeriodsReward = _latestStakingAmount * (_pool.aRps - _aRps);\\n    return _reward.debited + (_lastPeriodReward + _newPeriodsReward) / 1e18;\\n  }\\n\\n  /**\\n   * @dev Syncs the user reward.\\n   *\\n   * Emits the event `UserRewardUpdated` once the debit amount is updated.\\n   * Emits the event `PoolSharesUpdated` once the pool share is updated.\\n   *\\n   * Note: The method should be called whenever the user's staking amount changes.\\n   *\\n   */\\n  function _syncUserReward(\\n    address _poolAddr,\\n    address _user,\\n    uint256 _newStakingAmount\\n  ) internal {\\n    uint256 _period = _currentPeriod();\\n    PoolFields storage _pool = _stakingPool[_poolAddr];\\n    uint256 _lastShares = _pool.shares.inner;\\n\\n    // Updates the pool shares if it is outdated\\n    if (_pool.shares.lastPeriod < _period) {\\n      _pool.shares = PeriodWrapper(getStakingTotal(_poolAddr), _period);\\n    }\\n\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n    uint256 _currentStakingAmount = getStakingAmount(_poolAddr, _user);\\n    uint256 _debited = _getReward(_poolAddr, _user, _period, _currentStakingAmount);\\n\\n    if (_reward.debited != _debited) {\\n      _reward.debited = _debited;\\n      emit UserRewardUpdated(_poolAddr, _user, _debited);\\n    }\\n\\n    _syncMinStakingAmount(_pool, _reward, _period, _newStakingAmount, _currentStakingAmount);\\n    _reward.aRps = _pool.aRps;\\n    _reward.lastPeriod = _period;\\n\\n    if (_pool.shares.inner != _lastShares) {\\n      emit PoolSharesUpdated(_period, _poolAddr, _pool.shares.inner);\\n    }\\n  }\\n\\n  /**\\n   * @dev Syncs the minimum staking amount of an user in the current period.\\n   */\\n  function _syncMinStakingAmount(\\n    PoolFields storage _pool,\\n    UserRewardFields storage _reward,\\n    uint256 _latestPeriod,\\n    uint256 _newStakingAmount,\\n    uint256 _currentStakingAmount\\n  ) internal {\\n    if (_reward.lastPeriod < _latestPeriod) {\\n      _reward.minAmount = _currentStakingAmount;\\n    }\\n\\n    uint256 _minAmount = Math.min(_reward.minAmount, _newStakingAmount);\\n    uint256 _diffAmount = _reward.minAmount - _minAmount;\\n    if (_diffAmount > 0) {\\n      _reward.minAmount = _minAmount;\\n      require(_pool.shares.inner >= _diffAmount, \\\"RewardCalculation: invalid pool shares\\\");\\n      _pool.shares.inner -= _diffAmount;\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the settled reward for a specific user.\\n   *\\n   * Emits the `PendingRewardUpdated` event and the `SettledRewardUpdated` event.\\n   *\\n   * Note: This method should be called before transferring rewards for the user.\\n   *\\n   */\\n  function _claimReward(address _poolAddr, address _user) internal returns (uint256 _amount) {\\n    uint256 _latestPeriod = _currentPeriod();\\n    _amount = _getReward(_poolAddr, _user, _latestPeriod, getStakingAmount(_poolAddr, _user));\\n    emit RewardClaimed(_poolAddr, _user, _amount);\\n\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n    _reward.debited = 0;\\n    _reward.lastPeriod = _latestPeriod;\\n    _reward.aRps = _stakingPool[_poolAddr].aRps;\\n    emit UserRewardUpdated(_poolAddr, _user, 0);\\n  }\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_poolAddrs`.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolUpdateConflicted` when the pool is already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function _recordRewards(\\n    address[] memory _poolAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) internal {\\n    if (_poolAddrs.length != _rewards.length) {\\n      emit PoolsUpdateFailed(_period, _poolAddrs, _rewards);\\n      return;\\n    }\\n\\n    uint256 _rps;\\n    uint256 _count;\\n    address _poolAddr;\\n    uint256 _stakingTotal;\\n    uint256[] memory _aRps = new uint256[](_poolAddrs.length);\\n    uint256[] memory _shares = new uint256[](_poolAddrs.length);\\n    address[] memory _conflicted = new address[](_poolAddrs.length);\\n\\n    for (uint _i = 0; _i < _poolAddrs.length; _i++) {\\n      _poolAddr = _poolAddrs[_i];\\n      PoolFields storage _pool = _stakingPool[_poolAddr];\\n      _stakingTotal = getStakingTotal(_poolAddr);\\n\\n      if (_accumulatedRps[_poolAddr][_period].lastPeriod == _period) {\\n        _conflicted[_count++] = _poolAddr;\\n        continue;\\n      }\\n\\n      // Updates the pool shares if it is outdated\\n      if (_pool.shares.lastPeriod < _period) {\\n        _pool.shares = PeriodWrapper(_stakingTotal, _period);\\n      }\\n\\n      // The rps is 0 if no one stakes for the pool\\n      _rps = _pool.shares.inner == 0 ? 0 : (_rewards[_i] * 1e18) / _pool.shares.inner;\\n      _aRps[_i - _count] = _pool.aRps += _rps;\\n      _accumulatedRps[_poolAddr][_period] = PeriodWrapper(_pool.aRps, _period);\\n      if (_pool.shares.inner != _stakingTotal) {\\n        _pool.shares.inner = _stakingTotal;\\n      }\\n      _shares[_i - _count] = _pool.shares.inner;\\n      _poolAddrs[_i - _count] = _poolAddr;\\n    }\\n\\n    if (_count > 0) {\\n      assembly {\\n        mstore(_conflicted, _count)\\n        mstore(_poolAddrs, sub(mload(_poolAddrs), _count))\\n      }\\n      emit PoolsUpdateConflicted(_period, _conflicted);\\n    }\\n\\n    if (_poolAddrs.length > 0) {\\n      emit PoolsUpdated(_period, _poolAddrs, _aRps, _shares);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current period.\\n   */\\n  function _currentPeriod() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x43d7da0f22746bda6a2878f9ab10556a26910756b6ac26a58ec8221e3f09637f\",\"license\":\"MIT\"},\"contracts/ronin/staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./CandidateStaking.sol\\\";\\nimport \\\"./DelegatorStaking.sol\\\";\\n\\ncontract Staking is IStaking, CandidateStaking, DelegatorStaking, Initializable {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  receive() external payable onlyValidatorContract {}\\n\\n  fallback() external payable onlyValidatorContract {}\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    uint256 __minValidatorStakingAmount,\\n    uint256 __cooldownSecsToUndelegate,\\n    uint256 __waitingSecsToRevoke\\n  ) external initializer {\\n    _setValidatorContract(__validatorContract);\\n    _setMinValidatorStakingAmount(__minValidatorStakingAmount);\\n    _setCooldownSecsToUndelegate(__cooldownSecsToUndelegate);\\n    _setWaitingSecsToRevoke(__waitingSecsToRevoke);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function getStakingPool(address _poolAddr)\\n    external\\n    view\\n    poolExists(_poolAddr)\\n    returns (\\n      address _admin,\\n      uint256 _stakingAmount,\\n      uint256 _stakingTotal\\n    )\\n  {\\n    PoolDetail storage _pool = _stakingPool[_poolAddr];\\n    return (_pool.admin, _pool.stakingAmount, _pool.stakingTotal);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function getManySelfStakings(address[] calldata _pools) external view returns (uint256[] memory _selfStakings) {\\n    _selfStakings = new uint256[](_pools.length);\\n    for (uint _i = 0; _i < _pools.length; _i++) {\\n      _selfStakings[_i] = _stakingPool[_pools[_i]].stakingAmount;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function recordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable onlyValidatorContract {\\n    _recordRewards(_consensusAddrs, _rewards, _period);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function deductStakingAmount(address _consensusAddr, uint256 _amount)\\n    external\\n    onlyValidatorContract\\n    returns (uint256 _actualDeductingAmount)\\n  {\\n    _actualDeductingAmount = _deductStakingAmount(_stakingPool[_consensusAddr], _amount);\\n    address payable _recipientAddr = payable(validatorContract());\\n    if (!_unsafeSendRON(_recipientAddr, _actualDeductingAmount)) {\\n      emit StakingAmountDeductFailed(_consensusAddr, _recipientAddr, _actualDeductingAmount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc RewardCalculation\\n   */\\n  function _currentPeriod() internal view virtual override returns (uint256) {\\n    return _validatorContract.currentPeriod();\\n  }\\n\\n  /**\\n   * @inheritdoc CandidateStaking\\n   */\\n  function _deductStakingAmount(PoolDetail storage _pool, uint256 _amount)\\n    internal\\n    override\\n    returns (uint256 _actualDeductingAmount)\\n  {\\n    _actualDeductingAmount = Math.min(_pool.stakingAmount, _amount);\\n\\n    _pool.stakingAmount -= _actualDeductingAmount;\\n    _changeDelegatingAmount(_pool, _pool.admin, _pool.stakingAmount, _pool.stakingTotal - _actualDeductingAmount);\\n    emit Unstaked(_pool.addr, _actualDeductingAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x904e300370b0fdc65a42a587097a77a284a270732abee90a5848a15ef716acfd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060016000556200002162000027565b620000e9565b60d154610100900460ff1615620000945760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60d15460ff9081161015620000e75760d1805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b613cef80620000f96000396000f3fe6080604052600436106101e75760003560e01c8063895ab74211610102578063af24542911610095578063e115877b11610064578063e115877b146105dd578063e5376f5414610628578063e9ac5e061461063b578063f9f031df1461065b57610230565b8063af24542914610568578063c2a672e01461057d578063c905bb351461059d578063cdf64a76146105bd57610230565b80639488e4e9116100d15780639488e4e9146104bb578063969ffc14146104db57806399439089146104fb5780639e614e0e1461052357610230565b8063895ab7421461042d578063909791dd1461046657806391f8723f1461047b578063924f081e1461049b57610230565b80634d99dd161161017a5780636b091695116101495780636b091695146103ad5780636bd8f804146103cd57806376664b65146103ed578063888b9ae91461040d57610230565b80634d99dd161461033a5780634ec81af11461035a5780635c19a95c1461037a578063679a6e431461038d57610230565b806326476204116101b657806326476204146102d45780633b8cb16b146102e75780633d8e846e146102fa57806342ef3c341461031a57610230565b80630682e8fa14610243578063095f647514610267578063097e4a9d146102945780631658c86e146102b457610230565b3661023057336101ff6036546001600160a01b031690565b6001600160a01b03161461022e5760405162461bcd60e51b815260040161022590613428565b60405180910390fd5b005b336101ff6036546001600160a01b031690565b34801561024f57600080fd5b506038545b6040519081526020015b60405180910390f35b34801561027357600080fd5b506102876102823660046134d0565b61067b565b60405161025e9190613576565b3480156102a057600080fd5b506102546102af36600461359e565b6107ec565b3480156102c057600080fd5b5061022e6102cf3660046135f4565b6108b9565b61022e6102e23660046135f4565b6109f3565b61022e6102f5366004613618565b610ac4565b34801561030657600080fd5b5061028761031536600461368b565b610b45565b34801561032657600080fd5b506102876103353660046136df565b610c89565b34801561034657600080fd5b5061022e610355366004613720565b610d5f565b34801561036657600080fd5b5061022e61037536600461374c565b610dda565b61022e6103883660046135f4565b610f0a565b34801561039957600080fd5b5061022e6103a8366004613787565b611063565b3480156103b957600080fd5b506102546103c83660046137a0565b6110a7565b3480156103d957600080fd5b5061022e6103e83660046137d9565b6110c9565b3480156103f957600080fd5b506102546104083660046137a0565b6111ce565b34801561041957600080fd5b5061022e610428366004613787565b6111fd565b34801561043957600080fd5b506102546104483660046135f4565b6001600160a01b031660009081526037602052604090206003015490565b34801561047257600080fd5b50606c54610254565b34801561048757600080fd5b506102876104963660046136df565b61123e565b3480156104a757600080fd5b5061022e6104b636600461381a565b6112e8565b3480156104c757600080fd5b5061022e6104d63660046134d0565b611428565b3480156104e757600080fd5b5061022e6104f6366004613787565b61159e565b34801561050757600080fd5b506036546040516001600160a01b03909116815260200161025e565b34801561052f57600080fd5b5061054361053e3660046135f4565b6115df565b604080516001600160a01b03909416845260208401929092529082015260600161025e565b34801561057457600080fd5b50603954610254565b34801561058957600080fd5b5061022e610598366004613720565b6116a5565b3480156105a957600080fd5b506102546105b8366004613720565b6118ad565b3480156105c957600080fd5b5061022e6105d83660046135f4565b61197f565b3480156105e957600080fd5b506106186105f83660046135f4565b6001600160a01b039081166000908152603a602052604090205416151590565b604051901515815260200161025e565b61022e61063636600461384f565b611a2c565b34801561064757600080fd5b5061022e6106563660046136df565b611b89565b34801561066757600080fd5b506102546106763660046136df565b611d18565b60608382146106cc5760405162461bcd60e51b815260206004820181905260248201527f426173655374616b696e673a20696e76616c696420696e7075742061727261796044820152606401610225565b836001600160401b038111156106e4576106e46138b3565b60405190808252806020026020018201604052801561070d578160200160208202803683370190505b50905060005b81518110156107e35760376000878784818110610732576107326138c9565b905060200201602081019061074791906135f4565b6001600160a01b03166001600160a01b03168152602001908152602001600020600401600085858481811061077e5761077e6138c9565b905060200201602081019061079391906135f4565b6001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106107c6576107c66138c9565b6020908102919091010152806107db816138f5565b915050610713565b50949350505050565b60006002600054036108105760405162461bcd60e51b81526004016102259061390e565b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190613945565b61089f5760405162461bcd60e51b815260040161022590613967565b6108ab33868686611d63565b600160005595945050505050565b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109279190613945565b6109435760405162461bcd60e51b815260040161022590613967565b6001600160a01b0380831660009081526037602052604090206001810154909133911681146109845760405162461bcd60e51b8152600401610225906139af565b603654603954604051636efa12bd60e01b81526001600160a01b0387811660048301526024820192909252911690636efa12bd90604401600060405180830381600087803b1580156109d557600080fd5b505af11580156109e9573d6000803e3d6000fd5b5050505050505050565b60003411610a135760405162461bcd60e51b8152600401610225906139fc565b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a819190613945565b610a9d5760405162461bcd60e51b815260040161022590613967565b6001600160a01b0382166000908152603760205260409020610ac0903334611d9e565b5050565b33610ad76036546001600160a01b031690565b6001600160a01b031614610afd5760405162461bcd60e51b815260040161022590613428565b610b3e858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150859050611e70565b5050505050565b6060600080603660009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613a3f565b9050836001600160401b03811115610bdb57610bdb6138b3565b604051908082528060200260200182016040528015610c04578160200160208202803683370190505b50925060005b84811015610c7f57858582818110610c2457610c246138c9565b9050602002016020810190610c3991906135f4565b9250610c50838884610c4b878c6111ce565b6122a9565b848281518110610c6257610c626138c9565b602090810291909101015280610c77816138f5565b915050610c0a565b5050509392505050565b6060816001600160401b03811115610ca357610ca36138b3565b604051908082528060200260200182016040528015610ccc578160200160208202803683370190505b50905060005b82811015610d585760376000858584818110610cf057610cf06138c9565b9050602002016020810190610d0591906135f4565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020154828281518110610d3b57610d3b6138c9565b602090810291909101015280610d50816138f5565b915050610cd2565b5092915050565b600260005403610d815760405162461bcd60e51b81526004016102259061390e565b600260009081556001600160a01b03831681526037602052604090203390610daa9082846123cb565b610db481836125e3565b610dd05760405162461bcd60e51b815260040161022590613a58565b5050600160005550565b60d154610100900460ff1615808015610dfa575060d154600160ff909116105b80610e145750303b158015610e14575060d15460ff166001145b610e775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610225565b60d1805460ff191660011790558015610e9a5760d1805461ff0019166101001790555b610ea385612649565b610eac8461269e565b610eb5836126d3565b610ebe82612708565b8015610b3e5760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60003411610f2a5760405162461bcd60e51b8152600401610225906139fc565b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190613945565b610fb45760405162461bcd60e51b815260040161022590613967565b336000908152603a60205260409020546001600160a01b0316156110405760405162461bcd60e51b815260206004820152603960248201527f44656c656761746f725374616b696e673a2061646d696e206f6620616e20616360448201527f7469766520706f6f6c2063616e6e6f742064656c6567617465000000000000006064820152608401610225565b6001600160a01b0382166000908152603760205260409020610ac090333461273d565b61106b612804565b6001600160a01b0316336001600160a01b03161461109b5760405162461bcd60e51b815260040161022590613aa0565b6110a48161269e565b50565b60006110c083836110b6612832565b610c4b87876111ce565b90505b92915050565b6002600054036110eb5760405162461bcd60e51b81526004016102259061390e565b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e9190613945565b61117a5760405162461bcd60e51b815260040161022590613967565b6001600160a01b0384166000908152603760205260409020339061119f9082856123cb565b6001600160a01b03841660009081526037602052604090206111c290828561273d565b50506001600055505050565b6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b611205612804565b6001600160a01b0316336001600160a01b0316146112355760405162461bcd60e51b815260040161022590613aa0565b6110a4816126d3565b6060816001600160401b03811115611258576112586138b3565b604051908082528060200260200182016040528015611281578160200160208202803683370190505b50905060005b82811015610d58576112b98484838181106112a4576112a46138c9565b905060200201602081019061044891906135f4565b8282815181106112cb576112cb6138c9565b6020908102919091010152806112e0816138f5565b915050611287565b603654604051635061f96960e11b81526001600160a01b0380861660048301528592169063a0c3f2d290602401602060405180830381865afa158015611332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113569190613945565b6113725760405162461bcd60e51b815260040161022590613967565b6001600160a01b0380851660009081526037602052604090206001810154909133911681146113b35760405162461bcd60e51b8152600401610225906139af565b60365460405163e5125a1d60e01b81526001600160a01b03888116600483015260248201889052604482018790529091169063e5125a1d90606401600060405180830381600087803b15801561140857600080fd5b505af115801561141c573d6000803e3d6000fd5b50505050505050505050565b60026000540361144a5760405162461bcd60e51b81526004016102259061390e565b6002600055821580159061145d57508281145b6114b85760405162461bcd60e51b815260206004820152602660248201527f44656c656761746f725374616b696e673a20696e76616c6964206172726179206044820152650d8cadccee8d60d31b6064820152608401610225565b336000805b8581101561156a578484828181106114d7576114d76138c9565b90506020020135826114e99190613ae2565b915061155860376000898985818110611504576115046138c9565b905060200201602081019061151991906135f4565b6001600160a01b03166001600160a01b031681526020019081526020016000208487878581811061154c5761154c6138c9565b905060200201356123cb565b80611562816138f5565b9150506114bd565b5061157582826125e3565b6115915760405162461bcd60e51b815260040161022590613a58565b5050600160005550505050565b6115a6612804565b6001600160a01b0316336001600160a01b0316146115d65760405162461bcd60e51b815260040161022590613aa0565b6110a481612708565b603654604051635061f96960e11b81526001600160a01b038084166004830152600092839283928692169063a0c3f2d290602401602060405180830381865afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116549190613945565b6116705760405162461bcd60e51b815260040161022590613967565b505050506001600160a01b03908116600090815260376020526040902060018101546002820154600390920154921692909190565b6002600054036116c75760405162461bcd60e51b81526004016102259061390e565b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a9190613945565b6117565760405162461bcd60e51b815260040161022590613967565b600082116117a65760405162461bcd60e51b815260206004820181905260248201527f43616e6469646174655374616b696e673a20696e76616c696420616d6f756e746044820152606401610225565b6001600160a01b038316600090815260376020526040812060028101543392906117d1908690613af5565b9050606c5481101561183b5760405162461bcd60e51b815260206004820152602d60248201527f43616e6469646174655374616b696e673a20696e76616c6964207374616b696e60448201526c19c8185b5bdd5b9d081b19599d609a1b6064820152608401610225565b6118468284876128a4565b61185083866125e3565b6115915760405162461bcd60e51b815260206004820152602860248201527f43616e6469646174655374616b696e673a20636f756c64206e6f74207472616e60448201526739b332b9102927a760c11b6064820152608401610225565b6000336118c26036546001600160a01b031690565b6001600160a01b0316146118e85760405162461bcd60e51b815260040161022590613428565b6001600160a01b038316600090815260376020526040902061190a9083612a37565b905060006119206036546001600160a01b031690565b905061192c8183612ad5565b610d5857604080518381524760208201526001600160a01b0380841692908716917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35092915050565b611987612804565b6001600160a01b0316336001600160a01b0316146119b75760405162461bcd60e51b815260040161022590613aa0565b6000816001600160a01b03163b11611a235760405162461bcd60e51b815260206004820152602960248201527f48617356616c696461746f72436f6e74726163743a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b6064820152608401610225565b6110a481612649565b600260005403611a4e5760405162461bcd60e51b81526004016102259061390e565b60026000908155338152603a60205260409020546001600160a01b031615611ac75760405162461bcd60e51b815260206004820152602660248201527f43616e6469646174655374616b696e673a20706f6f6c2061646d696e2069732060448201526561637469766560d01b6064820152608401610225565b3433611ad881888888888888612b31565b6001600160a01b0380871660008181526037602081815260408084206001810180549789166001600160a01b0319988916811790915581548816871782558552603a835290842080549096168517909555929091529052611b3a818385611d9e565b816001600160a01b0316876001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a350506001600055505050505050565b33611b9c6036546001600160a01b031690565b6001600160a01b031614611bc25760405162461bcd60e51b815260040161022590613428565b8015610ac0576000805b82811015611cd957600060376000868685818110611bec57611bec6138c9565b9050602002016020810190611c0191906135f4565b6001600160a01b0390811682526020808301939093526040918201600090812060018101549092168152603a909352912080546001600160a01b03191690556002810154935090508215611cc657611c598184612a37565b506001810154611c72906001600160a01b031684612ad5565b611cc65760018101548154604080518681524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b5080611cd1816138f5565b915050611bcc565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d88383604051611d0b929190613b08565b60405180910390a1505050565b6000600260005403611d3c5760405162461bcd60e51b81526004016102259061390e565b6002600055611d4c338484612ede565b9050611d583382612f40565b600160005592915050565b6000611d70858585612ede565b6001600160a01b0383166000908152603760205260409020909150611d9690868361273d565b949350505050565b6001830154839083906001600160a01b03808316911614611dd15760405162461bcd60e51b8152600401610225906139af565b82856002016000828254611de59190613ae2565b92505081905550611e0b85858760020154868960030154611e069190613ae2565b612fc7565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90611e619086815260200190565b60405180910390a25050505050565b83518214611eb957807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a5858585604051611eac93929190613b8f565b60405180910390a26122a3565b600080600080600088516001600160401b03811115611eda57611eda6138b3565b604051908082528060200260200182016040528015611f03578160200160208202803683370190505b509050600089516001600160401b03811115611f2157611f216138b3565b604051908082528060200260200182016040528015611f4a578160200160208202803683370190505b50905060008a516001600160401b03811115611f6857611f686138b3565b604051908082528060200260200182016040528015611f91578160200160208202803683370190505b50905060005b8b5181101561220e578b8181518110611fb257611fb26138c9565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a900361205857868389612020816138f5565b9a5081518110612032576120326138c9565b60200260200101906001600160a01b031690816001600160a01b031681525050506121fc565b60028101548a111561208657604080518082019091528681526020018a905260018101869055600281018a90555b6001810154156120d05760018101548c8c848181106120a7576120a76138c9565b90506020020135670de0b6b3a76400006120c19190613bd9565b6120cb9190613bf0565b6120d3565b60005b9850888160000160008282546120e99190613ae2565b91829055509050856120fb8a85613af5565b8151811061210b5761210b6138c9565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008201518160000155602082015181600101559050508581600101600001541461219357600181018690555b6001810154846121a38a85613af5565b815181106121b3576121b36138c9565b6020908102919091010152868d6121ca8a85613af5565b815181106121da576121da6138c9565b60200260200101906001600160a01b031690816001600160a01b031681525050505b80612206816138f5565b915050611f97565b50851561225757858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a38260405161224e9190613c12565b60405180910390a25b8a511561229b57877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c858560405161229293929190613c25565b60405180910390a25b505050505050505b50505050565b6001600160a01b038085166000908152600260209081526040808320938716835292905290812060038101548490036122e457549050611d96565b6001600160a01b03861660009081526003602081815260408084206001808452828620948701548652939092528320918201548392901561236f576001600160a01b038a16600090815260016020818152604080842060038a0154855290915290912054908601549094506123599085613af5565b85600201546123689190613bd9565b9250612377565b846001015493505b8154600090612387908690613af5565b6123919089613bd9565b9050670de0b6b3a76400006123a68286613ae2565b6123b09190613bf0565b86546123bc9190613ae2565b9b9a5050505050505050505050565b6001830154839083906001600160a01b038083169116036123fe5760405162461bcd60e51b815260040161022590613c68565b6000831161244e5760405162461bcd60e51b815260206004820181905260248201527f44656c656761746f725374616b696e673a20696e76616c696420616d6f756e746044820152606401610225565b6001600160a01b03841660009081526004860160205260409020548311156124d45760405162461bcd60e51b815260206004820152603360248201527f44656c656761746f725374616b696e673a20696e73756666696369656e7420616044820152726d6f756e7420746f20756e64656c656761746560681b6064820152608401610225565b6038546001600160a01b038516600090815260058701602052604090205442916124fd91613ae2565b106125595760405162461bcd60e51b815260206004820152602660248201527f44656c656761746f725374616b696e673a20756e64656c656761746520746f6f604482015265206561726c7960d01b6064820152608401610225565b6001600160a01b03841660009081526004860160205260409020546125979086908690612587908790613af5565b868960030154611e069190613af5565b84546040518481526001600160a01b03918216918616907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c906020015b60405180910390a35050505050565b60008147101561263f5760405162461bcd60e51b815260206004820152602160248201527f524f4e5472616e736665723a20696e73756666696369656e742062616c616e636044820152606560f81b6064820152608401610225565b6110c08383612ad5565b603680546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b6836169906020015b60405180910390a150565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be290602001612693565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a90602001612693565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c67890602001612693565b6001830154839083906001600160a01b038083169116036127705760405162461bcd60e51b815260040161022590613c68565b6001600160a01b03841660009081526004860160205260409020546127ae908690869061279e908790613ae2565b868960030154611e069190613ae2565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b906125d49087815260200190565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6036546040805162c080c360e31b815290516000926001600160a01b03169163060406189160048083019260209291908290030181865afa15801561287b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289f9190613a3f565b905090565b6001830154839083906001600160a01b038083169116146128d75760405162461bcd60e51b8152600401610225906139af565b84600201548311156129415760405162461bcd60e51b815260206004820152602d60248201527f43616e6469646174655374616b696e673a20696e73756666696369656e74207360448201526c1d185ada5b99c8185b5bdd5b9d609a1b6064820152608401610225565b6038546001600160a01b0385166000908152600587016020526040902054429161296a91613ae2565b11156129c45760405162461bcd60e51b815260206004820152602360248201527f43616e6469646174655374616b696e673a20756e7374616b6520746f6f206561604482015262726c7960e81b6064820152608401610225565b828560020160008282546129d89190613af5565b925050819055506129f985858760020154868960030154611e069190613af5565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590602001611e61565b6000612a47836002015483613002565b905080836002016000828254612a5d9190613af5565b9091555050600183015460028401546003850154612a8e9286926001600160a01b0390911691611e06908690613af5565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612b22576040519150601f19603f3d011682016040523d82523d6000602084013e612b27565b606091505b5090949350505050565b612b3c8760006125e3565b612ba05760405162461bcd60e51b815260206004820152602f60248201527f43616e6469646174655374616b696e673a20706f6f6c2061646d696e2063616e60448201526e3737ba103932b1b2b4bb32902927a760891b6064820152608401610225565b612bab8460006125e3565b612c0d5760405162461bcd60e51b815260206004820152602d60248201527f43616e6469646174655374616b696e673a2074726561737572792063616e6e6f60448201526c3a103932b1b2b4bb32902927a760991b6064820152608401610225565b606c54811015612c6d5760405162461bcd60e51b815260206004820152602560248201527f43616e6469646174655374616b696e673a20696e73756666696369656e7420616044820152641b5bdd5b9d60da1b6064820152608401610225565b856001600160a01b0316876001600160a01b0316148015612c9f5750836001600160a01b0316866001600160a01b0316145b612d1b5760405162461bcd60e51b815260206004820152604160248201527f43616e6469646174655374616b696e673a20746872656520696e74657261637460448201527f696f6e20616464726573736573206d757374206265206f66207468652073616d6064820152606560f81b608482015260a401610225565b60408051600380825260808201909252600091602082016060803683370190505090508781600081518110612d5257612d526138c9565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110612d8657612d866138c9565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110612dba57612dba6138c9565b60200260200101906001600160a01b031690816001600160a01b031681525050612de381613018565b15612e565760405162461bcd60e51b815260206004820152603c60248201527f43616e6469646174655374616b696e673a207468726565206f7065726174696f60448201527f6e20616464726573736573206d7573742062652064697374696e6374000000006064820152608401610225565b603654604051630733ec9760e41b81526001600160a01b038981166004830152888116602483015287811660448301528681166064830152608482018690529091169063733ec9709060a401600060405180830381600087803b158015612ebc57600080fd5b505af1158015612ed0573d6000803e3d6000fd5b505050505050505050505050565b6000805b82811015612f3857612f1a848483818110612eff57612eff6138c9565b9050602002016020810190612f1491906135f4565b866130df565b612f249083613ae2565b915080612f30816138f5565b915050612ee2565b509392505050565b612f4a82826125e3565b610ac05760405162461bcd60e51b815260206004820152604260248201527f524f4e5472616e736665723a20756e61626c6520746f207472616e736665722060448201527f76616c75652c20726563697069656e74206d6179206861766520726576657274606482015261195960f21b608482015260a401610225565b8354612fdd906001600160a01b031684846131c7565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b600081831061301157816110c0565b5090919050565b6000815160000361302b57506000919050565b60005b6001835161303c9190613af5565b8110156130d6576000613050826001613ae2565b90505b83518110156130c35783818151811061306e5761306e6138c9565b60200260200101516001600160a01b0316848381518110613091576130916138c9565b60200260200101516001600160a01b0316036130b1575060019392505050565b806130bb816138f5565b915050613053565b50806130ce816138f5565b91505061302e565b50600092915050565b6000806130ea612832565b90506130fc848483610c4b88886111ce565b9150826001600160a01b0316846001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b78460405161314391815260200190565b60405180910390a36001600160a01b0384811660008181526002602090815260408083209488168084529482528083208381556003808201889055858552835281842054600182015590519283529392917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a3505092915050565b60006131d1612832565b6001600160a01b038516600090815260036020526040902060018101546002820154929350909183111561324557604051806040016040528061322c886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b03808716600090815260026020908152604080832093891683529290529081209061327788886111ce565b90506000613287898988856122a9565b835490915081146132d9578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b6132e68584888a86613358565b845460018085019190915560038401879055850154841461334d57886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c876001016000015460405161334491815260200190565b60405180910390a35b505050505050505050565b828460030154101561336c57600284018190555b600061337c856002015484613002565b905060008186600201546133909190613af5565b9050801561341f576002860182905560018701548111156134025760405162461bcd60e51b815260206004820152602660248201527f52657761726443616c63756c6174696f6e3a20696e76616c696420706f6f6c2060448201526573686172657360d01b6064820152608401610225565b808760010160000160008282546134199190613af5565b90915550505b50505050505050565b6020808252603e908201527f48617356616c696461746f72436f6e74726163743a206d6574686f642063616c60408201527f6c6572206d7573742062652076616c696461746f7220636f6e74726163740000606082015260800190565b60008083601f84011261349757600080fd5b5081356001600160401b038111156134ae57600080fd5b6020830191508360208260051b85010111156134c957600080fd5b9250929050565b600080600080604085870312156134e657600080fd5b84356001600160401b03808211156134fd57600080fd5b61350988838901613485565b9096509450602087013591508082111561352257600080fd5b5061352f87828801613485565b95989497509550505050565b600081518084526020808501945080840160005b8381101561356b5781518752958201959082019060010161354f565b509495945050505050565b6020815260006110c0602083018461353b565b6001600160a01b03811681146110a457600080fd5b6000806000604084860312156135b357600080fd5b83356001600160401b038111156135c957600080fd5b6135d586828701613485565b90945092505060208401356135e981613589565b809150509250925092565b60006020828403121561360657600080fd5b813561361181613589565b9392505050565b60008060008060006060868803121561363057600080fd5b85356001600160401b038082111561364757600080fd5b61365389838a01613485565b9097509550602088013591508082111561366c57600080fd5b5061367988828901613485565b96999598509660400135949350505050565b6000806000604084860312156136a057600080fd5b83356136ab81613589565b925060208401356001600160401b038111156136c657600080fd5b6136d286828701613485565b9497909650939450505050565b600080602083850312156136f257600080fd5b82356001600160401b0381111561370857600080fd5b61371485828601613485565b90969095509350505050565b6000806040838503121561373357600080fd5b823561373e81613589565b946020939093013593505050565b6000806000806080858703121561376257600080fd5b843561376d81613589565b966020860135965060408601359560600135945092505050565b60006020828403121561379957600080fd5b5035919050565b600080604083850312156137b357600080fd5b82356137be81613589565b915060208301356137ce81613589565b809150509250929050565b6000806000606084860312156137ee57600080fd5b83356137f981613589565b9250602084013561380981613589565b929592945050506040919091013590565b60008060006060848603121561382f57600080fd5b833561383a81613589565b95602085013595506040909401359392505050565b600080600080600060a0868803121561386757600080fd5b853561387281613589565b9450602086013561388281613589565b9350604086013561389281613589565b925060608601356138a281613589565b949793965091946080013592915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613907576139076138df565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561395757600080fd5b8151801515811461361157600080fd5b60208082526028908201527f426173655374616b696e673a20717565727920666f72206e6f6e2d6578697374604082015267195b9d081c1bdbdb60c21b606082015260800190565b6020808252602d908201527f426173655374616b696e673a20726571756573746572206d757374206265207460408201526c3432903837b7b61030b236b4b760991b606082015260800190565b60208082526023908201527f426173655374616b696e673a207175657279207769746820656d7074792076616040820152626c756560e81b606082015260800190565b600060208284031215613a5157600080fd5b5051919050565b60208082526028908201527f44656c656761746f725374616b696e673a20636f756c64206e6f74207472616e60408201526739b332b9102927a760c11b606082015260800190565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b808201808211156110c3576110c36138df565b818103818111156110c3576110c36138df565b60208082528181018390526000908460408401835b86811015613b4b578235613b3081613589565b6001600160a01b031682529183019190830190600101613b1d565b509695505050505050565b600081518084526020808501945080840160005b8381101561356b5781516001600160a01b031687529582019590820190600101613b6a565b604081526000613ba26040830186613b56565b82810360208401528381526001600160fb1b03841115613bc157600080fd5b8360051b808660208401370160200195945050505050565b80820281158282048414176110c3576110c36138df565b600082613c0d57634e487b7160e01b600052601260045260246000fd5b500490565b6020815260006110c06020830184613b56565b606081526000613c386060830186613b56565b8281036020840152613c4a818661353b565b90508281036040840152613c5e818561353b565b9695505050505050565b60208082526031908201527f426173655374616b696e673a2064656c656761746f72206d757374206e6f74206040820152703132903a3432903837b7b61030b236b4b760791b60608201526080019056fea264697066735822122018731fe3e302ebe1194cd21918a9de58aa42af0abc5bb778de747a024890b31064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c8063895ab74211610102578063af24542911610095578063e115877b11610064578063e115877b146105dd578063e5376f5414610628578063e9ac5e061461063b578063f9f031df1461065b57610230565b8063af24542914610568578063c2a672e01461057d578063c905bb351461059d578063cdf64a76146105bd57610230565b80639488e4e9116100d15780639488e4e9146104bb578063969ffc14146104db57806399439089146104fb5780639e614e0e1461052357610230565b8063895ab7421461042d578063909791dd1461046657806391f8723f1461047b578063924f081e1461049b57610230565b80634d99dd161161017a5780636b091695116101495780636b091695146103ad5780636bd8f804146103cd57806376664b65146103ed578063888b9ae91461040d57610230565b80634d99dd161461033a5780634ec81af11461035a5780635c19a95c1461037a578063679a6e431461038d57610230565b806326476204116101b657806326476204146102d45780633b8cb16b146102e75780633d8e846e146102fa57806342ef3c341461031a57610230565b80630682e8fa14610243578063095f647514610267578063097e4a9d146102945780631658c86e146102b457610230565b3661023057336101ff6036546001600160a01b031690565b6001600160a01b03161461022e5760405162461bcd60e51b815260040161022590613428565b60405180910390fd5b005b336101ff6036546001600160a01b031690565b34801561024f57600080fd5b506038545b6040519081526020015b60405180910390f35b34801561027357600080fd5b506102876102823660046134d0565b61067b565b60405161025e9190613576565b3480156102a057600080fd5b506102546102af36600461359e565b6107ec565b3480156102c057600080fd5b5061022e6102cf3660046135f4565b6108b9565b61022e6102e23660046135f4565b6109f3565b61022e6102f5366004613618565b610ac4565b34801561030657600080fd5b5061028761031536600461368b565b610b45565b34801561032657600080fd5b506102876103353660046136df565b610c89565b34801561034657600080fd5b5061022e610355366004613720565b610d5f565b34801561036657600080fd5b5061022e61037536600461374c565b610dda565b61022e6103883660046135f4565b610f0a565b34801561039957600080fd5b5061022e6103a8366004613787565b611063565b3480156103b957600080fd5b506102546103c83660046137a0565b6110a7565b3480156103d957600080fd5b5061022e6103e83660046137d9565b6110c9565b3480156103f957600080fd5b506102546104083660046137a0565b6111ce565b34801561041957600080fd5b5061022e610428366004613787565b6111fd565b34801561043957600080fd5b506102546104483660046135f4565b6001600160a01b031660009081526037602052604090206003015490565b34801561047257600080fd5b50606c54610254565b34801561048757600080fd5b506102876104963660046136df565b61123e565b3480156104a757600080fd5b5061022e6104b636600461381a565b6112e8565b3480156104c757600080fd5b5061022e6104d63660046134d0565b611428565b3480156104e757600080fd5b5061022e6104f6366004613787565b61159e565b34801561050757600080fd5b506036546040516001600160a01b03909116815260200161025e565b34801561052f57600080fd5b5061054361053e3660046135f4565b6115df565b604080516001600160a01b03909416845260208401929092529082015260600161025e565b34801561057457600080fd5b50603954610254565b34801561058957600080fd5b5061022e610598366004613720565b6116a5565b3480156105a957600080fd5b506102546105b8366004613720565b6118ad565b3480156105c957600080fd5b5061022e6105d83660046135f4565b61197f565b3480156105e957600080fd5b506106186105f83660046135f4565b6001600160a01b039081166000908152603a602052604090205416151590565b604051901515815260200161025e565b61022e61063636600461384f565b611a2c565b34801561064757600080fd5b5061022e6106563660046136df565b611b89565b34801561066757600080fd5b506102546106763660046136df565b611d18565b60608382146106cc5760405162461bcd60e51b815260206004820181905260248201527f426173655374616b696e673a20696e76616c696420696e7075742061727261796044820152606401610225565b836001600160401b038111156106e4576106e46138b3565b60405190808252806020026020018201604052801561070d578160200160208202803683370190505b50905060005b81518110156107e35760376000878784818110610732576107326138c9565b905060200201602081019061074791906135f4565b6001600160a01b03166001600160a01b03168152602001908152602001600020600401600085858481811061077e5761077e6138c9565b905060200201602081019061079391906135f4565b6001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106107c6576107c66138c9565b6020908102919091010152806107db816138f5565b915050610713565b50949350505050565b60006002600054036108105760405162461bcd60e51b81526004016102259061390e565b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190613945565b61089f5760405162461bcd60e51b815260040161022590613967565b6108ab33868686611d63565b600160005595945050505050565b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109279190613945565b6109435760405162461bcd60e51b815260040161022590613967565b6001600160a01b0380831660009081526037602052604090206001810154909133911681146109845760405162461bcd60e51b8152600401610225906139af565b603654603954604051636efa12bd60e01b81526001600160a01b0387811660048301526024820192909252911690636efa12bd90604401600060405180830381600087803b1580156109d557600080fd5b505af11580156109e9573d6000803e3d6000fd5b5050505050505050565b60003411610a135760405162461bcd60e51b8152600401610225906139fc565b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a819190613945565b610a9d5760405162461bcd60e51b815260040161022590613967565b6001600160a01b0382166000908152603760205260409020610ac0903334611d9e565b5050565b33610ad76036546001600160a01b031690565b6001600160a01b031614610afd5760405162461bcd60e51b815260040161022590613428565b610b3e858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150859050611e70565b5050505050565b6060600080603660009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613a3f565b9050836001600160401b03811115610bdb57610bdb6138b3565b604051908082528060200260200182016040528015610c04578160200160208202803683370190505b50925060005b84811015610c7f57858582818110610c2457610c246138c9565b9050602002016020810190610c3991906135f4565b9250610c50838884610c4b878c6111ce565b6122a9565b848281518110610c6257610c626138c9565b602090810291909101015280610c77816138f5565b915050610c0a565b5050509392505050565b6060816001600160401b03811115610ca357610ca36138b3565b604051908082528060200260200182016040528015610ccc578160200160208202803683370190505b50905060005b82811015610d585760376000858584818110610cf057610cf06138c9565b9050602002016020810190610d0591906135f4565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020154828281518110610d3b57610d3b6138c9565b602090810291909101015280610d50816138f5565b915050610cd2565b5092915050565b600260005403610d815760405162461bcd60e51b81526004016102259061390e565b600260009081556001600160a01b03831681526037602052604090203390610daa9082846123cb565b610db481836125e3565b610dd05760405162461bcd60e51b815260040161022590613a58565b5050600160005550565b60d154610100900460ff1615808015610dfa575060d154600160ff909116105b80610e145750303b158015610e14575060d15460ff166001145b610e775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610225565b60d1805460ff191660011790558015610e9a5760d1805461ff0019166101001790555b610ea385612649565b610eac8461269e565b610eb5836126d3565b610ebe82612708565b8015610b3e5760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60003411610f2a5760405162461bcd60e51b8152600401610225906139fc565b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190613945565b610fb45760405162461bcd60e51b815260040161022590613967565b336000908152603a60205260409020546001600160a01b0316156110405760405162461bcd60e51b815260206004820152603960248201527f44656c656761746f725374616b696e673a2061646d696e206f6620616e20616360448201527f7469766520706f6f6c2063616e6e6f742064656c6567617465000000000000006064820152608401610225565b6001600160a01b0382166000908152603760205260409020610ac090333461273d565b61106b612804565b6001600160a01b0316336001600160a01b03161461109b5760405162461bcd60e51b815260040161022590613aa0565b6110a48161269e565b50565b60006110c083836110b6612832565b610c4b87876111ce565b90505b92915050565b6002600054036110eb5760405162461bcd60e51b81526004016102259061390e565b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e9190613945565b61117a5760405162461bcd60e51b815260040161022590613967565b6001600160a01b0384166000908152603760205260409020339061119f9082856123cb565b6001600160a01b03841660009081526037602052604090206111c290828561273d565b50506001600055505050565b6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b611205612804565b6001600160a01b0316336001600160a01b0316146112355760405162461bcd60e51b815260040161022590613aa0565b6110a4816126d3565b6060816001600160401b03811115611258576112586138b3565b604051908082528060200260200182016040528015611281578160200160208202803683370190505b50905060005b82811015610d58576112b98484838181106112a4576112a46138c9565b905060200201602081019061044891906135f4565b8282815181106112cb576112cb6138c9565b6020908102919091010152806112e0816138f5565b915050611287565b603654604051635061f96960e11b81526001600160a01b0380861660048301528592169063a0c3f2d290602401602060405180830381865afa158015611332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113569190613945565b6113725760405162461bcd60e51b815260040161022590613967565b6001600160a01b0380851660009081526037602052604090206001810154909133911681146113b35760405162461bcd60e51b8152600401610225906139af565b60365460405163e5125a1d60e01b81526001600160a01b03888116600483015260248201889052604482018790529091169063e5125a1d90606401600060405180830381600087803b15801561140857600080fd5b505af115801561141c573d6000803e3d6000fd5b50505050505050505050565b60026000540361144a5760405162461bcd60e51b81526004016102259061390e565b6002600055821580159061145d57508281145b6114b85760405162461bcd60e51b815260206004820152602660248201527f44656c656761746f725374616b696e673a20696e76616c6964206172726179206044820152650d8cadccee8d60d31b6064820152608401610225565b336000805b8581101561156a578484828181106114d7576114d76138c9565b90506020020135826114e99190613ae2565b915061155860376000898985818110611504576115046138c9565b905060200201602081019061151991906135f4565b6001600160a01b03166001600160a01b031681526020019081526020016000208487878581811061154c5761154c6138c9565b905060200201356123cb565b80611562816138f5565b9150506114bd565b5061157582826125e3565b6115915760405162461bcd60e51b815260040161022590613a58565b5050600160005550505050565b6115a6612804565b6001600160a01b0316336001600160a01b0316146115d65760405162461bcd60e51b815260040161022590613aa0565b6110a481612708565b603654604051635061f96960e11b81526001600160a01b038084166004830152600092839283928692169063a0c3f2d290602401602060405180830381865afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116549190613945565b6116705760405162461bcd60e51b815260040161022590613967565b505050506001600160a01b03908116600090815260376020526040902060018101546002820154600390920154921692909190565b6002600054036116c75760405162461bcd60e51b81526004016102259061390e565b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a9190613945565b6117565760405162461bcd60e51b815260040161022590613967565b600082116117a65760405162461bcd60e51b815260206004820181905260248201527f43616e6469646174655374616b696e673a20696e76616c696420616d6f756e746044820152606401610225565b6001600160a01b038316600090815260376020526040812060028101543392906117d1908690613af5565b9050606c5481101561183b5760405162461bcd60e51b815260206004820152602d60248201527f43616e6469646174655374616b696e673a20696e76616c6964207374616b696e60448201526c19c8185b5bdd5b9d081b19599d609a1b6064820152608401610225565b6118468284876128a4565b61185083866125e3565b6115915760405162461bcd60e51b815260206004820152602860248201527f43616e6469646174655374616b696e673a20636f756c64206e6f74207472616e60448201526739b332b9102927a760c11b6064820152608401610225565b6000336118c26036546001600160a01b031690565b6001600160a01b0316146118e85760405162461bcd60e51b815260040161022590613428565b6001600160a01b038316600090815260376020526040902061190a9083612a37565b905060006119206036546001600160a01b031690565b905061192c8183612ad5565b610d5857604080518381524760208201526001600160a01b0380841692908716917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35092915050565b611987612804565b6001600160a01b0316336001600160a01b0316146119b75760405162461bcd60e51b815260040161022590613aa0565b6000816001600160a01b03163b11611a235760405162461bcd60e51b815260206004820152602960248201527f48617356616c696461746f72436f6e74726163743a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b6064820152608401610225565b6110a481612649565b600260005403611a4e5760405162461bcd60e51b81526004016102259061390e565b60026000908155338152603a60205260409020546001600160a01b031615611ac75760405162461bcd60e51b815260206004820152602660248201527f43616e6469646174655374616b696e673a20706f6f6c2061646d696e2069732060448201526561637469766560d01b6064820152608401610225565b3433611ad881888888888888612b31565b6001600160a01b0380871660008181526037602081815260408084206001810180549789166001600160a01b0319988916811790915581548816871782558552603a835290842080549096168517909555929091529052611b3a818385611d9e565b816001600160a01b0316876001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a350506001600055505050505050565b33611b9c6036546001600160a01b031690565b6001600160a01b031614611bc25760405162461bcd60e51b815260040161022590613428565b8015610ac0576000805b82811015611cd957600060376000868685818110611bec57611bec6138c9565b9050602002016020810190611c0191906135f4565b6001600160a01b0390811682526020808301939093526040918201600090812060018101549092168152603a909352912080546001600160a01b03191690556002810154935090508215611cc657611c598184612a37565b506001810154611c72906001600160a01b031684612ad5565b611cc65760018101548154604080518681524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b5080611cd1816138f5565b915050611bcc565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d88383604051611d0b929190613b08565b60405180910390a1505050565b6000600260005403611d3c5760405162461bcd60e51b81526004016102259061390e565b6002600055611d4c338484612ede565b9050611d583382612f40565b600160005592915050565b6000611d70858585612ede565b6001600160a01b0383166000908152603760205260409020909150611d9690868361273d565b949350505050565b6001830154839083906001600160a01b03808316911614611dd15760405162461bcd60e51b8152600401610225906139af565b82856002016000828254611de59190613ae2565b92505081905550611e0b85858760020154868960030154611e069190613ae2565b612fc7565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90611e619086815260200190565b60405180910390a25050505050565b83518214611eb957807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a5858585604051611eac93929190613b8f565b60405180910390a26122a3565b600080600080600088516001600160401b03811115611eda57611eda6138b3565b604051908082528060200260200182016040528015611f03578160200160208202803683370190505b509050600089516001600160401b03811115611f2157611f216138b3565b604051908082528060200260200182016040528015611f4a578160200160208202803683370190505b50905060008a516001600160401b03811115611f6857611f686138b3565b604051908082528060200260200182016040528015611f91578160200160208202803683370190505b50905060005b8b5181101561220e578b8181518110611fb257611fb26138c9565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a900361205857868389612020816138f5565b9a5081518110612032576120326138c9565b60200260200101906001600160a01b031690816001600160a01b031681525050506121fc565b60028101548a111561208657604080518082019091528681526020018a905260018101869055600281018a90555b6001810154156120d05760018101548c8c848181106120a7576120a76138c9565b90506020020135670de0b6b3a76400006120c19190613bd9565b6120cb9190613bf0565b6120d3565b60005b9850888160000160008282546120e99190613ae2565b91829055509050856120fb8a85613af5565b8151811061210b5761210b6138c9565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008201518160000155602082015181600101559050508581600101600001541461219357600181018690555b6001810154846121a38a85613af5565b815181106121b3576121b36138c9565b6020908102919091010152868d6121ca8a85613af5565b815181106121da576121da6138c9565b60200260200101906001600160a01b031690816001600160a01b031681525050505b80612206816138f5565b915050611f97565b50851561225757858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a38260405161224e9190613c12565b60405180910390a25b8a511561229b57877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c858560405161229293929190613c25565b60405180910390a25b505050505050505b50505050565b6001600160a01b038085166000908152600260209081526040808320938716835292905290812060038101548490036122e457549050611d96565b6001600160a01b03861660009081526003602081815260408084206001808452828620948701548652939092528320918201548392901561236f576001600160a01b038a16600090815260016020818152604080842060038a0154855290915290912054908601549094506123599085613af5565b85600201546123689190613bd9565b9250612377565b846001015493505b8154600090612387908690613af5565b6123919089613bd9565b9050670de0b6b3a76400006123a68286613ae2565b6123b09190613bf0565b86546123bc9190613ae2565b9b9a5050505050505050505050565b6001830154839083906001600160a01b038083169116036123fe5760405162461bcd60e51b815260040161022590613c68565b6000831161244e5760405162461bcd60e51b815260206004820181905260248201527f44656c656761746f725374616b696e673a20696e76616c696420616d6f756e746044820152606401610225565b6001600160a01b03841660009081526004860160205260409020548311156124d45760405162461bcd60e51b815260206004820152603360248201527f44656c656761746f725374616b696e673a20696e73756666696369656e7420616044820152726d6f756e7420746f20756e64656c656761746560681b6064820152608401610225565b6038546001600160a01b038516600090815260058701602052604090205442916124fd91613ae2565b106125595760405162461bcd60e51b815260206004820152602660248201527f44656c656761746f725374616b696e673a20756e64656c656761746520746f6f604482015265206561726c7960d01b6064820152608401610225565b6001600160a01b03841660009081526004860160205260409020546125979086908690612587908790613af5565b868960030154611e069190613af5565b84546040518481526001600160a01b03918216918616907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c906020015b60405180910390a35050505050565b60008147101561263f5760405162461bcd60e51b815260206004820152602160248201527f524f4e5472616e736665723a20696e73756666696369656e742062616c616e636044820152606560f81b6064820152608401610225565b6110c08383612ad5565b603680546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b6836169906020015b60405180910390a150565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be290602001612693565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a90602001612693565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c67890602001612693565b6001830154839083906001600160a01b038083169116036127705760405162461bcd60e51b815260040161022590613c68565b6001600160a01b03841660009081526004860160205260409020546127ae908690869061279e908790613ae2565b868960030154611e069190613ae2565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b906125d49087815260200190565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6036546040805162c080c360e31b815290516000926001600160a01b03169163060406189160048083019260209291908290030181865afa15801561287b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289f9190613a3f565b905090565b6001830154839083906001600160a01b038083169116146128d75760405162461bcd60e51b8152600401610225906139af565b84600201548311156129415760405162461bcd60e51b815260206004820152602d60248201527f43616e6469646174655374616b696e673a20696e73756666696369656e74207360448201526c1d185ada5b99c8185b5bdd5b9d609a1b6064820152608401610225565b6038546001600160a01b0385166000908152600587016020526040902054429161296a91613ae2565b11156129c45760405162461bcd60e51b815260206004820152602360248201527f43616e6469646174655374616b696e673a20756e7374616b6520746f6f206561604482015262726c7960e81b6064820152608401610225565b828560020160008282546129d89190613af5565b925050819055506129f985858760020154868960030154611e069190613af5565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590602001611e61565b6000612a47836002015483613002565b905080836002016000828254612a5d9190613af5565b9091555050600183015460028401546003850154612a8e9286926001600160a01b0390911691611e06908690613af5565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612b22576040519150601f19603f3d011682016040523d82523d6000602084013e612b27565b606091505b5090949350505050565b612b3c8760006125e3565b612ba05760405162461bcd60e51b815260206004820152602f60248201527f43616e6469646174655374616b696e673a20706f6f6c2061646d696e2063616e60448201526e3737ba103932b1b2b4bb32902927a760891b6064820152608401610225565b612bab8460006125e3565b612c0d5760405162461bcd60e51b815260206004820152602d60248201527f43616e6469646174655374616b696e673a2074726561737572792063616e6e6f60448201526c3a103932b1b2b4bb32902927a760991b6064820152608401610225565b606c54811015612c6d5760405162461bcd60e51b815260206004820152602560248201527f43616e6469646174655374616b696e673a20696e73756666696369656e7420616044820152641b5bdd5b9d60da1b6064820152608401610225565b856001600160a01b0316876001600160a01b0316148015612c9f5750836001600160a01b0316866001600160a01b0316145b612d1b5760405162461bcd60e51b815260206004820152604160248201527f43616e6469646174655374616b696e673a20746872656520696e74657261637460448201527f696f6e20616464726573736573206d757374206265206f66207468652073616d6064820152606560f81b608482015260a401610225565b60408051600380825260808201909252600091602082016060803683370190505090508781600081518110612d5257612d526138c9565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110612d8657612d866138c9565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110612dba57612dba6138c9565b60200260200101906001600160a01b031690816001600160a01b031681525050612de381613018565b15612e565760405162461bcd60e51b815260206004820152603c60248201527f43616e6469646174655374616b696e673a207468726565206f7065726174696f60448201527f6e20616464726573736573206d7573742062652064697374696e6374000000006064820152608401610225565b603654604051630733ec9760e41b81526001600160a01b038981166004830152888116602483015287811660448301528681166064830152608482018690529091169063733ec9709060a401600060405180830381600087803b158015612ebc57600080fd5b505af1158015612ed0573d6000803e3d6000fd5b505050505050505050505050565b6000805b82811015612f3857612f1a848483818110612eff57612eff6138c9565b9050602002016020810190612f1491906135f4565b866130df565b612f249083613ae2565b915080612f30816138f5565b915050612ee2565b509392505050565b612f4a82826125e3565b610ac05760405162461bcd60e51b815260206004820152604260248201527f524f4e5472616e736665723a20756e61626c6520746f207472616e736665722060448201527f76616c75652c20726563697069656e74206d6179206861766520726576657274606482015261195960f21b608482015260a401610225565b8354612fdd906001600160a01b031684846131c7565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b600081831061301157816110c0565b5090919050565b6000815160000361302b57506000919050565b60005b6001835161303c9190613af5565b8110156130d6576000613050826001613ae2565b90505b83518110156130c35783818151811061306e5761306e6138c9565b60200260200101516001600160a01b0316848381518110613091576130916138c9565b60200260200101516001600160a01b0316036130b1575060019392505050565b806130bb816138f5565b915050613053565b50806130ce816138f5565b91505061302e565b50600092915050565b6000806130ea612832565b90506130fc848483610c4b88886111ce565b9150826001600160a01b0316846001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b78460405161314391815260200190565b60405180910390a36001600160a01b0384811660008181526002602090815260408083209488168084529482528083208381556003808201889055858552835281842054600182015590519283529392917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a3505092915050565b60006131d1612832565b6001600160a01b038516600090815260036020526040902060018101546002820154929350909183111561324557604051806040016040528061322c886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b03808716600090815260026020908152604080832093891683529290529081209061327788886111ce565b90506000613287898988856122a9565b835490915081146132d9578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b6132e68584888a86613358565b845460018085019190915560038401879055850154841461334d57886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c876001016000015460405161334491815260200190565b60405180910390a35b505050505050505050565b828460030154101561336c57600284018190555b600061337c856002015484613002565b905060008186600201546133909190613af5565b9050801561341f576002860182905560018701548111156134025760405162461bcd60e51b815260206004820152602660248201527f52657761726443616c63756c6174696f6e3a20696e76616c696420706f6f6c2060448201526573686172657360d01b6064820152608401610225565b808760010160000160008282546134199190613af5565b90915550505b50505050505050565b6020808252603e908201527f48617356616c696461746f72436f6e74726163743a206d6574686f642063616c60408201527f6c6572206d7573742062652076616c696461746f7220636f6e74726163740000606082015260800190565b60008083601f84011261349757600080fd5b5081356001600160401b038111156134ae57600080fd5b6020830191508360208260051b85010111156134c957600080fd5b9250929050565b600080600080604085870312156134e657600080fd5b84356001600160401b03808211156134fd57600080fd5b61350988838901613485565b9096509450602087013591508082111561352257600080fd5b5061352f87828801613485565b95989497509550505050565b600081518084526020808501945080840160005b8381101561356b5781518752958201959082019060010161354f565b509495945050505050565b6020815260006110c0602083018461353b565b6001600160a01b03811681146110a457600080fd5b6000806000604084860312156135b357600080fd5b83356001600160401b038111156135c957600080fd5b6135d586828701613485565b90945092505060208401356135e981613589565b809150509250925092565b60006020828403121561360657600080fd5b813561361181613589565b9392505050565b60008060008060006060868803121561363057600080fd5b85356001600160401b038082111561364757600080fd5b61365389838a01613485565b9097509550602088013591508082111561366c57600080fd5b5061367988828901613485565b96999598509660400135949350505050565b6000806000604084860312156136a057600080fd5b83356136ab81613589565b925060208401356001600160401b038111156136c657600080fd5b6136d286828701613485565b9497909650939450505050565b600080602083850312156136f257600080fd5b82356001600160401b0381111561370857600080fd5b61371485828601613485565b90969095509350505050565b6000806040838503121561373357600080fd5b823561373e81613589565b946020939093013593505050565b6000806000806080858703121561376257600080fd5b843561376d81613589565b966020860135965060408601359560600135945092505050565b60006020828403121561379957600080fd5b5035919050565b600080604083850312156137b357600080fd5b82356137be81613589565b915060208301356137ce81613589565b809150509250929050565b6000806000606084860312156137ee57600080fd5b83356137f981613589565b9250602084013561380981613589565b929592945050506040919091013590565b60008060006060848603121561382f57600080fd5b833561383a81613589565b95602085013595506040909401359392505050565b600080600080600060a0868803121561386757600080fd5b853561387281613589565b9450602086013561388281613589565b9350604086013561389281613589565b925060608601356138a281613589565b949793965091946080013592915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613907576139076138df565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561395757600080fd5b8151801515811461361157600080fd5b60208082526028908201527f426173655374616b696e673a20717565727920666f72206e6f6e2d6578697374604082015267195b9d081c1bdbdb60c21b606082015260800190565b6020808252602d908201527f426173655374616b696e673a20726571756573746572206d757374206265207460408201526c3432903837b7b61030b236b4b760991b606082015260800190565b60208082526023908201527f426173655374616b696e673a207175657279207769746820656d7074792076616040820152626c756560e81b606082015260800190565b600060208284031215613a5157600080fd5b5051919050565b60208082526028908201527f44656c656761746f725374616b696e673a20636f756c64206e6f74207472616e60408201526739b332b9102927a760c11b606082015260800190565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b808201808211156110c3576110c36138df565b818103818111156110c3576110c36138df565b60208082528181018390526000908460408401835b86811015613b4b578235613b3081613589565b6001600160a01b031682529183019190830190600101613b1d565b509695505050505050565b600081518084526020808501945080840160005b8381101561356b5781516001600160a01b031687529582019590820190600101613b6a565b604081526000613ba26040830186613b56565b82810360208401528381526001600160fb1b03841115613bc157600080fd5b8360051b808660208401370160200195945050505050565b80820281158282048414176110c3576110c36138df565b600082613c0d57634e487b7160e01b600052601260045260246000fd5b500490565b6020815260006110c06020830184613b56565b606081526000613c386060830186613b56565b8281036020840152613c4a818661353b565b90508281036040840152613c5e818561353b565b9695505050505050565b60208082526031908201527f426173655374616b696e673a2064656c656761746f72206d757374206e6f74206040820152703132903a3432903837b7b61030b236b4b760791b60608201526080019056fea264697066735822122018731fe3e302ebe1194cd21918a9de58aa42af0abc5bb778de747a024890b31064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "applyValidatorCandidate(address,address,address,address,uint256)": {
        "details": "Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.",
        "params": {
          "_candidateAdmin": "the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance."
        }
      },
      "bulkUndelegate(address[],uint256[])": {
        "details": "Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`."
      },
      "claimRewards(address[])": {
        "details": "Claims the reward of method caller. Emits the `RewardClaimed` event."
      },
      "cooldownSecsToUndelegate()": {
        "details": "Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated."
      },
      "deductStakingAmount(address,uint256)": {
        "details": "Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller is validator contract. Emits the event `Unstaked`."
      },
      "delegate(address)": {
        "details": "Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event."
      },
      "delegateRewards(address[],address)": {
        "details": "Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event."
      },
      "deprecatePools(address[])": {
        "details": "Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin."
      },
      "getManySelfStakings(address[])": {
        "details": "Returns the self-staking amounts of the pools."
      },
      "getManyStakingAmounts(address[],address[])": {
        "details": "Returns the staking amounts of the users."
      },
      "getManyStakingTotals(address[])": {
        "details": "Returns the total staking amounts of all users for the pools `_poolAddrs`."
      },
      "getReward(address,address)": {
        "details": "Returns the reward amount that user claimable."
      },
      "getRewards(address,address[])": {
        "details": "Returns the claimable reward of the user `_user`."
      },
      "getStakingAmount(address,address)": {
        "details": "Returns the staking amount of an user."
      },
      "getStakingPool(address)": {
        "details": "Returns the staking pool detail."
      },
      "getStakingTotal(address)": {
        "details": "Returns the total staking amount of all users for a pool."
      },
      "initialize(address,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "isActivePoolAdmin(address)": {
        "details": "Returns whether the `_poolAdminAddr` is currently active."
      },
      "minValidatorStakingAmount()": {
        "details": "Returns the minimum threshold for being a validator candidate."
      },
      "recordRewards(address[],uint256[],uint256)": {
        "details": "Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller is validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending."
      },
      "redelegate(address,address,uint256)": {
        "details": "Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event."
      },
      "requestRenounce(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`."
      },
      "setCooldownSecsToUndelegate(uint256)": {
        "details": "Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`."
      },
      "setMinValidatorStakingAmount(uint256)": {
        "details": "Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event."
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "setWaitingSecsToRevoke(uint256)": {
        "details": "Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`."
      },
      "stake(address)": {
        "details": "Self-delegates to the validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`."
      },
      "undelegate(address,uint256)": {
        "details": "Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event."
      },
      "unstake(address,uint256)": {
        "details": "Unstakes from the validator candidate `_consensusAddr` for `_amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      },
      "waitingSecsToRevoke()": {
        "details": "Returns the number of seconds that a candidate must wait for the renounce request gets affected."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1636,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 25469,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_accumulatedRps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)10082_storage))"
      },
      {
        "astId": 25477,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_userReward",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)10717_storage))"
      },
      {
        "astId": 25483,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_stakingPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolFields)10723_storage)"
      },
      {
        "astId": 25488,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6427,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IRoninValidatorSet)11221"
      },
      {
        "astId": 24017,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_stakingPool",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_struct(PoolDetail)10447_storage)"
      },
      {
        "astId": 24020,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_cooldownSecsToUndelegate",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 24023,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_waitingSecsToRevoke",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 24028,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_activePoolAdminMapping",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 24033,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 24375,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_minValidatorStakingAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 24380,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24976,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initialized",
        "offset": 0,
        "slot": "209",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initializing",
        "offset": 1,
        "slot": "209",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoninValidatorSet)11221": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)10717_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IRewardPool.UserRewardFields))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserRewardFields)10717_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)10082_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PeriodWrapper)10082_storage)"
      },
      "t_mapping(t_address,t_struct(PoolDetail)10447_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBaseStaking.PoolDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolDetail)10447_storage"
      },
      "t_mapping(t_address,t_struct(PoolFields)10723_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.PoolFields)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolFields)10723_storage"
      },
      "t_mapping(t_address,t_struct(UserRewardFields)10717_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.UserRewardFields)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRewardFields)10717_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PeriodWrapper)10082_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodWrapper)10082_storage"
      },
      "t_struct(PeriodWrapper)10082_storage": {
        "encoding": "inplace",
        "label": "struct PeriodWrapperConsumer.PeriodWrapper",
        "members": [
          {
            "astId": 10079,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "inner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10081,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolDetail)10447_storage": {
        "encoding": "inplace",
        "label": "struct IBaseStaking.PoolDetail",
        "members": [
          {
            "astId": 10432,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10434,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "admin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10436,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10438,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingTotal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10442,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "delegatingAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 10446,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastDelegatingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PoolFields)10723_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.PoolFields",
        "members": [
          {
            "astId": 10719,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10722,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PeriodWrapper)10082_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserRewardFields)10717_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.UserRewardFields",
        "members": [
          {
            "astId": 10710,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "debited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10712,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10714,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "minAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10716,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}