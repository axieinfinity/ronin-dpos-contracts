{
  "address": "0xEc7AC1cdda395094DCaC7711E6439c5E8caBcf2F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "ErrAdminOfAnyActivePoolForbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "extraInfo",
          "type": "string"
        }
      ],
      "name": "ErrCannotInitTransferRON",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCannotTransferRON",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrDuplicated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        }
      ],
      "name": "ErrInactivePool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sendAmount",
          "type": "uint256"
        }
      ],
      "name": "ErrInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientDelegatingAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientStakingAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidArrays",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidCommissionRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidPoolShare",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrOnlyPoolAdminAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrPoolAdminForbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrRecipientRevert",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrStakingAmountLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrThreeInteractionAddrsNotEqual",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUndelegateTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUndelegateZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum ContractType",
          "name": "expectedContractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "ErrUnexpectedInternalCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnstakeTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnstakeZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateRangeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minSecs",
          "type": "uint256"
        }
      ],
      "name": "CooldownSecsToUndelegateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "MinValidatorStakingAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "PoolApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PoolSharesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "validator",
          "type": "address[]"
        }
      ],
      "name": "PoolsDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        }
      ],
      "name": "PoolsUpdateConflicted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "name": "PoolsUpdateFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "aRps",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "PoolsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountDeductFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debited",
          "type": "uint256"
        }
      ],
      "name": "UserRewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secs",
          "type": "uint256"
        }
      ],
      "name": "WaitingSecsToRevokeUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADDITION_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERIOD_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidateAdmin",
          "type": "address"
        },
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "applyValidatorCandidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "consensusAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "bulkUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "consensusAddrList",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownSecsToUndelegate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "consensusAddrList",
          "type": "address[]"
        },
        {
          "internalType": "TConsensus",
          "name": "consensusAddrDst",
          "type": "address"
        }
      ],
      "name": "delegateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newAdminAddr",
          "type": "address"
        }
      ],
      "name": "execChangeAdminAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "execDeductStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualDeductingAmount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolIds",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "execDeprecatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolIds",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "execRecordRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionRateRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "getManySelfStakings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "selfStakings_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolIds",
          "type": "address[]"
        }
      ],
      "name": "getManySelfStakingsById",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "selfStakings_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "consensusAddrs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "userList",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "stakingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolIds",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "userList",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingAmountsById",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "stakingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingTotals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "stakingAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolIds",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingTotalsById",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "stakingAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "getPoolAddressOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        }
      ],
      "name": "getPoolDetail",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolId",
          "type": "address"
        }
      ],
      "name": "getPoolDetailById",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "TConsensus[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        }
      ],
      "name": "getStakingTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__minValidatorStakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxCommissionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__cooldownSecsToUndelegate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__waitingSecsToRevoke",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__profileContract",
          "type": "address"
        }
      ],
      "name": "initializeV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isAdminOfActivePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minValidatorStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddrSrc",
          "type": "address"
        },
        {
          "internalType": "TConsensus",
          "name": "consensusAddrDst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        }
      ],
      "name": "requestEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        }
      ],
      "name": "requestRenounce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "effectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commissionRate",
          "type": "uint256"
        }
      ],
      "name": "requestUpdateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRate",
          "type": "uint256"
        }
      ],
      "name": "setCommissionRateRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cooldownSecs",
          "type": "uint256"
        }
      ],
      "name": "setCooldownSecsToUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setMinValidatorStakingAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "secs",
          "type": "uint256"
        }
      ],
      "name": "setWaitingSecsToRevoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "undelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "TConsensus",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waitingSecsToRevoke",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4dbcd5a87880cfa9bcde73081061691507d7eb80f75ebfea66b01ea511d681d3",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xEc7AC1cdda395094DCaC7711E6439c5E8caBcf2F",
    "transactionIndex": 0,
    "gasUsed": "3766841",
    "logsBloom": "0x00000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000",
    "blockHash": "0xc60915f42c6e07518d5426fca4092f502e11fe06f9762195998be23f602f81ff",
    "transactionHash": "0x4dbcd5a87880cfa9bcde73081061691507d7eb80f75ebfea66b01ea511d681d3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21941090,
        "transactionHash": "0x4dbcd5a87880cfa9bcde73081061691507d7eb80f75ebfea66b01ea511d681d3",
        "address": "0xEc7AC1cdda395094DCaC7711E6439c5E8caBcf2F",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xc60915f42c6e07518d5426fca4092f502e11fe06f9762195998be23f602f81ff"
      }
    ],
    "blockNumber": 21941090,
    "cumulativeGasUsed": "3766841",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "b469203c60a069be0ec276c20622629d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ErrAdminOfAnyActivePoolForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"}],\"name\":\"ErrCannotInitTransferRON\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCannotTransferRON\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrDuplicated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"ErrInactivePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientDelegatingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientStakingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidPoolShare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrOnlyPoolAdminAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrPoolAdminForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrStakingAmountLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrThreeInteractionAddrsNotEqual\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUndelegateTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUndelegateZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnstakeTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnstakeZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateRangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSecs\",\"type\":\"uint256\"}],\"name\":\"CooldownSecsToUndelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MinValidatorStakingAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"PoolApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PoolSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validator\",\"type\":\"address[]\"}],\"name\":\"PoolsDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"}],\"name\":\"PoolsUpdateConflicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdateFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"aRps\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountDeductFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debited\",\"type\":\"uint256\"}],\"name\":\"UserRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"WaitingSecsToRevokeUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADDITION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"applyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrList\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSecsToUndelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrList\",\"type\":\"address[]\"},{\"internalType\":\"TConsensus\",\"name\":\"consensusAddrDst\",\"type\":\"address\"}],\"name\":\"delegateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"execChangeAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"execDeductStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualDeductingAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"execDeprecatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"execRecordRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRateRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"getManySelfStakings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"selfStakings_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"}],\"name\":\"getManySelfStakingsById\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"selfStakings_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingAmountsById\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"getManyStakingTotals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"}],\"name\":\"getManyStakingTotalsById\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"getPoolAddressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getPoolDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"}],\"name\":\"getPoolDetailById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getStakingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__minValidatorStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxCommissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__cooldownSecsToUndelegate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__waitingSecsToRevoke\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__profileContract\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdminOfActivePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValidatorStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddrSrc\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensusAddrDst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"requestEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"requestRenounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"requestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRateRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldownSecs\",\"type\":\"uint256\"}],\"name\":\"setCooldownSecsToUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setMinValidatorStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setWaitingSecsToRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitingSecsToRevoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAdminOfAnyActivePoolForbidden(address)\":[{\"details\":\"Error of admin of any active pool cannot delegate.\"}],\"ErrCannotInitTransferRON(address,string)\":[{\"details\":\"Error of cannot transfer RON to specified target.\"}],\"ErrCannotTransferRON()\":[{\"details\":\"Error of cannot transfer RON.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrDuplicated(bytes4)\":[{\"details\":\"Error thrown when a duplicated element is detected in an array.\",\"params\":{\"msgSig\":\"The function signature that invoke the error.\"}}],\"ErrInactivePool(address,address)\":[{\"details\":\"Error of querying inactive pool.\"}],\"ErrInsufficientBalance(bytes4,uint256,uint256)\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInsufficientDelegatingAmount()\":[{\"details\":\"Error of undelegating insufficient amount.\"}],\"ErrInsufficientStakingAmount()\":[{\"details\":\"Error of insufficient staking amount for unstaking.\"}],\"ErrInvalidArrays()\":[{\"details\":\"Error of length of input arrays are not of the same.\"}],\"ErrInvalidCommissionRate()\":[{\"details\":\"Error of setting commission rate exceeds max allowed.\"}],\"ErrInvalidPoolShare()\":[{\"details\":\"Error of invalid pool share.\"}],\"ErrOnlyPoolAdminAllowed()\":[{\"details\":\"Error of no one is allowed to call but the pool's admin.\"}],\"ErrPoolAdminForbidden()\":[{\"details\":\"Error of pool admin is not allowed to call.\"}],\"ErrRecipientRevert(bytes4)\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrStakingAmountLeft()\":[{\"details\":\"Error of invalid staking amount left after deducted.\"}],\"ErrThreeInteractionAddrsNotEqual()\":[{\"details\":\"Error of three interaction addresses must be of the same in applying for validator candidate.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUndelegateTooEarly()\":[{\"details\":\"Error of undelegating too early.\"}],\"ErrUndelegateZeroAmount()\":[{\"details\":\"Error of undelegating zero amount.\"}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrUnstakeTooEarly()\":[{\"details\":\"Error of unstaking too early.\"}],\"ErrUnstakeZeroAmount()\":[{\"details\":\"Error of unstaking zero amount.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}],\"ErrZeroValue()\":[{\"details\":\"Error of receiving zero message value.\"}]},\"events\":{\"CommissionRateRangeUpdated(uint256,uint256)\":{\"details\":\"Emitted when the commission rate range is updated.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"CooldownSecsToUndelegateUpdated(uint256)\":{\"details\":\"Emitted when the minium number of seconds to undelegate is updated.\"},\"Delegated(address,address,uint256)\":{\"details\":\"Emitted when the delegator staked for a validator candidate.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MinValidatorStakingAmountUpdated(uint256)\":{\"details\":\"Emitted when the minimum staking amount for being a validator is updated.\"},\"PoolApproved(address,address)\":{\"details\":\"Emitted when the validator pool is approved.\"},\"PoolSharesUpdated(uint256,address,uint256)\":{\"details\":\"Emitted when the pool shares are updated\"},\"PoolsDeprecated(address[])\":{\"details\":\"Emitted when the validator pool is deprecated.\"},\"PoolsUpdateConflicted(uint256,address[])\":{\"details\":\"Emitted when the contract fails when updating the pools that already set\"},\"PoolsUpdateFailed(uint256,address[],uint256[])\":{\"details\":\"Emitted when the contract fails when updating the pools\"},\"PoolsUpdated(uint256,address[],uint256[],uint256[])\":{\"details\":\"Emitted when the pools are updated\"},\"RewardClaimed(address,address,uint256)\":{\"details\":\"Emitted when the user claimed their reward\"},\"Staked(address,uint256)\":{\"details\":\"Emitted when the pool admin staked for themself.\"},\"StakingAmountDeductFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\"},\"StakingAmountTransferFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the staking amount transfer failed.\"},\"Undelegated(address,address,uint256)\":{\"details\":\"Emitted when the delegator unstaked from a validator candidate.\"},\"Unstaked(address,uint256)\":{\"details\":\"Emitted when the pool admin unstaked the amount of RON from themself.\"},\"UserRewardUpdated(address,address,uint256)\":{\"details\":\"Emitted when the fields to calculate pending reward for the user is updated.\"},\"WaitingSecsToRevokeUpdated(uint256)\":{\"details\":\"Emitted when the number of seconds that a candidate must wait to be revoked.\"}},\"kind\":\"dev\",\"methods\":{\"applyValidatorCandidate(address,address,address,uint256,bytes)\":{\"details\":\"Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.\",\"params\":{\"candidateAdmin\":\"the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance.\"}},\"bulkUndelegate(address[],uint256[])\":{\"details\":\"Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`.\"},\"claimRewards(address[])\":{\"details\":\"Claims the reward of method caller. Emits the `RewardClaimed` event.\"},\"cooldownSecsToUndelegate()\":{\"details\":\"Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\"},\"delegate(address)\":{\"details\":\"Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event.\"},\"delegateRewards(address[],address)\":{\"details\":\"Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event.\"},\"execChangeAdminAddress(address,address)\":{\"details\":\"Requirements: - Only Profile contract can call this method.\"},\"execDeductStakingAmount(address,uint256)\":{\"details\":\"Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller must be validator contract. Emits the event `Unstaked`.\"},\"execDeprecatePools(address[],uint256)\":{\"details\":\"Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\"},\"execRecordRewards(address[],uint256[],uint256)\":{\"details\":\"Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller must be validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending.\"},\"getCommissionRateRange()\":{\"details\":\"Returns the commission rate range that the candidate can set.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getManySelfStakings(address[])\":{\"details\":\"Returns the self-staking amounts of the pools.\"},\"getManySelfStakingsById(address[])\":{\"details\":\"Returns the self-staking amounts of the pools.\"},\"getManyStakingAmounts(address[],address[])\":{\"details\":\"Returns the staking amounts of the users.\"},\"getManyStakingTotals(address[])\":{\"details\":\"Returns the total staking amounts of all users for the pools `_poolAddrs`.\"},\"getPoolAddressOf(address)\":{\"details\":\"Returns the consensus address corresponding to the pool admin.\"},\"getPoolDetail(address)\":{\"details\":\"Returns the staking pool details.\"},\"getReward(address,address)\":{\"details\":\"Returns the reward amount that user claimable.\"},\"getRewards(address,address[])\":{\"details\":\"Returns the claimable reward of the user `_user`.\"},\"getStakingAmount(address,address)\":{\"details\":\"Returns the staking amount of an user.\"},\"getStakingTotal(address)\":{\"details\":\"Returns the total staking amount of all users for a pool.\"},\"initialize(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"initializeV2()\":{\"details\":\"Initializes the contract storage V2.\"},\"initializeV3(address)\":{\"details\":\"Initializes the contract storage V3.\"},\"isAdminOfActivePool(address)\":{\"details\":\"Returns whether the `admin` is currently active.\"},\"minValidatorStakingAmount()\":{\"details\":\"Returns the minimum threshold for being a validator candidate.\"},\"redelegate(address,address,uint256)\":{\"details\":\"Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event.\"},\"requestEmergencyExit(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestRenounce(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`.\"},\"setCommissionRateRange(uint256,uint256)\":{\"details\":\"Sets the commission rate range that a candidate can set. Requirements: - The method caller is admin. Emits the `CommissionRateRangeUpdated` event.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setCooldownSecsToUndelegate(uint256)\":{\"details\":\"Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`.\"},\"setMinValidatorStakingAmount(uint256)\":{\"details\":\"Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event.\"},\"setWaitingSecsToRevoke(uint256)\":{\"details\":\"Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`.\"},\"stake(address)\":{\"details\":\"Self-delegates to the validator candidate `consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`.\"},\"undelegate(address,uint256)\":{\"details\":\"Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event.\"},\"unstake(address,uint256)\":{\"details\":\"Unstakes from the validator candidate `consensusAddr` for `amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`.\"},\"waitingSecsToRevoke()\":{\"details\":\"Returns the number of seconds that a candidate must wait for the renounce request gets affected.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/staking/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance(bytes4 msgSig, uint256 currentBalance, uint256 sendAmount);\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert(bytes4 msgSig);\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable recipient, uint256 amount) internal {\\n    if (!_sendRON(recipient, amount)) revert ErrRecipientRevert(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Send `amount` RON to the address `recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    if (address(this).balance < amount) revert ErrInsufficientBalance(msg.sig, address(this).balance, amount);\\n    return _unsafeSendRON(recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `amount` RON to the address `recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    (success, ) = recipient.call{ value: amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRONLimitGas(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRONLimitGas(\\n    address payable recipient,\\n    uint256 amount,\\n    uint256 gas\\n  ) internal returns (bool success) {\\n    (success, ) = recipient.call{ value: amount, gas: gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xdece837caa8da00fe031b8139ada009330b8bef149af12b535913c021ab94d0e\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/extensions/consumers/GlobalConfigConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract GlobalConfigConsumer {\\n  /// @dev The addition amount of gas sending along in external calls. Total gas stipend is added with default 2300 gas.\\n  uint256 public constant DEFAULT_ADDITION_GAS = 1200;\\n  /// @dev The length of a period in second.\\n  uint256 public constant PERIOD_DURATION = 1 days;\\n}\\n\",\"keccak256\":\"0x96d6b1ea4c8e126a8c2468683e7513d195f8e05456d85dd8f259ab049347b527\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Add a new profile.\\n   *\\n   * @dev Requirements:\\n   * - The profile must not be existent before.\\n   * - Only contract admin can call this method.\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external;\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(address admin, address id, address treasury, bytes calldata pubkey) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey) external;\\n}\\n\",\"keccak256\":\"0x14dfb3198bf21724f5315198e1b23564902821ef56730c7db49e3d1165a36d36\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    /**\\n     * @dev Address of the pool.\\n     * @custom non-volatile-storage Permanently set to the first consensus address of the candidate.\\n     */\\n    address pid;\\n\\n    /**\\n     * @dev The address of the pool admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with the admin in `Profile-CandidateProfile`.\\n     */\\n    address __shadowedPoolAdmin;\\n\\n    /// @dev Self-staking amount\\n    uint256 stakingAmount;\\n\\n    /// @dev Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n\\n    /// @dev Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n\\n    /// @dev Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(TConsensus consensusAddr, address poolAddr);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `admin` is currently active.\\n   */\\n  function isAdminOfActivePool(address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address admin) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool details.\\n   */\\n  function getPoolDetail(\\n    TConsensus consensusAddr\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  function getPoolDetailById(\\n    address poolId\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external;\\n}\\n\",\"keccak256\":\"0xadaec16c22c590a42070d5e41fcc83c9fa89a4134528dd2159b5946ecbc64253\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed poolId, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed validator, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] validator);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed poolId,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed poolId,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 minRange, uint256 maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata pools, uint256 period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `consensusAddr` for `amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x8880174d4be9ceeed98a1f1cda5e833ce2afe8ee8b0e5921088a796a9a9bc69d\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed poolId, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(TConsensus consensusAddrSrc, TConsensus consensusAddrDst, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrList\\n  ) external view returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(TConsensus[] calldata consensusAddrList) external returns (uint256 amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xe8a650a7348d45b2614ece66083f140801e8375bb8b733addf02209073991ef3\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolAddr, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolAddr, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolAddr, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolAddrs, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolAddrs, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolAddrs);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `_poolAddrs`.\\n   */\\n  function getManyStakingTotals(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  function getManyStakingTotalsById(\\n    address[] calldata poolIds\\n  ) external view returns (uint256[] memory stakingAmounts_);\\n}\\n\",\"keccak256\":\"0x69626097d76dde60ce9fc73c6f8823ad7e8a5b6ff23ec3f20b9e1499f700d1b8\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./IStakingCallback.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking, IStakingCallback {\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(address[] calldata poolIds, uint256[] calldata rewards, uint256 period) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address poolId, uint256 amount) external returns (uint256 actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xaa2491ed5276434d2a894ece749ad15835ff2791fa614d3cf3b58c0bdd418881\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddress(address poolAddr, address newAdminAddr) external;\\n}\\n\",\"keccak256\":\"0x64e1659e4fb15498be8956f696e72e4c7370cc7439ab5395c94f24e85b92e85b\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed consensusAddr, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n    /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xd797160208b17456231633415848fffa0a5ba7e9ab7f81b241d1bd89c74c2c83\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeAdminAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddress(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeTreasuryAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddress(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0x0f241310c7f284374c26792fe73230a3b2cabc709d04f28a7b366292821f96dc\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x22f546add63b1b6e62929bdd4052fa032af55ebf50981dc22d208fe53ad1b0a3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x98caa14d1e6dc6a9ab6d09c864a32790014890f9e2ad7951b77ff5658e0f7c8b\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory _validatorList);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x45ba68ae461f9c8ecde0fb3c7db78d6d9f44a4a6cc0f03e7b8edad0cced55643\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/ronin/staking/BaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../interfaces/staking/IBaseStaking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"./RewardCalculation.sol\\\";\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\nabstract contract BaseStaking is\\n  RONTransferHelper,\\n  ReentrancyGuard,\\n  RewardCalculation,\\n  HasContracts,\\n  IBaseStaking,\\n  HasValidatorDeprecated\\n{\\n  /// @dev Mapping from pool address (i.e. validator id) => staking pool detail\\n  mapping(address => PoolDetail) internal _poolDetail;\\n\\n  /// @dev The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n  uint256 internal _cooldownSecsToUndelegate;\\n  /// @dev The number of seconds that a candidate must wait to be revoked and take the self-staking amount back.\\n  uint256 internal _waitingSecsToRevoke;\\n\\n  /// @dev Mapping from \\\"admin address of an active pool\\\" => \\\"pool id\\\".\\n  mapping(address => address) internal _adminOfActivePoolMapping;\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  modifier noEmptyValue() {\\n    _requireValue();\\n    _;\\n  }\\n\\n  modifier anyExceptPoolAdmin(PoolDetail storage _pool, address delegator) {\\n    _anyExceptPoolAdmin(_pool, delegator);\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin(PoolDetail storage _pool, address requester) {\\n    _requirePoolAdmin(_pool, requester);\\n    _;\\n  }\\n\\n  modifier poolOfConsensusIsActive(TConsensus consensusAddr) {\\n    _poolOfConsensusIsActive(consensusAddr);\\n    _;\\n  }\\n\\n  function _requireValue() private view {\\n    if (msg.value == 0) revert ErrZeroValue();\\n  }\\n\\n  function _requirePoolAdmin(PoolDetail storage _pool, address requester) private view {\\n    if (_pool.__shadowedPoolAdmin != requester) revert ErrOnlyPoolAdminAllowed();\\n  }\\n\\n  function _anyExceptPoolAdmin(PoolDetail storage _pool, address delegator) private view {\\n    if (_pool.__shadowedPoolAdmin == delegator) revert ErrPoolAdminForbidden();\\n  }\\n\\n  function _poolOfConsensusIsActive(TConsensus consensusAddr) private view {\\n    if (!IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isValidatorCandidate(consensusAddr))\\n      revert ErrInactivePool(consensusAddr, __css2cid(consensusAddr));\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function isAdminOfActivePool(address admin) public view override returns (bool) {\\n    return _adminOfActivePoolMapping[admin] != address(0);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getPoolAddressOf(address admin) external view override returns (address) {\\n    return _adminOfActivePoolMapping[admin];\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getPoolDetail(\\n    TConsensus consensusAddr\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal) {\\n    address poolId = __css2cid(consensusAddr);\\n    return _getPoolDetailById(poolId);\\n  }\\n\\n  function getPoolDetailById(\\n    address poolId\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal) {\\n    return _getPoolDetailById(poolId);\\n  }\\n\\n  function _getPoolDetailById(\\n    address poolId\\n  ) internal view returns (address admin, uint256 stakingAmount, uint256 stakingTotal) {\\n    PoolDetail storage _pool = _poolDetail[poolId];\\n    return (_pool.__shadowedPoolAdmin, _pool.stakingAmount, _pool.stakingTotal);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getManySelfStakings(\\n    TConsensus[] calldata consensusAddrs\\n  ) external view returns (uint256[] memory selfStakings_) {\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    return _getManySelfStakingsById(poolIds);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory selfStakings_) {\\n    return _getManySelfStakingsById(poolIds);\\n  }\\n\\n  /**\\n   * @dev Query many self staking amount by list `poolIds`.\\n   */\\n  function _getManySelfStakingsById(address[] memory poolIds) internal view returns (uint256[] memory selfStakings_) {\\n    selfStakings_ = new uint256[](poolIds.length);\\n    for (uint i = 0; i < poolIds.length; ) {\\n      selfStakings_[i] = _poolDetail[poolIds[i]].stakingAmount;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view override returns (uint256) {\\n    address poolId = __css2cid(consensusAddr);\\n    return _getStakingTotal(poolId);\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingTotals(\\n    TConsensus[] calldata consensusAddrs\\n  ) external view override returns (uint256[] memory stakingAmounts_) {\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    return _getManyStakingTotalsById(poolIds);\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingTotalsById(\\n    address[] calldata poolIds\\n  ) external view override returns (uint256[] memory stakingAmounts_) {\\n    return _getManyStakingTotalsById(poolIds);\\n  }\\n\\n  function _getManyStakingTotalsById(\\n    address[] memory poolIds\\n  ) internal view returns (uint256[] memory stakingAmounts_) {\\n    stakingAmounts_ = new uint256[](poolIds.length);\\n    for (uint i = 0; i < poolIds.length; ) {\\n      stakingAmounts_[i] = _getStakingTotal(poolIds[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function _getStakingTotal(address poolId) internal view override returns (uint256) {\\n    return _poolDetail[poolId].stakingTotal;\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view override returns (uint256) {\\n    address poolId = __css2cid(consensusAddr);\\n    return _getStakingAmount(poolId, user);\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view override returns (uint256[] memory stakingAmounts) {\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    return _getManyStakingAmountsById(poolIds, userList);\\n  }\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory stakingAmounts) {\\n    return _getManyStakingAmountsById(poolIds, userList);\\n  }\\n\\n  function _getManyStakingAmountsById(\\n    address[] memory poolIds,\\n    address[] memory userList\\n  ) internal view returns (uint256[] memory stakingAmounts) {\\n    if (poolIds.length != userList.length) revert ErrInvalidArrays();\\n    stakingAmounts = new uint256[](poolIds.length);\\n    for (uint i = 0; i < stakingAmounts.length; ) {\\n      stakingAmounts[i] = _getStakingAmount(poolIds[i], userList[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function _getStakingAmount(address poolId, address user) internal view override returns (uint256) {\\n    return _poolDetail[poolId].delegatingAmount[user];\\n  }\\n\\n  function __css2cid(TConsensus consensusAddr) internal view returns (address) {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id(consensusAddr);\\n  }\\n\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view returns (address[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyConsensus2Id(consensusAddrs);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256) {\\n    return _cooldownSecsToUndelegate;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256) {\\n    return _waitingSecsToRevoke;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external override onlyAdmin {\\n    _setCooldownSecsToUndelegate(cooldownSecs);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external override onlyAdmin {\\n    _setWaitingSecsToRevoke(secs);\\n  }\\n\\n  /**\\n   * @dev Sets the minium number of seconds to undelegate.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function _setCooldownSecsToUndelegate(uint256 cooldownSecs) internal {\\n    _cooldownSecsToUndelegate = cooldownSecs;\\n    emit CooldownSecsToUndelegateUpdated(cooldownSecs);\\n  }\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function _setWaitingSecsToRevoke(uint256 secs) internal {\\n    _waitingSecsToRevoke = secs;\\n    emit WaitingSecsToRevokeUpdated(secs);\\n  }\\n\\n  /**\\n   * @dev Changes the delegate amount.\\n   */\\n  function _changeDelegatingAmount(\\n    PoolDetail storage _pool,\\n    address delegator,\\n    uint256 newDelegatingAmount,\\n    uint256 newStakingTotal\\n  ) internal {\\n    _syncUserReward(_pool.pid, delegator, newDelegatingAmount);\\n    _pool.stakingTotal = newStakingTotal;\\n    _pool.delegatingAmount[delegator] = newDelegatingAmount;\\n  }\\n}\\n\",\"keccak256\":\"0xf5bb01ddb183a1ebd63bc91c8f87ee6c6ccf2ed9123fe2b26c9f3bbb704aef39\",\"license\":\"MIT\"},\"contracts/ronin/staking/CandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../libraries/AddressArrayUtils.sol\\\";\\nimport \\\"../../interfaces/staking/ICandidateStaking.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract CandidateStaking is BaseStaking, ICandidateStaking, GlobalConfigConsumer, PercentageConsumer {\\n  /// @dev The minimum threshold for being a validator candidate.\\n  uint256 internal _minValidatorStakingAmount;\\n\\n  /// @dev The max commission rate that the validator can set (in range of [0;100_00] means [0-100%])\\n  uint256 internal _maxCommissionRate;\\n  /// @dev The min commission rate that the validator can set (in range of [0;100_00] means [0-100%])\\n  uint256 internal _minCommissionRate;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function minValidatorStakingAmount() public view override returns (uint256) {\\n    return _minValidatorStakingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function getCommissionRateRange() external view override returns (uint256, uint256) {\\n    return (_minCommissionRate, _maxCommissionRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setMinValidatorStakingAmount(uint256 threshold) external override onlyAdmin {\\n    _setMinValidatorStakingAmount(threshold);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external override onlyAdmin {\\n    _setCommissionRateRange(minRate, maxRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey\\n  ) external payable override nonReentrant {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    if (commissionRate > _maxCommissionRate || commissionRate < _minCommissionRate) revert ErrInvalidCommissionRate();\\n\\n    uint256 amount = msg.value;\\n    address payable poolAdmin = payable(msg.sender);\\n    address poolId = TConsensus.unwrap(consensusAddr);\\n\\n    _applyValidatorCandidate({\\n      poolAdmin: poolAdmin,\\n      candidateAdmin: candidateAdmin,\\n      poolId: poolId,\\n      treasuryAddr: treasuryAddr,\\n      pubkey: pubkey,\\n      commissionRate: commissionRate,\\n      amount: amount\\n    });\\n\\n    PoolDetail storage _pool = _poolDetail[poolId];\\n    _pool.__shadowedPoolAdmin = poolAdmin;\\n    _pool.pid = poolId;\\n    _adminOfActivePoolMapping[poolAdmin] = poolId;\\n\\n    _stake(_poolDetail[poolId], poolAdmin, amount);\\n    emit PoolApproved(poolId, poolAdmin);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  )\\n    external\\n    override\\n    poolOfConsensusIsActive(consensusAddr)\\n    onlyPoolAdmin(_poolDetail[__css2cid(consensusAddr)], msg.sender)\\n  {\\n    if (commissionRate > _maxCommissionRate || commissionRate < _minCommissionRate) revert ErrInvalidCommissionRate();\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execRequestUpdateCommissionRate(\\n      __css2cid(consensusAddr),\\n      effectiveDaysOnwards,\\n      commissionRate\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function execDeprecatePools(\\n    address[] calldata poolIds,\\n    uint256 newPeriod\\n  ) external override onlyContract(ContractType.VALIDATOR) {\\n    if (poolIds.length == 0) {\\n      return;\\n    }\\n\\n    for (uint i = 0; i < poolIds.length; ) {\\n      address poolId = poolIds[i];\\n      PoolDetail storage _pool = _poolDetail[poolId];\\n      // Deactivate the pool admin in the active mapping.\\n      delete _adminOfActivePoolMapping[_pool.__shadowedPoolAdmin];\\n\\n      // Deduct and transfer the self staking amount to the pool admin.\\n      uint256 deductingAmount = _pool.stakingAmount;\\n      if (deductingAmount > 0) {\\n        _deductStakingAmount(_pool, deductingAmount);\\n        if (!_unsafeSendRONLimitGas(payable(_pool.__shadowedPoolAdmin), deductingAmount, DEFAULT_ADDITION_GAS)) {\\n          emit StakingAmountTransferFailed(\\n            _pool.pid,\\n            _pool.__shadowedPoolAdmin,\\n            deductingAmount,\\n            address(this).balance\\n          );\\n        }\\n      }\\n\\n      // Settle the unclaimed reward and transfer to the pool admin.\\n      uint256 lastRewardAmount = _claimReward(poolId, _pool.__shadowedPoolAdmin, newPeriod);\\n      if (lastRewardAmount > 0) {\\n        _unsafeSendRONLimitGas(payable(_pool.__shadowedPoolAdmin), lastRewardAmount, DEFAULT_ADDITION_GAS);\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit PoolsDeprecated(poolIds);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function stake(\\n    TConsensus consensusAddr\\n  ) external payable override noEmptyValue poolOfConsensusIsActive(consensusAddr) {\\n    address poolId = __css2cid(consensusAddr);\\n    _stake(_poolDetail[poolId], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function unstake(\\n    TConsensus consensusAddr,\\n    uint256 amount\\n  ) external override nonReentrant poolOfConsensusIsActive(consensusAddr) {\\n    if (amount == 0) revert ErrUnstakeZeroAmount();\\n    address requester = msg.sender;\\n    address poolId = __css2cid(consensusAddr);\\n    PoolDetail storage _pool = _poolDetail[poolId];\\n    uint256 remainAmount = _pool.stakingAmount - amount;\\n    if (remainAmount < _minValidatorStakingAmount) revert ErrStakingAmountLeft();\\n\\n    _unstake(_pool, requester, amount);\\n    if (!_unsafeSendRONLimitGas(payable(requester), amount, DEFAULT_ADDITION_GAS)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestRenounce(\\n    TConsensus consensusAddr\\n  )\\n    external\\n    override\\n    poolOfConsensusIsActive(consensusAddr)\\n    onlyPoolAdmin(_poolDetail[__css2cid(consensusAddr)], msg.sender)\\n  {\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execRequestRenounceCandidate(\\n      __css2cid(consensusAddr),\\n      _waitingSecsToRevoke\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestEmergencyExit(\\n    TConsensus consensusAddr\\n  )\\n    external\\n    override\\n    poolOfConsensusIsActive(consensusAddr)\\n    onlyPoolAdmin(_poolDetail[__css2cid(consensusAddr)], msg.sender)\\n  {\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execRequestEmergencyExit(\\n      __css2cid(consensusAddr),\\n      _waitingSecsToRevoke\\n    );\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-applyValidatorCandidate`\\n   */\\n  function _applyValidatorCandidate(\\n    address payable poolAdmin,\\n    address candidateAdmin,\\n    address poolId,\\n    address payable treasuryAddr,\\n    bytes memory pubkey,\\n    uint256 commissionRate,\\n    uint256 amount\\n  ) internal {\\n    if (!_unsafeSendRONLimitGas(poolAdmin, 0, DEFAULT_ADDITION_GAS)) {\\n      revert ErrCannotInitTransferRON(poolAdmin, \\\"pool admin\\\");\\n    }\\n    if (!_unsafeSendRONLimitGas(treasuryAddr, 0, DEFAULT_ADDITION_GAS)) {\\n      revert ErrCannotInitTransferRON(treasuryAddr, \\\"treasury\\\");\\n    }\\n    if (amount < _minValidatorStakingAmount) revert ErrInsufficientStakingAmount();\\n    if (poolAdmin != candidateAdmin || candidateAdmin != treasuryAddr) revert ErrThreeInteractionAddrsNotEqual();\\n\\n    {\\n      address[] memory diffAddrs = new address[](3);\\n      diffAddrs[0] = poolAdmin;\\n      diffAddrs[1] = poolId;\\n      if (AddressArrayUtils.hasDuplicate(diffAddrs)) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n    }\\n\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execApplyValidatorCandidate({\\n      candidateAdmin: candidateAdmin,\\n      cid: poolId,\\n      treasuryAddr: treasuryAddr,\\n      commissionRate: commissionRate\\n    });\\n\\n    IProfile profileContract = IProfile(getContract(ContractType.PROFILE));\\n    profileContract.execApplyValidatorCandidate(candidateAdmin, poolId, treasuryAddr, pubkey);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-stake`\\n   */\\n  function _stake(\\n    PoolDetail storage _pool,\\n    address requester,\\n    uint256 amount\\n  ) internal onlyPoolAdmin(_pool, requester) {\\n    _pool.stakingAmount += amount;\\n    _changeDelegatingAmount(_pool, requester, _pool.stakingAmount, _pool.stakingTotal + amount);\\n    _pool.lastDelegatingTimestamp[requester] = block.timestamp;\\n    emit Staked(_pool.pid, amount);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-unstake`\\n   */\\n  function _unstake(\\n    PoolDetail storage _pool,\\n    address requester,\\n    uint256 amount\\n  ) internal onlyPoolAdmin(_pool, requester) {\\n    if (amount > _pool.stakingAmount) revert ErrInsufficientStakingAmount();\\n    if (_pool.lastDelegatingTimestamp[requester] + _cooldownSecsToUndelegate > block.timestamp) {\\n      revert ErrUnstakeTooEarly();\\n    }\\n\\n    _pool.stakingAmount -= amount;\\n    _changeDelegatingAmount(_pool, requester, _pool.stakingAmount, _pool.stakingTotal - amount);\\n    emit Unstaked(_pool.pid, amount);\\n  }\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   * @return The actual deducted amount\\n   */\\n  function _deductStakingAmount(PoolDetail storage _pool, uint256 amount) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function _setMinValidatorStakingAmount(uint256 threshold) internal {\\n    _minValidatorStakingAmount = threshold;\\n    emit MinValidatorStakingAmountUpdated(threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the max commission rate that a candidate can set.\\n   *\\n   * Emits the `MaxCommissionRateUpdated` event.\\n   *\\n   */\\n  function _setCommissionRateRange(uint256 minRate, uint256 maxRate) internal {\\n    if (maxRate > _MAX_PERCENTAGE || minRate > maxRate) revert ErrInvalidCommissionRate();\\n    _maxCommissionRate = maxRate;\\n    _minCommissionRate = minRate;\\n    emit CommissionRateRangeUpdated(minRate, maxRate);\\n  }\\n}\\n\",\"keccak256\":\"0x87c6fe61162e737eced9b604d9f90ac29dea407b8eaf6b1dbc3f7f16d1d7f83e\",\"license\":\"MIT\"},\"contracts/ronin/staking/DelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IDelegatorStaking.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract DelegatorStaking is BaseStaking, IDelegatorStaking {\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegate(TConsensus consensusAddr) external payable noEmptyValue poolOfConsensusIsActive(consensusAddr) {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    _delegate(_poolDetail[__css2cid(consensusAddr)], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external nonReentrant {\\n    address payable delegator = payable(msg.sender);\\n    _undelegate(consensusAddr, _poolDetail[__css2cid(consensusAddr)], delegator, amount);\\n    if (!_sendRON(delegator, amount)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external nonReentrant {\\n    if (consensusAddrs.length == 0 || consensusAddrs.length != amounts.length) revert ErrInvalidArrays();\\n\\n    address payable delegator = payable(msg.sender);\\n    uint256 total;\\n\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    for (uint i = 0; i < poolIds.length; ) {\\n      total += amounts[i];\\n      _undelegate(consensusAddrs[i], _poolDetail[poolIds[i]], delegator, amounts[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    if (!_sendRON(delegator, total)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function redelegate(\\n    TConsensus consensusAddrSrc,\\n    TConsensus consensusAddrDst,\\n    uint256 amount\\n  ) external nonReentrant poolOfConsensusIsActive(consensusAddrDst) {\\n    address delegator = msg.sender;\\n    _undelegate(consensusAddrSrc, _poolDetail[__css2cid(consensusAddrSrc)], delegator, amount);\\n    _delegate(_poolDetail[__css2cid(consensusAddrDst)], delegator, amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function claimRewards(\\n    TConsensus[] calldata consensusAddrList\\n  ) external override nonReentrant returns (uint256 amount) {\\n    amount = _claimRewards(msg.sender, __css2cidBatch(consensusAddrList));\\n    _transferRON(payable(msg.sender), amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external override nonReentrant poolOfConsensusIsActive(consensusAddrDst) returns (uint256 amount) {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    address[] memory poolIds = __css2cidBatch(consensusAddrList);\\n    address poolIdDst = __css2cid(consensusAddrDst);\\n    return _delegateRewards(msg.sender, poolIds, poolIdDst);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrs\\n  ) external view returns (uint256[] memory rewards_) {\\n    uint256 period = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n    rewards_ = new uint256[](consensusAddrs.length);\\n\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    for (uint256 i = 0; i < consensusAddrs.length; ) {\\n      address poolId = poolIds[i];\\n      rewards_[i] = _getReward(poolId, user, period, _getStakingAmount(poolId, user));\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   * Note: This function does not verify the `msg.value` with the amount.\\n   *\\n   */\\n  function _delegate(\\n    PoolDetail storage _pool,\\n    address delegator,\\n    uint256 amount\\n  ) internal anyExceptPoolAdmin(_pool, delegator) {\\n    _changeDelegatingAmount(_pool, delegator, _pool.delegatingAmount[delegator] + amount, _pool.stakingTotal + amount);\\n    _pool.lastDelegatingTimestamp[delegator] = block.timestamp;\\n    emit Delegated(delegator, _pool.pid, amount);\\n  }\\n\\n  /**\\n   * @dev Undelegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   * - The amount is larger than 0.\\n   * - The delegating amount is larger than or equal to the undelegating amount.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   * Note: Consider transferring back the amount of RON after calling this function.\\n   *\\n   */\\n  function _undelegate(\\n    TConsensus consensusAddr,\\n    PoolDetail storage _pool,\\n    address delegator,\\n    uint256 amount\\n  ) private anyExceptPoolAdmin(_pool, delegator) {\\n    if (amount == 0) revert ErrUndelegateZeroAmount();\\n    if (_pool.delegatingAmount[delegator] < amount) revert ErrInsufficientDelegatingAmount();\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    if (\\n      validatorContract.isValidatorCandidate(consensusAddr) &&\\n      validatorContract.getCandidateInfo(consensusAddr).revokingTimestamp == 0 && // if candidate is not on renunciation\\n      _pool.lastDelegatingTimestamp[delegator] + _cooldownSecsToUndelegate >= block.timestamp // delegator is still in cooldown\\n    ) revert ErrUndelegateTooEarly();\\n\\n    _changeDelegatingAmount(_pool, delegator, _pool.delegatingAmount[delegator] - amount, _pool.stakingTotal - amount);\\n    emit Undelegated(delegator, _pool.pid, amount);\\n  }\\n\\n  /**\\n   * @dev Claims rewards from the pools `_poolAddrList`.\\n   * Note: This function does not transfer reward to user.\\n   */\\n  function _claimRewards(address user, address[] memory poolIds) internal returns (uint256 amount) {\\n    uint256 period = _currentPeriod();\\n    for (uint256 i = 0; i < poolIds.length; ) {\\n      amount += _claimReward(poolIds[i], user, period);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   */\\n  function _delegateRewards(\\n    address user,\\n    address[] memory poolIds,\\n    address poolIdDst\\n  ) internal returns (uint256 amount) {\\n    amount = _claimRewards(user, poolIds);\\n    _delegate(_poolDetail[poolIdDst], user, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xa0281f4fea9f20747dfffdaca61853e663206b8ac83b67576e8cd405d4a117a4\",\"license\":\"MIT\"},\"contracts/ronin/staking/RewardCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IRewardPool.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\n/**\\n * @title RewardCalculation contract\\n * @dev This contract mainly contains the methods to calculate reward for staking contract.\\n */\\nabstract contract RewardCalculation is IRewardPool {\\n  /// @dev Mapping from pool address => period number => accumulated rewards per share (one unit staking)\\n  mapping(address => mapping(uint256 => PeriodWrapper)) private _accumulatedRps;\\n  /// @dev Mapping from the pool address => user address => the reward info of the user\\n  mapping(address => mapping(address => UserRewardFields)) private _userReward;\\n  /// @dev Mapping from the pool address => reward pool fields\\n  mapping(address => PoolFields) private _stakingPool;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256) {\\n    address poolId = TConsensus.unwrap(consensusAddr);\\n    return _getReward(poolId, user, _currentPeriod(), _getStakingAmount(poolId, user));\\n  }\\n\\n  /**\\n   * @dev See {IRewardPool-getStakingAmount}\\n   */\\n  function _getStakingAmount(address poolId, address user) internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev See {IRewardPool-getStakingTotal}\\n   */\\n  function _getStakingTotal(address poolId) internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function _getReward(\\n    address poolId,\\n    address user,\\n    uint256 latestPeriod,\\n    uint256 latestStakingAmount\\n  ) internal view returns (uint256) {\\n    UserRewardFields storage _reward = _userReward[poolId][user];\\n\\n    if (_reward.lastPeriod == latestPeriod) {\\n      return _reward.debited;\\n    }\\n\\n    uint256 aRps;\\n    uint256 lastPeriodReward;\\n    PoolFields storage _pool = _stakingPool[poolId];\\n    PeriodWrapper storage _wrappedArps = _accumulatedRps[poolId][_reward.lastPeriod];\\n\\n    if (_wrappedArps.lastPeriod > 0) {\\n      // Calculates the last period reward if the aRps at the period is set\\n      aRps = _wrappedArps.inner;\\n      lastPeriodReward = _reward.lowestAmount * (aRps - _reward.aRps);\\n    } else {\\n      // Fallbacks to the previous aRps in case the aRps is not set\\n      aRps = _reward.aRps;\\n    }\\n\\n    uint256 newPeriodsReward = latestStakingAmount * (_pool.aRps - aRps);\\n    return _reward.debited + (lastPeriodReward + newPeriodsReward) / 1e18;\\n  }\\n\\n  /**\\n   * @dev Syncs the user reward.\\n   *\\n   * Emits the event `UserRewardUpdated` once the debit amount is updated.\\n   * Emits the event `PoolSharesUpdated` once the pool share is updated.\\n   *\\n   * Note: The method should be called whenever the user's staking amount changes.\\n   *\\n   */\\n  function _syncUserReward(address poolId, address user, uint256 newStakingAmount) internal {\\n    uint256 period = _currentPeriod();\\n    PoolFields storage _pool = _stakingPool[poolId];\\n    uint256 lastShares = _pool.shares.inner;\\n\\n    // Updates the pool shares if it is outdated\\n    if (_pool.shares.lastPeriod < period) {\\n      _pool.shares = PeriodWrapper(_getStakingTotal(poolId), period);\\n    }\\n\\n    UserRewardFields storage _reward = _userReward[poolId][user];\\n    uint256 currentStakingAmount = _getStakingAmount(poolId, user);\\n    uint256 debited = _getReward(poolId, user, period, currentStakingAmount);\\n\\n    if (_reward.debited != debited) {\\n      _reward.debited = debited;\\n      emit UserRewardUpdated(poolId, user, debited);\\n    }\\n\\n    _syncMinStakingAmount(_pool, _reward, period, newStakingAmount, currentStakingAmount);\\n    _reward.aRps = _pool.aRps;\\n    _reward.lastPeriod = period;\\n\\n    if (_pool.shares.inner != lastShares) {\\n      emit PoolSharesUpdated(period, poolId, _pool.shares.inner);\\n    }\\n  }\\n\\n  /**\\n   * @dev Syncs the minimum staking amount of an user in the current period.\\n   */\\n  function _syncMinStakingAmount(\\n    PoolFields storage _pool,\\n    UserRewardFields storage _reward,\\n    uint256 latestPeriod,\\n    uint256 newStakingAmount,\\n    uint256 currentStakingAmount\\n  ) internal {\\n    if (_reward.lastPeriod < latestPeriod) {\\n      _reward.lowestAmount = currentStakingAmount;\\n    }\\n\\n    uint256 lowestAmount = Math.min(_reward.lowestAmount, newStakingAmount);\\n    uint256 diffAmount = _reward.lowestAmount - lowestAmount;\\n    if (diffAmount > 0) {\\n      _reward.lowestAmount = lowestAmount;\\n      if (_pool.shares.inner < diffAmount) revert ErrInvalidPoolShare();\\n      _pool.shares.inner -= diffAmount;\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the settled reward for a specific user.\\n   *\\n   * @param lastPeriod Must be in two possible value: `_currentPeriod` in normal calculation, or\\n   * `_currentPeriod + 1` in case of calculating the reward for revoked validators.\\n   *\\n   * Emits the `RewardClaimed` event and the `UserRewardUpdated` event.\\n   *\\n   * Note: This method should be called before transferring rewards for the user.\\n   *\\n   */\\n  function _claimReward(address poolId, address user, uint256 lastPeriod) internal returns (uint256 amount) {\\n    uint256 currentStakingAmount = _getStakingAmount(poolId, user);\\n    amount = _getReward(poolId, user, lastPeriod, currentStakingAmount);\\n    emit RewardClaimed(poolId, user, amount);\\n\\n    UserRewardFields storage _reward = _userReward[poolId][user];\\n    _reward.debited = 0;\\n    _syncMinStakingAmount(_stakingPool[poolId], _reward, lastPeriod, currentStakingAmount, currentStakingAmount);\\n    _reward.lastPeriod = lastPeriod;\\n    _reward.aRps = _stakingPool[poolId].aRps;\\n    emit UserRewardUpdated(poolId, user, 0);\\n  }\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `poolIds`.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolUpdateConflicted` when the pool is already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function _recordRewards(address[] memory poolIds, uint256[] calldata rewards, uint256 period) internal {\\n    if (poolIds.length != rewards.length) {\\n      emit PoolsUpdateFailed(period, poolIds, rewards);\\n      return;\\n    }\\n\\n    uint256 rps;\\n    uint256 count;\\n    address poolId;\\n    uint256 stakingTotal;\\n    uint256[] memory aRps = new uint256[](poolIds.length);\\n    uint256[] memory shares = new uint256[](poolIds.length);\\n    address[] memory conflicted = new address[](poolIds.length);\\n\\n    for (uint i = 0; i < poolIds.length; i++) {\\n      poolId = poolIds[i];\\n      PoolFields storage _pool = _stakingPool[poolId];\\n      stakingTotal = _getStakingTotal(poolId);\\n\\n      if (_accumulatedRps[poolId][period].lastPeriod == period) {\\n        unchecked {\\n          conflicted[count++] = poolId;\\n        }\\n        continue;\\n      }\\n\\n      // Updates the pool shares if it is outdated\\n      if (_pool.shares.lastPeriod < period) {\\n        _pool.shares = PeriodWrapper(stakingTotal, period);\\n      }\\n\\n      // The rps is 0 if no one stakes for the pool\\n      rps = _pool.shares.inner == 0 ? 0 : (rewards[i] * 1e18) / _pool.shares.inner;\\n      aRps[i - count] = _pool.aRps += rps;\\n      _accumulatedRps[poolId][period] = PeriodWrapper(_pool.aRps, period);\\n      _pool.shares.inner = stakingTotal;\\n      shares[i - count] = _pool.shares.inner;\\n      poolIds[i - count] = poolId;\\n    }\\n\\n    if (count > 0) {\\n      assembly {\\n        mstore(conflicted, count)\\n        mstore(poolIds, sub(mload(poolIds), count))\\n      }\\n      emit PoolsUpdateConflicted(period, conflicted);\\n    }\\n\\n    if (poolIds.length > 0) {\\n      emit PoolsUpdated(period, poolIds, aRps, shares);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current period.\\n   */\\n  function _currentPeriod() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xfc401852211d7546d72981f8367d716aa154bf048fbeedeb7582643eb7b39ed6\",\"license\":\"MIT\"},\"contracts/ronin/staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./StakingCallback.sol\\\";\\n\\ncontract Staking is IStaking, StakingCallback, Initializable {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  receive() external payable onlyContract(ContractType.VALIDATOR) {}\\n\\n  fallback() external payable onlyContract(ContractType.VALIDATOR) {}\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    uint256 __minValidatorStakingAmount,\\n    uint256 __maxCommissionRate,\\n    uint256 __cooldownSecsToUndelegate,\\n    uint256 __waitingSecsToRevoke\\n  ) external initializer {\\n    _setContract(ContractType.VALIDATOR, __validatorContract);\\n    _setMinValidatorStakingAmount(__minValidatorStakingAmount);\\n    _setCommissionRateRange(0, __maxCommissionRate);\\n    _setCooldownSecsToUndelegate(__cooldownSecsToUndelegate);\\n    _setWaitingSecsToRevoke(__waitingSecsToRevoke);\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage V2.\\n   */\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n    delete ______deprecatedValidator;\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage V3.\\n   */\\n  function initializeV3(address __profileContract) external reinitializer(3) {\\n    _setContract(ContractType.PROFILE, __profileContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function execRecordRewards(\\n    address[] calldata poolIds,\\n    uint256[] calldata rewards,\\n    uint256 period\\n  ) external payable override onlyContract(ContractType.VALIDATOR) {\\n    _recordRewards(poolIds, rewards, period);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function execDeductStakingAmount(\\n    address poolId,\\n    uint256 amount\\n  ) external override onlyContract(ContractType.VALIDATOR) returns (uint256 actualDeductingAmount_) {\\n    actualDeductingAmount_ = _deductStakingAmount(_poolDetail[poolId], amount);\\n    address payable validatorContractAddr = payable(msg.sender);\\n    if (!_unsafeSendRON(validatorContractAddr, actualDeductingAmount_)) {\\n      emit StakingAmountDeductFailed(poolId, validatorContractAddr, actualDeductingAmount_, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc RewardCalculation\\n   */\\n  function _currentPeriod() internal view virtual override returns (uint256) {\\n    return IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n  }\\n\\n  /**\\n   * @inheritdoc CandidateStaking\\n   */\\n  function _deductStakingAmount(\\n    PoolDetail storage _pool,\\n    uint256 amount\\n  ) internal override returns (uint256 actualDeductingAmount_) {\\n    actualDeductingAmount_ = Math.min(_pool.stakingAmount, amount);\\n\\n    _pool.stakingAmount -= actualDeductingAmount_;\\n    _changeDelegatingAmount(\\n      _pool,\\n      _pool.__shadowedPoolAdmin,\\n      _pool.stakingAmount,\\n      Math.subNonNegative(_pool.stakingTotal, actualDeductingAmount_)\\n    );\\n    emit Unstaked(_pool.pid, actualDeductingAmount_);\\n  }\\n}\\n\",\"keccak256\":\"0x8879826b414931b8c783c16cea4bddabc8c28bb18cfe22b3e03a107a7175a5e7\",\"license\":\"MIT\"},\"contracts/ronin/staking/StakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"../../interfaces/staking/IStakingCallback.sol\\\";\\nimport \\\"./CandidateStaking.sol\\\";\\nimport \\\"./DelegatorStaking.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract StakingCallback is CandidateStaking, DelegatorStaking, IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddress(\\n    address poolAddr,\\n    address newAdminAddr\\n  ) external override onlyContract(ContractType.PROFILE) {\\n    PoolDetail storage _pool = _poolDetail[poolAddr];\\n\\n    _adminOfActivePoolMapping[_pool.__shadowedPoolAdmin] = address(0);\\n    _pool.__shadowedPoolAdmin = newAdminAddr;\\n    _adminOfActivePoolMapping[newAdminAddr] = poolAddr;\\n  }\\n}\\n\",\"keccak256\":\"0xee1b68fbdfe999a377a59356fe28251ca4686b1efcb60e8f4c5b0165e5f212a1\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060016000556200002162000027565b620000e9565b60d154610100900460ff1615620000945760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60d15460ff9081161015620000e75760d1805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61425380620000f96000396000f3fe6080604052600436106102765760003560e01c80636b0916951161014f578063aa15a6fd116100c1578063de981f1b1161007a578063de981f1b146107a9578063e22d1c9d146107c9578063ea80d67d146107e9578063ef9aa66514610809578063f92ad21914610829578063f9f031df1461084957610288565b8063aa15a6fd146106ab578063acd79c46146106cb578063af245429146106de578063c2a672e0146106f3578063c508700314610713578063d01b8eed1461076457610288565b8063895ab74211610113578063895ab742146105f6578063909791dd1461061657806391f8723f1461062b578063924f081e1461064b5780639488e4e91461066b578063969ffc141461068b57610288565b80636b091695146105565780636bd8f8041461057657806376664b6514610596578063865e6fd3146105b6578063888b9ae9146105d657610288565b806342ef3c34116101e857806357473447116101ac57806357473447146104b75780635a2ac073146104d75780635c19a95c146104f75780635cd8a76b1461050a5780636558954f1461051f578063679a6e431461053657610288565b806342ef3c341461040f578063435628ba1461042f578063446850a11461044f5780634530d2021461046f5780634d99dd161461049757610288565b806318a749a71161023a57806318a749a71461033e57806326476204146103515780632715805e146103645780633101cfcb146103845780633d8e846e146103a457806342e0c408146103c457610288565b806303827884146102935780630682e8fa146102bc578063095f6475146102d1578063097e4a9d146102fe5780631658c86e1461031e57610288565b3661028857600861028681610869565b005b600861028681610869565b34801561029f57600080fd5b506102a96104b081565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b506038546102a9565b3480156102dd57600080fd5b506102f16102ec36600461379e565b6108c1565b6040516102b39190613844565b34801561030a57600080fd5b506102a961031936600461386c565b61094c565b34801561032a57600080fd5b506102866103393660046138c2565b610a20565b61028661034c3660046138df565b610aea565b61028661035f3660046138c2565b610c81565b34801561037057600080fd5b506102a961037f366004613991565b610cc9565b34801561039057600080fd5b5061028661039f3660046138c2565b610d5a565b3480156103b057600080fd5b506102f16103bf3660046139bd565b610dfd565b3480156103d057600080fd5b506103ff6103df3660046138c2565b6001600160a01b039081166000908152603a602052604090205416151590565b60405190151581526020016102b3565b34801561041b57600080fd5b506102f161042a366004613a11565b610f60565b34801561043b57600080fd5b506102f161044a36600461379e565b610fb5565b34801561045b57600080fd5b506102f161046a366004613a11565b61102d565b34801561047b57600080fd5b50606e54606d54604080519283526020830191909152016102b3565b3480156104a357600080fd5b506102866104b2366004613991565b611072565b3480156104c357600080fd5b506102866104d2366004613a52565b611107565b3480156104e357600080fd5b506102f16104f2366004613a11565b61111d565b6102866105053660046138c2565b61115b565b34801561051657600080fd5b506102866111dd565b34801561052b57600080fd5b506102a96201518081565b34801561054257600080fd5b50610286610551366004613a74565b61129c565b34801561056257600080fd5b506102a9610571366004613a8d565b6112ad565b34801561058257600080fd5b50610286610591366004613ac6565b6112c7565b3480156105a257600080fd5b506102a96105b1366004613a8d565b611374565b3480156105c257600080fd5b506102866105d1366004613b16565b61138c565b3480156105e257600080fd5b506102866105f1366004613a74565b6113a7565b34801561060257600080fd5b506102a96106113660046138c2565b6113b8565b34801561062257600080fd5b50606c546102a9565b34801561063757600080fd5b506102f1610646366004613a11565b6113e8565b34801561065757600080fd5b50610286610666366004613b32565b611433565b34801561067757600080fd5b5061028661068636600461379e565b611534565b34801561069757600080fd5b506102866106a6366004613a74565b6116c3565b3480156106b757600080fd5b506102866106c63660046138c2565b6116d4565b6102866106d9366004613b67565b611737565b3480156106ea57600080fd5b506039546102a9565b3480156106ff57600080fd5b5061028661070e366004613991565b61178b565b34801561071f57600080fd5b5061074c61072e3660046138c2565b6001600160a01b039081166000908152603a60205260409020541690565b6040516001600160a01b0390911681526020016102b3565b34801561077057600080fd5b5061078461077f3660046138c2565b611852565b604080516001600160a01b0390941684526020840192909252908201526060016102b3565b3480156107b557600080fd5b5061074c6107c4366004613bda565b611899565b3480156107d557600080fd5b506102866107e4366004613bf5565b611914565b3480156107f557600080fd5b50610286610804366004613a8d565b611aaf565b34801561081557600080fd5b506107846108243660046138c2565b611b18565b34801561083557600080fd5b50610286610844366004613c40565b611b5f565b34801561085557600080fd5b506102a9610864366004613a11565b611c56565b61087281611899565b6001600160a01b0316336001600160a01b0316146108be576000356001600160e01b03191681336040516320e0f98d60e21b81526004016108b593929190613cae565b60405180910390fd5b50565b60606000610901868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b905061094081858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611d5a92505050565b9150505b949350505050565b60006002600054036109705760405162461bcd60e51b81526004016108b590613ce5565b60026000558161097f81611e37565b336000908152603a60205260409020546001600160a01b0316156109b857604051632fc6bfb160e21b81523360048201526024016108b5565b60006109f6868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b90506000610a0385611ee7565b9050610a10338383611f5f565b6001600055979650505050505050565b80610a2a81611e37565b60376000610a3784611ee7565b6001600160a01b03166001600160a01b0316815260200190815260200160002033610a628282611f91565b610a6c6008611899565b6001600160a01b031663dd716ad3610a8386611ee7565b6039546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b5050505050505050565b600260005403610b0c5760405162461bcd60e51b81526004016108b590613ce5565b60026000908155338152603a60205260409020546001600160a01b031615610b4957604051632fc6bfb160e21b81523360048201526024016108b5565b606d54831180610b5a5750606e5483105b15610b7857604051631b8454a360e21b815260040160405180910390fd5b600034905060003390506000879050610bce828a838a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e92508b9150611fc19050565b6001600160a01b038082166000818152603760208181526040808420600181018054978a166001600160a01b0319988916811790915581548816871782558552603a835290842080549096168517909555929091529052610c308184866122a1565b826001600160a01b0316826001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a3505060016000555050505050505050565b610c8961234c565b80610c9381611e37565b6000610c9e83611ee7565b6001600160a01b0381166000908152603760205260409020909150610cc49033346122a1565b505050565b60006008610cd681610869565b6001600160a01b0384166000908152603760205260409020610cf8908461236f565b915033610d05818461240c565b610d5257604080518481524760208201526001600160a01b0380841692908816917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35b505092915050565b60d154600390610100900460ff16158015610d7c575060d15460ff8083169116105b610d985760405162461bcd60e51b81526004016108b590613d1c565b60d1805461ffff191660ff831617610100179055610db7600f83612468565b60d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60606000610e0b6008611899565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c9190613d6a565b9050826001600160401b03811115610e8657610e86613d83565b604051908082528060200260200182016040528015610eaf578160200160208202803683370190505b5091506000610ef0858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b905060005b84811015610f56576000828281518110610f1157610f11613d99565b60200260200101519050610f30818986610f2b858d61250c565b61253b565b858381518110610f4257610f42613d99565b602090810291909101015250600101610ef5565b5050509392505050565b60606000610fa0848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b9050610fab81612637565b9150505b92915050565b606061102485858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250611d5a92505050565b95945050505050565b606061106b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061263792505050565b9392505050565b6002600054036110945760405162461bcd60e51b81526004016108b590613ce5565b6002600090815533906110d69084906037906110af83611ee7565b6001600160a01b03166001600160a01b0316815260200190815260200160002083856126f7565b6110e0818361292c565b6110fd57604051635ff7115760e11b815260040160405180910390fd5b5050600160005550565b61110f612974565b61111982826129ce565b5050565b606061106b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612a3b92505050565b61116361234c565b8061116d81611e37565b336000908152603a60205260409020546001600160a01b0316156111a657604051632fc6bfb160e21b81523360048201526024016108b5565b611119603760006111b685611ee7565b6001600160a01b03166001600160a01b031681526020019081526020016000203334612aee565b60d154600290610100900460ff161580156111ff575060d15460ff8083169116105b61121b5760405162461bcd60e51b81526004016108b590613d1c565b60d1805461ffff191660ff831617610100179055603654611247906008906001600160a01b0316612468565b603680546001600160a01b031916905560d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6112a4612974565b6108be81612b9d565b600082610fab81846112bd612bd2565b610f2b858861250c565b6002600054036112e95760405162461bcd60e51b81526004016108b590613ce5565b6002600055816112f881611e37565b33611331856037600061130a83611ee7565b6001600160a01b03166001600160a01b0316815260200190815260200160002083866126f7565b6113686037600061134187611ee7565b6001600160a01b03166001600160a01b031681526020019081526020016000208285612aee565b50506001600055505050565b60008061138084611ee7565b9050610fab818461250c565b611394612974565b61139d81612c44565b6111198282612468565b6113af612974565b6108be81612c7a565b6000806113c483611ee7565b905061106b816001600160a01b031660009081526037602052604090206003015490565b60606000611428848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b9050610fab81612a3b565b8261143d81611e37565b6037600061144a86611ee7565b6001600160a01b03166001600160a01b03168152602001908152602001600020336114758282611f91565b606d548411806114865750606e5484105b156114a457604051631b8454a360e21b815260040160405180910390fd5b6114ae6008611899565b6001600160a01b031663e5125a1d6114c588611ee7565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810188905260448101879052606401600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b50505050505050505050565b6002600054036115565760405162461bcd60e51b81526004016108b590613ce5565b60026000558215806115685750828114155b15611586576040516376081a7b60e11b815260040160405180910390fd5b60003390506000806115ca878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b905060005b815181101561168d578585828181106115ea576115ea613d99565b90506020020135836115fc9190613dc5565b925061168588888381811061161357611613613d99565b905060200201602081019061162891906138c2565b6037600085858151811061163e5761163e613d99565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208689898681811061167957611679613d99565b905060200201356126f7565b6001016115cf565b50611698838361292c565b6116b557604051635ff7115760e11b815260040160405180910390fd5b505060016000555050505050565b6116cb612974565b6108be81612caf565b806116de81611e37565b603760006116eb84611ee7565b6001600160a01b03166001600160a01b03168152602001908152602001600020336117168282611f91565b6117206008611899565b6001600160a01b031663cdaa4e81610a8386611ee7565b600861174281610869565b611783868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250879150869050612ce4565b505050505050565b6002600054036117ad5760405162461bcd60e51b81526004016108b590613ce5565b6002600055816117bc81611e37565b816000036117dd576040516331d9f7d760e01b815260040160405180910390fd5b3360006117e985611ee7565b6001600160a01b0381166000908152603760205260408120600281015492935091611815908790613dd8565b9050606c5481101561183a5760405163ef0a995760e01b815260040160405180910390fd5b611845828588613112565b61169884876104b06131fe565b60008060008061186185611ee7565b6001600160a01b0390811660009081526037602052604090206001810154600282015460039092015492169790965090945092505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f8111156118d0576118d0613c84565b60ff1681526020810191909152604001600020546001600160a01b031690508061190f578160405163409140df60e11b81526004016108b59190613deb565b919050565b600861191f81610869565b8215611aa95760005b83811015611a6e57600085858381811061194457611944613d99565b905060200201602081019061195991906138c2565b6001600160a01b03808216600090815260376020908152604080832060018101549094168352603a909152902080546001600160a01b03191690556002810154919250908015611a1d576119ad828261236f565b5060018201546119c9906001600160a01b0316826104b06131fe565b611a1d5760018201548254604080518481524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b6001820154600090611a3a9085906001600160a01b03168961325e565b90508015611a5f576001830154611a5d906001600160a01b0316826104b06131fe565b505b84600101945050505050611928565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d88484604051611aa0929190613df9565b60405180910390a15b50505050565b600f611aba81610869565b506001600160a01b039182166000818152603760209081526040808320600101805487168452603a90925280832080546001600160a01b03199081169091558254959096169486168517909155928152919091208054909216179055565b6000806000611b52846001600160a01b03808216600090815260376020526040902060018101546002820154600390920154921693909250565b9250925092509193909250565b60d154610100900460ff1615808015611b7f575060d154600160ff909116105b80611b995750303b158015611b99575060d15460ff166001145b611bb55760405162461bcd60e51b81526004016108b590613d1c565b60d1805460ff191660011790558015611bd85760d1805461ff0019166101001790555b611be3600887612468565b611bec85612b9d565b611bf76000856129ce565b611c0083612c7a565b611c0982612caf565b80156117835760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6000600260005403611c7a5760405162461bcd60e51b81526004016108b590613ce5565b6002600081905550611cc733611cc2858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b613370565b9050611cd333826133c1565b600160005592915050565b6060611cea600f611899565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b8152600401611d159190613e47565b600060405180830381865afa158015611d32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610faf9190810190613ec4565b60608151835114611d7e576040516376081a7b60e11b815260040160405180910390fd5b82516001600160401b03811115611d9757611d97613d83565b604051908082528060200260200182016040528015611dc0578160200160208202803683370190505b50905060005b8151811015611e3057611e0b848281518110611de457611de4613d99565b6020026020010151848381518110611dfe57611dfe613d99565b602002602001015161250c565b828281518110611e1d57611e1d613d99565b6020908102919091010152600101611dc6565b5092915050565b611e416008611899565b604051635061f96960e11b81526001600160a01b038381166004830152919091169063a0c3f2d290602401602060405180830381865afa158015611e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ead9190613f75565b6108be5780611ebb82611ee7565b604051631299fe7160e11b81526001600160a01b039283166004820152911660248201526044016108b5565b6000611ef3600f611899565b6040516350a9fc2960e01b81526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa158015611f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf9190613f97565b6000611f6b8484613370565b6001600160a01b038316600090815260376020526040902090915061106b908583612aee565b60018201546001600160a01b0382811691161461111957604051637bc65bd760e11b815260040160405180910390fd5b611fcf8760006104b06131fe565b61201a576040805163338f030160e01b81526001600160a01b03891660048201526024810191909152600a6044820152693837b7b61030b236b4b760b11b60648201526084016108b5565b6120288460006104b06131fe565b612071576040805163338f030160e01b81526001600160a01b038616600482015260248101919091526008604482015267747265617375727960c01b60648201526084016108b5565b606c5481101561209457604051630a8d7fa760e21b815260040160405180910390fd5b856001600160a01b0316876001600160a01b03161415806120c75750836001600160a01b0316866001600160a01b031614155b156120e55760405163dc1d04ff60e01b815260040160405180910390fd5b6040805160038082526080820190925260009160208201606080368337019050509050878160008151811061211c5761211c613d99565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061215057612150613d99565b60200260200101906001600160a01b031690816001600160a01b031681525050612179816133f6565b156121a557604051630d697db160e11b81526001600160e01b03196000351660048201526024016108b5565b506121b06008611899565b60405163f883afaf60e01b81526001600160a01b0388811660048301528781166024830152868116604483015260648201859052919091169063f883afaf90608401600060405180830381600087803b15801561220c57600080fd5b505af1158015612220573d6000803e3d6000fd5b505050506000612230600f611899565b6040516307768f2160e51b81529091506001600160a01b0382169063eed1e42090612265908a908a908a908a90600401613fb4565b600060405180830381600087803b15801561227f57600080fd5b505af1158015612293573d6000803e3d6000fd5b505050505050505050505050565b82826122ad8282611f91565b828560020160008282546122c19190613dc5565b925050819055506122e7858587600201548689600301546122e29190613dc5565b613495565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9061233d9086815260200190565b60405180910390a25050505050565b3460000361236d57604051636dfcbde560e11b815260040160405180910390fd5b565b600061237f8360020154836134d0565b9050808360020160008282546123959190613dd8565b90915550506001830154600284015460038501546123c59286926001600160a01b03909116916122e290866134e6565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612459576040519150601f19603f3d011682016040523d82523d6000602084013e61245e565b606091505b5090949350505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561249e5761249e613c84565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156124df576124df613c84565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b6001600160a01b0380851660009081526002602090815260408083209387168352929052908120600381015484900361257657549050610944565b6001600160a01b0386166000908152600360208181526040808420600180845282862094870154865293909252832091820154839290156125db57805460018601549094506125c59085613dd8565b85600201546125d49190614027565b92506125e3565b846001015493505b81546000906125f3908690613dd8565b6125fd9089614027565b9050670de0b6b3a76400006126128286613dc5565b61261c919061403e565b86546126289190613dc5565b9b9a5050505050505050505050565b606081516001600160401b0381111561265257612652613d83565b60405190808252806020026020018201604052801561267b578160200160208202803683370190505b50905060005b82518110156126f157603760008483815181106126a0576126a0613d99565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600201548282815181106126de576126de613d99565b6020908102919091010152600101612681565b50919050565b82826127038282613500565b8260000361272457604051637ab0c6ad60e11b815260040160405180910390fd5b6001600160a01b038416600090815260048601602052604090205483111561275f57604051630695534560e31b815260040160405180910390fd5b600061276b6008611899565b604051635061f96960e11b81526001600160a01b0389811660048301529192509082169063a0c3f2d290602401602060405180830381865afa1580156127b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d99190613f75565b801561285057506040516328bde1e160e01b81526001600160a01b0388811660048301528216906328bde1e19060240160e060405180830381865afa158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190614060565b60a00151155b801561288357506038546001600160a01b0386166000908152600588016020526040902054429161288091613dc5565b10155b156128a15760405163f19f52bd60e01b815260040160405180910390fd5b6001600160a01b03851660009081526004870160205260409020546128df90879087906128cf908890613dd8565b878a600301546122e29190613dd8565b85546040518581526001600160a01b03918216918716907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c9060200160405180910390a350505050505050565b60008147101561296a576040516302631c4f60e61b81526001600160e01b0319600035166004820152476024820152604481018390526064016108b5565b61106b838361240c565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316331461236d576000356001600160e01b0319166001604051620f948f60ea1b81526004016108b5929190614107565b6127108111806129dd57508082115b156129fb57604051631b8454a360e21b815260040160405180910390fd5b606d819055606e82905560408051838152602081018390527f677752f5bf9541b14288833909e5ec5a478103131c1ec08c4638943be5826c149101610df1565b606081516001600160401b03811115612a5657612a56613d83565b604051908082528060200260200182016040528015612a7f578160200160208202803683370190505b50905060005b82518110156126f157612ac9838281518110612aa357612aa3613d99565b60200260200101516001600160a01b031660009081526037602052604090206003015490565b828281518110612adb57612adb613d99565b6020908102919091010152600101612a85565b8282612afa8282613500565b6001600160a01b0384166000908152600486016020526040902054612b389086908690612b28908790613dc5565b8689600301546122e29190613dc5565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b90612b8e9087815260200190565b60405180910390a35050505050565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be290602001611291565b6000612bde6008611899565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3f9190613d6a565b905090565b806001600160a01b03163b6000036108be57604051630bfc64a360e21b81526001600160a01b03821660048201526024016108b5565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a90602001611291565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c67890602001611291565b83518214612d2d57807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a5858585604051612d209392919061416e565b60405180910390a2611aa9565b600080600080600088516001600160401b03811115612d4e57612d4e613d83565b604051908082528060200260200182016040528015612d77578160200160208202803683370190505b509050600089516001600160401b03811115612d9557612d95613d83565b604051908082528060200260200182016040528015612dbe578160200160208202803683370190505b50905060008a516001600160401b03811115612ddc57612ddc613d83565b604051908082528060200260200182016040528015612e05578160200160208202803683370190505b50905060005b8b51811015613078578b8181518110612e2657612e26613d99565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a9003612ec757868389806001019a5081518110612ea157612ea1613d99565b60200260200101906001600160a01b031690816001600160a01b03168152505050613066565b60028101548a1115612ef557604080518082019091528681526020018a905260018101869055600281018a90555b600181015415612f3f5760018101548c8c84818110612f1657612f16613d99565b90506020020135670de0b6b3a7640000612f309190614027565b612f3a919061403e565b612f42565b60005b985088816000016000828254612f589190613dc5565b9182905550905085612f6a8a85613dd8565b81518110612f7a57612f7a613d99565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c81526020019081526020016000206000820151816000015560208201518160010155905050858160010160000181905550806001016000015484898461300d9190613dd8565b8151811061301d5761301d613d99565b6020908102919091010152868d6130348a85613dd8565b8151811061304457613044613d99565b60200260200101906001600160a01b031690816001600160a01b031681525050505b80613070816141b8565b915050612e0b565b5085156130c157858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a3826040516130b891906141d1565b60405180910390a25b8a511561310557877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c85856040516130fc939291906141e4565b60405180910390a25b5050505050505050505050565b828261311e8282611f91565b846002015483111561314357604051630a8d7fa760e21b815260040160405180910390fd5b6038546001600160a01b0385166000908152600587016020526040902054429161316c91613dc5565b111561318b576040516303db082960e11b815260040160405180910390fd5b8285600201600082825461319f9190613dd8565b925050819055506131c0858587600201548689600301546122e29190613dd8565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200161233d565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d806000811461324e576040519150601f19603f3d011682016040523d82523d6000602084013e613253565b606091505b509095945050505050565b60008061326b858561250c565b90506132798585858461253b565b9150836001600160a01b0316856001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7846040516132c091815260200190565b60405180910390a36001600160a01b0380861660008181526002602090815260408083209489168352938152838220828155928252600390529190912061330a9082868580613530565b60038181018590556001600160a01b03878116600081815260209384526040808220546001870155519081529188169290917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a350509392505050565b60008061337b612bd2565b905060005b8351811015610d52576133ad84828151811061339e5761339e613d99565b6020026020010151868461325e565b6133b79084613dc5565b9250600101613380565b6133cb828261292c565b611119576040516303b97b7760e41b81526001600160e01b03196000351660048201526024016108b5565b6000815160000361340957506000919050565b60005b600183510381101561348c57600181015b83518110156134835783818151811061343857613438613d99565b60200260200101516001600160a01b031684838151811061345b5761345b613d99565b60200260200101516001600160a01b03160361347b575060019392505050565b60010161341d565b5060010161340c565b50600092915050565b83546134ab906001600160a01b031684846135c2565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b60008183106134df578161106b565b5090919050565b60008183116134f657600061106b565b61106b8284613dd8565b60018201546001600160a01b0380831691160361111957604051639feb934760e01b815260040160405180910390fd5b828460030154101561354457600284018190555b60006135548560020154846134d0565b905060008186600201546135689190613dd8565b905080156135b95760028601829055600187015481111561359c576040516352e521bf60e11b815260040160405180910390fd5b808760010160000160008282546135b39190613dd8565b90915550505b50505050505050565b60006135cc612bd2565b6001600160a01b0385166000908152600360205260409020600181015460028201549293509091831115613640576040518060400160405280613627886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b038087166000908152600260209081526040808320938916835292905290812090613672888861250c565b905060006136828989888561253b565b835490915081146136d4578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b6136e18584888a86613530565b845460018085019190915560038401879055850154841461374857886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c876001016000015460405161373f91815260200190565b60405180910390a35b505050505050505050565b60008083601f84011261376557600080fd5b5081356001600160401b0381111561377c57600080fd5b6020830191508360208260051b850101111561379757600080fd5b9250929050565b600080600080604085870312156137b457600080fd5b84356001600160401b03808211156137cb57600080fd5b6137d788838901613753565b909650945060208701359150808211156137f057600080fd5b506137fd87828801613753565b95989497509550505050565b600081518084526020808501945080840160005b838110156138395781518752958201959082019060010161381d565b509495945050505050565b60208152600061106b6020830184613809565b6001600160a01b03811681146108be57600080fd5b60008060006040848603121561388157600080fd5b83356001600160401b0381111561389757600080fd5b6138a386828701613753565b90945092505060208401356138b781613857565b809150509250925092565b6000602082840312156138d457600080fd5b813561106b81613857565b60008060008060008060a087890312156138f857600080fd5b863561390381613857565b9550602087013561391381613857565b9450604087013561392381613857565b93506060870135925060808701356001600160401b038082111561394657600080fd5b818901915089601f83011261395a57600080fd5b81358181111561396957600080fd5b8a602082850101111561397b57600080fd5b6020830194508093505050509295509295509295565b600080604083850312156139a457600080fd5b82356139af81613857565b946020939093013593505050565b6000806000604084860312156139d257600080fd5b83356139dd81613857565b925060208401356001600160401b038111156139f857600080fd5b613a0486828701613753565b9497909650939450505050565b60008060208385031215613a2457600080fd5b82356001600160401b03811115613a3a57600080fd5b613a4685828601613753565b90969095509350505050565b60008060408385031215613a6557600080fd5b50508035926020909101359150565b600060208284031215613a8657600080fd5b5035919050565b60008060408385031215613aa057600080fd5b8235613aab81613857565b91506020830135613abb81613857565b809150509250929050565b600080600060608486031215613adb57600080fd5b8335613ae681613857565b92506020840135613af681613857565b929592945050506040919091013590565b80356010811061190f57600080fd5b60008060408385031215613b2957600080fd5b613aab83613b07565b600080600060608486031215613b4757600080fd5b8335613b5281613857565b95602085013595506040909401359392505050565b600080600080600060608688031215613b7f57600080fd5b85356001600160401b0380821115613b9657600080fd5b613ba289838a01613753565b90975095506020880135915080821115613bbb57600080fd5b50613bc888828901613753565b96999598509660400135949350505050565b600060208284031215613bec57600080fd5b61106b82613b07565b600080600060408486031215613c0a57600080fd5b83356001600160401b03811115613c2057600080fd5b613c2c86828701613753565b909790965060209590950135949350505050565b600080600080600060a08688031215613c5857600080fd5b8535613c6381613857565b97602087013597506040870135966060810135965060800135945092505050565b634e487b7160e01b600052602160045260246000fd5b60108110613caa57613caa613c84565b9052565b6001600160e01b03198416815260608101613ccc6020830185613c9a565b6001600160a01b03929092166040919091015292915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215613d7c57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610faf57610faf613daf565b81810381811115610faf57610faf613daf565b60208101610faf8284613c9a565b60208082528181018390526000908460408401835b86811015613e3c578235613e2181613857565b6001600160a01b031682529183019190830190600101613e0e565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613e885783516001600160a01b031683529284019291840191600101613e63565b50909695505050505050565b604051601f8201601f191681016001600160401b0381118282101715613ebc57613ebc613d83565b604052919050565b60006020808385031215613ed757600080fd5b82516001600160401b0380821115613eee57600080fd5b818501915085601f830112613f0257600080fd5b815181811115613f1457613f14613d83565b8060051b9150613f25848301613e94565b8181529183018401918481019088841115613f3f57600080fd5b938501935b83851015613f695784519250613f5983613857565b8282529385019390850190613f44565b98975050505050505050565b600060208284031215613f8757600080fd5b8151801515811461106b57600080fd5b600060208284031215613fa957600080fd5b815161106b81613857565b600060018060a01b0380871683526020818716818501528186166040850152608060608501528451915081608085015260005b828110156140035785810182015185820160a001528101613fe7565b5050600060a0828501015260a0601f19601f83011684010191505095945050505050565b8082028115828204841417610faf57610faf613daf565b60008261405b57634e487b7160e01b600052601260045260246000fd5b500490565b600060e0828403121561407257600080fd5b60405160e081018181106001600160401b038211171561409457614094613d83565b60405282516140a281613857565b815260208301516140b281613857565b602082015260408301516140c581613857565b604082015260608301516140d881613857565b806060830152506080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b6001600160e01b03198316815260408101600b831061412857614128613c84565b8260208301529392505050565b600081518084526020808501945080840160005b838110156138395781516001600160a01b031687529582019590820190600101614149565b6040815260006141816040830186614135565b82810360208401528381526001600160fb1b038411156141a057600080fd5b8360051b808660208401370160200195945050505050565b6000600182016141ca576141ca613daf565b5060010190565b60208152600061106b6020830184614135565b6060815260006141f76060830186614135565b82810360208401526142098186613809565b90508281036040840152610940818561380956fea264697066735822122090fdbda614b62a56948043c2abe8dea25a67ea1f784be48d20947d38199e602864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102765760003560e01c80636b0916951161014f578063aa15a6fd116100c1578063de981f1b1161007a578063de981f1b146107a9578063e22d1c9d146107c9578063ea80d67d146107e9578063ef9aa66514610809578063f92ad21914610829578063f9f031df1461084957610288565b8063aa15a6fd146106ab578063acd79c46146106cb578063af245429146106de578063c2a672e0146106f3578063c508700314610713578063d01b8eed1461076457610288565b8063895ab74211610113578063895ab742146105f6578063909791dd1461061657806391f8723f1461062b578063924f081e1461064b5780639488e4e91461066b578063969ffc141461068b57610288565b80636b091695146105565780636bd8f8041461057657806376664b6514610596578063865e6fd3146105b6578063888b9ae9146105d657610288565b806342ef3c34116101e857806357473447116101ac57806357473447146104b75780635a2ac073146104d75780635c19a95c146104f75780635cd8a76b1461050a5780636558954f1461051f578063679a6e431461053657610288565b806342ef3c341461040f578063435628ba1461042f578063446850a11461044f5780634530d2021461046f5780634d99dd161461049757610288565b806318a749a71161023a57806318a749a71461033e57806326476204146103515780632715805e146103645780633101cfcb146103845780633d8e846e146103a457806342e0c408146103c457610288565b806303827884146102935780630682e8fa146102bc578063095f6475146102d1578063097e4a9d146102fe5780631658c86e1461031e57610288565b3661028857600861028681610869565b005b600861028681610869565b34801561029f57600080fd5b506102a96104b081565b6040519081526020015b60405180910390f35b3480156102c857600080fd5b506038546102a9565b3480156102dd57600080fd5b506102f16102ec36600461379e565b6108c1565b6040516102b39190613844565b34801561030a57600080fd5b506102a961031936600461386c565b61094c565b34801561032a57600080fd5b506102866103393660046138c2565b610a20565b61028661034c3660046138df565b610aea565b61028661035f3660046138c2565b610c81565b34801561037057600080fd5b506102a961037f366004613991565b610cc9565b34801561039057600080fd5b5061028661039f3660046138c2565b610d5a565b3480156103b057600080fd5b506102f16103bf3660046139bd565b610dfd565b3480156103d057600080fd5b506103ff6103df3660046138c2565b6001600160a01b039081166000908152603a602052604090205416151590565b60405190151581526020016102b3565b34801561041b57600080fd5b506102f161042a366004613a11565b610f60565b34801561043b57600080fd5b506102f161044a36600461379e565b610fb5565b34801561045b57600080fd5b506102f161046a366004613a11565b61102d565b34801561047b57600080fd5b50606e54606d54604080519283526020830191909152016102b3565b3480156104a357600080fd5b506102866104b2366004613991565b611072565b3480156104c357600080fd5b506102866104d2366004613a52565b611107565b3480156104e357600080fd5b506102f16104f2366004613a11565b61111d565b6102866105053660046138c2565b61115b565b34801561051657600080fd5b506102866111dd565b34801561052b57600080fd5b506102a96201518081565b34801561054257600080fd5b50610286610551366004613a74565b61129c565b34801561056257600080fd5b506102a9610571366004613a8d565b6112ad565b34801561058257600080fd5b50610286610591366004613ac6565b6112c7565b3480156105a257600080fd5b506102a96105b1366004613a8d565b611374565b3480156105c257600080fd5b506102866105d1366004613b16565b61138c565b3480156105e257600080fd5b506102866105f1366004613a74565b6113a7565b34801561060257600080fd5b506102a96106113660046138c2565b6113b8565b34801561062257600080fd5b50606c546102a9565b34801561063757600080fd5b506102f1610646366004613a11565b6113e8565b34801561065757600080fd5b50610286610666366004613b32565b611433565b34801561067757600080fd5b5061028661068636600461379e565b611534565b34801561069757600080fd5b506102866106a6366004613a74565b6116c3565b3480156106b757600080fd5b506102866106c63660046138c2565b6116d4565b6102866106d9366004613b67565b611737565b3480156106ea57600080fd5b506039546102a9565b3480156106ff57600080fd5b5061028661070e366004613991565b61178b565b34801561071f57600080fd5b5061074c61072e3660046138c2565b6001600160a01b039081166000908152603a60205260409020541690565b6040516001600160a01b0390911681526020016102b3565b34801561077057600080fd5b5061078461077f3660046138c2565b611852565b604080516001600160a01b0390941684526020840192909252908201526060016102b3565b3480156107b557600080fd5b5061074c6107c4366004613bda565b611899565b3480156107d557600080fd5b506102866107e4366004613bf5565b611914565b3480156107f557600080fd5b50610286610804366004613a8d565b611aaf565b34801561081557600080fd5b506107846108243660046138c2565b611b18565b34801561083557600080fd5b50610286610844366004613c40565b611b5f565b34801561085557600080fd5b506102a9610864366004613a11565b611c56565b61087281611899565b6001600160a01b0316336001600160a01b0316146108be576000356001600160e01b03191681336040516320e0f98d60e21b81526004016108b593929190613cae565b60405180910390fd5b50565b60606000610901868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b905061094081858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611d5a92505050565b9150505b949350505050565b60006002600054036109705760405162461bcd60e51b81526004016108b590613ce5565b60026000558161097f81611e37565b336000908152603a60205260409020546001600160a01b0316156109b857604051632fc6bfb160e21b81523360048201526024016108b5565b60006109f6868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b90506000610a0385611ee7565b9050610a10338383611f5f565b6001600055979650505050505050565b80610a2a81611e37565b60376000610a3784611ee7565b6001600160a01b03166001600160a01b0316815260200190815260200160002033610a628282611f91565b610a6c6008611899565b6001600160a01b031663dd716ad3610a8386611ee7565b6039546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b5050505050505050565b600260005403610b0c5760405162461bcd60e51b81526004016108b590613ce5565b60026000908155338152603a60205260409020546001600160a01b031615610b4957604051632fc6bfb160e21b81523360048201526024016108b5565b606d54831180610b5a5750606e5483105b15610b7857604051631b8454a360e21b815260040160405180910390fd5b600034905060003390506000879050610bce828a838a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e92508b9150611fc19050565b6001600160a01b038082166000818152603760208181526040808420600181018054978a166001600160a01b0319988916811790915581548816871782558552603a835290842080549096168517909555929091529052610c308184866122a1565b826001600160a01b0316826001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a3505060016000555050505050505050565b610c8961234c565b80610c9381611e37565b6000610c9e83611ee7565b6001600160a01b0381166000908152603760205260409020909150610cc49033346122a1565b505050565b60006008610cd681610869565b6001600160a01b0384166000908152603760205260409020610cf8908461236f565b915033610d05818461240c565b610d5257604080518481524760208201526001600160a01b0380841692908816917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35b505092915050565b60d154600390610100900460ff16158015610d7c575060d15460ff8083169116105b610d985760405162461bcd60e51b81526004016108b590613d1c565b60d1805461ffff191660ff831617610100179055610db7600f83612468565b60d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60606000610e0b6008611899565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c9190613d6a565b9050826001600160401b03811115610e8657610e86613d83565b604051908082528060200260200182016040528015610eaf578160200160208202803683370190505b5091506000610ef0858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b905060005b84811015610f56576000828281518110610f1157610f11613d99565b60200260200101519050610f30818986610f2b858d61250c565b61253b565b858381518110610f4257610f42613d99565b602090810291909101015250600101610ef5565b5050509392505050565b60606000610fa0848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b9050610fab81612637565b9150505b92915050565b606061102485858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250611d5a92505050565b95945050505050565b606061106b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061263792505050565b9392505050565b6002600054036110945760405162461bcd60e51b81526004016108b590613ce5565b6002600090815533906110d69084906037906110af83611ee7565b6001600160a01b03166001600160a01b0316815260200190815260200160002083856126f7565b6110e0818361292c565b6110fd57604051635ff7115760e11b815260040160405180910390fd5b5050600160005550565b61110f612974565b61111982826129ce565b5050565b606061106b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612a3b92505050565b61116361234c565b8061116d81611e37565b336000908152603a60205260409020546001600160a01b0316156111a657604051632fc6bfb160e21b81523360048201526024016108b5565b611119603760006111b685611ee7565b6001600160a01b03166001600160a01b031681526020019081526020016000203334612aee565b60d154600290610100900460ff161580156111ff575060d15460ff8083169116105b61121b5760405162461bcd60e51b81526004016108b590613d1c565b60d1805461ffff191660ff831617610100179055603654611247906008906001600160a01b0316612468565b603680546001600160a01b031916905560d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6112a4612974565b6108be81612b9d565b600082610fab81846112bd612bd2565b610f2b858861250c565b6002600054036112e95760405162461bcd60e51b81526004016108b590613ce5565b6002600055816112f881611e37565b33611331856037600061130a83611ee7565b6001600160a01b03166001600160a01b0316815260200190815260200160002083866126f7565b6113686037600061134187611ee7565b6001600160a01b03166001600160a01b031681526020019081526020016000208285612aee565b50506001600055505050565b60008061138084611ee7565b9050610fab818461250c565b611394612974565b61139d81612c44565b6111198282612468565b6113af612974565b6108be81612c7a565b6000806113c483611ee7565b905061106b816001600160a01b031660009081526037602052604090206003015490565b60606000611428848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b9050610fab81612a3b565b8261143d81611e37565b6037600061144a86611ee7565b6001600160a01b03166001600160a01b03168152602001908152602001600020336114758282611f91565b606d548411806114865750606e5484105b156114a457604051631b8454a360e21b815260040160405180910390fd5b6114ae6008611899565b6001600160a01b031663e5125a1d6114c588611ee7565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810188905260448101879052606401600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b50505050505050505050565b6002600054036115565760405162461bcd60e51b81526004016108b590613ce5565b60026000558215806115685750828114155b15611586576040516376081a7b60e11b815260040160405180910390fd5b60003390506000806115ca878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b905060005b815181101561168d578585828181106115ea576115ea613d99565b90506020020135836115fc9190613dc5565b925061168588888381811061161357611613613d99565b905060200201602081019061162891906138c2565b6037600085858151811061163e5761163e613d99565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208689898681811061167957611679613d99565b905060200201356126f7565b6001016115cf565b50611698838361292c565b6116b557604051635ff7115760e11b815260040160405180910390fd5b505060016000555050505050565b6116cb612974565b6108be81612caf565b806116de81611e37565b603760006116eb84611ee7565b6001600160a01b03166001600160a01b03168152602001908152602001600020336117168282611f91565b6117206008611899565b6001600160a01b031663cdaa4e81610a8386611ee7565b600861174281610869565b611783868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250879150869050612ce4565b505050505050565b6002600054036117ad5760405162461bcd60e51b81526004016108b590613ce5565b6002600055816117bc81611e37565b816000036117dd576040516331d9f7d760e01b815260040160405180910390fd5b3360006117e985611ee7565b6001600160a01b0381166000908152603760205260408120600281015492935091611815908790613dd8565b9050606c5481101561183a5760405163ef0a995760e01b815260040160405180910390fd5b611845828588613112565b61169884876104b06131fe565b60008060008061186185611ee7565b6001600160a01b0390811660009081526037602052604090206001810154600282015460039092015492169790965090945092505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f8111156118d0576118d0613c84565b60ff1681526020810191909152604001600020546001600160a01b031690508061190f578160405163409140df60e11b81526004016108b59190613deb565b919050565b600861191f81610869565b8215611aa95760005b83811015611a6e57600085858381811061194457611944613d99565b905060200201602081019061195991906138c2565b6001600160a01b03808216600090815260376020908152604080832060018101549094168352603a909152902080546001600160a01b03191690556002810154919250908015611a1d576119ad828261236f565b5060018201546119c9906001600160a01b0316826104b06131fe565b611a1d5760018201548254604080518481524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b6001820154600090611a3a9085906001600160a01b03168961325e565b90508015611a5f576001830154611a5d906001600160a01b0316826104b06131fe565b505b84600101945050505050611928565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d88484604051611aa0929190613df9565b60405180910390a15b50505050565b600f611aba81610869565b506001600160a01b039182166000818152603760209081526040808320600101805487168452603a90925280832080546001600160a01b03199081169091558254959096169486168517909155928152919091208054909216179055565b6000806000611b52846001600160a01b03808216600090815260376020526040902060018101546002820154600390920154921693909250565b9250925092509193909250565b60d154610100900460ff1615808015611b7f575060d154600160ff909116105b80611b995750303b158015611b99575060d15460ff166001145b611bb55760405162461bcd60e51b81526004016108b590613d1c565b60d1805460ff191660011790558015611bd85760d1805461ff0019166101001790555b611be3600887612468565b611bec85612b9d565b611bf76000856129ce565b611c0083612c7a565b611c0982612caf565b80156117835760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6000600260005403611c7a5760405162461bcd60e51b81526004016108b590613ce5565b6002600081905550611cc733611cc2858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cde92505050565b613370565b9050611cd333826133c1565b600160005592915050565b6060611cea600f611899565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b8152600401611d159190613e47565b600060405180830381865afa158015611d32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610faf9190810190613ec4565b60608151835114611d7e576040516376081a7b60e11b815260040160405180910390fd5b82516001600160401b03811115611d9757611d97613d83565b604051908082528060200260200182016040528015611dc0578160200160208202803683370190505b50905060005b8151811015611e3057611e0b848281518110611de457611de4613d99565b6020026020010151848381518110611dfe57611dfe613d99565b602002602001015161250c565b828281518110611e1d57611e1d613d99565b6020908102919091010152600101611dc6565b5092915050565b611e416008611899565b604051635061f96960e11b81526001600160a01b038381166004830152919091169063a0c3f2d290602401602060405180830381865afa158015611e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ead9190613f75565b6108be5780611ebb82611ee7565b604051631299fe7160e11b81526001600160a01b039283166004820152911660248201526044016108b5565b6000611ef3600f611899565b6040516350a9fc2960e01b81526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa158015611f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf9190613f97565b6000611f6b8484613370565b6001600160a01b038316600090815260376020526040902090915061106b908583612aee565b60018201546001600160a01b0382811691161461111957604051637bc65bd760e11b815260040160405180910390fd5b611fcf8760006104b06131fe565b61201a576040805163338f030160e01b81526001600160a01b03891660048201526024810191909152600a6044820152693837b7b61030b236b4b760b11b60648201526084016108b5565b6120288460006104b06131fe565b612071576040805163338f030160e01b81526001600160a01b038616600482015260248101919091526008604482015267747265617375727960c01b60648201526084016108b5565b606c5481101561209457604051630a8d7fa760e21b815260040160405180910390fd5b856001600160a01b0316876001600160a01b03161415806120c75750836001600160a01b0316866001600160a01b031614155b156120e55760405163dc1d04ff60e01b815260040160405180910390fd5b6040805160038082526080820190925260009160208201606080368337019050509050878160008151811061211c5761211c613d99565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061215057612150613d99565b60200260200101906001600160a01b031690816001600160a01b031681525050612179816133f6565b156121a557604051630d697db160e11b81526001600160e01b03196000351660048201526024016108b5565b506121b06008611899565b60405163f883afaf60e01b81526001600160a01b0388811660048301528781166024830152868116604483015260648201859052919091169063f883afaf90608401600060405180830381600087803b15801561220c57600080fd5b505af1158015612220573d6000803e3d6000fd5b505050506000612230600f611899565b6040516307768f2160e51b81529091506001600160a01b0382169063eed1e42090612265908a908a908a908a90600401613fb4565b600060405180830381600087803b15801561227f57600080fd5b505af1158015612293573d6000803e3d6000fd5b505050505050505050505050565b82826122ad8282611f91565b828560020160008282546122c19190613dc5565b925050819055506122e7858587600201548689600301546122e29190613dc5565b613495565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9061233d9086815260200190565b60405180910390a25050505050565b3460000361236d57604051636dfcbde560e11b815260040160405180910390fd5b565b600061237f8360020154836134d0565b9050808360020160008282546123959190613dd8565b90915550506001830154600284015460038501546123c59286926001600160a01b03909116916122e290866134e6565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612459576040519150601f19603f3d011682016040523d82523d6000602084013e61245e565b606091505b5090949350505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561249e5761249e613c84565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156124df576124df613c84565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b6001600160a01b0380851660009081526002602090815260408083209387168352929052908120600381015484900361257657549050610944565b6001600160a01b0386166000908152600360208181526040808420600180845282862094870154865293909252832091820154839290156125db57805460018601549094506125c59085613dd8565b85600201546125d49190614027565b92506125e3565b846001015493505b81546000906125f3908690613dd8565b6125fd9089614027565b9050670de0b6b3a76400006126128286613dc5565b61261c919061403e565b86546126289190613dc5565b9b9a5050505050505050505050565b606081516001600160401b0381111561265257612652613d83565b60405190808252806020026020018201604052801561267b578160200160208202803683370190505b50905060005b82518110156126f157603760008483815181106126a0576126a0613d99565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600201548282815181106126de576126de613d99565b6020908102919091010152600101612681565b50919050565b82826127038282613500565b8260000361272457604051637ab0c6ad60e11b815260040160405180910390fd5b6001600160a01b038416600090815260048601602052604090205483111561275f57604051630695534560e31b815260040160405180910390fd5b600061276b6008611899565b604051635061f96960e11b81526001600160a01b0389811660048301529192509082169063a0c3f2d290602401602060405180830381865afa1580156127b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d99190613f75565b801561285057506040516328bde1e160e01b81526001600160a01b0388811660048301528216906328bde1e19060240160e060405180830381865afa158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190614060565b60a00151155b801561288357506038546001600160a01b0386166000908152600588016020526040902054429161288091613dc5565b10155b156128a15760405163f19f52bd60e01b815260040160405180910390fd5b6001600160a01b03851660009081526004870160205260409020546128df90879087906128cf908890613dd8565b878a600301546122e29190613dd8565b85546040518581526001600160a01b03918216918716907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c9060200160405180910390a350505050505050565b60008147101561296a576040516302631c4f60e61b81526001600160e01b0319600035166004820152476024820152604481018390526064016108b5565b61106b838361240c565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316331461236d576000356001600160e01b0319166001604051620f948f60ea1b81526004016108b5929190614107565b6127108111806129dd57508082115b156129fb57604051631b8454a360e21b815260040160405180910390fd5b606d819055606e82905560408051838152602081018390527f677752f5bf9541b14288833909e5ec5a478103131c1ec08c4638943be5826c149101610df1565b606081516001600160401b03811115612a5657612a56613d83565b604051908082528060200260200182016040528015612a7f578160200160208202803683370190505b50905060005b82518110156126f157612ac9838281518110612aa357612aa3613d99565b60200260200101516001600160a01b031660009081526037602052604090206003015490565b828281518110612adb57612adb613d99565b6020908102919091010152600101612a85565b8282612afa8282613500565b6001600160a01b0384166000908152600486016020526040902054612b389086908690612b28908790613dc5565b8689600301546122e29190613dc5565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b90612b8e9087815260200190565b60405180910390a35050505050565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be290602001611291565b6000612bde6008611899565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3f9190613d6a565b905090565b806001600160a01b03163b6000036108be57604051630bfc64a360e21b81526001600160a01b03821660048201526024016108b5565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a90602001611291565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c67890602001611291565b83518214612d2d57807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a5858585604051612d209392919061416e565b60405180910390a2611aa9565b600080600080600088516001600160401b03811115612d4e57612d4e613d83565b604051908082528060200260200182016040528015612d77578160200160208202803683370190505b509050600089516001600160401b03811115612d9557612d95613d83565b604051908082528060200260200182016040528015612dbe578160200160208202803683370190505b50905060008a516001600160401b03811115612ddc57612ddc613d83565b604051908082528060200260200182016040528015612e05578160200160208202803683370190505b50905060005b8b51811015613078578b8181518110612e2657612e26613d99565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a9003612ec757868389806001019a5081518110612ea157612ea1613d99565b60200260200101906001600160a01b031690816001600160a01b03168152505050613066565b60028101548a1115612ef557604080518082019091528681526020018a905260018101869055600281018a90555b600181015415612f3f5760018101548c8c84818110612f1657612f16613d99565b90506020020135670de0b6b3a7640000612f309190614027565b612f3a919061403e565b612f42565b60005b985088816000016000828254612f589190613dc5565b9182905550905085612f6a8a85613dd8565b81518110612f7a57612f7a613d99565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c81526020019081526020016000206000820151816000015560208201518160010155905050858160010160000181905550806001016000015484898461300d9190613dd8565b8151811061301d5761301d613d99565b6020908102919091010152868d6130348a85613dd8565b8151811061304457613044613d99565b60200260200101906001600160a01b031690816001600160a01b031681525050505b80613070816141b8565b915050612e0b565b5085156130c157858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a3826040516130b891906141d1565b60405180910390a25b8a511561310557877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c85856040516130fc939291906141e4565b60405180910390a25b5050505050505050505050565b828261311e8282611f91565b846002015483111561314357604051630a8d7fa760e21b815260040160405180910390fd5b6038546001600160a01b0385166000908152600587016020526040902054429161316c91613dc5565b111561318b576040516303db082960e11b815260040160405180910390fd5b8285600201600082825461319f9190613dd8565b925050819055506131c0858587600201548689600301546122e29190613dd8565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200161233d565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d806000811461324e576040519150601f19603f3d011682016040523d82523d6000602084013e613253565b606091505b509095945050505050565b60008061326b858561250c565b90506132798585858461253b565b9150836001600160a01b0316856001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7846040516132c091815260200190565b60405180910390a36001600160a01b0380861660008181526002602090815260408083209489168352938152838220828155928252600390529190912061330a9082868580613530565b60038181018590556001600160a01b03878116600081815260209384526040808220546001870155519081529188169290917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a350509392505050565b60008061337b612bd2565b905060005b8351811015610d52576133ad84828151811061339e5761339e613d99565b6020026020010151868461325e565b6133b79084613dc5565b9250600101613380565b6133cb828261292c565b611119576040516303b97b7760e41b81526001600160e01b03196000351660048201526024016108b5565b6000815160000361340957506000919050565b60005b600183510381101561348c57600181015b83518110156134835783818151811061343857613438613d99565b60200260200101516001600160a01b031684838151811061345b5761345b613d99565b60200260200101516001600160a01b03160361347b575060019392505050565b60010161341d565b5060010161340c565b50600092915050565b83546134ab906001600160a01b031684846135c2565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b60008183106134df578161106b565b5090919050565b60008183116134f657600061106b565b61106b8284613dd8565b60018201546001600160a01b0380831691160361111957604051639feb934760e01b815260040160405180910390fd5b828460030154101561354457600284018190555b60006135548560020154846134d0565b905060008186600201546135689190613dd8565b905080156135b95760028601829055600187015481111561359c576040516352e521bf60e11b815260040160405180910390fd5b808760010160000160008282546135b39190613dd8565b90915550505b50505050505050565b60006135cc612bd2565b6001600160a01b0385166000908152600360205260409020600181015460028201549293509091831115613640576040518060400160405280613627886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b038087166000908152600260209081526040808320938916835292905290812090613672888861250c565b905060006136828989888561253b565b835490915081146136d4578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b6136e18584888a86613530565b845460018085019190915560038401879055850154841461374857886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c876001016000015460405161373f91815260200190565b60405180910390a35b505050505050505050565b60008083601f84011261376557600080fd5b5081356001600160401b0381111561377c57600080fd5b6020830191508360208260051b850101111561379757600080fd5b9250929050565b600080600080604085870312156137b457600080fd5b84356001600160401b03808211156137cb57600080fd5b6137d788838901613753565b909650945060208701359150808211156137f057600080fd5b506137fd87828801613753565b95989497509550505050565b600081518084526020808501945080840160005b838110156138395781518752958201959082019060010161381d565b509495945050505050565b60208152600061106b6020830184613809565b6001600160a01b03811681146108be57600080fd5b60008060006040848603121561388157600080fd5b83356001600160401b0381111561389757600080fd5b6138a386828701613753565b90945092505060208401356138b781613857565b809150509250925092565b6000602082840312156138d457600080fd5b813561106b81613857565b60008060008060008060a087890312156138f857600080fd5b863561390381613857565b9550602087013561391381613857565b9450604087013561392381613857565b93506060870135925060808701356001600160401b038082111561394657600080fd5b818901915089601f83011261395a57600080fd5b81358181111561396957600080fd5b8a602082850101111561397b57600080fd5b6020830194508093505050509295509295509295565b600080604083850312156139a457600080fd5b82356139af81613857565b946020939093013593505050565b6000806000604084860312156139d257600080fd5b83356139dd81613857565b925060208401356001600160401b038111156139f857600080fd5b613a0486828701613753565b9497909650939450505050565b60008060208385031215613a2457600080fd5b82356001600160401b03811115613a3a57600080fd5b613a4685828601613753565b90969095509350505050565b60008060408385031215613a6557600080fd5b50508035926020909101359150565b600060208284031215613a8657600080fd5b5035919050565b60008060408385031215613aa057600080fd5b8235613aab81613857565b91506020830135613abb81613857565b809150509250929050565b600080600060608486031215613adb57600080fd5b8335613ae681613857565b92506020840135613af681613857565b929592945050506040919091013590565b80356010811061190f57600080fd5b60008060408385031215613b2957600080fd5b613aab83613b07565b600080600060608486031215613b4757600080fd5b8335613b5281613857565b95602085013595506040909401359392505050565b600080600080600060608688031215613b7f57600080fd5b85356001600160401b0380821115613b9657600080fd5b613ba289838a01613753565b90975095506020880135915080821115613bbb57600080fd5b50613bc888828901613753565b96999598509660400135949350505050565b600060208284031215613bec57600080fd5b61106b82613b07565b600080600060408486031215613c0a57600080fd5b83356001600160401b03811115613c2057600080fd5b613c2c86828701613753565b909790965060209590950135949350505050565b600080600080600060a08688031215613c5857600080fd5b8535613c6381613857565b97602087013597506040870135966060810135965060800135945092505050565b634e487b7160e01b600052602160045260246000fd5b60108110613caa57613caa613c84565b9052565b6001600160e01b03198416815260608101613ccc6020830185613c9a565b6001600160a01b03929092166040919091015292915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215613d7c57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610faf57610faf613daf565b81810381811115610faf57610faf613daf565b60208101610faf8284613c9a565b60208082528181018390526000908460408401835b86811015613e3c578235613e2181613857565b6001600160a01b031682529183019190830190600101613e0e565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613e885783516001600160a01b031683529284019291840191600101613e63565b50909695505050505050565b604051601f8201601f191681016001600160401b0381118282101715613ebc57613ebc613d83565b604052919050565b60006020808385031215613ed757600080fd5b82516001600160401b0380821115613eee57600080fd5b818501915085601f830112613f0257600080fd5b815181811115613f1457613f14613d83565b8060051b9150613f25848301613e94565b8181529183018401918481019088841115613f3f57600080fd5b938501935b83851015613f695784519250613f5983613857565b8282529385019390850190613f44565b98975050505050505050565b600060208284031215613f8757600080fd5b8151801515811461106b57600080fd5b600060208284031215613fa957600080fd5b815161106b81613857565b600060018060a01b0380871683526020818716818501528186166040850152608060608501528451915081608085015260005b828110156140035785810182015185820160a001528101613fe7565b5050600060a0828501015260a0601f19601f83011684010191505095945050505050565b8082028115828204841417610faf57610faf613daf565b60008261405b57634e487b7160e01b600052601260045260246000fd5b500490565b600060e0828403121561407257600080fd5b60405160e081018181106001600160401b038211171561409457614094613d83565b60405282516140a281613857565b815260208301516140b281613857565b602082015260408301516140c581613857565b604082015260608301516140d881613857565b806060830152506080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b6001600160e01b03198316815260408101600b831061412857614128613c84565b8260208301529392505050565b600081518084526020808501945080840160005b838110156138395781516001600160a01b031687529582019590820190600101614149565b6040815260006141816040830186614135565b82810360208401528381526001600160fb1b038411156141a057600080fd5b8360051b808660208401370160200195945050505050565b6000600182016141ca576141ca613daf565b5060010190565b60208152600061106b6020830184614135565b6060815260006141f76060830186614135565b82810360208401526142098186613809565b90508281036040840152610940818561380956fea264697066735822122090fdbda614b62a56948043c2abe8dea25a67ea1f784be48d20947d38199e602864736f6c63430008130033",
  "devdoc": {
    "errors": {
      "ErrAdminOfAnyActivePoolForbidden(address)": [
        {
          "details": "Error of admin of any active pool cannot delegate."
        }
      ],
      "ErrCannotInitTransferRON(address,string)": [
        {
          "details": "Error of cannot transfer RON to specified target."
        }
      ],
      "ErrCannotTransferRON()": [
        {
          "details": "Error of cannot transfer RON."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrDuplicated(bytes4)": [
        {
          "details": "Error thrown when a duplicated element is detected in an array.",
          "params": {
            "msgSig": "The function signature that invoke the error."
          }
        }
      ],
      "ErrInactivePool(address,address)": [
        {
          "details": "Error of querying inactive pool."
        }
      ],
      "ErrInsufficientBalance(bytes4,uint256,uint256)": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInsufficientDelegatingAmount()": [
        {
          "details": "Error of undelegating insufficient amount."
        }
      ],
      "ErrInsufficientStakingAmount()": [
        {
          "details": "Error of insufficient staking amount for unstaking."
        }
      ],
      "ErrInvalidArrays()": [
        {
          "details": "Error of length of input arrays are not of the same."
        }
      ],
      "ErrInvalidCommissionRate()": [
        {
          "details": "Error of setting commission rate exceeds max allowed."
        }
      ],
      "ErrInvalidPoolShare()": [
        {
          "details": "Error of invalid pool share."
        }
      ],
      "ErrOnlyPoolAdminAllowed()": [
        {
          "details": "Error of no one is allowed to call but the pool's admin."
        }
      ],
      "ErrPoolAdminForbidden()": [
        {
          "details": "Error of pool admin is not allowed to call."
        }
      ],
      "ErrRecipientRevert(bytes4)": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrStakingAmountLeft()": [
        {
          "details": "Error of invalid staking amount left after deducted."
        }
      ],
      "ErrThreeInteractionAddrsNotEqual()": [
        {
          "details": "Error of three interaction addresses must be of the same in applying for validator candidate."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUndelegateTooEarly()": [
        {
          "details": "Error of undelegating too early."
        }
      ],
      "ErrUndelegateZeroAmount()": [
        {
          "details": "Error of undelegating zero amount."
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrUnstakeTooEarly()": [
        {
          "details": "Error of unstaking too early."
        }
      ],
      "ErrUnstakeZeroAmount()": [
        {
          "details": "Error of unstaking zero amount."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ],
      "ErrZeroValue()": [
        {
          "details": "Error of receiving zero message value."
        }
      ]
    },
    "events": {
      "CommissionRateRangeUpdated(uint256,uint256)": {
        "details": "Emitted when the commission rate range is updated."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "CooldownSecsToUndelegateUpdated(uint256)": {
        "details": "Emitted when the minium number of seconds to undelegate is updated."
      },
      "Delegated(address,address,uint256)": {
        "details": "Emitted when the delegator staked for a validator candidate."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MinValidatorStakingAmountUpdated(uint256)": {
        "details": "Emitted when the minimum staking amount for being a validator is updated."
      },
      "PoolApproved(address,address)": {
        "details": "Emitted when the validator pool is approved."
      },
      "PoolSharesUpdated(uint256,address,uint256)": {
        "details": "Emitted when the pool shares are updated"
      },
      "PoolsDeprecated(address[])": {
        "details": "Emitted when the validator pool is deprecated."
      },
      "PoolsUpdateConflicted(uint256,address[])": {
        "details": "Emitted when the contract fails when updating the pools that already set"
      },
      "PoolsUpdateFailed(uint256,address[],uint256[])": {
        "details": "Emitted when the contract fails when updating the pools"
      },
      "PoolsUpdated(uint256,address[],uint256[],uint256[])": {
        "details": "Emitted when the pools are updated"
      },
      "RewardClaimed(address,address,uint256)": {
        "details": "Emitted when the user claimed their reward"
      },
      "Staked(address,uint256)": {
        "details": "Emitted when the pool admin staked for themself."
      },
      "StakingAmountDeductFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the staking amount deducted failed, e.g. when the validator gets slashed."
      },
      "StakingAmountTransferFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the staking amount transfer failed."
      },
      "Undelegated(address,address,uint256)": {
        "details": "Emitted when the delegator unstaked from a validator candidate."
      },
      "Unstaked(address,uint256)": {
        "details": "Emitted when the pool admin unstaked the amount of RON from themself."
      },
      "UserRewardUpdated(address,address,uint256)": {
        "details": "Emitted when the fields to calculate pending reward for the user is updated."
      },
      "WaitingSecsToRevokeUpdated(uint256)": {
        "details": "Emitted when the number of seconds that a candidate must wait to be revoked."
      }
    },
    "kind": "dev",
    "methods": {
      "applyValidatorCandidate(address,address,address,uint256,bytes)": {
        "details": "Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.",
        "params": {
          "candidateAdmin": "the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance."
        }
      },
      "bulkUndelegate(address[],uint256[])": {
        "details": "Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`."
      },
      "claimRewards(address[])": {
        "details": "Claims the reward of method caller. Emits the `RewardClaimed` event."
      },
      "cooldownSecsToUndelegate()": {
        "details": "Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated."
      },
      "delegate(address)": {
        "details": "Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event."
      },
      "delegateRewards(address[],address)": {
        "details": "Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event."
      },
      "execChangeAdminAddress(address,address)": {
        "details": "Requirements: - Only Profile contract can call this method."
      },
      "execDeductStakingAmount(address,uint256)": {
        "details": "Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller must be validator contract. Emits the event `Unstaked`."
      },
      "execDeprecatePools(address[],uint256)": {
        "details": "Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin."
      },
      "execRecordRewards(address[],uint256[],uint256)": {
        "details": "Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller must be validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending."
      },
      "getCommissionRateRange()": {
        "details": "Returns the commission rate range that the candidate can set."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getManySelfStakings(address[])": {
        "details": "Returns the self-staking amounts of the pools."
      },
      "getManySelfStakingsById(address[])": {
        "details": "Returns the self-staking amounts of the pools."
      },
      "getManyStakingAmounts(address[],address[])": {
        "details": "Returns the staking amounts of the users."
      },
      "getManyStakingTotals(address[])": {
        "details": "Returns the total staking amounts of all users for the pools `_poolAddrs`."
      },
      "getPoolAddressOf(address)": {
        "details": "Returns the consensus address corresponding to the pool admin."
      },
      "getPoolDetail(address)": {
        "details": "Returns the staking pool details."
      },
      "getReward(address,address)": {
        "details": "Returns the reward amount that user claimable."
      },
      "getRewards(address,address[])": {
        "details": "Returns the claimable reward of the user `_user`."
      },
      "getStakingAmount(address,address)": {
        "details": "Returns the staking amount of an user."
      },
      "getStakingTotal(address)": {
        "details": "Returns the total staking amount of all users for a pool."
      },
      "initialize(address,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "initializeV2()": {
        "details": "Initializes the contract storage V2."
      },
      "initializeV3(address)": {
        "details": "Initializes the contract storage V3."
      },
      "isAdminOfActivePool(address)": {
        "details": "Returns whether the `admin` is currently active."
      },
      "minValidatorStakingAmount()": {
        "details": "Returns the minimum threshold for being a validator candidate."
      },
      "redelegate(address,address,uint256)": {
        "details": "Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event."
      },
      "requestEmergencyExit(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestRenounce(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`."
      },
      "setCommissionRateRange(uint256,uint256)": {
        "details": "Sets the commission rate range that a candidate can set. Requirements: - The method caller is admin. Emits the `CommissionRateRangeUpdated` event."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setCooldownSecsToUndelegate(uint256)": {
        "details": "Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`."
      },
      "setMinValidatorStakingAmount(uint256)": {
        "details": "Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event."
      },
      "setWaitingSecsToRevoke(uint256)": {
        "details": "Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`."
      },
      "stake(address)": {
        "details": "Self-delegates to the validator candidate `consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`."
      },
      "undelegate(address,uint256)": {
        "details": "Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event."
      },
      "unstake(address,uint256)": {
        "details": "Unstakes from the validator candidate `consensusAddr` for `amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`."
      },
      "waitingSecsToRevoke()": {
        "details": "Returns the number of seconds that a candidate must wait for the renounce request gets affected."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1387,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 25671,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_accumulatedRps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)7612_storage))"
      },
      {
        "astId": 25679,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_userReward",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)8442_storage))"
      },
      {
        "astId": 25685,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_stakingPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolFields)8448_storage)"
      },
      {
        "astId": 25690,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 31444,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 23480,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_poolDetail",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_struct(PoolDetail)8008_storage)"
      },
      {
        "astId": 23483,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_cooldownSecsToUndelegate",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 23486,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_waitingSecsToRevoke",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 23491,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_adminOfActivePoolMapping",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 23496,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 24237,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_minValidatorStakingAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 24240,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_maxCommissionRate",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 24243,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_minCommissionRate",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 24248,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "111",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 25069,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1124,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initialized",
        "offset": 0,
        "slot": "209",
        "type": "t_uint8"
      },
      {
        "astId": 1127,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initializing",
        "offset": 1,
        "slot": "209",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)8442_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IRewardPool.UserRewardFields))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserRewardFields)8442_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)7612_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PeriodWrapper)7612_storage)"
      },
      "t_mapping(t_address,t_struct(PoolDetail)8008_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBaseStaking.PoolDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolDetail)8008_storage"
      },
      "t_mapping(t_address,t_struct(PoolFields)8448_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.PoolFields)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolFields)8448_storage"
      },
      "t_mapping(t_address,t_struct(UserRewardFields)8442_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.UserRewardFields)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRewardFields)8442_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PeriodWrapper)7612_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodWrapper)7612_storage"
      },
      "t_struct(PeriodWrapper)7612_storage": {
        "encoding": "inplace",
        "label": "struct PeriodWrapperConsumer.PeriodWrapper",
        "members": [
          {
            "astId": 7609,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "inner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7611,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolDetail)8008_storage": {
        "encoding": "inplace",
        "label": "struct IBaseStaking.PoolDetail",
        "members": [
          {
            "astId": 7988,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "pid",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7991,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "__shadowedPoolAdmin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7994,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7997,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingTotal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8002,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "delegatingAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 8007,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastDelegatingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PoolFields)8448_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.PoolFields",
        "members": [
          {
            "astId": 8444,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8447,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PeriodWrapper)7612_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserRewardFields)8442_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.UserRewardFields",
        "members": [
          {
            "astId": 8435,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "debited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8437,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8439,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lowestAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8441,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}