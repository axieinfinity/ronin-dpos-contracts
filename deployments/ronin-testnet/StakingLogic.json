{
  "address": "0x851eC2f96867486EF6cc85BAcDc151fBE9055b55",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "ErrAdminOfAnyActivePoolForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeValidatorContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "extraInfo",
          "type": "string"
        }
      ],
      "name": "ErrCannotInitTransferRON",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCannotTransferRON",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        }
      ],
      "name": "ErrInactivePool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientDelegatingAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientStakingAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidArrays",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidCommissionRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidPoolShare",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrOnlyPoolAdminAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrPoolAdminForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrRecipientRevert",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrStakingAmountLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrThreeInteractionAddrsNotEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrThreeOperationAddrsNotDistinct",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUndelegateTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUndelegateZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnstakeTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnstakeZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minSecs",
          "type": "uint256"
        }
      ],
      "name": "CooldownSecsToUndelegateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRate",
          "type": "uint256"
        }
      ],
      "name": "MaxCommissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "MinValidatorStakingAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "PoolApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PoolSharesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "validator",
          "type": "address[]"
        }
      ],
      "name": "PoolsDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        }
      ],
      "name": "PoolsUpdateConflicted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "name": "PoolsUpdateFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "aRps",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "PoolsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountDeductFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debited",
          "type": "uint256"
        }
      ],
      "name": "UserRewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secs",
          "type": "uint256"
        }
      ],
      "name": "WaitingSecsToRevokeUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "applyValidatorCandidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "bulkUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrList",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownSecsToUndelegate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrList",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_consensusAddrDst",
          "type": "address"
        }
      ],
      "name": "delegateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "execDeductStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_actualDeductingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        }
      ],
      "name": "execDeprecatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "execRecordRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "getManySelfStakings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_selfStakings",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_poolAddrs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_userList",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_poolList",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingTotals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAdminAddr",
          "type": "address"
        }
      ],
      "name": "getPoolAddressOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        }
      ],
      "name": "getPoolDetail",
      "outputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_poolAddrList",
          "type": "address[]"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        }
      ],
      "name": "getStakingTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__minValidatorStakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxCommissionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__cooldownSecsToUndelegate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__waitingSecsToRevoke",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAdminAddr",
          "type": "address"
        }
      ],
      "name": "isAdminOfActivePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCommissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minValidatorStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddrSrc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddrDst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "requestEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "requestRenounce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_effectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "requestUpdateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cooldownSecs",
          "type": "uint256"
        }
      ],
      "name": "setCooldownSecsToUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setMinValidatorStakingAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_secs",
          "type": "uint256"
        }
      ],
      "name": "setWaitingSecsToRevoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "undelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waitingSecsToRevoke",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5ccbeb37b1b66c23a0b7c0fee2e790d0888fc5a51b5fffd6693515c322acfde2",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x851eC2f96867486EF6cc85BAcDc151fBE9055b55",
    "transactionIndex": 1,
    "gasUsed": "3324144",
    "logsBloom": "0x
    "blockHash": "0xac5764cd57ffcbbd834f3acf6f55c729953a2be651589bb7d504c37c85b69197",
    "transactionHash": "0x5ccbeb37b1b66c23a0b7c0fee2e790d0888fc5a51b5fffd6693515c322acfde2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14861152,
        "transactionHash": "0x5ccbeb37b1b66c23a0b7c0fee2e790d0888fc5a51b5fffd6693515c322acfde2",
        "address": "0x851eC2f96867486EF6cc85BAcDc151fBE9055b55",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 6,
        "blockHash": "0xac5764cd57ffcbbd834f3acf6f55c729953a2be651589bb7d504c37c85b69197"
      }
    ],
    "blockNumber": 14861152,
    "cumulativeGasUsed": "3698110",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "496d5ba113d6511f02e611e47b8a6065",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ErrAdminOfAnyActivePoolForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeValidatorContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"}],\"name\":\"ErrCannotInitTransferRON\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCannotTransferRON\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"ErrInactivePool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientDelegatingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientStakingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidPoolShare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrOnlyPoolAdminAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrPoolAdminForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrStakingAmountLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrThreeInteractionAddrsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrThreeOperationAddrsNotDistinct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUndelegateTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUndelegateZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnstakeTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnstakeZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSecs\",\"type\":\"uint256\"}],\"name\":\"CooldownSecsToUndelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"}],\"name\":\"MaxCommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MinValidatorStakingAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"PoolApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PoolSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validator\",\"type\":\"address[]\"}],\"name\":\"PoolsDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"}],\"name\":\"PoolsUpdateConflicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdateFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"aRps\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountDeductFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debited\",\"type\":\"uint256\"}],\"name\":\"UserRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"WaitingSecsToRevokeUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"applyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrList\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSecsToUndelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_consensusAddrDst\",\"type\":\"address\"}],\"name\":\"delegateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"execDeductStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualDeductingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"execDeprecatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"execRecordRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"getManySelfStakings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_selfStakings\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolAddrs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_userList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingTotals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAdminAddr\",\"type\":\"address\"}],\"name\":\"getPoolAddressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"name\":\"getPoolDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_poolAddrList\",\"type\":\"address[]\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"name\":\"getStakingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__minValidatorStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxCommissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__cooldownSecsToUndelegate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__waitingSecsToRevoke\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAdminAddr\",\"type\":\"address\"}],\"name\":\"isAdminOfActivePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValidatorStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddrSrc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddrDst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"requestEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"requestRenounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"requestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownSecs\",\"type\":\"uint256\"}],\"name\":\"setCooldownSecsToUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRate\",\"type\":\"uint256\"}],\"name\":\"setMaxCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setMinValidatorStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"setWaitingSecsToRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitingSecsToRevoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAdminOfAnyActivePoolForbidden(address)\":[{\"details\":\"Error of admin of any active pool cannot delegate.\"}],\"ErrCallerMustBeValidatorContract()\":[{\"details\":\"Error of method caller must be validator contract.\"}],\"ErrCannotInitTransferRON(address,string)\":[{\"details\":\"Error of cannot transfer RON to specified target.\"}],\"ErrCannotTransferRON()\":[{\"details\":\"Error of cannot transfer RON.\"}],\"ErrInactivePool(address)\":[{\"details\":\"Error of querying inactive pool.\"}],\"ErrInsufficientBalance()\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInsufficientDelegatingAmount()\":[{\"details\":\"Error of undelegating insufficient amount.\"}],\"ErrInsufficientStakingAmount()\":[{\"details\":\"Error of insufficient staking amount for unstaking.\"}],\"ErrInvalidArrays()\":[{\"details\":\"Error of length of input arrays are not of the same.\"}],\"ErrInvalidCommissionRate()\":[{\"details\":\"Error of setting commission rate exceeds max allowed.\"}],\"ErrInvalidPoolShare()\":[{\"details\":\"Error of invalid pool share.\"}],\"ErrOnlyPoolAdminAllowed()\":[{\"details\":\"Error of no one is allowed to call but the pool's admin.\"}],\"ErrPoolAdminForbidden()\":[{\"details\":\"Error of pool admin is not allowed to call.\"}],\"ErrRecipientRevert()\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrStakingAmountLeft()\":[{\"details\":\"Error of invalid staking amount left after deducted.\"}],\"ErrThreeInteractionAddrsNotEqual()\":[{\"details\":\"Error of three interaction addresses must be of the same in applying for validator candidate.\"}],\"ErrThreeOperationAddrsNotDistinct()\":[{\"details\":\"Error of three operation addresses must be distinct in applying for validator candidate.\"}],\"ErrUndelegateTooEarly()\":[{\"details\":\"Error of undelegating too early.\"}],\"ErrUndelegateZeroAmount()\":[{\"details\":\"Error of undelegating zero amount.\"}],\"ErrUnstakeTooEarly()\":[{\"details\":\"Error of unstaking too early.\"}],\"ErrUnstakeZeroAmount()\":[{\"details\":\"Error of unstaking zero amount.\"}],\"ErrZeroCodeContract()\":[{\"details\":\"Error of set to non-contract.\"}],\"ErrZeroValue()\":[{\"details\":\"Error of receiving zero message value.\"}]},\"kind\":\"dev\",\"methods\":{\"applyValidatorCandidate(address,address,address,address,uint256)\":{\"details\":\"Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.\",\"params\":{\"_candidateAdmin\":\"the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance.\"}},\"bulkUndelegate(address[],uint256[])\":{\"details\":\"Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`.\"},\"claimRewards(address[])\":{\"details\":\"Claims the reward of method caller. Emits the `RewardClaimed` event.\"},\"cooldownSecsToUndelegate()\":{\"details\":\"Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\"},\"delegate(address)\":{\"details\":\"Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event.\"},\"delegateRewards(address[],address)\":{\"details\":\"Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event.\"},\"execDeductStakingAmount(address,uint256)\":{\"details\":\"Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller must be validator contract. Emits the event `Unstaked`.\"},\"execDeprecatePools(address[],uint256)\":{\"details\":\"Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\"},\"execRecordRewards(address[],uint256[],uint256)\":{\"details\":\"Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller must be validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending.\"},\"getManySelfStakings(address[])\":{\"details\":\"Returns the self-staking amounts of the pools.\"},\"getManyStakingAmounts(address[],address[])\":{\"details\":\"Returns the staking amounts of the users.\"},\"getManyStakingTotals(address[])\":{\"details\":\"Returns the total staking amounts of all users for the pools `_poolAddrs`.\"},\"getPoolAddressOf(address)\":{\"details\":\"Returns the consensus address corresponding to the pool admin.\"},\"getPoolDetail(address)\":{\"details\":\"Returns the staking pool detail.\"},\"getReward(address,address)\":{\"details\":\"Returns the reward amount that user claimable.\"},\"getRewards(address,address[])\":{\"details\":\"Returns the claimable reward of the user `_user`.\"},\"getStakingAmount(address,address)\":{\"details\":\"Returns the staking amount of an user.\"},\"getStakingTotal(address)\":{\"details\":\"Returns the total staking amount of all users for a pool.\"},\"initialize(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"isAdminOfActivePool(address)\":{\"details\":\"Returns whether the `_poolAdminAddr` is currently active.\"},\"maxCommissionRate()\":{\"details\":\"Returns the max commission rate that the candidate can set.\"},\"minValidatorStakingAmount()\":{\"details\":\"Returns the minimum threshold for being a validator candidate.\"},\"redelegate(address,address,uint256)\":{\"details\":\"Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event.\"},\"requestEmergencyExit(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestRenounce(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`.\"},\"setCooldownSecsToUndelegate(uint256)\":{\"details\":\"Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`.\"},\"setMaxCommissionRate(uint256)\":{\"details\":\"Sets the max commission rate that a candidate can set. Requirements: - The method caller is admin. Emits the `MaxCommissionRateUpdated` event.\"},\"setMinValidatorStakingAmount(uint256)\":{\"details\":\"Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event.\"},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"setWaitingSecsToRevoke(uint256)\":{\"details\":\"Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`.\"},\"stake(address)\":{\"details\":\"Self-delegates to the validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`.\"},\"undelegate(address,uint256)\":{\"details\":\"Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event.\"},\"unstake(address,uint256)\":{\"details\":\"Unstakes from the validator candidate `_consensusAddr` for `_amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"},\"waitingSecsToRevoke()\":{\"details\":\"Returns the number of seconds that a candidate must wait for the renounce request gets affected.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/staking/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert();\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance();\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable _recipient, uint256 _amount) internal {\\n    if (!_sendRON(_recipient, _amount)) revert ErrRecipientRevert();\\n  }\\n\\n  /**\\n   * @dev Send `_amount` RON to the address `_recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    if (address(this).balance < _amount) revert ErrInsufficientBalance();\\n    return _unsafeSendRON(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `_amount` RON to the address `_recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRON(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRON(\\n    address payable _recipient,\\n    uint256 _amount,\\n    uint256 _gas\\n  ) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount, gas: _gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xbf47d40b2431cf190fa737b803e4cb6fb55aee3f8804470da57a9e340f7914f8\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    if (validatorContract() != msg.sender) revert ErrCallerMustBeValidatorContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xf0a7c4c2165ede118c6ba219ee1a20d293d94049b18aa6fc86a2c48661eb654d\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasContract {\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract();\\n}\\n\",\"keccak256\":\"0x8a17785d841137fcae5b5d542f1714de0492c85b54ca074f0b9c1c490ad3f342\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasValidatorContract is IHasContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /// @dev Error of method caller must be validator contract.\\n  error ErrCallerMustBeValidatorContract();\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0x35a715f123b0c5dc296d13583f946bef4e485201e122b5170988a7535f114559\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    // Address of the pool i.e. consensus address of the validator\\n    address addr;\\n    // Pool admin address\\n    address admin;\\n    // Self-staking amount\\n    uint256 stakingAmount;\\n    // Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    // Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    // Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(address poolAddr);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `_poolAdminAddr` is currently active.\\n   */\\n  function isAdminOfActivePool(address _poolAdminAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address _poolAdminAddr) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool detail.\\n   */\\n  function getPoolDetail(address)\\n    external\\n    view\\n    returns (\\n      address _admin,\\n      uint256 _stakingAmount,\\n      uint256 _stakingTotal\\n    );\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(address[] calldata) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external;\\n}\\n\",\"keccak256\":\"0x008b3d42a3104820de7b7edb5ea4b21c75d4417767fc0791f89f00ac9a2cce8d\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the max commission rate is updated.\\n  event MaxCommissionRateUpdated(uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed validator, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] validator);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed validator,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed validator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of three operation addresses must be distinct in applying for validator candidate.\\n  error ErrThreeOperationAddrsNotDistinct();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max commission rate that the candidate can set.\\n   */\\n  function maxCommissionRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the max commission rate that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxCommissionRateUpdated` event.\\n   *\\n   */\\n  function setMaxCommissionRate(uint256 _maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param _candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata _pools, uint256 _period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x4160e8b8dc00df59a35823589d69dcbf5655d7024f5d8e17e823e243ffb44b9d\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(address _user, address[] calldata _poolAddrList)\\n    external\\n    view\\n    returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList) external returns (uint256 _amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(address[] calldata _consensusAddrList, address _consensusAddrDst)\\n    external\\n    returns (uint256 _amount);\\n}\\n\",\"keccak256\":\"0x5ce840a920ed06139f9e33d306c8ee50b2a81e4bd2ac6ed24b47297c348576b8\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolAddr, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolAddr, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolAddr, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolAddrs, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolAddrs, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolAddrs);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(address[] calldata _poolAddrs, address[] calldata _userList)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(address _poolAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `_poolAddrs`.\\n   */\\n  function getManyStakingTotals(address[] calldata _poolAddrs) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x92315ca9d6d93f55a7752adf2567adb86745f708198bfcd74b9a626b6570208f\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking {\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address _consensusAddr, uint256 _amount)\\n    external\\n    returns (uint256 _actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xb7942c5032c16ea567ac0bfc07ecacd84840d6de134735ea538aa22fc6da05a5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xc382bd50ca507308ec23826308bc9ff0a22cfb9b3fcd09c7ac7a63c37729d33e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xe4060b7e3b04a0043bd334011fe4ba67c990b0484dad52d7f14b35040989b6ab\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  // Error thrown when receives RON from neither staking vesting contract nor staking contract\\\"\\n  error ErrUnauthorizedReceiveRON();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0x4e81a61359a3f8bcc9d452615e3df7b0d0201823ce88f763530ddd4f00c2fc48\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the current period.\\n   */\\n\\n  function checkBridgeRewardDeprecated(address _consensusAddr) external view returns (bool _result);\\n}\\n\",\"keccak256\":\"0x853e7d0ac33ad868721733fc2ab4b78f2e613973a579eb0ea485cbdaa750e057\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /// @dev Error of number of prioritized greater than number of max validators.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the bridge operator list corresponding to validator address list.\\n   */\\n  function getBridgeOperatorsOf(address[] memory _validatorAddrs) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xbd10b0207a749e3a7a2aadcb6e93784cb17343a5266d056a3d0b79acb7c5c93d\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    for (uint256 i = 0; i < A.length - 1; i++) {\\n      for (uint256 j = i + 1; j < A.length; j++) {\\n        if (A[i] == A[j]) {\\n          return true;\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool) {\\n    bytes32 _thisHash;\\n    bytes32 _otherHash;\\n\\n    assembly {\\n      _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n    }\\n\\n    return _thisHash == _otherHash;\\n  }\\n}\\n\",\"keccak256\":\"0xea4ac2b0783926a0e6ae257bc069fa37ea864ce77bfb25dd327d4727a38ad0ea\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - min(a, b);\\n  }\\n}\\n\",\"keccak256\":\"0xa9e2a3ad43d7999a3cdbfb040b0f2dec282eae91ff8fe6ad26fdd19087121ce7\",\"license\":\"UNLICENSED\"},\"contracts/ronin/staking/BaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/staking/IBaseStaking.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"./RewardCalculation.sol\\\";\\n\\nabstract contract BaseStaking is\\n  RONTransferHelper,\\n  ReentrancyGuard,\\n  RewardCalculation,\\n  HasValidatorContract,\\n  IBaseStaking\\n{\\n  /// @dev Mapping from pool address => staking pool detail\\n  mapping(address => PoolDetail) internal _stakingPool;\\n\\n  /// @dev The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n  uint256 internal _cooldownSecsToUndelegate;\\n  /// @dev The number of seconds that a candidate must wait to be revoked and take the self-staking amount back.\\n  uint256 internal _waitingSecsToRevoke;\\n\\n  /// @dev Mapping from admin address of an active pool => consensus address.\\n  mapping(address => address) internal _adminOfActivePoolMapping;\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  modifier noEmptyValue() {\\n    if (msg.value == 0) revert ErrZeroValue();\\n    _;\\n  }\\n\\n  modifier notPoolAdmin(PoolDetail storage _pool, address _delegator) {\\n    if (_pool.admin == _delegator) revert ErrPoolAdminForbidden();\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin(PoolDetail storage _pool, address _requester) {\\n    if (_pool.admin != _requester) revert ErrOnlyPoolAdminAllowed();\\n    _;\\n  }\\n\\n  modifier poolIsActive(address _poolAddr) {\\n    if (!_validatorContract.isValidatorCandidate(_poolAddr)) revert ErrInactivePool(_poolAddr);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function isAdminOfActivePool(address _poolAdminAddr) public view override returns (bool) {\\n    return _adminOfActivePoolMapping[_poolAdminAddr] != address(0);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getPoolAddressOf(address _poolAdminAddr) external view override returns (address) {\\n    return _adminOfActivePoolMapping[_poolAdminAddr];\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getPoolDetail(address _poolAddr)\\n    external\\n    view\\n    returns (\\n      address _admin,\\n      uint256 _stakingAmount,\\n      uint256 _stakingTotal\\n    )\\n  {\\n    PoolDetail storage _pool = _stakingPool[_poolAddr];\\n    return (_pool.admin, _pool.stakingAmount, _pool.stakingTotal);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getManySelfStakings(address[] calldata _pools) external view returns (uint256[] memory _selfStakings) {\\n    _selfStakings = new uint256[](_pools.length);\\n    for (uint _i = 0; _i < _pools.length; _i++) {\\n      _selfStakings[_i] = _stakingPool[_pools[_i]].stakingAmount;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingTotal(address _poolAddr) public view override returns (uint256) {\\n    return _stakingPool[_poolAddr].stakingTotal;\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingTotals(address[] calldata _poolList)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory _stakingAmounts)\\n  {\\n    _stakingAmounts = new uint256[](_poolList.length);\\n    for (uint _i = 0; _i < _poolList.length; _i++) {\\n      _stakingAmounts[_i] = getStakingTotal(_poolList[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) public view override returns (uint256) {\\n    return _stakingPool[_poolAddr].delegatingAmount[_user];\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingAmounts(address[] calldata _poolAddrs, address[] calldata _userList)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory _stakingAmounts)\\n  {\\n    if (_poolAddrs.length != _userList.length) revert ErrInvalidArrays();\\n    _stakingAmounts = new uint256[](_poolAddrs.length);\\n    for (uint _i = 0; _i < _stakingAmounts.length; _i++) {\\n      _stakingAmounts[_i] = _stakingPool[_poolAddrs[_i]].delegatingAmount[_userList[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256) {\\n    return _cooldownSecsToUndelegate;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256) {\\n    return _waitingSecsToRevoke;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external override onlyAdmin {\\n    _setCooldownSecsToUndelegate(_cooldownSecs);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external override onlyAdmin {\\n    _setWaitingSecsToRevoke(_secs);\\n  }\\n\\n  /**\\n   * @dev Sets the minium number of seconds to undelegate.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function _setCooldownSecsToUndelegate(uint256 _cooldownSecs) internal {\\n    _cooldownSecsToUndelegate = _cooldownSecs;\\n    emit CooldownSecsToUndelegateUpdated(_cooldownSecs);\\n  }\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function _setWaitingSecsToRevoke(uint256 _secs) internal {\\n    _waitingSecsToRevoke = _secs;\\n    emit WaitingSecsToRevokeUpdated(_secs);\\n  }\\n\\n  /**\\n   * @dev Changes the delegate amount.\\n   */\\n  function _changeDelegatingAmount(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _newDelegatingAmount,\\n    uint256 _newStakingTotal\\n  ) internal {\\n    _syncUserReward(_pool.addr, _delegator, _newDelegatingAmount);\\n    _pool.stakingTotal = _newStakingTotal;\\n    _pool.delegatingAmount[_delegator] = _newDelegatingAmount;\\n  }\\n}\\n\",\"keccak256\":\"0xdf7889af5ad6b206a2d4eceb8947fcc26f90b7c8411806ec76eb19bc3363afd0\",\"license\":\"MIT\"},\"contracts/ronin/staking/CandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../libraries/AddressArrayUtils.sol\\\";\\nimport \\\"../../interfaces/staking/ICandidateStaking.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract CandidateStaking is BaseStaking, ICandidateStaking, PercentageConsumer {\\n  /// @dev The minimum threshold for being a validator candidate.\\n  uint256 internal _minValidatorStakingAmount;\\n\\n  /// @dev The max commission rate that the validator can set (in range of [0;100_00] means [0-100%])\\n  uint256 internal _maxCommissionRate;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function minValidatorStakingAmount() public view override returns (uint256) {\\n    return _minValidatorStakingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function maxCommissionRate() external view override returns (uint256) {\\n    return _maxCommissionRate;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setMinValidatorStakingAmount(uint256 _threshold) external override onlyAdmin {\\n    _setMinValidatorStakingAmount(_threshold);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setMaxCommissionRate(uint256 _maxRate) external override onlyAdmin {\\n    _setMaxCommissionRate(_maxRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable override nonReentrant {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    if (_commissionRate > _maxCommissionRate) revert ErrInvalidCommissionRate();\\n\\n    uint256 _amount = msg.value;\\n    address payable _poolAdmin = payable(msg.sender);\\n    _applyValidatorCandidate(\\n      _poolAdmin,\\n      _candidateAdmin,\\n      _consensusAddr,\\n      _treasuryAddr,\\n      _bridgeOperatorAddr,\\n      _commissionRate,\\n      _amount\\n    );\\n\\n    PoolDetail storage _pool = _stakingPool[_consensusAddr];\\n    _pool.admin = _poolAdmin;\\n    _pool.addr = _consensusAddr;\\n    _adminOfActivePoolMapping[_poolAdmin] = _consensusAddr;\\n\\n    _stake(_stakingPool[_consensusAddr], _poolAdmin, _amount);\\n    emit PoolApproved(_consensusAddr, _poolAdmin);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external override poolIsActive(_consensusAddr) onlyPoolAdmin(_stakingPool[_consensusAddr], msg.sender) {\\n    if (_commissionRate > _maxCommissionRate) revert ErrInvalidCommissionRate();\\n    _validatorContract.execRequestUpdateCommissionRate(_consensusAddr, _effectiveDaysOnwards, _commissionRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function execDeprecatePools(address[] calldata _pools, uint256 _newPeriod) external override onlyValidatorContract {\\n    if (_pools.length == 0) {\\n      return;\\n    }\\n\\n    for (uint _i = 0; _i < _pools.length; _i++) {\\n      PoolDetail storage _pool = _stakingPool[_pools[_i]];\\n      // Deactivate the pool admin in the active mapping.\\n      delete _adminOfActivePoolMapping[_pool.admin];\\n\\n      // Deduct and transfer the self staking amount to the pool admin.\\n      uint256 _deductingAmount = _pool.stakingAmount;\\n      if (_deductingAmount > 0) {\\n        _deductStakingAmount(_pool, _deductingAmount);\\n        if (!_unsafeSendRON(payable(_pool.admin), _deductingAmount, 3500)) {\\n          emit StakingAmountTransferFailed(_pool.addr, _pool.admin, _deductingAmount, address(this).balance);\\n        }\\n      }\\n\\n      // Settle the unclaimed reward and transfer to the pool admin.\\n      uint256 _lastRewardAmount = _claimReward(_pools[_i], _pool.admin, _newPeriod);\\n      if (_lastRewardAmount > 0) {\\n        _unsafeSendRON(payable(_pool.admin), _lastRewardAmount, 3500);\\n      }\\n    }\\n\\n    emit PoolsDeprecated(_pools);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function stake(address _consensusAddr) external payable override noEmptyValue poolIsActive(_consensusAddr) {\\n    _stake(_stakingPool[_consensusAddr], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount)\\n    external\\n    override\\n    nonReentrant\\n    poolIsActive(_consensusAddr)\\n  {\\n    if (_amount == 0) revert ErrUnstakeZeroAmount();\\n    address _requester = msg.sender;\\n    PoolDetail storage _pool = _stakingPool[_consensusAddr];\\n    uint256 _remainAmount = _pool.stakingAmount - _amount;\\n    if (_remainAmount < _minValidatorStakingAmount) revert ErrStakingAmountLeft();\\n\\n    _unstake(_pool, _requester, _amount);\\n    if (!_unsafeSendRON(payable(_requester), _amount, 3500)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestRenounce(address _consensusAddr)\\n    external\\n    override\\n    poolIsActive(_consensusAddr)\\n    onlyPoolAdmin(_stakingPool[_consensusAddr], msg.sender)\\n  {\\n    _validatorContract.execRequestRenounceCandidate(_consensusAddr, _waitingSecsToRevoke);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestEmergencyExit(address _consensusAddr)\\n    external\\n    override\\n    poolIsActive(_consensusAddr)\\n    onlyPoolAdmin(_stakingPool[_consensusAddr], msg.sender)\\n  {\\n    _validatorContract.execEmergencyExit(_consensusAddr, _waitingSecsToRevoke);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-applyValidatorCandidate`\\n   */\\n  function _applyValidatorCandidate(\\n    address payable _poolAdmin,\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate,\\n    uint256 _amount\\n  ) internal {\\n    if (!_unsafeSendRON(_poolAdmin, 0)) revert ErrCannotInitTransferRON(_poolAdmin, \\\"pool admin\\\");\\n    if (!_unsafeSendRON(_treasuryAddr, 0)) revert ErrCannotInitTransferRON(_treasuryAddr, \\\"treasury\\\");\\n    if (_amount < _minValidatorStakingAmount) revert ErrInsufficientStakingAmount();\\n    if (_commissionRate > _maxCommissionRate) revert ErrInvalidCommissionRate();\\n\\n    if (_poolAdmin != _candidateAdmin || _candidateAdmin != _treasuryAddr) revert ErrThreeInteractionAddrsNotEqual();\\n\\n    address[] memory _diffAddrs = new address[](3);\\n    _diffAddrs[0] = _poolAdmin;\\n    _diffAddrs[1] = _consensusAddr;\\n    _diffAddrs[2] = _bridgeOperatorAddr;\\n    if (AddressArrayUtils.hasDuplicate(_diffAddrs)) revert ErrThreeOperationAddrsNotDistinct();\\n\\n    _validatorContract.execApplyValidatorCandidate(\\n      _candidateAdmin,\\n      _consensusAddr,\\n      _treasuryAddr,\\n      _bridgeOperatorAddr,\\n      _commissionRate\\n    );\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-stake`\\n   */\\n  function _stake(\\n    PoolDetail storage _pool,\\n    address _requester,\\n    uint256 _amount\\n  ) internal onlyPoolAdmin(_pool, _requester) {\\n    _pool.stakingAmount += _amount;\\n    _changeDelegatingAmount(_pool, _requester, _pool.stakingAmount, _pool.stakingTotal + _amount);\\n    _pool.lastDelegatingTimestamp[_requester] = block.timestamp;\\n    emit Staked(_pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-unstake`\\n   */\\n  function _unstake(\\n    PoolDetail storage _pool,\\n    address _requester,\\n    uint256 _amount\\n  ) internal onlyPoolAdmin(_pool, _requester) {\\n    if (_amount > _pool.stakingAmount) revert ErrInsufficientStakingAmount();\\n    if (_pool.lastDelegatingTimestamp[_requester] + _cooldownSecsToUndelegate > block.timestamp) {\\n      revert ErrUnstakeTooEarly();\\n    }\\n\\n    _pool.stakingAmount -= _amount;\\n    _changeDelegatingAmount(_pool, _requester, _pool.stakingAmount, _pool.stakingTotal - _amount);\\n    emit Unstaked(_pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   * @return The actual deducted amount\\n   */\\n  function _deductStakingAmount(PoolDetail storage _pool, uint256 _amount) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function _setMinValidatorStakingAmount(uint256 _threshold) internal {\\n    _minValidatorStakingAmount = _threshold;\\n    emit MinValidatorStakingAmountUpdated(_threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the max commission rate that a candidate can set.\\n   *\\n   * Emits the `MaxCommissionRateUpdated` event.\\n   *\\n   */\\n  function _setMaxCommissionRate(uint256 _maxRate) internal {\\n    if (_maxRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n    _maxCommissionRate = _maxRate;\\n    emit MaxCommissionRateUpdated(_maxRate);\\n  }\\n}\\n\",\"keccak256\":\"0x8d9a2911b458fed374b9a6d0a56b1831024d9b04f5c383741a7168fdc27c5a84\",\"license\":\"MIT\"},\"contracts/ronin/staking/DelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IDelegatorStaking.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract DelegatorStaking is BaseStaking, IDelegatorStaking {\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegate(address _consensusAddr) external payable noEmptyValue poolIsActive(_consensusAddr) {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    _delegate(_stakingPool[_consensusAddr], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external nonReentrant {\\n    address payable _delegator = payable(msg.sender);\\n    _undelegate(_stakingPool[_consensusAddr], _delegator, _amount);\\n    if (!_sendRON(_delegator, _amount)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external nonReentrant {\\n    if (_consensusAddrs.length == 0 || _consensusAddrs.length != _amounts.length) revert ErrInvalidArrays();\\n\\n    address payable _delegator = payable(msg.sender);\\n    uint256 _total;\\n\\n    for (uint _i = 0; _i < _consensusAddrs.length; _i++) {\\n      _total += _amounts[_i];\\n      _undelegate(_stakingPool[_consensusAddrs[_i]], _delegator, _amounts[_i]);\\n    }\\n\\n    if (!_sendRON(_delegator, _total)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external nonReentrant poolIsActive(_consensusAddrDst) {\\n    address _delegator = msg.sender;\\n    _undelegate(_stakingPool[_consensusAddrSrc], _delegator, _amount);\\n    _delegate(_stakingPool[_consensusAddrDst], _delegator, _amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 _amount)\\n  {\\n    _amount = _claimRewards(msg.sender, _consensusAddrList);\\n    _transferRON(payable(msg.sender), _amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegateRewards(address[] calldata _consensusAddrList, address _consensusAddrDst)\\n    external\\n    override\\n    nonReentrant\\n    poolIsActive(_consensusAddrDst)\\n    returns (uint256 _amount)\\n  {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    return _delegateRewards(msg.sender, _consensusAddrList, _consensusAddrDst);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function getRewards(address _user, address[] calldata _poolAddrList)\\n    external\\n    view\\n    returns (uint256[] memory _rewards)\\n  {\\n    address _consensusAddr;\\n    uint256 _period = _validatorContract.currentPeriod();\\n    _rewards = new uint256[](_poolAddrList.length);\\n\\n    for (uint256 _i = 0; _i < _poolAddrList.length; _i++) {\\n      _consensusAddr = _poolAddrList[_i];\\n      _rewards[_i] = _getReward(_consensusAddr, _user, _period, getStakingAmount(_consensusAddr, _user));\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   * Note: This function does not verify the `msg.value` with the amount.\\n   *\\n   */\\n  function _delegate(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _amount\\n  ) internal notPoolAdmin(_pool, _delegator) {\\n    _changeDelegatingAmount(\\n      _pool,\\n      _delegator,\\n      _pool.delegatingAmount[_delegator] + _amount,\\n      _pool.stakingTotal + _amount\\n    );\\n    _pool.lastDelegatingTimestamp[_delegator] = block.timestamp;\\n    emit Delegated(_delegator, _pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Undelegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   * - The amount is larger than 0.\\n   * - The delegating amount is larger than or equal to the undelegating amount.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   * Note: Consider transferring back the amount of RON after calling this function.\\n   *\\n   */\\n  function _undelegate(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _amount\\n  ) private notPoolAdmin(_pool, _delegator) {\\n    if (_amount == 0) revert ErrUndelegateZeroAmount();\\n    if (_pool.delegatingAmount[_delegator] < _amount) revert ErrInsufficientDelegatingAmount();\\n    if (_pool.lastDelegatingTimestamp[_delegator] + _cooldownSecsToUndelegate >= block.timestamp) {\\n      revert ErrUndelegateTooEarly();\\n    }\\n\\n    _changeDelegatingAmount(\\n      _pool,\\n      _delegator,\\n      _pool.delegatingAmount[_delegator] - _amount,\\n      _pool.stakingTotal - _amount\\n    );\\n    emit Undelegated(_delegator, _pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Claims rewards from the pools `_poolAddrList`.\\n   * Note: This function does not transfer reward to user.\\n   */\\n  function _claimRewards(address _user, address[] memory _poolAddrList) internal returns (uint256 _amount) {\\n    uint256 _period = _currentPeriod();\\n    for (uint256 _i = 0; _i < _poolAddrList.length; _i++) {\\n      _amount += _claimReward(_poolAddrList[_i], _user, _period);\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   */\\n  function _delegateRewards(\\n    address _user,\\n    address[] calldata _poolAddrList,\\n    address _poolAddrDst\\n  ) internal returns (uint256 _amount) {\\n    _amount = _claimRewards(_user, _poolAddrList);\\n    _delegate(_stakingPool[_poolAddrDst], _user, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x4bd0b183ac8838e8800b2768ef2f854fd8ee75327f0933f895816794d556fbb0\",\"license\":\"MIT\"},\"contracts/ronin/staking/RewardCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IRewardPool.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\n\\n/**\\n * @title RewardCalculation contract\\n * @dev This contract mainly contains the methods to calculate reward for staking contract.\\n */\\nabstract contract RewardCalculation is IRewardPool {\\n  /// @dev Mapping from pool address => period number => accumulated rewards per share (one unit staking)\\n  mapping(address => mapping(uint256 => PeriodWrapper)) private _accumulatedRps;\\n  /// @dev Mapping from the pool address => user address => the reward info of the user\\n  mapping(address => mapping(address => UserRewardFields)) private _userReward;\\n  /// @dev Mapping from the pool address => reward pool fields\\n  mapping(address => PoolFields) private _stakingPool;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256) {\\n    return _getReward(_poolAddr, _user, _currentPeriod(), getStakingAmount(_poolAddr, _user));\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) public view virtual returns (uint256);\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingTotal(address _poolAddr) public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function _getReward(\\n    address _poolAddr,\\n    address _user,\\n    uint256 _latestPeriod,\\n    uint256 _latestStakingAmount\\n  ) internal view returns (uint256) {\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n\\n    if (_reward.lastPeriod == _latestPeriod) {\\n      return _reward.debited;\\n    }\\n\\n    uint256 _aRps;\\n    uint256 _lastPeriodReward;\\n    PoolFields storage _pool = _stakingPool[_poolAddr];\\n    PeriodWrapper storage _wrappedArps = _accumulatedRps[_poolAddr][_reward.lastPeriod];\\n\\n    if (_wrappedArps.lastPeriod > 0) {\\n      // Calculates the last period reward if the aRps at the period is set\\n      _aRps = _wrappedArps.inner;\\n      _lastPeriodReward = _reward.lowestAmount * (_aRps - _reward.aRps);\\n    } else {\\n      // Fallbacks to the previous aRps in case the aRps is not set\\n      _aRps = _reward.aRps;\\n    }\\n\\n    uint256 _newPeriodsReward = _latestStakingAmount * (_pool.aRps - _aRps);\\n    return _reward.debited + (_lastPeriodReward + _newPeriodsReward) / 1e18;\\n  }\\n\\n  /**\\n   * @dev Syncs the user reward.\\n   *\\n   * Emits the event `UserRewardUpdated` once the debit amount is updated.\\n   * Emits the event `PoolSharesUpdated` once the pool share is updated.\\n   *\\n   * Note: The method should be called whenever the user's staking amount changes.\\n   *\\n   */\\n  function _syncUserReward(\\n    address _poolAddr,\\n    address _user,\\n    uint256 _newStakingAmount\\n  ) internal {\\n    uint256 _period = _currentPeriod();\\n    PoolFields storage _pool = _stakingPool[_poolAddr];\\n    uint256 _lastShares = _pool.shares.inner;\\n\\n    // Updates the pool shares if it is outdated\\n    if (_pool.shares.lastPeriod < _period) {\\n      _pool.shares = PeriodWrapper(getStakingTotal(_poolAddr), _period);\\n    }\\n\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n    uint256 _currentStakingAmount = getStakingAmount(_poolAddr, _user);\\n    uint256 _debited = _getReward(_poolAddr, _user, _period, _currentStakingAmount);\\n\\n    if (_reward.debited != _debited) {\\n      _reward.debited = _debited;\\n      emit UserRewardUpdated(_poolAddr, _user, _debited);\\n    }\\n\\n    _syncMinStakingAmount(_pool, _reward, _period, _newStakingAmount, _currentStakingAmount);\\n    _reward.aRps = _pool.aRps;\\n    _reward.lastPeriod = _period;\\n\\n    if (_pool.shares.inner != _lastShares) {\\n      emit PoolSharesUpdated(_period, _poolAddr, _pool.shares.inner);\\n    }\\n  }\\n\\n  /**\\n   * @dev Syncs the minimum staking amount of an user in the current period.\\n   */\\n  function _syncMinStakingAmount(\\n    PoolFields storage _pool,\\n    UserRewardFields storage _reward,\\n    uint256 _latestPeriod,\\n    uint256 _newStakingAmount,\\n    uint256 _currentStakingAmount\\n  ) internal {\\n    if (_reward.lastPeriod < _latestPeriod) {\\n      _reward.lowestAmount = _currentStakingAmount;\\n    }\\n\\n    uint256 _lowestAmount = Math.min(_reward.lowestAmount, _newStakingAmount);\\n    uint256 _diffAmount = _reward.lowestAmount - _lowestAmount;\\n    if (_diffAmount > 0) {\\n      _reward.lowestAmount = _lowestAmount;\\n      if (_pool.shares.inner < _diffAmount) revert ErrInvalidPoolShare();\\n      _pool.shares.inner -= _diffAmount;\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the settled reward for a specific user.\\n   *\\n   * @param _lastPeriod Must be in two possible value: `_currentPeriod` in normal calculation, or\\n   * `_currentPeriod + 1` in case of calculating the reward for revoked validators.\\n   *\\n   * Emits the `RewardClaimed` event and the `UserRewardUpdated` event.\\n   *\\n   * Note: This method should be called before transferring rewards for the user.\\n   *\\n   */\\n  function _claimReward(\\n    address _poolAddr,\\n    address _user,\\n    uint256 _lastPeriod\\n  ) internal returns (uint256 _amount) {\\n    uint256 _currentStakingAmount = getStakingAmount(_poolAddr, _user);\\n    _amount = _getReward(_poolAddr, _user, _lastPeriod, _currentStakingAmount);\\n    emit RewardClaimed(_poolAddr, _user, _amount);\\n\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n    _reward.debited = 0;\\n    _syncMinStakingAmount(_stakingPool[_poolAddr], _reward, _lastPeriod, _currentStakingAmount, _currentStakingAmount);\\n    _reward.lastPeriod = _lastPeriod;\\n    _reward.aRps = _stakingPool[_poolAddr].aRps;\\n    emit UserRewardUpdated(_poolAddr, _user, 0);\\n  }\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_poolAddrs`.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolUpdateConflicted` when the pool is already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function _recordRewards(\\n    address[] memory _poolAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) internal {\\n    if (_poolAddrs.length != _rewards.length) {\\n      emit PoolsUpdateFailed(_period, _poolAddrs, _rewards);\\n      return;\\n    }\\n\\n    uint256 _rps;\\n    uint256 _count;\\n    address _poolAddr;\\n    uint256 _stakingTotal;\\n    uint256[] memory _aRps = new uint256[](_poolAddrs.length);\\n    uint256[] memory _shares = new uint256[](_poolAddrs.length);\\n    address[] memory _conflicted = new address[](_poolAddrs.length);\\n\\n    for (uint _i = 0; _i < _poolAddrs.length; _i++) {\\n      _poolAddr = _poolAddrs[_i];\\n      PoolFields storage _pool = _stakingPool[_poolAddr];\\n      _stakingTotal = getStakingTotal(_poolAddr);\\n\\n      if (_accumulatedRps[_poolAddr][_period].lastPeriod == _period) {\\n        _conflicted[_count++] = _poolAddr;\\n        continue;\\n      }\\n\\n      // Updates the pool shares if it is outdated\\n      if (_pool.shares.lastPeriod < _period) {\\n        _pool.shares = PeriodWrapper(_stakingTotal, _period);\\n      }\\n\\n      // The rps is 0 if no one stakes for the pool\\n      _rps = _pool.shares.inner == 0 ? 0 : (_rewards[_i] * 1e18) / _pool.shares.inner;\\n      _aRps[_i - _count] = _pool.aRps += _rps;\\n      _accumulatedRps[_poolAddr][_period] = PeriodWrapper(_pool.aRps, _period);\\n      _pool.shares.inner = _stakingTotal;\\n      _shares[_i - _count] = _pool.shares.inner;\\n      _poolAddrs[_i - _count] = _poolAddr;\\n    }\\n\\n    if (_count > 0) {\\n      assembly {\\n        mstore(_conflicted, _count)\\n        mstore(_poolAddrs, sub(mload(_poolAddrs), _count))\\n      }\\n      emit PoolsUpdateConflicted(_period, _conflicted);\\n    }\\n\\n    if (_poolAddrs.length > 0) {\\n      emit PoolsUpdated(_period, _poolAddrs, _aRps, _shares);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current period.\\n   */\\n  function _currentPeriod() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x492fc376e3a866dca702f22f25fe30d3005c28cace7503822ac7e73606611278\",\"license\":\"MIT\"},\"contracts/ronin/staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./CandidateStaking.sol\\\";\\nimport \\\"./DelegatorStaking.sol\\\";\\n\\ncontract Staking is IStaking, CandidateStaking, DelegatorStaking, Initializable {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  receive() external payable onlyValidatorContract {}\\n\\n  fallback() external payable onlyValidatorContract {}\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    uint256 __minValidatorStakingAmount,\\n    uint256 __maxCommissionRate,\\n    uint256 __cooldownSecsToUndelegate,\\n    uint256 __waitingSecsToRevoke\\n  ) external initializer {\\n    _setValidatorContract(__validatorContract);\\n    _setMinValidatorStakingAmount(__minValidatorStakingAmount);\\n    _setMaxCommissionRate(__maxCommissionRate);\\n    _setCooldownSecsToUndelegate(__cooldownSecsToUndelegate);\\n    _setWaitingSecsToRevoke(__waitingSecsToRevoke);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function execRecordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable override onlyValidatorContract {\\n    _recordRewards(_consensusAddrs, _rewards, _period);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function execDeductStakingAmount(address _consensusAddr, uint256 _amount)\\n    external\\n    override\\n    onlyValidatorContract\\n    returns (uint256 _actualDeductingAmount)\\n  {\\n    _actualDeductingAmount = _deductStakingAmount(_stakingPool[_consensusAddr], _amount);\\n    address payable _recipientAddr = payable(validatorContract());\\n    if (!_unsafeSendRON(_recipientAddr, _actualDeductingAmount, 3500)) {\\n      emit StakingAmountDeductFailed(_consensusAddr, _recipientAddr, _actualDeductingAmount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc RewardCalculation\\n   */\\n  function _currentPeriod() internal view virtual override returns (uint256) {\\n    return _validatorContract.currentPeriod();\\n  }\\n\\n  /**\\n   * @inheritdoc CandidateStaking\\n   */\\n  function _deductStakingAmount(PoolDetail storage _pool, uint256 _amount)\\n    internal\\n    override\\n    returns (uint256 _actualDeductingAmount)\\n  {\\n    _actualDeductingAmount = Math.min(_pool.stakingAmount, _amount);\\n\\n    _pool.stakingAmount -= _actualDeductingAmount;\\n    _changeDelegatingAmount(_pool, _pool.admin, _pool.stakingAmount, _pool.stakingTotal - _actualDeductingAmount);\\n    emit Unstaked(_pool.addr, _actualDeductingAmount);\\n  }\\n}\\n\",\"keccak256\":\"0xe8b36ee07b3db366b18a700263cde6195c4127e31c13c20041f34ff9006cca7a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060016000556200002162000027565b620000e9565b60d154610100900460ff1615620000945760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60d15460ff9081161015620000e75760d1805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b613a4f80620000f96000396000f3fe6080604052600436106102135760003560e01c806391f8723f11610118578063c2a672e0116100a0578063d01b8eed1161006f578063d01b8eed1461067f578063e22d1c9d146106f0578063e5376f5414610710578063f92ad21914610723578063f9f031df1461074357610254565b8063c2a672e0146105f1578063c508700314610611578063c673316c1461064a578063cdf64a761461065f57610254565b806399439089116100e75780639943908914610557578063aa15a6fd14610589578063acd79c46146105a9578063af245429146105bc578063b78b5e41146105d157610254565b806391f8723f146104d7578063924f081e146104f75780639488e4e914610517578063969ffc141461053757610254565b80634d99dd161161019b5780636bd8f8041161016a5780636bd8f8041461042957806376664b6514610449578063888b9ae914610469578063895ab74214610489578063909791dd146104c257610254565b80634d99dd16146103b65780635c19a95c146103d6578063679a6e43146103e95780636b0916951461040957610254565b806326476204116101e257806326476204146102f85780632715805e1461030b5780633d8e846e1461032b57806342e0c4081461034b57806342ef3c341461039657610254565b80630682e8fa14610267578063095f64751461028b578063097e4a9d146102b85780631658c86e146102d857610254565b36610254573361022b6036546001600160a01b031690565b6001600160a01b03161461025257604051630e6444a160e31b815260040160405180910390fd5b005b3361022b6036546001600160a01b031690565b34801561027357600080fd5b506038545b6040519081526020015b60405180910390f35b34801561029757600080fd5b506102ab6102a636600461334d565b610763565b60405161028291906133f3565b3480156102c457600080fd5b506102786102d336600461341b565b6108a5565b3480156102e457600080fd5b506102526102f3366004613471565b6109c0565b610252610306366004613471565b610b08565b34801561031757600080fd5b50610278610326366004613495565b610be6565b34801561033757600080fd5b506102ab6103463660046134c1565b610cbd565b34801561035757600080fd5b50610386610366366004613471565b6001600160a01b039081166000908152603a602052604090205416151590565b6040519015158152602001610282565b3480156103a257600080fd5b506102ab6103b1366004613515565b610e01565b3480156103c257600080fd5b506102526103d1366004613495565b610ed0565b6102526103e4366004613471565b610f4c565b3480156103f557600080fd5b50610252610404366004613556565b61105f565b34801561041557600080fd5b5061027861042436600461356f565b6110a3565b34801561043557600080fd5b506102526104443660046135a8565b6110c5565b34801561045557600080fd5b5061027861046436600461356f565b6111d6565b34801561047557600080fd5b50610252610484366004613556565b611205565b34801561049557600080fd5b506102786104a4366004613471565b6001600160a01b031660009081526037602052604090206003015490565b3480156104ce57600080fd5b50606c54610278565b3480156104e357600080fd5b506102ab6104f2366004613515565b611246565b34801561050357600080fd5b506102526105123660046135e9565b6112f0565b34801561052357600080fd5b5061025261053236600461334d565b611460565b34801561054357600080fd5b50610252610552366004613556565b611599565b34801561056357600080fd5b506036546001600160a01b03165b6040516001600160a01b039091168152602001610282565b34801561059557600080fd5b506102526105a4366004613471565b6115da565b6102526105b736600461361e565b6116ee565b3480156105c857600080fd5b50603954610278565b3480156105dd57600080fd5b506102526105ec366004613556565b611770565b3480156105fd57600080fd5b5061025261060c366004613495565b6117b1565b34801561061d57600080fd5b5061057161062c366004613471565b6001600160a01b039081166000908152603a60205260409020541690565b34801561065657600080fd5b50606d54610278565b34801561066b57600080fd5b5061025261067a366004613471565b6118f7565b34801561068b57600080fd5b506106cb61069a366004613471565b6001600160a01b03808216600090815260376020526040902060018101546002820154600390920154921693909250565b604080516001600160a01b039094168452602084019290925290820152606001610282565b3480156106fc57600080fd5b5061025261070b366004613691565b611963565b61025261071e3660046136dc565b611b5d565b34801561072f57600080fd5b5061025261073e366004613740565b611ca1565b34801561074f57600080fd5b5061027861075e366004613515565b611ddc565b6060838214610785576040516376081a7b60e11b815260040160405180910390fd5b836001600160401b0381111561079d5761079d613784565b6040519080825280602002602001820160405280156107c6578160200160208202803683370190505b50905060005b815181101561089c57603760008787848181106107eb576107eb61379a565b90506020020160208101906108009190613471565b6001600160a01b03166001600160a01b0316815260200190815260200160002060040160008585848181106108375761083761379a565b905060200201602081019061084c9190613471565b6001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061087f5761087f61379a565b602090810291909101015280610894816137c6565b9150506107cc565b50949350505050565b60006002600054036108d25760405162461bcd60e51b81526004016108c9906137df565b60405180910390fd5b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190613816565b61096d57604051630fd0c64560e11b81526001600160a01b03821660048201526024016108c9565b336000908152603a60205260409020546001600160a01b0316156109a657604051632fc6bfb160e21b81523360048201526024016108c9565b6109b233868686611e5c565b600160005595945050505050565b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2e9190613816565b610a5657604051630fd0c64560e11b81526001600160a01b03821660048201526024016108c9565b6001600160a01b038083166000908152603760205260409020600181015490913391168114610a9857604051637bc65bd760e11b815260040160405180910390fd5b60365460395460405163dd716ad360e01b81526001600160a01b038781166004830152602482019290925291169063dd716ad3906044015b600060405180830381600087803b158015610aea57600080fd5b505af1158015610afe573d6000803e3d6000fd5b5050505050505050565b34600003610b2957604051636dfcbde560e11b815260040160405180910390fd5b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190613816565b610bbf57604051630fd0c64560e11b81526001600160a01b03821660048201526024016108c9565b6001600160a01b0382166000908152603760205260409020610be2903334611ec9565b5050565b600033610bfb6036546001600160a01b031690565b6001600160a01b031614610c2257604051630e6444a160e31b815260040160405180910390fd5b6001600160a01b0383166000908152603760205260409020610c449083611f9c565b90506000610c5a6036546001600160a01b031690565b9050610c698183610dac61203a565b610cb657604080518381524760208201526001600160a01b0380841692908716917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35b5092915050565b6060600080603660009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d399190613838565b9050836001600160401b03811115610d5357610d53613784565b604051908082528060200260200182016040528015610d7c578160200160208202803683370190505b50925060005b84811015610df757858582818110610d9c57610d9c61379a565b9050602002016020810190610db19190613471565b9250610dc8838884610dc3878c6111d6565b61209a565b848281518110610dda57610dda61379a565b602090810291909101015280610def816137c6565b915050610d82565b5050509392505050565b6060816001600160401b03811115610e1b57610e1b613784565b604051908082528060200260200182016040528015610e44578160200160208202803683370190505b50905060005b82811015610cb65760376000858584818110610e6857610e6861379a565b9050602002016020810190610e7d9190613471565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020154828281518110610eb357610eb361379a565b602090810291909101015280610ec8816137c6565b915050610e4a565b600260005403610ef25760405162461bcd60e51b81526004016108c9906137df565b600260009081556001600160a01b03831681526037602052604090203390610f1b908284612196565b610f2581836122f7565b610f4257604051635ff7115760e11b815260040160405180910390fd5b5050600160005550565b34600003610f6d57604051636dfcbde560e11b815260040160405180910390fd5b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190613816565b61100357604051630fd0c64560e11b81526001600160a01b03821660048201526024016108c9565b336000908152603a60205260409020546001600160a01b03161561103c57604051632fc6bfb160e21b81523360048201526024016108c9565b6001600160a01b0382166000908152603760205260409020610be2903334612324565b6110676123ec565b6001600160a01b0316336001600160a01b0316146110975760405162461bcd60e51b81526004016108c990613851565b6110a08161241a565b50565b60006110bc83836110b2612456565b610dc387876111d6565b90505b92915050565b6002600054036110e75760405162461bcd60e51b81526004016108c9906137df565b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa158015611136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115a9190613816565b61118257604051630fd0c64560e11b81526001600160a01b03821660048201526024016108c9565b6001600160a01b038416600090815260376020526040902033906111a7908285612196565b6001600160a01b03841660009081526037602052604090206111ca908285612324565b50506001600055505050565b6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b61120d6123ec565b6001600160a01b0316336001600160a01b03161461123d5760405162461bcd60e51b81526004016108c990613851565b6110a0816124c8565b6060816001600160401b0381111561126057611260613784565b604051908082528060200260200182016040528015611289578160200160208202803683370190505b50905060005b82811015610cb6576112c18484838181106112ac576112ac61379a565b90506020020160208101906104a49190613471565b8282815181106112d3576112d361379a565b6020908102919091010152806112e8816137c6565b91505061128f565b603654604051635061f96960e11b81526001600160a01b0380861660048301528592169063a0c3f2d290602401602060405180830381865afa15801561133a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135e9190613816565b61138657604051630fd0c64560e11b81526001600160a01b03821660048201526024016108c9565b6001600160a01b0380851660009081526037602052604090206001810154909133911681146113c857604051637bc65bd760e11b815260040160405180910390fd5b606d548411156113eb57604051631b8454a360e21b815260040160405180910390fd5b60365460405163e5125a1d60e01b81526001600160a01b03888116600483015260248201889052604482018790529091169063e5125a1d90606401600060405180830381600087803b15801561144057600080fd5b505af1158015611454573d6000803e3d6000fd5b50505050505050505050565b6002600054036114825760405162461bcd60e51b81526004016108c9906137df565b60026000558215806114945750828114155b156114b2576040516376081a7b60e11b815260040160405180910390fd5b336000805b85811015611564578484828181106114d1576114d161379a565b90506020020135826114e39190613893565b9150611552603760008989858181106114fe576114fe61379a565b90506020020160208101906115139190613471565b6001600160a01b03166001600160a01b03168152602001908152602001600020848787858181106115465761154661379a565b90506020020135612196565b8061155c816137c6565b9150506114b7565b5061156f82826122f7565b61158c57604051635ff7115760e11b815260040160405180910390fd5b5050600160005550505050565b6115a16123ec565b6001600160a01b0316336001600160a01b0316146115d15760405162461bcd60e51b81526004016108c990613851565b6110a0816124fd565b603654604051635061f96960e11b81526001600160a01b0380841660048301528392169063a0c3f2d290602401602060405180830381865afa158015611624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116489190613816565b61167057604051630fd0c64560e11b81526001600160a01b03821660048201526024016108c9565b6001600160a01b0380831660009081526037602052604090206001810154909133911681146116b257604051637bc65bd760e11b815260040160405180910390fd5b60365460395460405163a7c2f11960e01b81526001600160a01b038781166004830152602482019290925291169063a7c2f11990604401610ad0565b336117016036546001600160a01b031690565b6001600160a01b03161461172857604051630e6444a160e31b815260040160405180910390fd5b611769858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150859050612532565b5050505050565b6117786123ec565b6001600160a01b0316336001600160a01b0316146117a85760405162461bcd60e51b81526004016108c990613851565b6110a081612966565b6002600054036117d35760405162461bcd60e51b81526004016108c9906137df565b6002600055603654604051635061f96960e11b81526001600160a01b0380851660048301528492169063a0c3f2d290602401602060405180830381865afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118469190613816565b61186e57604051630fd0c64560e11b81526001600160a01b03821660048201526024016108c9565b8160000361188f576040516331d9f7d760e01b815260040160405180910390fd5b6001600160a01b038316600090815260376020526040812060028101543392906118ba9086906138a6565b9050606c548110156118df5760405163ef0a995760e01b815260040160405180910390fd5b6118ea8284876129be565b61156f8386610dac61203a565b6118ff6123ec565b6001600160a01b0316336001600160a01b03161461192f5760405162461bcd60e51b81526004016108c990613851565b806001600160a01b03163b60000361195a57604051637bcd509160e01b815260040160405180910390fd5b6110a081612ad2565b336119766036546001600160a01b031690565b6001600160a01b03161461199d57604051630e6444a160e31b815260040160405180910390fd5b8115611b585760005b82811015611b1d576000603760008686858181106119c6576119c661379a565b90506020020160208101906119db9190613471565b6001600160a01b0390811682526020808301939093526040918201600090812060018101549092168152603a909352912080546001600160a01b031916905560028101549091508015611aa257611a328282611f9c565b506001820154611a4e906001600160a01b031682610dac61203a565b611aa25760018201548254604080518481524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b6000611ae2878786818110611ab957611ab961379a565b9050602002016020810190611ace9190613471565b60018501546001600160a01b031687612b20565b90508015611b07576001830154611b05906001600160a01b031682610dac61203a565b505b5050508080611b15906137c6565b9150506119a6565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d88383604051611b4f9291906138b9565b60405180910390a15b505050565b600260005403611b7f5760405162461bcd60e51b81526004016108c9906137df565b60026000908155338152603a60205260409020546001600160a01b031615611bbc57604051632fc6bfb160e21b81523360048201526024016108c9565b606d54811115611bdf57604051631b8454a360e21b815260040160405180910390fd5b3433611bf081888888888888612c32565b6001600160a01b0380871660008181526037602081815260408084206001810180549789166001600160a01b0319988916811790915581548816871782558552603a835290842080549096168517909555929091529052611c52818385611ec9565b816001600160a01b0316876001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a350506001600055505050505050565b60d154610100900460ff1615808015611cc1575060d154600160ff909116105b80611cdb5750303b158015611cdb575060d15460ff166001145b611d3e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108c9565b60d1805460ff191660011790558015611d615760d1805461ff0019166101001790555b611d6a86612ad2565b611d738561241a565b611d7c84612966565b611d85836124c8565b611d8e826124fd565b8015611dd45760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6000600260005403611e005760405162461bcd60e51b81526004016108c9906137df565b6002600081905550611e4533848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612ee192505050565b9050611e513382612f44565b600160005592915050565b6000611e9b85858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612ee192505050565b6001600160a01b0383166000908152603760205260409020909150611ec1908683612324565b949350505050565b6001830154839083906001600160a01b03808316911614611efd57604051637bc65bd760e11b815260040160405180910390fd5b82856002016000828254611f119190613893565b92505081905550611f3785858760020154868960030154611f329190613893565b612f6b565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90611f8d9086815260200190565b60405180910390a25050505050565b6000611fac836002015483612fa6565b905080836002016000828254611fc291906138a6565b9091555050600183015460028401546003850154611ff39286926001600160a01b0390911691611f329086906138a6565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d806000811461208a576040519150601f19603f3d011682016040523d82523d6000602084013e61208f565b606091505b509095945050505050565b6001600160a01b038085166000908152600260209081526040808320938716835292905290812060038101548490036120d557549050611ec1565b6001600160a01b03861660009081526003602081815260408084206001808452828620948701548652939092528320918201548392901561213a578054600186015490945061212490856138a6565b85600201546121339190613907565b9250612142565b846001015493505b81546000906121529086906138a6565b61215c9089613907565b9050670de0b6b3a76400006121718286613893565b61217b919061391e565b86546121879190613893565b9b9a5050505050505050505050565b6001830154839083906001600160a01b038083169116036121ca57604051639feb934760e01b815260040160405180910390fd5b826000036121eb57604051637ab0c6ad60e11b815260040160405180910390fd5b6001600160a01b038416600090815260048601602052604090205483111561222657604051630695534560e31b815260040160405180910390fd5b6038546001600160a01b0385166000908152600587016020526040902054429161224f91613893565b1061226d5760405163f19f52bd60e01b815260040160405180910390fd5b6001600160a01b03841660009081526004860160205260409020546122ab908690869061229b9087906138a6565b868960030154611f3291906138a6565b84546040518481526001600160a01b03918216918616907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c906020015b60405180910390a35050505050565b60008147101561231a576040516304611a4560e11b815260040160405180910390fd5b6110bc8383612fbc565b6001830154839083906001600160a01b0380831691160361235857604051639feb934760e01b815260040160405180910390fd5b6001600160a01b03841660009081526004860160205260409020546123969086908690612386908790613893565b868960030154611f329190613893565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b906122e89087815260200190565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be2906020015b60405180910390a150565b6036546040805162c080c360e31b815290516000926001600160a01b03169163060406189160048083019260209291908290030181865afa15801561249f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c39190613838565b905090565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a9060200161244b565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c6789060200161244b565b8351821461257b57807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a585858560405161256e93929190613979565b60405180910390a2612960565b600080600080600088516001600160401b0381111561259c5761259c613784565b6040519080825280602002602001820160405280156125c5578160200160208202803683370190505b509050600089516001600160401b038111156125e3576125e3613784565b60405190808252806020026020018201604052801561260c578160200160208202803683370190505b50905060008a516001600160401b0381111561262a5761262a613784565b604051908082528060200260200182016040528015612653578160200160208202803683370190505b50905060005b8b518110156128cb578b81815181106126745761267461379a565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a900361271a578683896126e2816137c6565b9a50815181106126f4576126f461379a565b60200260200101906001600160a01b031690816001600160a01b031681525050506128b9565b60028101548a111561274857604080518082019091528681526020018a905260018101869055600281018a90555b6001810154156127925760018101548c8c848181106127695761276961379a565b90506020020135670de0b6b3a76400006127839190613907565b61278d919061391e565b612795565b60005b9850888160000160008282546127ab9190613893565b91829055509050856127bd8a856138a6565b815181106127cd576127cd61379a565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c81526020019081526020016000206000820151816000015560208201518160010155905050858160010160000181905550806001016000015484898461286091906138a6565b815181106128705761287061379a565b6020908102919091010152868d6128878a856138a6565b815181106128975761289761379a565b60200260200101906001600160a01b031690816001600160a01b031681525050505b806128c3816137c6565b915050612659565b50851561291457858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a38260405161290b91906139c3565b60405180910390a25b8a511561295857877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c858560405161294f939291906139d6565b60405180910390a25b505050505050505b50505050565b61271081111561298957604051631b8454a360e21b815260040160405180910390fd5b606d8190556040518181527f774069781371d65424b3b0b101c1d40014532cac040f979595b99a3fcf8ce08c9060200161244b565b6001830154839083906001600160a01b038083169116146129f257604051637bc65bd760e11b815260040160405180910390fd5b8460020154831115612a1757604051630a8d7fa760e21b815260040160405180910390fd5b6038546001600160a01b03851660009081526005870160205260409020544291612a4091613893565b1115612a5f576040516303db082960e11b815260040160405180910390fd5b82856002016000828254612a7391906138a6565b92505081905550612a9485858760020154868960030154611f3291906138a6565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590602001611f8d565b603680546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b68361699060200161244b565b600080612b2d85856111d6565b9050612b3b8585858461209a565b9150836001600160a01b0316856001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b784604051612b8291815260200190565b60405180910390a36001600160a01b03808616600081815260026020908152604080832094891683529381528382208281559282526003905291909120612bcc9082868580613018565b60038181018590556001600160a01b03878116600081815260209384526040808220546001870155519081529188169290917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a350509392505050565b612c3d876000612fbc565b612c88576040805163338f030160e01b81526001600160a01b03891660048201526024810191909152600a6044820152693837b7b61030b236b4b760b11b60648201526084016108c9565b612c93846000612fbc565b612cdc576040805163338f030160e01b81526001600160a01b038616600482015260248101919091526008604482015267747265617375727960c01b60648201526084016108c9565b606c54811015612cff57604051630a8d7fa760e21b815260040160405180910390fd5b606d54821115612d2257604051631b8454a360e21b815260040160405180910390fd5b856001600160a01b0316876001600160a01b0316141580612d555750836001600160a01b0316866001600160a01b031614155b15612d735760405163dc1d04ff60e01b815260040160405180910390fd5b60408051600380825260808201909252600091602082016060803683370190505090508781600081518110612daa57612daa61379a565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110612dde57612dde61379a565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110612e1257612e1261379a565b60200260200101906001600160a01b031690816001600160a01b031681525050612e3b816130aa565b15612e59576040516329d55f9360e11b815260040160405180910390fd5b6036546040516302209ca560e31b81526001600160a01b0389811660048301528881166024830152878116604483015286811660648301526084820186905290911690631104e5289060a401600060405180830381600087803b158015612ebf57600080fd5b505af1158015612ed3573d6000803e3d6000fd5b505050505050505050505050565b600080612eec612456565b905060005b8351811015612f3c57612f1e848281518110612f0f57612f0f61379a565b60200260200101518684612b20565b612f289084613893565b925080612f34816137c6565b915050612ef1565b505092915050565b612f4e82826122f7565b610be257604051630c3e69bb60e11b815260040160405180910390fd5b8354612f81906001600160a01b03168484613171565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b6000818310612fb557816110bc565b5090919050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613009576040519150601f19603f3d011682016040523d82523d6000602084013e61300e565b606091505b5090949350505050565b828460030154101561302c57600284018190555b600061303c856002015484612fa6565b9050600081866002015461305091906138a6565b905080156130a157600286018290556001870154811115613084576040516352e521bf60e11b815260040160405180910390fd5b8087600101600001600082825461309b91906138a6565b90915550505b50505050505050565b600081516000036130bd57506000919050565b60005b600183516130ce91906138a6565b8110156131685760006130e2826001613893565b90505b8351811015613155578381815181106131005761310061379a565b60200260200101516001600160a01b03168483815181106131235761312361379a565b60200260200101516001600160a01b031603613143575060019392505050565b8061314d816137c6565b9150506130e5565b5080613160816137c6565b9150506130c0565b50600092915050565b600061317b612456565b6001600160a01b03851660009081526003602052604090206001810154600282015492935090918311156131ef5760405180604001604052806131d6886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b03808716600090815260026020908152604080832093891683529290529081209061322188886111d6565b905060006132318989888561209a565b83549091508114613283578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b6132908584888a86613018565b84546001808501919091556003840187905585015484146132f757886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c87600101600001546040516132ee91815260200190565b60405180910390a35b505050505050505050565b60008083601f84011261331457600080fd5b5081356001600160401b0381111561332b57600080fd5b6020830191508360208260051b850101111561334657600080fd5b9250929050565b6000806000806040858703121561336357600080fd5b84356001600160401b038082111561337a57600080fd5b61338688838901613302565b9096509450602087013591508082111561339f57600080fd5b506133ac87828801613302565b95989497509550505050565b600081518084526020808501945080840160005b838110156133e8578151875295820195908201906001016133cc565b509495945050505050565b6020815260006110bc60208301846133b8565b6001600160a01b03811681146110a057600080fd5b60008060006040848603121561343057600080fd5b83356001600160401b0381111561344657600080fd5b61345286828701613302565b909450925050602084013561346681613406565b809150509250925092565b60006020828403121561348357600080fd5b813561348e81613406565b9392505050565b600080604083850312156134a857600080fd5b82356134b381613406565b946020939093013593505050565b6000806000604084860312156134d657600080fd5b83356134e181613406565b925060208401356001600160401b038111156134fc57600080fd5b61350886828701613302565b9497909650939450505050565b6000806020838503121561352857600080fd5b82356001600160401b0381111561353e57600080fd5b61354a85828601613302565b90969095509350505050565b60006020828403121561356857600080fd5b5035919050565b6000806040838503121561358257600080fd5b823561358d81613406565b9150602083013561359d81613406565b809150509250929050565b6000806000606084860312156135bd57600080fd5b83356135c881613406565b925060208401356135d881613406565b929592945050506040919091013590565b6000806000606084860312156135fe57600080fd5b833561360981613406565b95602085013595506040909401359392505050565b60008060008060006060868803121561363657600080fd5b85356001600160401b038082111561364d57600080fd5b61365989838a01613302565b9097509550602088013591508082111561367257600080fd5b5061367f88828901613302565b96999598509660400135949350505050565b6000806000604084860312156136a657600080fd5b83356001600160401b038111156136bc57600080fd5b6136c886828701613302565b909790965060209590950135949350505050565b600080600080600060a086880312156136f457600080fd5b85356136ff81613406565b9450602086013561370f81613406565b9350604086013561371f81613406565b9250606086013561372f81613406565b949793965091946080013592915050565b600080600080600060a0868803121561375857600080fd5b853561376381613406565b97602087013597506040870135966060810135965060800135945092505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016137d8576137d86137b0565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561382857600080fd5b8151801515811461348e57600080fd5b60006020828403121561384a57600080fd5b5051919050565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b808201808211156110bf576110bf6137b0565b818103818111156110bf576110bf6137b0565b60208082528181018390526000908460408401835b868110156138fc5782356138e181613406565b6001600160a01b0316825291830191908301906001016138ce565b509695505050505050565b80820281158282048414176110bf576110bf6137b0565b60008261393b57634e487b7160e01b600052601260045260246000fd5b500490565b600081518084526020808501945080840160005b838110156133e85781516001600160a01b031687529582019590820190600101613954565b60408152600061398c6040830186613940565b82810360208401528381526001600160fb1b038411156139ab57600080fd5b8360051b808660208401370160200195945050505050565b6020815260006110bc6020830184613940565b6060815260006139e96060830186613940565b82810360208401526139fb81866133b8565b90508281036040840152613a0f81856133b8565b969550505050505056fea2646970667358221220839f85d23f0ab1f03cccdeafa2f98f931424069923da73144e66990297f8743064736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ErrAdminOfAnyActivePoolForbidden(address)": [
        {
          "details": "Error of admin of any active pool cannot delegate."
        }
      ],
      "ErrCallerMustBeValidatorContract()": [
        {
          "details": "Error of method caller must be validator contract."
        }
      ],
      "ErrCannotInitTransferRON(address,string)": [
        {
          "details": "Error of cannot transfer RON to specified target."
        }
      ],
      "ErrCannotTransferRON()": [
        {
          "details": "Error of cannot transfer RON."
        }
      ],
      "ErrInactivePool(address)": [
        {
          "details": "Error of querying inactive pool."
        }
      ],
      "ErrInsufficientBalance()": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInsufficientDelegatingAmount()": [
        {
          "details": "Error of undelegating insufficient amount."
        }
      ],
      "ErrInsufficientStakingAmount()": [
        {
          "details": "Error of insufficient staking amount for unstaking."
        }
      ],
      "ErrInvalidArrays()": [
        {
          "details": "Error of length of input arrays are not of the same."
        }
      ],
      "ErrInvalidCommissionRate()": [
        {
          "details": "Error of setting commission rate exceeds max allowed."
        }
      ],
      "ErrInvalidPoolShare()": [
        {
          "details": "Error of invalid pool share."
        }
      ],
      "ErrOnlyPoolAdminAllowed()": [
        {
          "details": "Error of no one is allowed to call but the pool's admin."
        }
      ],
      "ErrPoolAdminForbidden()": [
        {
          "details": "Error of pool admin is not allowed to call."
        }
      ],
      "ErrRecipientRevert()": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrStakingAmountLeft()": [
        {
          "details": "Error of invalid staking amount left after deducted."
        }
      ],
      "ErrThreeInteractionAddrsNotEqual()": [
        {
          "details": "Error of three interaction addresses must be of the same in applying for validator candidate."
        }
      ],
      "ErrThreeOperationAddrsNotDistinct()": [
        {
          "details": "Error of three operation addresses must be distinct in applying for validator candidate."
        }
      ],
      "ErrUndelegateTooEarly()": [
        {
          "details": "Error of undelegating too early."
        }
      ],
      "ErrUndelegateZeroAmount()": [
        {
          "details": "Error of undelegating zero amount."
        }
      ],
      "ErrUnstakeTooEarly()": [
        {
          "details": "Error of unstaking too early."
        }
      ],
      "ErrUnstakeZeroAmount()": [
        {
          "details": "Error of unstaking zero amount."
        }
      ],
      "ErrZeroCodeContract()": [
        {
          "details": "Error of set to non-contract."
        }
      ],
      "ErrZeroValue()": [
        {
          "details": "Error of receiving zero message value."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "applyValidatorCandidate(address,address,address,address,uint256)": {
        "details": "Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.",
        "params": {
          "_candidateAdmin": "the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance."
        }
      },
      "bulkUndelegate(address[],uint256[])": {
        "details": "Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`."
      },
      "claimRewards(address[])": {
        "details": "Claims the reward of method caller. Emits the `RewardClaimed` event."
      },
      "cooldownSecsToUndelegate()": {
        "details": "Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated."
      },
      "delegate(address)": {
        "details": "Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event."
      },
      "delegateRewards(address[],address)": {
        "details": "Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event."
      },
      "execDeductStakingAmount(address,uint256)": {
        "details": "Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller must be validator contract. Emits the event `Unstaked`."
      },
      "execDeprecatePools(address[],uint256)": {
        "details": "Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin."
      },
      "execRecordRewards(address[],uint256[],uint256)": {
        "details": "Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller must be validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending."
      },
      "getManySelfStakings(address[])": {
        "details": "Returns the self-staking amounts of the pools."
      },
      "getManyStakingAmounts(address[],address[])": {
        "details": "Returns the staking amounts of the users."
      },
      "getManyStakingTotals(address[])": {
        "details": "Returns the total staking amounts of all users for the pools `_poolAddrs`."
      },
      "getPoolAddressOf(address)": {
        "details": "Returns the consensus address corresponding to the pool admin."
      },
      "getPoolDetail(address)": {
        "details": "Returns the staking pool detail."
      },
      "getReward(address,address)": {
        "details": "Returns the reward amount that user claimable."
      },
      "getRewards(address,address[])": {
        "details": "Returns the claimable reward of the user `_user`."
      },
      "getStakingAmount(address,address)": {
        "details": "Returns the staking amount of an user."
      },
      "getStakingTotal(address)": {
        "details": "Returns the total staking amount of all users for a pool."
      },
      "initialize(address,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "isAdminOfActivePool(address)": {
        "details": "Returns whether the `_poolAdminAddr` is currently active."
      },
      "maxCommissionRate()": {
        "details": "Returns the max commission rate that the candidate can set."
      },
      "minValidatorStakingAmount()": {
        "details": "Returns the minimum threshold for being a validator candidate."
      },
      "redelegate(address,address,uint256)": {
        "details": "Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event."
      },
      "requestEmergencyExit(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestRenounce(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`."
      },
      "setCooldownSecsToUndelegate(uint256)": {
        "details": "Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`."
      },
      "setMaxCommissionRate(uint256)": {
        "details": "Sets the max commission rate that a candidate can set. Requirements: - The method caller is admin. Emits the `MaxCommissionRateUpdated` event."
      },
      "setMinValidatorStakingAmount(uint256)": {
        "details": "Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event."
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "setWaitingSecsToRevoke(uint256)": {
        "details": "Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`."
      },
      "stake(address)": {
        "details": "Self-delegates to the validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`."
      },
      "undelegate(address,uint256)": {
        "details": "Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event."
      },
      "unstake(address,uint256)": {
        "details": "Unstakes from the validator candidate `_consensusAddr` for `_amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      },
      "waitingSecsToRevoke()": {
        "details": "Returns the number of seconds that a candidate must wait for the renounce request gets affected."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1636,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 28050,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_accumulatedRps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)10572_storage))"
      },
      {
        "astId": 28058,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_userReward",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)11346_storage))"
      },
      {
        "astId": 28064,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_stakingPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolFields)11352_storage)"
      },
      {
        "astId": 28069,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6462,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IRoninValidatorSet)11984"
      },
      {
        "astId": 26357,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_stakingPool",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_struct(PoolDetail)10959_storage)"
      },
      {
        "astId": 26360,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_cooldownSecsToUndelegate",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 26363,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_waitingSecsToRevoke",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 26368,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_adminOfActivePoolMapping",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 26373,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 26806,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_minValidatorStakingAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 26809,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_maxCommissionRate",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 26814,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 27537,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initialized",
        "offset": 0,
        "slot": "209",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initializing",
        "offset": 1,
        "slot": "209",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoninValidatorSet)11984": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)11346_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IRewardPool.UserRewardFields))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserRewardFields)11346_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)10572_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PeriodWrapper)10572_storage)"
      },
      "t_mapping(t_address,t_struct(PoolDetail)10959_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBaseStaking.PoolDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolDetail)10959_storage"
      },
      "t_mapping(t_address,t_struct(PoolFields)11352_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.PoolFields)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolFields)11352_storage"
      },
      "t_mapping(t_address,t_struct(UserRewardFields)11346_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.UserRewardFields)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRewardFields)11346_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PeriodWrapper)10572_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodWrapper)10572_storage"
      },
      "t_struct(PeriodWrapper)10572_storage": {
        "encoding": "inplace",
        "label": "struct PeriodWrapperConsumer.PeriodWrapper",
        "members": [
          {
            "astId": 10569,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "inner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10571,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolDetail)10959_storage": {
        "encoding": "inplace",
        "label": "struct IBaseStaking.PoolDetail",
        "members": [
          {
            "astId": 10944,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10946,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "admin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10948,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10950,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingTotal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10954,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "delegatingAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 10958,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastDelegatingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PoolFields)11352_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.PoolFields",
        "members": [
          {
            "astId": 11348,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11351,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PeriodWrapper)10572_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserRewardFields)11346_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.UserRewardFields",
        "members": [
          {
            "astId": 11339,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "debited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11341,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11343,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lowestAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11345,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}