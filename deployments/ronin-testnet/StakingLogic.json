{
  "address": "0x0eFa0aD6D72088D903f2c8296E6eD9c364006176",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "ErrAdminOfAnyActivePoolForbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "extraInfo",
          "type": "string"
        }
      ],
      "name": "ErrCannotInitTransferRON",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCannotTransferRON",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrDuplicated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        }
      ],
      "name": "ErrInactivePool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sendAmount",
          "type": "uint256"
        }
      ],
      "name": "ErrInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientDelegatingAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientStakingAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidArrays",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidCommissionRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidPoolShare",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrOnlyPoolAdminAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrPoolAdminForbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrRecipientRevert",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrStakingAmountLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrThreeInteractionAddrsNotEqual",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUndelegateTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUndelegateZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum ContractType",
          "name": "expectedContractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "ErrUnexpectedInternalCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnstakeTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnstakeZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateRangeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minSecs",
          "type": "uint256"
        }
      ],
      "name": "CooldownSecsToUndelegateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "MinValidatorStakingAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "PoolApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PoolSharesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "validator",
          "type": "address[]"
        }
      ],
      "name": "PoolsDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        }
      ],
      "name": "PoolsUpdateConflicted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "name": "PoolsUpdateFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "poolAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "aRps",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "PoolsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountDeductFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensuAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debited",
          "type": "uint256"
        }
      ],
      "name": "UserRewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secs",
          "type": "uint256"
        }
      ],
      "name": "WaitingSecsToRevokeUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADDITION_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERIOD_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "applyValidatorCandidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "bulkUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrList",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownSecsToUndelegate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrList",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_consensusAddrDst",
          "type": "address"
        }
      ],
      "name": "delegateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "execDeductStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_actualDeductingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        }
      ],
      "name": "execDeprecatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_consensusAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "execRecordRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionRateRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "getManySelfStakings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_selfStakings",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_poolAddrs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_userList",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_poolList",
          "type": "address[]"
        }
      ],
      "name": "getManyStakingTotals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAdminAddr",
          "type": "address"
        }
      ],
      "name": "getPoolAddressOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        }
      ],
      "name": "getPoolDetail",
      "outputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_poolAddrList",
          "type": "address[]"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddr",
          "type": "address"
        }
      ],
      "name": "getStakingTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__minValidatorStakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxCommissionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__cooldownSecsToUndelegate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__waitingSecsToRevoke",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAdminAddr",
          "type": "address"
        }
      ],
      "name": "isAdminOfActivePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minValidatorStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddrSrc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddrDst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "requestEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "requestRenounce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_effectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "requestUpdateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxRate",
          "type": "uint256"
        }
      ],
      "name": "setCommissionRateRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cooldownSecs",
          "type": "uint256"
        }
      ],
      "name": "setCooldownSecsToUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setMinValidatorStakingAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_secs",
          "type": "uint256"
        }
      ],
      "name": "setWaitingSecsToRevoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "undelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "waitingSecsToRevoke",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1fb7a10773437191ffff5dbda68a56fdb492b1bb1348931eae75eaf89924e729",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x0eFa0aD6D72088D903f2c8296E6eD9c364006176",
    "transactionIndex": 0,
    "gasUsed": "3254982",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000",
    "blockHash": "0xad1697fc9ac3649b2c73a7077c78f3117dd30cf111f82727c18d52fee4e67ce0",
    "transactionHash": "0x1fb7a10773437191ffff5dbda68a56fdb492b1bb1348931eae75eaf89924e729",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18032263,
        "transactionHash": "0x1fb7a10773437191ffff5dbda68a56fdb492b1bb1348931eae75eaf89924e729",
        "address": "0x0eFa0aD6D72088D903f2c8296E6eD9c364006176",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xad1697fc9ac3649b2c73a7077c78f3117dd30cf111f82727c18d52fee4e67ce0"
      }
    ],
    "blockNumber": 18032263,
    "cumulativeGasUsed": "3254982",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "6bc16cc8f779fe2f1f4f2733e87f867e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ErrAdminOfAnyActivePoolForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"}],\"name\":\"ErrCannotInitTransferRON\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCannotTransferRON\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrDuplicated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"ErrInactivePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientDelegatingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientStakingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidPoolShare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrOnlyPoolAdminAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrPoolAdminForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrStakingAmountLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrThreeInteractionAddrsNotEqual\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUndelegateTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUndelegateZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnstakeTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnstakeZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateRangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSecs\",\"type\":\"uint256\"}],\"name\":\"CooldownSecsToUndelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MinValidatorStakingAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"PoolApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PoolSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validator\",\"type\":\"address[]\"}],\"name\":\"PoolsDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"}],\"name\":\"PoolsUpdateConflicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdateFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"aRps\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountDeductFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensuAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debited\",\"type\":\"uint256\"}],\"name\":\"UserRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"WaitingSecsToRevokeUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADDITION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"applyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrList\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSecsToUndelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_consensusAddrDst\",\"type\":\"address\"}],\"name\":\"delegateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"execDeductStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualDeductingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"execDeprecatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"execRecordRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRateRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"getManySelfStakings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_selfStakings\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolAddrs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_userList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingTotals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAdminAddr\",\"type\":\"address\"}],\"name\":\"getPoolAddressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"name\":\"getPoolDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_poolAddrList\",\"type\":\"address[]\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"name\":\"getStakingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__minValidatorStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxCommissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__cooldownSecsToUndelegate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__waitingSecsToRevoke\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAdminAddr\",\"type\":\"address\"}],\"name\":\"isAdminOfActivePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValidatorStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddrSrc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddrDst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"requestEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"requestRenounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"requestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRateRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownSecs\",\"type\":\"uint256\"}],\"name\":\"setCooldownSecsToUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setMinValidatorStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"setWaitingSecsToRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitingSecsToRevoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAdminOfAnyActivePoolForbidden(address)\":[{\"details\":\"Error of admin of any active pool cannot delegate.\"}],\"ErrCannotInitTransferRON(address,string)\":[{\"details\":\"Error of cannot transfer RON to specified target.\"}],\"ErrCannotTransferRON()\":[{\"details\":\"Error of cannot transfer RON.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrDuplicated(bytes4)\":[{\"details\":\"Error thrown when a duplicated element is detected in an array.\",\"params\":{\"msgSig\":\"The function signature that invoke the error.\"}}],\"ErrInactivePool(address)\":[{\"details\":\"Error of querying inactive pool.\"}],\"ErrInsufficientBalance(bytes4,uint256,uint256)\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInsufficientDelegatingAmount()\":[{\"details\":\"Error of undelegating insufficient amount.\"}],\"ErrInsufficientStakingAmount()\":[{\"details\":\"Error of insufficient staking amount for unstaking.\"}],\"ErrInvalidArrays()\":[{\"details\":\"Error of length of input arrays are not of the same.\"}],\"ErrInvalidCommissionRate()\":[{\"details\":\"Error of setting commission rate exceeds max allowed.\"}],\"ErrInvalidPoolShare()\":[{\"details\":\"Error of invalid pool share.\"}],\"ErrOnlyPoolAdminAllowed()\":[{\"details\":\"Error of no one is allowed to call but the pool's admin.\"}],\"ErrPoolAdminForbidden()\":[{\"details\":\"Error of pool admin is not allowed to call.\"}],\"ErrRecipientRevert(bytes4)\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrStakingAmountLeft()\":[{\"details\":\"Error of invalid staking amount left after deducted.\"}],\"ErrThreeInteractionAddrsNotEqual()\":[{\"details\":\"Error of three interaction addresses must be of the same in applying for validator candidate.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUndelegateTooEarly()\":[{\"details\":\"Error of undelegating too early.\"}],\"ErrUndelegateZeroAmount()\":[{\"details\":\"Error of undelegating zero amount.\"}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrUnstakeTooEarly()\":[{\"details\":\"Error of unstaking too early.\"}],\"ErrUnstakeZeroAmount()\":[{\"details\":\"Error of unstaking zero amount.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}],\"ErrZeroValue()\":[{\"details\":\"Error of receiving zero message value.\"}]},\"kind\":\"dev\",\"methods\":{\"applyValidatorCandidate(address,address,address,address,uint256)\":{\"details\":\"Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.\",\"params\":{\"_candidateAdmin\":\"the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance.\"}},\"bulkUndelegate(address[],uint256[])\":{\"details\":\"Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`.\"},\"claimRewards(address[])\":{\"details\":\"Claims the reward of method caller. Emits the `RewardClaimed` event.\"},\"cooldownSecsToUndelegate()\":{\"details\":\"Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\"},\"delegate(address)\":{\"details\":\"Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event.\"},\"delegateRewards(address[],address)\":{\"details\":\"Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event.\"},\"execDeductStakingAmount(address,uint256)\":{\"details\":\"Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller must be validator contract. Emits the event `Unstaked`.\"},\"execDeprecatePools(address[],uint256)\":{\"details\":\"Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\"},\"execRecordRewards(address[],uint256[],uint256)\":{\"details\":\"Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller must be validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending.\"},\"getCommissionRateRange()\":{\"details\":\"Returns the commission rate range that the candidate can set.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getManySelfStakings(address[])\":{\"details\":\"Returns the self-staking amounts of the pools.\"},\"getManyStakingAmounts(address[],address[])\":{\"details\":\"Returns the staking amounts of the users.\"},\"getManyStakingTotals(address[])\":{\"details\":\"Returns the total staking amounts of all users for the pools `_poolAddrs`.\"},\"getPoolAddressOf(address)\":{\"details\":\"Returns the consensus address corresponding to the pool admin.\"},\"getPoolDetail(address)\":{\"details\":\"Returns the staking pool detail.\"},\"getReward(address,address)\":{\"details\":\"Returns the reward amount that user claimable.\"},\"getRewards(address,address[])\":{\"details\":\"Returns the claimable reward of the user `_user`.\"},\"getStakingAmount(address,address)\":{\"details\":\"Returns the staking amount of an user.\"},\"getStakingTotal(address)\":{\"details\":\"Returns the total staking amount of all users for a pool.\"},\"initialize(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"isAdminOfActivePool(address)\":{\"details\":\"Returns whether the `_poolAdminAddr` is currently active.\"},\"minValidatorStakingAmount()\":{\"details\":\"Returns the minimum threshold for being a validator candidate.\"},\"redelegate(address,address,uint256)\":{\"details\":\"Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event.\"},\"requestEmergencyExit(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestRenounce(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`.\"},\"setCommissionRateRange(uint256,uint256)\":{\"details\":\"Sets the commission rate range that a candidate can set. Requirements: - The method caller is admin. Emits the `CommissionRateRangeUpdated` event.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setCooldownSecsToUndelegate(uint256)\":{\"details\":\"Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`.\"},\"setMinValidatorStakingAmount(uint256)\":{\"details\":\"Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event.\"},\"setWaitingSecsToRevoke(uint256)\":{\"details\":\"Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`.\"},\"stake(address)\":{\"details\":\"Self-delegates to the validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`.\"},\"undelegate(address,uint256)\":{\"details\":\"Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event.\"},\"unstake(address,uint256)\":{\"details\":\"Unstakes from the validator candidate `_consensusAddr` for `_amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`.\"},\"waitingSecsToRevoke()\":{\"details\":\"Returns the number of seconds that a candidate must wait for the renounce request gets affected.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/staking/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ronin/contracts/=./contracts/\",\":bridge-operator-governance/=contracts/extensions/bridge-operator-governance/\",\":collections/=contracts/extensions/collections/\",\":consumers/=contracts/extensions/consumers/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":forwarder/=contracts/extensions/forwarder/\",\":sequential-governance/=contracts/extensions/sequential-governance/\",\":slash-indicator/=contracts/interfaces/slash-indicator/\",\":staking/=contracts/interfaces/staking/\",\":validator/=contracts/interfaces/validator/\",\":version-control/=contracts/extensions/version-control/\"]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance(bytes4 msgSig, uint256 currentBalance, uint256 sendAmount);\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert(bytes4 msgSig);\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable _recipient, uint256 _amount) internal {\\n    if (!_sendRON(_recipient, _amount)) revert ErrRecipientRevert(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Send `_amount` RON to the address `_recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    if (address(this).balance < _amount) revert ErrInsufficientBalance(msg.sig, address(this).balance, _amount);\\n    return _unsafeSendRON(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `_amount` RON to the address `_recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRON(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount, uint256 _gas) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount, gas: _gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xf5cc672e96cd11640db34e1be785d5865c1d79abdbcf55df0926b0f6244db906\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0d5cda6bbab5672cc7983efd0cf1f9a4e4fb1a7a2c1cfb50d38aedd052230f91\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/extensions/consumers/GlobalConfigConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract GlobalConfigConsumer {\\n  /// @dev The addition amount of gas sending along in external calls. Total gas stipend is added with default 2300 gas.\\n  uint256 public constant DEFAULT_ADDITION_GAS = 1200;\\n  /// @dev The length of a period in second.\\n  uint256 public constant PERIOD_DURATION = 1 days;\\n}\\n\",\"keccak256\":\"0x96d6b1ea4c8e126a8c2468683e7513d195f8e05456d85dd8f259ab049347b527\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract(address addr);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x5947f7f706685ce9a692da732cc0f296fcf88d38a625708354180133b3451089\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    // Address of the pool i.e. consensus address of the validator\\n    address addr;\\n    // Pool admin address\\n    address admin;\\n    // Self-staking amount\\n    uint256 stakingAmount;\\n    // Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    // Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    // Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(address poolAddr);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `_poolAdminAddr` is currently active.\\n   */\\n  function isAdminOfActivePool(address _poolAdminAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address _poolAdminAddr) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool detail.\\n   */\\n  function getPoolDetail(address) external view returns (address _admin, uint256 _stakingAmount, uint256 _stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(address[] calldata) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external;\\n}\\n\",\"keccak256\":\"0x90517268a0e31147d97772c9ae518caa5eb8c03efe3b369e3c6d5166422f5962\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed validator, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] validator);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed validator,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed validator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 _minRange, uint256 _maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 _minRate, uint256 _maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param _candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata _pools, uint256 _period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x8932608d94be6ab8c53ee9770f8702774bf38aa734d8d16902f2bb18c1749b81\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(address _consensusAddrSrc, address _consensusAddrDst, uint256 _amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(\\n    address _user,\\n    address[] calldata _poolAddrList\\n  ) external view returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList) external returns (uint256 _amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(\\n    address[] calldata _consensusAddrList,\\n    address _consensusAddrDst\\n  ) external returns (uint256 _amount);\\n}\\n\",\"keccak256\":\"0x6dd71bf0c17a65da0dee49b98e4b038c1dd0e74f5473d03570421ceebd5b7084\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolAddr, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolAddr, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolAddr, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolAddrs, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolAddrs, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolAddrs);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(\\n    address[] calldata _poolAddrs,\\n    address[] calldata _userList\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(address _poolAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `_poolAddrs`.\\n   */\\n  function getManyStakingTotals(address[] calldata _poolAddrs) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x52349fecb897b3b8288d8732923551382822c0c5fb8db9c6b094d080a16a2129\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking {\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(\\n    address _consensusAddr,\\n    uint256 _amount\\n  ) external returns (uint256 _actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xd302d4a78203e277fb95a89de7ae32a3102129d3fbd64fc75f92d18be0443408\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address _consensusAddr, uint256 _effectiveTimestamp, uint256 _rate) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x01bb0823588c4e6df855ec9962d3bbc10e179f1668d006946005a0af3e73114e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n  /// @dev Emitted when the bridge tracking contract's response is incorrect\\n  event BridgeTrackingIncorrectlyResponded();\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x42ed0bff5f8233dc6de28bd3283f98a0c16df6abc26655fc777bdc07a83ff3f5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xc00b1bda0c6076c9aa0631dc0c01e849d8f42cc616fe4c036f73cda0a9afe9ef\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    address _addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    address _addr,\\n    uint256 _blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the latest wrapped up period.\\n   */\\n  function checkBridgeRewardDeprecatedAtLatestPeriod(address _consensusAddr) external view returns (bool _result);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the  `_period`.\\n   */\\n  function checkBridgeRewardDeprecatedAtPeriod(\\n    address _consensusAddr,\\n    uint256 _period\\n  ) external view returns (bool _result);\\n}\\n\",\"keccak256\":\"0xc854f6deb26db9cae49e1cfa85aa94d64828251fcca394fed0dd67d554da749b\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfo {\\n  /**\\n   * @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n   */\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators()\\n    external\\n    view\\n    returns (\\n      address[] memory _validatorList,\\n      address[] memory _bridgeOperators,\\n      EnumFlags.ValidatorFlag[] memory _flags\\n    );\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current on-working bridge operator list.\\n   * @param bridgeOperatorList The list of working bridge operators.\\n   * @param validatorList The list of corresponding validators.\\n   */\\n  function getBridgeOperators()\\n    external\\n    view\\n    returns (address[] memory bridgeOperatorList, address[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the bridge operator list corresponding to validator address list.\\n   */\\n  function getBridgeOperatorsOf(\\n    address[] memory _validatorAddrs\\n  ) external view returns (address[] memory bridgeOperatorList);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool isOperator);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x3915e301358a793f14f6ecf6bca330311a9684e5144cd20d133b1905f8918f03\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xad507377bb0f55ca4cb85a2306fca3b2b92a3b7246abfe79e85a0dfe1fb0d14c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/ronin/staking/BaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../interfaces/staking/IBaseStaking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"./RewardCalculation.sol\\\";\\n\\nabstract contract BaseStaking is\\n  RONTransferHelper,\\n  ReentrancyGuard,\\n  RewardCalculation,\\n  HasContracts,\\n  IBaseStaking,\\n  HasValidatorDeprecated\\n{\\n  /// @dev Mapping from pool address => staking pool detail\\n  mapping(address => PoolDetail) internal _stakingPool;\\n\\n  /// @dev The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n  uint256 internal _cooldownSecsToUndelegate;\\n  /// @dev The number of seconds that a candidate must wait to be revoked and take the self-staking amount back.\\n  uint256 internal _waitingSecsToRevoke;\\n\\n  /// @dev Mapping from admin address of an active pool => consensus address.\\n  mapping(address => address) internal _adminOfActivePoolMapping;\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  modifier noEmptyValue() {\\n    _requireValue();\\n    _;\\n  }\\n\\n  modifier anyExceptPoolAdmin(PoolDetail storage _pool, address _delegator) {\\n    _anyExceptPoolAdmin(_pool, _delegator);\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin(PoolDetail storage _pool, address _requester) {\\n    _requirePoolAdmin(_pool, _requester);\\n    _;\\n  }\\n\\n  modifier poolIsActive(address _poolAddr) {\\n    _poolIsActive(_poolAddr);\\n    _;\\n  }\\n\\n  function _requireValue() private view {\\n    if (msg.value == 0) revert ErrZeroValue();\\n  }\\n\\n  function _requirePoolAdmin(PoolDetail storage _pool, address _requester) private view {\\n    if (_pool.admin != _requester) revert ErrOnlyPoolAdminAllowed();\\n  }\\n\\n  function _anyExceptPoolAdmin(PoolDetail storage _pool, address _delegator) private view {\\n    if (_pool.admin == _delegator) revert ErrPoolAdminForbidden();\\n  }\\n\\n  function _poolIsActive(address _poolAddr) private view {\\n    if (!IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isValidatorCandidate(_poolAddr))\\n      revert ErrInactivePool(_poolAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function isAdminOfActivePool(address _poolAdminAddr) public view override returns (bool) {\\n    return _adminOfActivePoolMapping[_poolAdminAddr] != address(0);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getPoolAddressOf(address _poolAdminAddr) external view override returns (address) {\\n    return _adminOfActivePoolMapping[_poolAdminAddr];\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getPoolDetail(\\n    address _poolAddr\\n  ) external view returns (address _admin, uint256 _stakingAmount, uint256 _stakingTotal) {\\n    PoolDetail storage _pool = _stakingPool[_poolAddr];\\n    return (_pool.admin, _pool.stakingAmount, _pool.stakingTotal);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getManySelfStakings(address[] calldata _pools) external view returns (uint256[] memory _selfStakings) {\\n    _selfStakings = new uint256[](_pools.length);\\n    for (uint _i = 0; _i < _pools.length; ) {\\n      _selfStakings[_i] = _stakingPool[_pools[_i]].stakingAmount;\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingTotal(address _poolAddr) public view override returns (uint256) {\\n    return _stakingPool[_poolAddr].stakingTotal;\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingTotals(\\n    address[] calldata _poolList\\n  ) public view override returns (uint256[] memory _stakingAmounts) {\\n    _stakingAmounts = new uint256[](_poolList.length);\\n    for (uint _i = 0; _i < _poolList.length; ) {\\n      _stakingAmounts[_i] = getStakingTotal(_poolList[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) public view override returns (uint256) {\\n    return _stakingPool[_poolAddr].delegatingAmount[_user];\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingAmounts(\\n    address[] calldata _poolAddrs,\\n    address[] calldata _userList\\n  ) external view override returns (uint256[] memory _stakingAmounts) {\\n    if (_poolAddrs.length != _userList.length) revert ErrInvalidArrays();\\n    _stakingAmounts = new uint256[](_poolAddrs.length);\\n    for (uint _i = 0; _i < _stakingAmounts.length; ) {\\n      _stakingAmounts[_i] = _stakingPool[_poolAddrs[_i]].delegatingAmount[_userList[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256) {\\n    return _cooldownSecsToUndelegate;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256) {\\n    return _waitingSecsToRevoke;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external override onlyAdmin {\\n    _setCooldownSecsToUndelegate(_cooldownSecs);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external override onlyAdmin {\\n    _setWaitingSecsToRevoke(_secs);\\n  }\\n\\n  /**\\n   * @dev Sets the minium number of seconds to undelegate.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function _setCooldownSecsToUndelegate(uint256 _cooldownSecs) internal {\\n    _cooldownSecsToUndelegate = _cooldownSecs;\\n    emit CooldownSecsToUndelegateUpdated(_cooldownSecs);\\n  }\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function _setWaitingSecsToRevoke(uint256 _secs) internal {\\n    _waitingSecsToRevoke = _secs;\\n    emit WaitingSecsToRevokeUpdated(_secs);\\n  }\\n\\n  /**\\n   * @dev Changes the delegate amount.\\n   */\\n  function _changeDelegatingAmount(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _newDelegatingAmount,\\n    uint256 _newStakingTotal\\n  ) internal {\\n    _syncUserReward(_pool.addr, _delegator, _newDelegatingAmount);\\n    _pool.stakingTotal = _newStakingTotal;\\n    _pool.delegatingAmount[_delegator] = _newDelegatingAmount;\\n  }\\n}\\n\",\"keccak256\":\"0xa1a3e6edfc9d8da5c851de0647c58bc86b0ec2e4a1c041f1b2a73d91b3d69b8d\",\"license\":\"MIT\"},\"contracts/ronin/staking/CandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../libraries/AddressArrayUtils.sol\\\";\\nimport \\\"../../interfaces/staking/ICandidateStaking.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract CandidateStaking is BaseStaking, ICandidateStaking, GlobalConfigConsumer, PercentageConsumer {\\n  /// @dev The minimum threshold for being a validator candidate.\\n  uint256 internal _minValidatorStakingAmount;\\n\\n  /// @dev The max commission rate that the validator can set (in range of [0;100_00] means [0-100%])\\n  uint256 internal _maxCommissionRate;\\n  /// @dev The min commission rate that the validator can set (in range of [0;100_00] means [0-100%])\\n  uint256 internal _minCommissionRate;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function minValidatorStakingAmount() public view override returns (uint256) {\\n    return _minValidatorStakingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function getCommissionRateRange() external view override returns (uint256, uint256) {\\n    return (_minCommissionRate, _maxCommissionRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setMinValidatorStakingAmount(uint256 _threshold) external override onlyAdmin {\\n    _setMinValidatorStakingAmount(_threshold);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setCommissionRateRange(uint256 _minRate, uint256 _maxRate) external override onlyAdmin {\\n    _setCommissionRateRange(_minRate, _maxRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable override nonReentrant {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    if (_commissionRate > _maxCommissionRate || _commissionRate < _minCommissionRate) revert ErrInvalidCommissionRate();\\n\\n    uint256 _amount = msg.value;\\n    address payable _poolAdmin = payable(msg.sender);\\n    _applyValidatorCandidate(\\n      _poolAdmin,\\n      _candidateAdmin,\\n      _consensusAddr,\\n      _treasuryAddr,\\n      _bridgeOperatorAddr,\\n      _commissionRate,\\n      _amount\\n    );\\n\\n    PoolDetail storage _pool = _stakingPool[_consensusAddr];\\n    _pool.admin = _poolAdmin;\\n    _pool.addr = _consensusAddr;\\n    _adminOfActivePoolMapping[_poolAdmin] = _consensusAddr;\\n\\n    _stake(_stakingPool[_consensusAddr], _poolAdmin, _amount);\\n    emit PoolApproved(_consensusAddr, _poolAdmin);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external override poolIsActive(_consensusAddr) onlyPoolAdmin(_stakingPool[_consensusAddr], msg.sender) {\\n    if (_commissionRate > _maxCommissionRate || _commissionRate < _minCommissionRate) revert ErrInvalidCommissionRate();\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execRequestUpdateCommissionRate(\\n      _consensusAddr,\\n      _effectiveDaysOnwards,\\n      _commissionRate\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function execDeprecatePools(\\n    address[] calldata _pools,\\n    uint256 _newPeriod\\n  ) external override onlyContract(ContractType.VALIDATOR) {\\n    if (_pools.length == 0) {\\n      return;\\n    }\\n\\n    for (uint _i = 0; _i < _pools.length; ) {\\n      PoolDetail storage _pool = _stakingPool[_pools[_i]];\\n      // Deactivate the pool admin in the active mapping.\\n      delete _adminOfActivePoolMapping[_pool.admin];\\n\\n      // Deduct and transfer the self staking amount to the pool admin.\\n      uint256 _deductingAmount = _pool.stakingAmount;\\n      if (_deductingAmount > 0) {\\n        _deductStakingAmount(_pool, _deductingAmount);\\n        if (!_unsafeSendRON(payable(_pool.admin), _deductingAmount, DEFAULT_ADDITION_GAS)) {\\n          emit StakingAmountTransferFailed(_pool.addr, _pool.admin, _deductingAmount, address(this).balance);\\n        }\\n      }\\n\\n      // Settle the unclaimed reward and transfer to the pool admin.\\n      uint256 _lastRewardAmount = _claimReward(_pools[_i], _pool.admin, _newPeriod);\\n      if (_lastRewardAmount > 0) {\\n        _unsafeSendRON(payable(_pool.admin), _lastRewardAmount, DEFAULT_ADDITION_GAS);\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    emit PoolsDeprecated(_pools);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function stake(address _consensusAddr) external payable override noEmptyValue poolIsActive(_consensusAddr) {\\n    _stake(_stakingPool[_consensusAddr], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function unstake(\\n    address _consensusAddr,\\n    uint256 _amount\\n  ) external override nonReentrant poolIsActive(_consensusAddr) {\\n    if (_amount == 0) revert ErrUnstakeZeroAmount();\\n    address _requester = msg.sender;\\n    PoolDetail storage _pool = _stakingPool[_consensusAddr];\\n    uint256 _remainAmount = _pool.stakingAmount - _amount;\\n    if (_remainAmount < _minValidatorStakingAmount) revert ErrStakingAmountLeft();\\n\\n    _unstake(_pool, _requester, _amount);\\n    if (!_unsafeSendRON(payable(_requester), _amount, DEFAULT_ADDITION_GAS)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestRenounce(\\n    address _consensusAddr\\n  ) external override poolIsActive(_consensusAddr) onlyPoolAdmin(_stakingPool[_consensusAddr], msg.sender) {\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execRequestRenounceCandidate(\\n      _consensusAddr,\\n      _waitingSecsToRevoke\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestEmergencyExit(\\n    address _consensusAddr\\n  ) external override poolIsActive(_consensusAddr) onlyPoolAdmin(_stakingPool[_consensusAddr], msg.sender) {\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execEmergencyExit(_consensusAddr, _waitingSecsToRevoke);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-applyValidatorCandidate`\\n   */\\n  function _applyValidatorCandidate(\\n    address payable _poolAdmin,\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate,\\n    uint256 _amount\\n  ) internal {\\n    if (!_unsafeSendRON(_poolAdmin, 0, DEFAULT_ADDITION_GAS)) revert ErrCannotInitTransferRON(_poolAdmin, \\\"pool admin\\\");\\n    if (!_unsafeSendRON(_treasuryAddr, 0, DEFAULT_ADDITION_GAS))\\n      revert ErrCannotInitTransferRON(_treasuryAddr, \\\"treasury\\\");\\n    if (_amount < _minValidatorStakingAmount) revert ErrInsufficientStakingAmount();\\n    if (_poolAdmin != _candidateAdmin || _candidateAdmin != _treasuryAddr) revert ErrThreeInteractionAddrsNotEqual();\\n\\n    {\\n      address[] memory _diffAddrs = new address[](3);\\n      _diffAddrs[0] = _poolAdmin;\\n      _diffAddrs[1] = _consensusAddr;\\n      _diffAddrs[2] = _bridgeOperatorAddr;\\n      if (AddressArrayUtils.hasDuplicate(_diffAddrs)) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n    }\\n\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execApplyValidatorCandidate(\\n      _candidateAdmin,\\n      _consensusAddr,\\n      _treasuryAddr,\\n      _bridgeOperatorAddr,\\n      _commissionRate\\n    );\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-stake`\\n   */\\n  function _stake(\\n    PoolDetail storage _pool,\\n    address _requester,\\n    uint256 _amount\\n  ) internal onlyPoolAdmin(_pool, _requester) {\\n    _pool.stakingAmount += _amount;\\n    _changeDelegatingAmount(_pool, _requester, _pool.stakingAmount, _pool.stakingTotal + _amount);\\n    _pool.lastDelegatingTimestamp[_requester] = block.timestamp;\\n    emit Staked(_pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-unstake`\\n   */\\n  function _unstake(\\n    PoolDetail storage _pool,\\n    address _requester,\\n    uint256 _amount\\n  ) internal onlyPoolAdmin(_pool, _requester) {\\n    if (_amount > _pool.stakingAmount) revert ErrInsufficientStakingAmount();\\n    if (_pool.lastDelegatingTimestamp[_requester] + _cooldownSecsToUndelegate > block.timestamp) {\\n      revert ErrUnstakeTooEarly();\\n    }\\n\\n    _pool.stakingAmount -= _amount;\\n    _changeDelegatingAmount(_pool, _requester, _pool.stakingAmount, _pool.stakingTotal - _amount);\\n    emit Unstaked(_pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   * @return The actual deducted amount\\n   */\\n  function _deductStakingAmount(PoolDetail storage _pool, uint256 _amount) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function _setMinValidatorStakingAmount(uint256 _threshold) internal {\\n    _minValidatorStakingAmount = _threshold;\\n    emit MinValidatorStakingAmountUpdated(_threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the max commission rate that a candidate can set.\\n   *\\n   * Emits the `MaxCommissionRateUpdated` event.\\n   *\\n   */\\n  function _setCommissionRateRange(uint256 _minRate, uint256 _maxRate) internal {\\n    if (_maxRate > _MAX_PERCENTAGE || _minRate > _maxRate) revert ErrInvalidCommissionRate();\\n    _maxCommissionRate = _maxRate;\\n    _minCommissionRate = _minRate;\\n    emit CommissionRateRangeUpdated(_minRate, _maxRate);\\n  }\\n}\\n\",\"keccak256\":\"0x2d5d2b6fff08ac2754cf8dccc8c56757a916d83b25e0a657f898f87c5c28c17b\",\"license\":\"MIT\"},\"contracts/ronin/staking/DelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IDelegatorStaking.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract DelegatorStaking is BaseStaking, IDelegatorStaking {\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegate(address _consensusAddr) external payable noEmptyValue poolIsActive(_consensusAddr) {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    _delegate(_stakingPool[_consensusAddr], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external nonReentrant {\\n    address payable _delegator = payable(msg.sender);\\n    _undelegate(_stakingPool[_consensusAddr], _delegator, _amount);\\n    if (!_sendRON(_delegator, _amount)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external nonReentrant {\\n    if (_consensusAddrs.length == 0 || _consensusAddrs.length != _amounts.length) revert ErrInvalidArrays();\\n\\n    address payable _delegator = payable(msg.sender);\\n    uint256 _total;\\n\\n    for (uint _i = 0; _i < _consensusAddrs.length; ) {\\n      _total += _amounts[_i];\\n      _undelegate(_stakingPool[_consensusAddrs[_i]], _delegator, _amounts[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    if (!_sendRON(_delegator, _total)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external nonReentrant poolIsActive(_consensusAddrDst) {\\n    address _delegator = msg.sender;\\n    _undelegate(_stakingPool[_consensusAddrSrc], _delegator, _amount);\\n    _delegate(_stakingPool[_consensusAddrDst], _delegator, _amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function claimRewards(\\n    address[] calldata _consensusAddrList\\n  ) external override nonReentrant returns (uint256 _amount) {\\n    _amount = _claimRewards(msg.sender, _consensusAddrList);\\n    _transferRON(payable(msg.sender), _amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegateRewards(\\n    address[] calldata _consensusAddrList,\\n    address _consensusAddrDst\\n  ) external override nonReentrant poolIsActive(_consensusAddrDst) returns (uint256 _amount) {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    return _delegateRewards(msg.sender, _consensusAddrList, _consensusAddrDst);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function getRewards(\\n    address _user,\\n    address[] calldata _poolAddrList\\n  ) external view returns (uint256[] memory _rewards) {\\n    address _consensusAddr;\\n    uint256 _period = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n    _rewards = new uint256[](_poolAddrList.length);\\n\\n    for (uint256 _i = 0; _i < _poolAddrList.length; ) {\\n      _consensusAddr = _poolAddrList[_i];\\n      _rewards[_i] = _getReward(_consensusAddr, _user, _period, getStakingAmount(_consensusAddr, _user));\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   * Note: This function does not verify the `msg.value` with the amount.\\n   *\\n   */\\n  function _delegate(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _amount\\n  ) internal anyExceptPoolAdmin(_pool, _delegator) {\\n    _changeDelegatingAmount(\\n      _pool,\\n      _delegator,\\n      _pool.delegatingAmount[_delegator] + _amount,\\n      _pool.stakingTotal + _amount\\n    );\\n    _pool.lastDelegatingTimestamp[_delegator] = block.timestamp;\\n    emit Delegated(_delegator, _pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Undelegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   * - The amount is larger than 0.\\n   * - The delegating amount is larger than or equal to the undelegating amount.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   * Note: Consider transferring back the amount of RON after calling this function.\\n   *\\n   */\\n  function _undelegate(\\n    PoolDetail storage _pool,\\n    address _delegator,\\n    uint256 _amount\\n  ) private anyExceptPoolAdmin(_pool, _delegator) {\\n    if (_amount == 0) revert ErrUndelegateZeroAmount();\\n    if (_pool.delegatingAmount[_delegator] < _amount) revert ErrInsufficientDelegatingAmount();\\n\\n    IRoninValidatorSet _validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    if (\\n      _validatorContract.isValidatorCandidate(_pool.addr) &&\\n      _validatorContract.getCandidateInfo(_pool.addr).revokingTimestamp == 0 && // if candidate is not on renunciation\\n      _pool.lastDelegatingTimestamp[_delegator] + _cooldownSecsToUndelegate >= block.timestamp // delegator is still in cooldown\\n    ) revert ErrUndelegateTooEarly();\\n\\n    _changeDelegatingAmount(\\n      _pool,\\n      _delegator,\\n      _pool.delegatingAmount[_delegator] - _amount,\\n      _pool.stakingTotal - _amount\\n    );\\n    emit Undelegated(_delegator, _pool.addr, _amount);\\n  }\\n\\n  /**\\n   * @dev Claims rewards from the pools `_poolAddrList`.\\n   * Note: This function does not transfer reward to user.\\n   */\\n  function _claimRewards(address _user, address[] memory _poolAddrList) internal returns (uint256 _amount) {\\n    uint256 _period = _currentPeriod();\\n    for (uint256 _i = 0; _i < _poolAddrList.length; ) {\\n      _amount += _claimReward(_poolAddrList[_i], _user, _period);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   */\\n  function _delegateRewards(\\n    address _user,\\n    address[] calldata _poolAddrList,\\n    address _poolAddrDst\\n  ) internal returns (uint256 _amount) {\\n    _amount = _claimRewards(_user, _poolAddrList);\\n    _delegate(_stakingPool[_poolAddrDst], _user, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x26d154ed736d57c1ecc6be99ac33274640039975374584bd4a12b8f53b68cb5e\",\"license\":\"MIT\"},\"contracts/ronin/staking/RewardCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IRewardPool.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\n\\n/**\\n * @title RewardCalculation contract\\n * @dev This contract mainly contains the methods to calculate reward for staking contract.\\n */\\nabstract contract RewardCalculation is IRewardPool {\\n  /// @dev Mapping from pool address => period number => accumulated rewards per share (one unit staking)\\n  mapping(address => mapping(uint256 => PeriodWrapper)) private _accumulatedRps;\\n  /// @dev Mapping from the pool address => user address => the reward info of the user\\n  mapping(address => mapping(address => UserRewardFields)) private _userReward;\\n  /// @dev Mapping from the pool address => reward pool fields\\n  mapping(address => PoolFields) private _stakingPool;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256) {\\n    return _getReward(_poolAddr, _user, _currentPeriod(), getStakingAmount(_poolAddr, _user));\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) public view virtual returns (uint256);\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingTotal(address _poolAddr) public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function _getReward(\\n    address _poolAddr,\\n    address _user,\\n    uint256 _latestPeriod,\\n    uint256 _latestStakingAmount\\n  ) internal view returns (uint256) {\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n\\n    if (_reward.lastPeriod == _latestPeriod) {\\n      return _reward.debited;\\n    }\\n\\n    uint256 _aRps;\\n    uint256 _lastPeriodReward;\\n    PoolFields storage _pool = _stakingPool[_poolAddr];\\n    PeriodWrapper storage _wrappedArps = _accumulatedRps[_poolAddr][_reward.lastPeriod];\\n\\n    if (_wrappedArps.lastPeriod > 0) {\\n      // Calculates the last period reward if the aRps at the period is set\\n      _aRps = _wrappedArps.inner;\\n      _lastPeriodReward = _reward.lowestAmount * (_aRps - _reward.aRps);\\n    } else {\\n      // Fallbacks to the previous aRps in case the aRps is not set\\n      _aRps = _reward.aRps;\\n    }\\n\\n    uint256 _newPeriodsReward = _latestStakingAmount * (_pool.aRps - _aRps);\\n    return _reward.debited + (_lastPeriodReward + _newPeriodsReward) / 1e18;\\n  }\\n\\n  /**\\n   * @dev Syncs the user reward.\\n   *\\n   * Emits the event `UserRewardUpdated` once the debit amount is updated.\\n   * Emits the event `PoolSharesUpdated` once the pool share is updated.\\n   *\\n   * Note: The method should be called whenever the user's staking amount changes.\\n   *\\n   */\\n  function _syncUserReward(address _poolAddr, address _user, uint256 _newStakingAmount) internal {\\n    uint256 _period = _currentPeriod();\\n    PoolFields storage _pool = _stakingPool[_poolAddr];\\n    uint256 _lastShares = _pool.shares.inner;\\n\\n    // Updates the pool shares if it is outdated\\n    if (_pool.shares.lastPeriod < _period) {\\n      _pool.shares = PeriodWrapper(getStakingTotal(_poolAddr), _period);\\n    }\\n\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n    uint256 _currentStakingAmount = getStakingAmount(_poolAddr, _user);\\n    uint256 _debited = _getReward(_poolAddr, _user, _period, _currentStakingAmount);\\n\\n    if (_reward.debited != _debited) {\\n      _reward.debited = _debited;\\n      emit UserRewardUpdated(_poolAddr, _user, _debited);\\n    }\\n\\n    _syncMinStakingAmount(_pool, _reward, _period, _newStakingAmount, _currentStakingAmount);\\n    _reward.aRps = _pool.aRps;\\n    _reward.lastPeriod = _period;\\n\\n    if (_pool.shares.inner != _lastShares) {\\n      emit PoolSharesUpdated(_period, _poolAddr, _pool.shares.inner);\\n    }\\n  }\\n\\n  /**\\n   * @dev Syncs the minimum staking amount of an user in the current period.\\n   */\\n  function _syncMinStakingAmount(\\n    PoolFields storage _pool,\\n    UserRewardFields storage _reward,\\n    uint256 _latestPeriod,\\n    uint256 _newStakingAmount,\\n    uint256 _currentStakingAmount\\n  ) internal {\\n    if (_reward.lastPeriod < _latestPeriod) {\\n      _reward.lowestAmount = _currentStakingAmount;\\n    }\\n\\n    uint256 _lowestAmount = Math.min(_reward.lowestAmount, _newStakingAmount);\\n    uint256 _diffAmount = _reward.lowestAmount - _lowestAmount;\\n    if (_diffAmount > 0) {\\n      _reward.lowestAmount = _lowestAmount;\\n      if (_pool.shares.inner < _diffAmount) revert ErrInvalidPoolShare();\\n      _pool.shares.inner -= _diffAmount;\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the settled reward for a specific user.\\n   *\\n   * @param _lastPeriod Must be in two possible value: `_currentPeriod` in normal calculation, or\\n   * `_currentPeriod + 1` in case of calculating the reward for revoked validators.\\n   *\\n   * Emits the `RewardClaimed` event and the `UserRewardUpdated` event.\\n   *\\n   * Note: This method should be called before transferring rewards for the user.\\n   *\\n   */\\n  function _claimReward(address _poolAddr, address _user, uint256 _lastPeriod) internal returns (uint256 _amount) {\\n    uint256 _currentStakingAmount = getStakingAmount(_poolAddr, _user);\\n    _amount = _getReward(_poolAddr, _user, _lastPeriod, _currentStakingAmount);\\n    emit RewardClaimed(_poolAddr, _user, _amount);\\n\\n    UserRewardFields storage _reward = _userReward[_poolAddr][_user];\\n    _reward.debited = 0;\\n    _syncMinStakingAmount(_stakingPool[_poolAddr], _reward, _lastPeriod, _currentStakingAmount, _currentStakingAmount);\\n    _reward.lastPeriod = _lastPeriod;\\n    _reward.aRps = _stakingPool[_poolAddr].aRps;\\n    emit UserRewardUpdated(_poolAddr, _user, 0);\\n  }\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_poolAddrs`.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolUpdateConflicted` when the pool is already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function _recordRewards(address[] memory _poolAddrs, uint256[] calldata _rewards, uint256 _period) internal {\\n    if (_poolAddrs.length != _rewards.length) {\\n      emit PoolsUpdateFailed(_period, _poolAddrs, _rewards);\\n      return;\\n    }\\n\\n    uint256 _rps;\\n    uint256 _count;\\n    address _poolAddr;\\n    uint256 _stakingTotal;\\n    uint256[] memory _aRps = new uint256[](_poolAddrs.length);\\n    uint256[] memory _shares = new uint256[](_poolAddrs.length);\\n    address[] memory _conflicted = new address[](_poolAddrs.length);\\n\\n    for (uint _i = 0; _i < _poolAddrs.length; _i++) {\\n      _poolAddr = _poolAddrs[_i];\\n      PoolFields storage _pool = _stakingPool[_poolAddr];\\n      _stakingTotal = getStakingTotal(_poolAddr);\\n\\n      if (_accumulatedRps[_poolAddr][_period].lastPeriod == _period) {\\n        unchecked {\\n          _conflicted[_count++] = _poolAddr;\\n        }\\n        continue;\\n      }\\n\\n      // Updates the pool shares if it is outdated\\n      if (_pool.shares.lastPeriod < _period) {\\n        _pool.shares = PeriodWrapper(_stakingTotal, _period);\\n      }\\n\\n      // The rps is 0 if no one stakes for the pool\\n      _rps = _pool.shares.inner == 0 ? 0 : (_rewards[_i] * 1e18) / _pool.shares.inner;\\n      _aRps[_i - _count] = _pool.aRps += _rps;\\n      _accumulatedRps[_poolAddr][_period] = PeriodWrapper(_pool.aRps, _period);\\n      _pool.shares.inner = _stakingTotal;\\n      _shares[_i - _count] = _pool.shares.inner;\\n      _poolAddrs[_i - _count] = _poolAddr;\\n    }\\n\\n    if (_count > 0) {\\n      assembly {\\n        mstore(_conflicted, _count)\\n        mstore(_poolAddrs, sub(mload(_poolAddrs), _count))\\n      }\\n      emit PoolsUpdateConflicted(_period, _conflicted);\\n    }\\n\\n    if (_poolAddrs.length > 0) {\\n      emit PoolsUpdated(_period, _poolAddrs, _aRps, _shares);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current period.\\n   */\\n  function _currentPeriod() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x98f330685911b18730cf85223ecf30f4da2ec19dda5608b5d82c6b5e4f222fa1\",\"license\":\"MIT\"},\"contracts/ronin/staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./CandidateStaking.sol\\\";\\nimport \\\"./DelegatorStaking.sol\\\";\\n\\ncontract Staking is IStaking, CandidateStaking, DelegatorStaking, Initializable {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  receive() external payable onlyContract(ContractType.VALIDATOR) {}\\n\\n  fallback() external payable onlyContract(ContractType.VALIDATOR) {}\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    uint256 __minValidatorStakingAmount,\\n    uint256 __maxCommissionRate,\\n    uint256 __cooldownSecsToUndelegate,\\n    uint256 __waitingSecsToRevoke\\n  ) external initializer {\\n    _setContract(ContractType.VALIDATOR, __validatorContract);\\n    _setMinValidatorStakingAmount(__minValidatorStakingAmount);\\n    _setCommissionRateRange(0, __maxCommissionRate);\\n    _setCooldownSecsToUndelegate(__cooldownSecsToUndelegate);\\n    _setWaitingSecsToRevoke(__waitingSecsToRevoke);\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n    delete ______deprecatedValidator;\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function execRecordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable override onlyContract(ContractType.VALIDATOR) {\\n    _recordRewards(_consensusAddrs, _rewards, _period);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function execDeductStakingAmount(\\n    address _consensusAddr,\\n    uint256 _amount\\n  ) external override onlyContract(ContractType.VALIDATOR) returns (uint256 _actualDeductingAmount) {\\n    _actualDeductingAmount = _deductStakingAmount(_stakingPool[_consensusAddr], _amount);\\n    address payable _validatorContractAddr = payable(msg.sender);\\n    if (!_unsafeSendRON(_validatorContractAddr, _actualDeductingAmount)) {\\n      emit StakingAmountDeductFailed(\\n        _consensusAddr,\\n        _validatorContractAddr,\\n        _actualDeductingAmount,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc RewardCalculation\\n   */\\n  function _currentPeriod() internal view virtual override returns (uint256) {\\n    return IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n  }\\n\\n  /**\\n   * @inheritdoc CandidateStaking\\n   */\\n  function _deductStakingAmount(\\n    PoolDetail storage _pool,\\n    uint256 _amount\\n  ) internal override returns (uint256 _actualDeductingAmount) {\\n    _actualDeductingAmount = Math.min(_pool.stakingAmount, _amount);\\n\\n    _pool.stakingAmount -= _actualDeductingAmount;\\n    _changeDelegatingAmount(\\n      _pool,\\n      _pool.admin,\\n      _pool.stakingAmount,\\n      Math.subNonNegative(_pool.stakingTotal, _actualDeductingAmount)\\n    );\\n    emit Unstaked(_pool.addr, _actualDeductingAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x9ccdb181433c6e58de4684201bb1db1ae2b7f7b2def994a30457b3d08852e1a1\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\",\"keccak256\":\"0xe0c75a4a82f3dc7dcf89dd5cab9ae1ec93c136b7d8210b3f9e18f3215aa69ffb\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION\\n}\\n\",\"keccak256\":\"0x65a0b062c8f963b4679a128abb3840167de1b10b32a8528787f47915a7d9ccc3\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xb3e242a9cb967a64e0ef6419a6b260b647b40082102ce3ab899ab690c84957fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060016000556200002162000027565b620000e9565b60d154610100900460ff1615620000945760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60d15460ff9081161015620000e75760d1805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61391080620000f96000396000f3fe6080604052600436106102345760003560e01c806376664b651161012e578063acd79c46116100ab578063de981f1b1161006f578063de981f1b14610719578063e22d1c9d14610739578063e5376f5414610759578063f92ad2191461076c578063f9f031df1461078c57610246565b8063acd79c461461060f578063af24542914610622578063c2a672e014610637578063c508700314610657578063d01b8eed146106a857610246565b806391f8723f116100f257806391f8723f1461056f578063924f081e1461058f5780639488e4e9146105af578063969ffc14146105cf578063aa15a6fd146105ef57610246565b806376664b65146104c1578063865e6fd3146104e1578063888b9ae914610501578063895ab74214610521578063909791dd1461055a57610246565b806342ef3c34116101bc5780635cd8a76b116101805780635cd8a76b146104355780636558954f1461044a578063679a6e43146104615780636b091695146104815780636bd8f804146104a157610246565b806342ef3c341461039a5780634530d202146103ba5780634d99dd16146103e257806357473447146104025780635c19a95c1461042257610246565b80631658c86e116102035780631658c86e146102dc57806326476204146102fc5780632715805e1461030f5780633d8e846e1461032f57806342e0c4081461034f57610246565b806303827884146102515780630682e8fa1461027a578063095f64751461028f578063097e4a9d146102bc57610246565b36610246576008610244816107ac565b005b6008610244816107ac565b34801561025d57600080fd5b506102676104b081565b6040519081526020015b60405180910390f35b34801561028657600080fd5b50603854610267565b34801561029b57600080fd5b506102af6102aa366004613070565b610804565b6040516102719190613116565b3480156102c857600080fd5b506102676102d736600461313e565b61093c565b3480156102e857600080fd5b506102446102f7366004613194565b6109c2565b61024461030a366004613194565b610a66565b34801561031b57600080fd5b5061026761032a3660046131b8565b610a9f565b34801561033b57600080fd5b506102af61034a3660046131e4565b610b30565b34801561035b57600080fd5b5061038a61036a366004613194565b6001600160a01b039081166000908152603a602052604090205416151590565b6040519015158152602001610271565b3480156103a657600080fd5b506102af6103b5366004613238565b610c5e565b3480156103c657600080fd5b50606e54606d5460408051928352602083019190915201610271565b3480156103ee57600080fd5b506102446103fd3660046131b8565b610d2a565b34801561040e57600080fd5b5061024461041d366004613279565b610da6565b610244610430366004613194565b610db8565b34801561044157600080fd5b50610244610e26565b34801561045657600080fd5b506102676201518081565b34801561046d57600080fd5b5061024461047c36600461329b565b610ee5565b34801561048d57600080fd5b5061026761049c3660046132b4565b610ef6565b3480156104ad57600080fd5b506102446104bc3660046132ed565b610f18565b3480156104cd57600080fd5b506102676104dc3660046132b4565b610f9d565b3480156104ed57600080fd5b506102446104fc36600461333d565b610fcc565b34801561050d57600080fd5b5061024461051c36600461329b565b610fe7565b34801561052d57600080fd5b5061026761053c366004613194565b6001600160a01b031660009081526037602052604090206003015490565b34801561056657600080fd5b50606c54610267565b34801561057b57600080fd5b506102af61058a366004613238565b610ff8565b34801561059b57600080fd5b506102446105aa366004613359565b611098565b3480156105bb57600080fd5b506102446105ca366004613070565b611171565b3480156105db57600080fd5b506102446105ea36600461329b565b6112a0565b3480156105fb57600080fd5b5061024461060a366004613194565b6112b1565b61024461061d36600461338e565b611321565b34801561062e57600080fd5b50603954610267565b34801561064357600080fd5b506102446106523660046131b8565b611375565b34801561066357600080fd5b50610690610672366004613194565b6001600160a01b039081166000908152603a60205260409020541690565b6040516001600160a01b039091168152602001610271565b3480156106b457600080fd5b506106f46106c3366004613194565b6001600160a01b03808216600090815260376020526040902060018101546002820154600390920154921693909250565b604080516001600160a01b039094168452602084019290925290820152606001610271565b34801561072557600080fd5b50610690610734366004613401565b61142f565b34801561074557600080fd5b5061024461075436600461341c565b6114aa565b610244610767366004613467565b61166e565b34801561077857600080fd5b506102446107873660046134cb565b6117be565b34801561079857600080fd5b506102676107a7366004613238565b6118b5565b6107b58161142f565b6001600160a01b0316336001600160a01b031614610801576000356001600160e01b03191681336040516320e0f98d60e21b81526004016107f893929190613539565b60405180910390fd5b50565b6060838214610826576040516376081a7b60e11b815260040160405180910390fd5b836001600160401b0381111561083e5761083e613570565b604051908082528060200260200182016040528015610867578160200160208202803683370190505b50905060005b8151811015610933576037600087878481811061088c5761088c613586565b90506020020160208101906108a19190613194565b6001600160a01b03166001600160a01b0316815260200190815260200160002060040160008585848181106108d8576108d8613586565b90506020020160208101906108ed9190613194565b6001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061092057610920613586565b602090810291909101015260010161086d565b50949350505050565b60006002600054036109605760405162461bcd60e51b81526004016107f89061359c565b60026000558161096f81611935565b336000908152603a60205260409020546001600160a01b0316156109a857604051632fc6bfb160e21b81523360048201526024016107f8565b6109b4338686866119d3565b600160005595945050505050565b806109cc81611935565b6001600160a01b0382166000908152603760205260409020336109ef8282611a40565b6109f9600861142f565b60395460405163dd716ad360e01b81526001600160a01b038781166004830152602482019290925291169063dd716ad3906044015b600060405180830381600087803b158015610a4857600080fd5b505af1158015610a5c573d6000803e3d6000fd5b5050505050505050565b610a6e611a70565b80610a7881611935565b6001600160a01b0382166000908152603760205260409020610a9b903334611a93565b5050565b60006008610aac816107ac565b6001600160a01b0384166000908152603760205260409020610ace9084611b3e565b915033610adb8184611bdb565b610b2857604080518481524760208201526001600160a01b0380841692908816917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35b505092915050565b6060600080610b3f600861142f565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba091906135d3565b9050836001600160401b03811115610bba57610bba613570565b604051908082528060200260200182016040528015610be3578160200160208202803683370190505b50925060005b84811015610c5457858582818110610c0357610c03613586565b9050602002016020810190610c189190613194565b9250610c2f838884610c2a878c610f9d565b611c37565b848281518110610c4157610c41613586565b6020908102919091010152600101610be9565b5050509392505050565b6060816001600160401b03811115610c7857610c78613570565b604051908082528060200260200182016040528015610ca1578160200160208202803683370190505b50905060005b82811015610d235760376000858584818110610cc557610cc5613586565b9050602002016020810190610cda9190613194565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020154828281518110610d1057610d10613586565b6020908102919091010152600101610ca7565b5092915050565b600260005403610d4c5760405162461bcd60e51b81526004016107f89061359c565b600260009081556001600160a01b03831681526037602052604090203390610d75908284611d33565b610d7f8183611f6b565b610d9c57604051635ff7115760e11b815260040160405180910390fd5b5050600160005550565b610dae611fb3565b610a9b828261200d565b610dc0611a70565b80610dca81611935565b336000908152603a60205260409020546001600160a01b031615610e0357604051632fc6bfb160e21b81523360048201526024016107f8565b6001600160a01b0382166000908152603760205260409020610a9b903334612081565b60d154600290610100900460ff16158015610e48575060d15460ff8083169116105b610e645760405162461bcd60e51b81526004016107f8906135ec565b60d1805461ffff191660ff831617610100179055603654610e90906008906001600160a01b0316612130565b603680546001600160a01b031916905560d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b610eed611fb3565b610801816121d4565b6000610f0f8383610f05612209565b610c2a8787610f9d565b90505b92915050565b600260005403610f3a5760405162461bcd60e51b81526004016107f89061359c565b600260005581610f4981611935565b6001600160a01b03841660009081526037602052604090203390610f6e908285611d33565b6001600160a01b0384166000908152603760205260409020610f91908285612081565b50506001600055505050565b6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b610fd4611fb3565b610fdd8161227b565b610a9b8282612130565b610fef611fb3565b610801816122b1565b6060816001600160401b0381111561101257611012613570565b60405190808252806020026020018201604052801561103b578160200160208202803683370190505b50905060005b82811015610d235761107384848381811061105e5761105e613586565b905060200201602081019061053c9190613194565b82828151811061108557611085613586565b6020908102919091010152600101611041565b826110a281611935565b6001600160a01b0384166000908152603760205260409020336110c58282611a40565b606d548411806110d65750606e5484105b156110f457604051631b8454a360e21b815260040160405180910390fd5b6110fe600861142f565b60405163e5125a1d60e01b81526001600160a01b0388811660048301526024820188905260448201879052919091169063e5125a1d90606401600060405180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b50505050505050505050565b6002600054036111935760405162461bcd60e51b81526004016107f89061359c565b60026000558215806111a55750828114155b156111c3576040516376081a7b60e11b815260040160405180910390fd5b336000805b8581101561126b578484828181106111e2576111e2613586565b90506020020135826111f49190613650565b91506112636037600089898581811061120f5761120f613586565b90506020020160208101906112249190613194565b6001600160a01b03166001600160a01b031681526020019081526020016000208487878581811061125757611257613586565b90506020020135611d33565b6001016111c8565b506112768282611f6b565b61129357604051635ff7115760e11b815260040160405180910390fd5b5050600160005550505050565b6112a8611fb3565b610801816122e6565b806112bb81611935565b6001600160a01b0382166000908152603760205260409020336112de8282611a40565b6112e8600861142f565b60395460405163a7c2f11960e01b81526001600160a01b038781166004830152602482019290925291169063a7c2f11990604401610a2e565b600861132c816107ac565b61136d86868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525088925087915086905061231b565b505050505050565b6002600054036113975760405162461bcd60e51b81526004016107f89061359c565b6002600055816113a681611935565b816000036113c7576040516331d9f7d760e01b815260040160405180910390fd5b6001600160a01b038316600090815260376020526040812060028101543392906113f2908690613663565b9050606c548110156114175760405163ef0a995760e01b815260040160405180910390fd5b611422828487612749565b61127683866104b0612835565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600a8111156114665761146661350f565b60ff1681526020810191909152604001600020546001600160a01b03169050806114a5578160405163409140df60e11b81526004016107f89190613676565b919050565b60086114b5816107ac565b82156116685760005b8381101561162d576000603760008787858181106114de576114de613586565b90506020020160208101906114f39190613194565b6001600160a01b0390811682526020808301939093526040918201600090812060018101549092168152603a909352912080546001600160a01b0319169055600281015490915080156115ba5761154a8282611b3e565b506001820154611566906001600160a01b0316826104b0612835565b6115ba5760018201548254604080518481524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b60006115fa8888868181106115d1576115d1613586565b90506020020160208101906115e69190613194565b60018501546001600160a01b031688612895565b9050801561161f57600183015461161d906001600160a01b0316826104b0612835565b505b8360010193505050506114be565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d8848460405161165f929190613684565b60405180910390a15b50505050565b6002600054036116905760405162461bcd60e51b81526004016107f89061359c565b60026000908155338152603a60205260409020546001600160a01b0316156116cd57604051632fc6bfb160e21b81523360048201526024016107f8565b606d548111806116de5750606e5481105b156116fc57604051631b8454a360e21b815260040160405180910390fd5b343361170d818888888888886129a7565b6001600160a01b0380871660008181526037602081815260408084206001810180549789166001600160a01b0319988916811790915581548816871782558552603a83529084208054909616851790955592909152905261176f818385611a93565b816001600160a01b0316876001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a350506001600055505050505050565b60d154610100900460ff16158080156117de575060d154600160ff909116105b806117f85750303b1580156117f8575060d15460ff166001145b6118145760405162461bcd60e51b81526004016107f8906135ec565b60d1805460ff1916600117905580156118375760d1805461ff0019166101001790555b611842600887612130565b61184b856121d4565b61185660008561200d565b61185f836122b1565b611868826122e6565b801561136d5760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b60006002600054036118d95760405162461bcd60e51b81526004016107f89061359c565b600260008190555061191e33848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612c4292505050565b905061192a3382612c93565b600160005592915050565b61193f600861142f565b604051635061f96960e11b81526001600160a01b038381166004830152919091169063a0c3f2d290602401602060405180830381865afa158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab91906136d2565b61080157604051630fd0c64560e11b81526001600160a01b03821660048201526024016107f8565b6000611a1285858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612c4292505050565b6001600160a01b0383166000908152603760205260409020909150611a38908683612081565b949350505050565b60018201546001600160a01b03828116911614610a9b57604051637bc65bd760e11b815260040160405180910390fd5b34600003611a9157604051636dfcbde560e11b815260040160405180910390fd5b565b8282611a9f8282611a40565b82856002016000828254611ab39190613650565b92505081905550611ad985858760020154868960030154611ad49190613650565b612cc8565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90611b2f9086815260200190565b60405180910390a25050505050565b6000611b4e836002015483612d03565b905080836002016000828254611b649190613663565b9091555050600183015460028401546003850154611b949286926001600160a01b0390911691611ad49086612d19565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611c28576040519150601f19603f3d011682016040523d82523d6000602084013e611c2d565b606091505b5090949350505050565b6001600160a01b03808516600090815260026020908152604080832093871683529290529081206003810154849003611c7257549050611a38565b6001600160a01b038616600090815260036020818152604080842060018084528286209487015486529390925283209182015483929015611cd75780546001860154909450611cc19085613663565b8560020154611cd091906136f4565b9250611cdf565b846001015493505b8154600090611cef908690613663565b611cf990896136f4565b9050670de0b6b3a7640000611d0e8286613650565b611d18919061370b565b8654611d249190613650565b9b9a5050505050505050505050565b8282611d3f8282612d33565b82600003611d6057604051637ab0c6ad60e11b815260040160405180910390fd5b6001600160a01b0384166000908152600486016020526040902054831115611d9b57604051630695534560e31b815260040160405180910390fd5b6000611da7600861142f565b8654604051635061f96960e11b81526001600160a01b03918216600482015291925082169063a0c3f2d290602401602060405180830381865afa158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1691906136d2565b8015611e90575085546040516328bde1e160e01b81526001600160a01b039182166004820152908216906328bde1e19060240160e060405180830381865afa158015611e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8a9190613738565b60a00151155b8015611ec357506038546001600160a01b03861660009081526005880160205260409020544291611ec091613650565b10155b15611ee15760405163f19f52bd60e01b815260040160405180910390fd5b6001600160a01b0385166000908152600487016020526040902054611f1f9087908790611f0f908890613663565b878a60030154611ad49190613663565b85546040518581526001600160a01b03918216918716907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c9060200160405180910390a3505050505050565b600081471015611fa9576040516302631c4f60e61b81526001600160e01b0319600035166004820152476024820152604481018390526064016107f8565b610f0f8383611bdb565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314611a91576000356001600160e01b0319166001604051620f948f60ea1b81526004016107f89291906137e3565b61271081118061201c57508082115b1561203a57604051631b8454a360e21b815260040160405180910390fd5b606d819055606e82905560408051838152602081018390527f677752f5bf9541b14288833909e5ec5a478103131c1ec08c4638943be5826c14910160405180910390a15050565b828261208d8282612d33565b6001600160a01b03841660009081526004860160205260409020546120cb90869086906120bb908790613650565b868960030154611ad49190613650565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b906121219087815260200190565b60405180910390a35050505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a8111156121665761216661350f565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a8111156121a7576121a761350f565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be290602001610eda565b6000612215600861142f565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227691906135d3565b905090565b806001600160a01b03163b60000361080157604051630bfc64a360e21b81526001600160a01b03821660048201526024016107f8565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a90602001610eda565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c67890602001610eda565b8351821461236457807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a58585856040516123579392919061384a565b60405180910390a2611668565b600080600080600088516001600160401b0381111561238557612385613570565b6040519080825280602002602001820160405280156123ae578160200160208202803683370190505b509050600089516001600160401b038111156123cc576123cc613570565b6040519080825280602002602001820160405280156123f5578160200160208202803683370190505b50905060008a516001600160401b0381111561241357612413613570565b60405190808252806020026020018201604052801561243c578160200160208202803683370190505b50905060005b8b518110156126af578b818151811061245d5761245d613586565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a90036124fe57868389806001019a50815181106124d8576124d8613586565b60200260200101906001600160a01b031690816001600160a01b0316815250505061269d565b60028101548a111561252c57604080518082019091528681526020018a905260018101869055600281018a90555b6001810154156125765760018101548c8c8481811061254d5761254d613586565b90506020020135670de0b6b3a764000061256791906136f4565b612571919061370b565b612579565b60005b98508881600001600082825461258f9190613650565b91829055509050856125a18a85613663565b815181106125b1576125b1613586565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c8152602001908152602001600020600082015181600001556020820151816001015590505085816001016000018190555080600101600001548489846126449190613663565b8151811061265457612654613586565b6020908102919091010152868d61266b8a85613663565b8151811061267b5761267b613586565b60200260200101906001600160a01b031690816001600160a01b031681525050505b806126a781613894565b915050612442565b5085156126f857858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a3826040516126ef91906138ad565b60405180910390a25b8a511561273c57877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c8585604051612733939291906138c0565b60405180910390a25b5050505050505050505050565b82826127558282611a40565b846002015483111561277a57604051630a8d7fa760e21b815260040160405180910390fd5b6038546001600160a01b038516600090815260058701602052604090205442916127a391613650565b11156127c2576040516303db082960e11b815260040160405180910390fd5b828560020160008282546127d69190613663565b925050819055506127f785858760020154868960030154611ad49190613663565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590602001611b2f565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d8060008114612885576040519150601f19603f3d011682016040523d82523d6000602084013e61288a565b606091505b509095945050505050565b6000806128a28585610f9d565b90506128b085858584611c37565b9150836001600160a01b0316856001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7846040516128f791815260200190565b60405180910390a36001600160a01b038086166000818152600260209081526040808320948916835293815283822082815592825260039052919091206129419082868580612d63565b60038181018590556001600160a01b03878116600081815260209384526040808220546001870155519081529188169290917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a350509392505050565b6129b58760006104b0612835565b612a00576040805163338f030160e01b81526001600160a01b03891660048201526024810191909152600a6044820152693837b7b61030b236b4b760b11b60648201526084016107f8565b612a0e8460006104b0612835565b612a57576040805163338f030160e01b81526001600160a01b038616600482015260248101919091526008604482015267747265617375727960c01b60648201526084016107f8565b606c54811015612a7a57604051630a8d7fa760e21b815260040160405180910390fd5b856001600160a01b0316876001600160a01b0316141580612aad5750836001600160a01b0316866001600160a01b031614155b15612acb5760405163dc1d04ff60e01b815260040160405180910390fd5b60408051600380825260808201909252600091602082016060803683370190505090508781600081518110612b0257612b02613586565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110612b3657612b36613586565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110612b6a57612b6a613586565b60200260200101906001600160a01b031690816001600160a01b031681525050612b9381612df5565b15612bbf57604051630d697db160e11b81526001600160e01b03196000351660048201526024016107f8565b50612bca600861142f565b6040516302209ca560e31b81526001600160a01b038881166004830152878116602483015286811660448301528581166064830152608482018590529190911690631104e5289060a401600060405180830381600087803b158015612c2e57600080fd5b505af115801561273c573d6000803e3d6000fd5b600080612c4d612209565b905060005b8351811015610b2857612c7f848281518110612c7057612c70613586565b60200260200101518684612895565b612c899084613650565b9250600101612c52565b612c9d8282611f6b565b610a9b576040516303b97b7760e41b81526001600160e01b03196000351660048201526024016107f8565b8354612cde906001600160a01b03168484612e94565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b6000818310612d125781610f0f565b5090919050565b6000818311612d29576000610f0f565b610f0f8284613663565b60018201546001600160a01b03808316911603610a9b57604051639feb934760e01b815260040160405180910390fd5b8284600301541015612d7757600284018190555b6000612d87856002015484612d03565b90506000818660020154612d9b9190613663565b90508015612dec57600286018290556001870154811115612dcf576040516352e521bf60e11b815260040160405180910390fd5b80876001016000016000828254612de69190613663565b90915550505b50505050505050565b60008151600003612e0857506000919050565b60005b6001835103811015612e8b57600181015b8351811015612e8257838181518110612e3757612e37613586565b60200260200101516001600160a01b0316848381518110612e5a57612e5a613586565b60200260200101516001600160a01b031603612e7a575060019392505050565b600101612e1c565b50600101612e0b565b50600092915050565b6000612e9e612209565b6001600160a01b0385166000908152600360205260409020600181015460028201549293509091831115612f12576040518060400160405280612ef9886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b038087166000908152600260209081526040808320938916835292905290812090612f448888610f9d565b90506000612f5489898885611c37565b83549091508114612fa6578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b612fb38584888a86612d63565b845460018085019190915560038401879055850154841461301a57886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c876001016000015460405161301191815260200190565b60405180910390a35b505050505050505050565b60008083601f84011261303757600080fd5b5081356001600160401b0381111561304e57600080fd5b6020830191508360208260051b850101111561306957600080fd5b9250929050565b6000806000806040858703121561308657600080fd5b84356001600160401b038082111561309d57600080fd5b6130a988838901613025565b909650945060208701359150808211156130c257600080fd5b506130cf87828801613025565b95989497509550505050565b600081518084526020808501945080840160005b8381101561310b578151875295820195908201906001016130ef565b509495945050505050565b602081526000610f0f60208301846130db565b6001600160a01b038116811461080157600080fd5b60008060006040848603121561315357600080fd5b83356001600160401b0381111561316957600080fd5b61317586828701613025565b909450925050602084013561318981613129565b809150509250925092565b6000602082840312156131a657600080fd5b81356131b181613129565b9392505050565b600080604083850312156131cb57600080fd5b82356131d681613129565b946020939093013593505050565b6000806000604084860312156131f957600080fd5b833561320481613129565b925060208401356001600160401b0381111561321f57600080fd5b61322b86828701613025565b9497909650939450505050565b6000806020838503121561324b57600080fd5b82356001600160401b0381111561326157600080fd5b61326d85828601613025565b90969095509350505050565b6000806040838503121561328c57600080fd5b50508035926020909101359150565b6000602082840312156132ad57600080fd5b5035919050565b600080604083850312156132c757600080fd5b82356132d281613129565b915060208301356132e281613129565b809150509250929050565b60008060006060848603121561330257600080fd5b833561330d81613129565b9250602084013561331d81613129565b929592945050506040919091013590565b8035600b81106114a557600080fd5b6000806040838503121561335057600080fd5b6132d28361332e565b60008060006060848603121561336e57600080fd5b833561337981613129565b95602085013595506040909401359392505050565b6000806000806000606086880312156133a657600080fd5b85356001600160401b03808211156133bd57600080fd5b6133c989838a01613025565b909750955060208801359150808211156133e257600080fd5b506133ef88828901613025565b96999598509660400135949350505050565b60006020828403121561341357600080fd5b610f0f8261332e565b60008060006040848603121561343157600080fd5b83356001600160401b0381111561344757600080fd5b61345386828701613025565b909790965060209590950135949350505050565b600080600080600060a0868803121561347f57600080fd5b853561348a81613129565b9450602086013561349a81613129565b935060408601356134aa81613129565b925060608601356134ba81613129565b949793965091946080013592915050565b600080600080600060a086880312156134e357600080fd5b85356134ee81613129565b97602087013597506040870135966060810135965060800135945092505050565b634e487b7160e01b600052602160045260246000fd5b600b81106135355761353561350f565b9052565b6001600160e01b031984168152606081016135576020830185613525565b6001600160a01b03929092166040919091015292915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156135e557600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f1257610f1261363a565b81810381811115610f1257610f1261363a565b60208101610f128284613525565b60208082528181018390526000908460408401835b868110156136c75782356136ac81613129565b6001600160a01b031682529183019190830190600101613699565b509695505050505050565b6000602082840312156136e457600080fd5b815180151581146131b157600080fd5b8082028115828204841417610f1257610f1261363a565b60008261372857634e487b7160e01b600052601260045260246000fd5b500490565b80516114a581613129565b600060e0828403121561374a57600080fd5b60405160e081018181106001600160401b038211171561377a57634e487b7160e01b600052604160045260246000fd5b6040526137868361372d565b81526137946020840161372d565b60208201526137a56040840161372d565b60408201526137b66060840161372d565b60608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b6001600160e01b03198316815260408101600983106138045761380461350f565b8260208301529392505050565b600081518084526020808501945080840160005b8381101561310b5781516001600160a01b031687529582019590820190600101613825565b60408152600061385d6040830186613811565b82810360208401528381526001600160fb1b0384111561387c57600080fd5b8360051b808660208401370160200195945050505050565b6000600182016138a6576138a661363a565b5060010190565b602081526000610f0f6020830184613811565b6060815260006138d36060830186613811565b82810360208401526138e581866130db565b905082810360408401526138f981856130db565b969550505050505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106102345760003560e01c806376664b651161012e578063acd79c46116100ab578063de981f1b1161006f578063de981f1b14610719578063e22d1c9d14610739578063e5376f5414610759578063f92ad2191461076c578063f9f031df1461078c57610246565b8063acd79c461461060f578063af24542914610622578063c2a672e014610637578063c508700314610657578063d01b8eed146106a857610246565b806391f8723f116100f257806391f8723f1461056f578063924f081e1461058f5780639488e4e9146105af578063969ffc14146105cf578063aa15a6fd146105ef57610246565b806376664b65146104c1578063865e6fd3146104e1578063888b9ae914610501578063895ab74214610521578063909791dd1461055a57610246565b806342ef3c34116101bc5780635cd8a76b116101805780635cd8a76b146104355780636558954f1461044a578063679a6e43146104615780636b091695146104815780636bd8f804146104a157610246565b806342ef3c341461039a5780634530d202146103ba5780634d99dd16146103e257806357473447146104025780635c19a95c1461042257610246565b80631658c86e116102035780631658c86e146102dc57806326476204146102fc5780632715805e1461030f5780633d8e846e1461032f57806342e0c4081461034f57610246565b806303827884146102515780630682e8fa1461027a578063095f64751461028f578063097e4a9d146102bc57610246565b36610246576008610244816107ac565b005b6008610244816107ac565b34801561025d57600080fd5b506102676104b081565b6040519081526020015b60405180910390f35b34801561028657600080fd5b50603854610267565b34801561029b57600080fd5b506102af6102aa366004613070565b610804565b6040516102719190613116565b3480156102c857600080fd5b506102676102d736600461313e565b61093c565b3480156102e857600080fd5b506102446102f7366004613194565b6109c2565b61024461030a366004613194565b610a66565b34801561031b57600080fd5b5061026761032a3660046131b8565b610a9f565b34801561033b57600080fd5b506102af61034a3660046131e4565b610b30565b34801561035b57600080fd5b5061038a61036a366004613194565b6001600160a01b039081166000908152603a602052604090205416151590565b6040519015158152602001610271565b3480156103a657600080fd5b506102af6103b5366004613238565b610c5e565b3480156103c657600080fd5b50606e54606d5460408051928352602083019190915201610271565b3480156103ee57600080fd5b506102446103fd3660046131b8565b610d2a565b34801561040e57600080fd5b5061024461041d366004613279565b610da6565b610244610430366004613194565b610db8565b34801561044157600080fd5b50610244610e26565b34801561045657600080fd5b506102676201518081565b34801561046d57600080fd5b5061024461047c36600461329b565b610ee5565b34801561048d57600080fd5b5061026761049c3660046132b4565b610ef6565b3480156104ad57600080fd5b506102446104bc3660046132ed565b610f18565b3480156104cd57600080fd5b506102676104dc3660046132b4565b610f9d565b3480156104ed57600080fd5b506102446104fc36600461333d565b610fcc565b34801561050d57600080fd5b5061024461051c36600461329b565b610fe7565b34801561052d57600080fd5b5061026761053c366004613194565b6001600160a01b031660009081526037602052604090206003015490565b34801561056657600080fd5b50606c54610267565b34801561057b57600080fd5b506102af61058a366004613238565b610ff8565b34801561059b57600080fd5b506102446105aa366004613359565b611098565b3480156105bb57600080fd5b506102446105ca366004613070565b611171565b3480156105db57600080fd5b506102446105ea36600461329b565b6112a0565b3480156105fb57600080fd5b5061024461060a366004613194565b6112b1565b61024461061d36600461338e565b611321565b34801561062e57600080fd5b50603954610267565b34801561064357600080fd5b506102446106523660046131b8565b611375565b34801561066357600080fd5b50610690610672366004613194565b6001600160a01b039081166000908152603a60205260409020541690565b6040516001600160a01b039091168152602001610271565b3480156106b457600080fd5b506106f46106c3366004613194565b6001600160a01b03808216600090815260376020526040902060018101546002820154600390920154921693909250565b604080516001600160a01b039094168452602084019290925290820152606001610271565b34801561072557600080fd5b50610690610734366004613401565b61142f565b34801561074557600080fd5b5061024461075436600461341c565b6114aa565b610244610767366004613467565b61166e565b34801561077857600080fd5b506102446107873660046134cb565b6117be565b34801561079857600080fd5b506102676107a7366004613238565b6118b5565b6107b58161142f565b6001600160a01b0316336001600160a01b031614610801576000356001600160e01b03191681336040516320e0f98d60e21b81526004016107f893929190613539565b60405180910390fd5b50565b6060838214610826576040516376081a7b60e11b815260040160405180910390fd5b836001600160401b0381111561083e5761083e613570565b604051908082528060200260200182016040528015610867578160200160208202803683370190505b50905060005b8151811015610933576037600087878481811061088c5761088c613586565b90506020020160208101906108a19190613194565b6001600160a01b03166001600160a01b0316815260200190815260200160002060040160008585848181106108d8576108d8613586565b90506020020160208101906108ed9190613194565b6001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061092057610920613586565b602090810291909101015260010161086d565b50949350505050565b60006002600054036109605760405162461bcd60e51b81526004016107f89061359c565b60026000558161096f81611935565b336000908152603a60205260409020546001600160a01b0316156109a857604051632fc6bfb160e21b81523360048201526024016107f8565b6109b4338686866119d3565b600160005595945050505050565b806109cc81611935565b6001600160a01b0382166000908152603760205260409020336109ef8282611a40565b6109f9600861142f565b60395460405163dd716ad360e01b81526001600160a01b038781166004830152602482019290925291169063dd716ad3906044015b600060405180830381600087803b158015610a4857600080fd5b505af1158015610a5c573d6000803e3d6000fd5b5050505050505050565b610a6e611a70565b80610a7881611935565b6001600160a01b0382166000908152603760205260409020610a9b903334611a93565b5050565b60006008610aac816107ac565b6001600160a01b0384166000908152603760205260409020610ace9084611b3e565b915033610adb8184611bdb565b610b2857604080518481524760208201526001600160a01b0380841692908816917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35b505092915050565b6060600080610b3f600861142f565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba091906135d3565b9050836001600160401b03811115610bba57610bba613570565b604051908082528060200260200182016040528015610be3578160200160208202803683370190505b50925060005b84811015610c5457858582818110610c0357610c03613586565b9050602002016020810190610c189190613194565b9250610c2f838884610c2a878c610f9d565b611c37565b848281518110610c4157610c41613586565b6020908102919091010152600101610be9565b5050509392505050565b6060816001600160401b03811115610c7857610c78613570565b604051908082528060200260200182016040528015610ca1578160200160208202803683370190505b50905060005b82811015610d235760376000858584818110610cc557610cc5613586565b9050602002016020810190610cda9190613194565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020154828281518110610d1057610d10613586565b6020908102919091010152600101610ca7565b5092915050565b600260005403610d4c5760405162461bcd60e51b81526004016107f89061359c565b600260009081556001600160a01b03831681526037602052604090203390610d75908284611d33565b610d7f8183611f6b565b610d9c57604051635ff7115760e11b815260040160405180910390fd5b5050600160005550565b610dae611fb3565b610a9b828261200d565b610dc0611a70565b80610dca81611935565b336000908152603a60205260409020546001600160a01b031615610e0357604051632fc6bfb160e21b81523360048201526024016107f8565b6001600160a01b0382166000908152603760205260409020610a9b903334612081565b60d154600290610100900460ff16158015610e48575060d15460ff8083169116105b610e645760405162461bcd60e51b81526004016107f8906135ec565b60d1805461ffff191660ff831617610100179055603654610e90906008906001600160a01b0316612130565b603680546001600160a01b031916905560d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b610eed611fb3565b610801816121d4565b6000610f0f8383610f05612209565b610c2a8787610f9d565b90505b92915050565b600260005403610f3a5760405162461bcd60e51b81526004016107f89061359c565b600260005581610f4981611935565b6001600160a01b03841660009081526037602052604090203390610f6e908285611d33565b6001600160a01b0384166000908152603760205260409020610f91908285612081565b50506001600055505050565b6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b610fd4611fb3565b610fdd8161227b565b610a9b8282612130565b610fef611fb3565b610801816122b1565b6060816001600160401b0381111561101257611012613570565b60405190808252806020026020018201604052801561103b578160200160208202803683370190505b50905060005b82811015610d235761107384848381811061105e5761105e613586565b905060200201602081019061053c9190613194565b82828151811061108557611085613586565b6020908102919091010152600101611041565b826110a281611935565b6001600160a01b0384166000908152603760205260409020336110c58282611a40565b606d548411806110d65750606e5484105b156110f457604051631b8454a360e21b815260040160405180910390fd5b6110fe600861142f565b60405163e5125a1d60e01b81526001600160a01b0388811660048301526024820188905260448201879052919091169063e5125a1d90606401600060405180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b50505050505050505050565b6002600054036111935760405162461bcd60e51b81526004016107f89061359c565b60026000558215806111a55750828114155b156111c3576040516376081a7b60e11b815260040160405180910390fd5b336000805b8581101561126b578484828181106111e2576111e2613586565b90506020020135826111f49190613650565b91506112636037600089898581811061120f5761120f613586565b90506020020160208101906112249190613194565b6001600160a01b03166001600160a01b031681526020019081526020016000208487878581811061125757611257613586565b90506020020135611d33565b6001016111c8565b506112768282611f6b565b61129357604051635ff7115760e11b815260040160405180910390fd5b5050600160005550505050565b6112a8611fb3565b610801816122e6565b806112bb81611935565b6001600160a01b0382166000908152603760205260409020336112de8282611a40565b6112e8600861142f565b60395460405163a7c2f11960e01b81526001600160a01b038781166004830152602482019290925291169063a7c2f11990604401610a2e565b600861132c816107ac565b61136d86868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525088925087915086905061231b565b505050505050565b6002600054036113975760405162461bcd60e51b81526004016107f89061359c565b6002600055816113a681611935565b816000036113c7576040516331d9f7d760e01b815260040160405180910390fd5b6001600160a01b038316600090815260376020526040812060028101543392906113f2908690613663565b9050606c548110156114175760405163ef0a995760e01b815260040160405180910390fd5b611422828487612749565b61127683866104b0612835565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600a8111156114665761146661350f565b60ff1681526020810191909152604001600020546001600160a01b03169050806114a5578160405163409140df60e11b81526004016107f89190613676565b919050565b60086114b5816107ac565b82156116685760005b8381101561162d576000603760008787858181106114de576114de613586565b90506020020160208101906114f39190613194565b6001600160a01b0390811682526020808301939093526040918201600090812060018101549092168152603a909352912080546001600160a01b0319169055600281015490915080156115ba5761154a8282611b3e565b506001820154611566906001600160a01b0316826104b0612835565b6115ba5760018201548254604080518481524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b60006115fa8888868181106115d1576115d1613586565b90506020020160208101906115e69190613194565b60018501546001600160a01b031688612895565b9050801561161f57600183015461161d906001600160a01b0316826104b0612835565b505b8360010193505050506114be565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d8848460405161165f929190613684565b60405180910390a15b50505050565b6002600054036116905760405162461bcd60e51b81526004016107f89061359c565b60026000908155338152603a60205260409020546001600160a01b0316156116cd57604051632fc6bfb160e21b81523360048201526024016107f8565b606d548111806116de5750606e5481105b156116fc57604051631b8454a360e21b815260040160405180910390fd5b343361170d818888888888886129a7565b6001600160a01b0380871660008181526037602081815260408084206001810180549789166001600160a01b0319988916811790915581548816871782558552603a83529084208054909616851790955592909152905261176f818385611a93565b816001600160a01b0316876001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a350506001600055505050505050565b60d154610100900460ff16158080156117de575060d154600160ff909116105b806117f85750303b1580156117f8575060d15460ff166001145b6118145760405162461bcd60e51b81526004016107f8906135ec565b60d1805460ff1916600117905580156118375760d1805461ff0019166101001790555b611842600887612130565b61184b856121d4565b61185660008561200d565b61185f836122b1565b611868826122e6565b801561136d5760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b60006002600054036118d95760405162461bcd60e51b81526004016107f89061359c565b600260008190555061191e33848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612c4292505050565b905061192a3382612c93565b600160005592915050565b61193f600861142f565b604051635061f96960e11b81526001600160a01b038381166004830152919091169063a0c3f2d290602401602060405180830381865afa158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab91906136d2565b61080157604051630fd0c64560e11b81526001600160a01b03821660048201526024016107f8565b6000611a1285858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612c4292505050565b6001600160a01b0383166000908152603760205260409020909150611a38908683612081565b949350505050565b60018201546001600160a01b03828116911614610a9b57604051637bc65bd760e11b815260040160405180910390fd5b34600003611a9157604051636dfcbde560e11b815260040160405180910390fd5b565b8282611a9f8282611a40565b82856002016000828254611ab39190613650565b92505081905550611ad985858760020154868960030154611ad49190613650565b612cc8565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90611b2f9086815260200190565b60405180910390a25050505050565b6000611b4e836002015483612d03565b905080836002016000828254611b649190613663565b9091555050600183015460028401546003850154611b949286926001600160a01b0390911691611ad49086612d19565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611c28576040519150601f19603f3d011682016040523d82523d6000602084013e611c2d565b606091505b5090949350505050565b6001600160a01b03808516600090815260026020908152604080832093871683529290529081206003810154849003611c7257549050611a38565b6001600160a01b038616600090815260036020818152604080842060018084528286209487015486529390925283209182015483929015611cd75780546001860154909450611cc19085613663565b8560020154611cd091906136f4565b9250611cdf565b846001015493505b8154600090611cef908690613663565b611cf990896136f4565b9050670de0b6b3a7640000611d0e8286613650565b611d18919061370b565b8654611d249190613650565b9b9a5050505050505050505050565b8282611d3f8282612d33565b82600003611d6057604051637ab0c6ad60e11b815260040160405180910390fd5b6001600160a01b0384166000908152600486016020526040902054831115611d9b57604051630695534560e31b815260040160405180910390fd5b6000611da7600861142f565b8654604051635061f96960e11b81526001600160a01b03918216600482015291925082169063a0c3f2d290602401602060405180830381865afa158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1691906136d2565b8015611e90575085546040516328bde1e160e01b81526001600160a01b039182166004820152908216906328bde1e19060240160e060405180830381865afa158015611e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8a9190613738565b60a00151155b8015611ec357506038546001600160a01b03861660009081526005880160205260409020544291611ec091613650565b10155b15611ee15760405163f19f52bd60e01b815260040160405180910390fd5b6001600160a01b0385166000908152600487016020526040902054611f1f9087908790611f0f908890613663565b878a60030154611ad49190613663565b85546040518581526001600160a01b03918216918716907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c9060200160405180910390a3505050505050565b600081471015611fa9576040516302631c4f60e61b81526001600160e01b0319600035166004820152476024820152604481018390526064016107f8565b610f0f8383611bdb565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314611a91576000356001600160e01b0319166001604051620f948f60ea1b81526004016107f89291906137e3565b61271081118061201c57508082115b1561203a57604051631b8454a360e21b815260040160405180910390fd5b606d819055606e82905560408051838152602081018390527f677752f5bf9541b14288833909e5ec5a478103131c1ec08c4638943be5826c14910160405180910390a15050565b828261208d8282612d33565b6001600160a01b03841660009081526004860160205260409020546120cb90869086906120bb908790613650565b868960030154611ad49190613650565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b906121219087815260200190565b60405180910390a35050505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a8111156121665761216661350f565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a8111156121a7576121a761350f565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be290602001610eda565b6000612215600861142f565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227691906135d3565b905090565b806001600160a01b03163b60000361080157604051630bfc64a360e21b81526001600160a01b03821660048201526024016107f8565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a90602001610eda565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c67890602001610eda565b8351821461236457807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a58585856040516123579392919061384a565b60405180910390a2611668565b600080600080600088516001600160401b0381111561238557612385613570565b6040519080825280602002602001820160405280156123ae578160200160208202803683370190505b509050600089516001600160401b038111156123cc576123cc613570565b6040519080825280602002602001820160405280156123f5578160200160208202803683370190505b50905060008a516001600160401b0381111561241357612413613570565b60405190808252806020026020018201604052801561243c578160200160208202803683370190505b50905060005b8b518110156126af578b818151811061245d5761245d613586565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a90036124fe57868389806001019a50815181106124d8576124d8613586565b60200260200101906001600160a01b031690816001600160a01b0316815250505061269d565b60028101548a111561252c57604080518082019091528681526020018a905260018101869055600281018a90555b6001810154156125765760018101548c8c8481811061254d5761254d613586565b90506020020135670de0b6b3a764000061256791906136f4565b612571919061370b565b612579565b60005b98508881600001600082825461258f9190613650565b91829055509050856125a18a85613663565b815181106125b1576125b1613586565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c8152602001908152602001600020600082015181600001556020820151816001015590505085816001016000018190555080600101600001548489846126449190613663565b8151811061265457612654613586565b6020908102919091010152868d61266b8a85613663565b8151811061267b5761267b613586565b60200260200101906001600160a01b031690816001600160a01b031681525050505b806126a781613894565b915050612442565b5085156126f857858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a3826040516126ef91906138ad565b60405180910390a25b8a511561273c57877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c8585604051612733939291906138c0565b60405180910390a25b5050505050505050505050565b82826127558282611a40565b846002015483111561277a57604051630a8d7fa760e21b815260040160405180910390fd5b6038546001600160a01b038516600090815260058701602052604090205442916127a391613650565b11156127c2576040516303db082960e11b815260040160405180910390fd5b828560020160008282546127d69190613663565b925050819055506127f785858760020154868960030154611ad49190613663565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590602001611b2f565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d8060008114612885576040519150601f19603f3d011682016040523d82523d6000602084013e61288a565b606091505b509095945050505050565b6000806128a28585610f9d565b90506128b085858584611c37565b9150836001600160a01b0316856001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b7846040516128f791815260200190565b60405180910390a36001600160a01b038086166000818152600260209081526040808320948916835293815283822082815592825260039052919091206129419082868580612d63565b60038181018590556001600160a01b03878116600081815260209384526040808220546001870155519081529188169290917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a350509392505050565b6129b58760006104b0612835565b612a00576040805163338f030160e01b81526001600160a01b03891660048201526024810191909152600a6044820152693837b7b61030b236b4b760b11b60648201526084016107f8565b612a0e8460006104b0612835565b612a57576040805163338f030160e01b81526001600160a01b038616600482015260248101919091526008604482015267747265617375727960c01b60648201526084016107f8565b606c54811015612a7a57604051630a8d7fa760e21b815260040160405180910390fd5b856001600160a01b0316876001600160a01b0316141580612aad5750836001600160a01b0316866001600160a01b031614155b15612acb5760405163dc1d04ff60e01b815260040160405180910390fd5b60408051600380825260808201909252600091602082016060803683370190505090508781600081518110612b0257612b02613586565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110612b3657612b36613586565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110612b6a57612b6a613586565b60200260200101906001600160a01b031690816001600160a01b031681525050612b9381612df5565b15612bbf57604051630d697db160e11b81526001600160e01b03196000351660048201526024016107f8565b50612bca600861142f565b6040516302209ca560e31b81526001600160a01b038881166004830152878116602483015286811660448301528581166064830152608482018590529190911690631104e5289060a401600060405180830381600087803b158015612c2e57600080fd5b505af115801561273c573d6000803e3d6000fd5b600080612c4d612209565b905060005b8351811015610b2857612c7f848281518110612c7057612c70613586565b60200260200101518684612895565b612c899084613650565b9250600101612c52565b612c9d8282611f6b565b610a9b576040516303b97b7760e41b81526001600160e01b03196000351660048201526024016107f8565b8354612cde906001600160a01b03168484612e94565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b6000818310612d125781610f0f565b5090919050565b6000818311612d29576000610f0f565b610f0f8284613663565b60018201546001600160a01b03808316911603610a9b57604051639feb934760e01b815260040160405180910390fd5b8284600301541015612d7757600284018190555b6000612d87856002015484612d03565b90506000818660020154612d9b9190613663565b90508015612dec57600286018290556001870154811115612dcf576040516352e521bf60e11b815260040160405180910390fd5b80876001016000016000828254612de69190613663565b90915550505b50505050505050565b60008151600003612e0857506000919050565b60005b6001835103811015612e8b57600181015b8351811015612e8257838181518110612e3757612e37613586565b60200260200101516001600160a01b0316848381518110612e5a57612e5a613586565b60200260200101516001600160a01b031603612e7a575060019392505050565b600101612e1c565b50600101612e0b565b50600092915050565b6000612e9e612209565b6001600160a01b0385166000908152600360205260409020600181015460028201549293509091831115612f12576040518060400160405280612ef9886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b038087166000908152600260209081526040808320938916835292905290812090612f448888610f9d565b90506000612f5489898885611c37565b83549091508114612fa6578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b612fb38584888a86612d63565b845460018085019190915560038401879055850154841461301a57886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c876001016000015460405161301191815260200190565b60405180910390a35b505050505050505050565b60008083601f84011261303757600080fd5b5081356001600160401b0381111561304e57600080fd5b6020830191508360208260051b850101111561306957600080fd5b9250929050565b6000806000806040858703121561308657600080fd5b84356001600160401b038082111561309d57600080fd5b6130a988838901613025565b909650945060208701359150808211156130c257600080fd5b506130cf87828801613025565b95989497509550505050565b600081518084526020808501945080840160005b8381101561310b578151875295820195908201906001016130ef565b509495945050505050565b602081526000610f0f60208301846130db565b6001600160a01b038116811461080157600080fd5b60008060006040848603121561315357600080fd5b83356001600160401b0381111561316957600080fd5b61317586828701613025565b909450925050602084013561318981613129565b809150509250925092565b6000602082840312156131a657600080fd5b81356131b181613129565b9392505050565b600080604083850312156131cb57600080fd5b82356131d681613129565b946020939093013593505050565b6000806000604084860312156131f957600080fd5b833561320481613129565b925060208401356001600160401b0381111561321f57600080fd5b61322b86828701613025565b9497909650939450505050565b6000806020838503121561324b57600080fd5b82356001600160401b0381111561326157600080fd5b61326d85828601613025565b90969095509350505050565b6000806040838503121561328c57600080fd5b50508035926020909101359150565b6000602082840312156132ad57600080fd5b5035919050565b600080604083850312156132c757600080fd5b82356132d281613129565b915060208301356132e281613129565b809150509250929050565b60008060006060848603121561330257600080fd5b833561330d81613129565b9250602084013561331d81613129565b929592945050506040919091013590565b8035600b81106114a557600080fd5b6000806040838503121561335057600080fd5b6132d28361332e565b60008060006060848603121561336e57600080fd5b833561337981613129565b95602085013595506040909401359392505050565b6000806000806000606086880312156133a657600080fd5b85356001600160401b03808211156133bd57600080fd5b6133c989838a01613025565b909750955060208801359150808211156133e257600080fd5b506133ef88828901613025565b96999598509660400135949350505050565b60006020828403121561341357600080fd5b610f0f8261332e565b60008060006040848603121561343157600080fd5b83356001600160401b0381111561344757600080fd5b61345386828701613025565b909790965060209590950135949350505050565b600080600080600060a0868803121561347f57600080fd5b853561348a81613129565b9450602086013561349a81613129565b935060408601356134aa81613129565b925060608601356134ba81613129565b949793965091946080013592915050565b600080600080600060a086880312156134e357600080fd5b85356134ee81613129565b97602087013597506040870135966060810135965060800135945092505050565b634e487b7160e01b600052602160045260246000fd5b600b81106135355761353561350f565b9052565b6001600160e01b031984168152606081016135576020830185613525565b6001600160a01b03929092166040919091015292915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156135e557600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f1257610f1261363a565b81810381811115610f1257610f1261363a565b60208101610f128284613525565b60208082528181018390526000908460408401835b868110156136c75782356136ac81613129565b6001600160a01b031682529183019190830190600101613699565b509695505050505050565b6000602082840312156136e457600080fd5b815180151581146131b157600080fd5b8082028115828204841417610f1257610f1261363a565b60008261372857634e487b7160e01b600052601260045260246000fd5b500490565b80516114a581613129565b600060e0828403121561374a57600080fd5b60405160e081018181106001600160401b038211171561377a57634e487b7160e01b600052604160045260246000fd5b6040526137868361372d565b81526137946020840161372d565b60208201526137a56040840161372d565b60408201526137b66060840161372d565b60608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b6001600160e01b03198316815260408101600983106138045761380461350f565b8260208301529392505050565b600081518084526020808501945080840160005b8381101561310b5781516001600160a01b031687529582019590820190600101613825565b60408152600061385d6040830186613811565b82810360208401528381526001600160fb1b0384111561387c57600080fd5b8360051b808660208401370160200195945050505050565b6000600182016138a6576138a661363a565b5060010190565b602081526000610f0f6020830184613811565b6060815260006138d36060830186613811565b82810360208401526138e581866130db565b905082810360408401526138f981856130db565b969550505050505056fea164736f6c6343000811000a",
  "devdoc": {
    "errors": {
      "ErrAdminOfAnyActivePoolForbidden(address)": [
        {
          "details": "Error of admin of any active pool cannot delegate."
        }
      ],
      "ErrCannotInitTransferRON(address,string)": [
        {
          "details": "Error of cannot transfer RON to specified target."
        }
      ],
      "ErrCannotTransferRON()": [
        {
          "details": "Error of cannot transfer RON."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrDuplicated(bytes4)": [
        {
          "details": "Error thrown when a duplicated element is detected in an array.",
          "params": {
            "msgSig": "The function signature that invoke the error."
          }
        }
      ],
      "ErrInactivePool(address)": [
        {
          "details": "Error of querying inactive pool."
        }
      ],
      "ErrInsufficientBalance(bytes4,uint256,uint256)": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInsufficientDelegatingAmount()": [
        {
          "details": "Error of undelegating insufficient amount."
        }
      ],
      "ErrInsufficientStakingAmount()": [
        {
          "details": "Error of insufficient staking amount for unstaking."
        }
      ],
      "ErrInvalidArrays()": [
        {
          "details": "Error of length of input arrays are not of the same."
        }
      ],
      "ErrInvalidCommissionRate()": [
        {
          "details": "Error of setting commission rate exceeds max allowed."
        }
      ],
      "ErrInvalidPoolShare()": [
        {
          "details": "Error of invalid pool share."
        }
      ],
      "ErrOnlyPoolAdminAllowed()": [
        {
          "details": "Error of no one is allowed to call but the pool's admin."
        }
      ],
      "ErrPoolAdminForbidden()": [
        {
          "details": "Error of pool admin is not allowed to call."
        }
      ],
      "ErrRecipientRevert(bytes4)": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrStakingAmountLeft()": [
        {
          "details": "Error of invalid staking amount left after deducted."
        }
      ],
      "ErrThreeInteractionAddrsNotEqual()": [
        {
          "details": "Error of three interaction addresses must be of the same in applying for validator candidate."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUndelegateTooEarly()": [
        {
          "details": "Error of undelegating too early."
        }
      ],
      "ErrUndelegateZeroAmount()": [
        {
          "details": "Error of undelegating zero amount."
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrUnstakeTooEarly()": [
        {
          "details": "Error of unstaking too early."
        }
      ],
      "ErrUnstakeZeroAmount()": [
        {
          "details": "Error of unstaking zero amount."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ],
      "ErrZeroValue()": [
        {
          "details": "Error of receiving zero message value."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "applyValidatorCandidate(address,address,address,address,uint256)": {
        "details": "Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.",
        "params": {
          "_candidateAdmin": "the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance."
        }
      },
      "bulkUndelegate(address[],uint256[])": {
        "details": "Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`."
      },
      "claimRewards(address[])": {
        "details": "Claims the reward of method caller. Emits the `RewardClaimed` event."
      },
      "cooldownSecsToUndelegate()": {
        "details": "Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated."
      },
      "delegate(address)": {
        "details": "Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event."
      },
      "delegateRewards(address[],address)": {
        "details": "Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event."
      },
      "execDeductStakingAmount(address,uint256)": {
        "details": "Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller must be validator contract. Emits the event `Unstaked`."
      },
      "execDeprecatePools(address[],uint256)": {
        "details": "Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin."
      },
      "execRecordRewards(address[],uint256[],uint256)": {
        "details": "Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller must be validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending."
      },
      "getCommissionRateRange()": {
        "details": "Returns the commission rate range that the candidate can set."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getManySelfStakings(address[])": {
        "details": "Returns the self-staking amounts of the pools."
      },
      "getManyStakingAmounts(address[],address[])": {
        "details": "Returns the staking amounts of the users."
      },
      "getManyStakingTotals(address[])": {
        "details": "Returns the total staking amounts of all users for the pools `_poolAddrs`."
      },
      "getPoolAddressOf(address)": {
        "details": "Returns the consensus address corresponding to the pool admin."
      },
      "getPoolDetail(address)": {
        "details": "Returns the staking pool detail."
      },
      "getReward(address,address)": {
        "details": "Returns the reward amount that user claimable."
      },
      "getRewards(address,address[])": {
        "details": "Returns the claimable reward of the user `_user`."
      },
      "getStakingAmount(address,address)": {
        "details": "Returns the staking amount of an user."
      },
      "getStakingTotal(address)": {
        "details": "Returns the total staking amount of all users for a pool."
      },
      "initialize(address,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "isAdminOfActivePool(address)": {
        "details": "Returns whether the `_poolAdminAddr` is currently active."
      },
      "minValidatorStakingAmount()": {
        "details": "Returns the minimum threshold for being a validator candidate."
      },
      "redelegate(address,address,uint256)": {
        "details": "Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event."
      },
      "requestEmergencyExit(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestRenounce(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`."
      },
      "setCommissionRateRange(uint256,uint256)": {
        "details": "Sets the commission rate range that a candidate can set. Requirements: - The method caller is admin. Emits the `CommissionRateRangeUpdated` event."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setCooldownSecsToUndelegate(uint256)": {
        "details": "Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`."
      },
      "setMinValidatorStakingAmount(uint256)": {
        "details": "Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event."
      },
      "setWaitingSecsToRevoke(uint256)": {
        "details": "Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`."
      },
      "stake(address)": {
        "details": "Self-delegates to the validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`."
      },
      "undelegate(address,uint256)": {
        "details": "Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event."
      },
      "unstake(address,uint256)": {
        "details": "Unstakes from the validator candidate `_consensusAddr` for `_amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`."
      },
      "waitingSecsToRevoke()": {
        "details": "Returns the number of seconds that a candidate must wait for the renounce request gets affected."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1636,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 29742,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_accumulatedRps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)10328_storage))"
      },
      {
        "astId": 29750,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_userReward",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)11140_storage))"
      },
      {
        "astId": 29756,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_stakingPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolFields)11146_storage)"
      },
      {
        "astId": 29761,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 35464,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 27913,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_stakingPool",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_struct(PoolDetail)10750_storage)"
      },
      {
        "astId": 27916,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_cooldownSecsToUndelegate",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 27919,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_waitingSecsToRevoke",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 27924,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_adminOfActivePoolMapping",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 27929,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 28418,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_minValidatorStakingAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 28421,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_maxCommissionRate",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 28424,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_minCommissionRate",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 28429,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "111",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 29197,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initialized",
        "offset": 0,
        "slot": "209",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initializing",
        "offset": 1,
        "slot": "209",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)11140_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IRewardPool.UserRewardFields))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserRewardFields)11140_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)10328_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PeriodWrapper)10328_storage)"
      },
      "t_mapping(t_address,t_struct(PoolDetail)10750_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBaseStaking.PoolDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolDetail)10750_storage"
      },
      "t_mapping(t_address,t_struct(PoolFields)11146_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.PoolFields)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolFields)11146_storage"
      },
      "t_mapping(t_address,t_struct(UserRewardFields)11140_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.UserRewardFields)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRewardFields)11140_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PeriodWrapper)10328_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodWrapper)10328_storage"
      },
      "t_struct(PeriodWrapper)10328_storage": {
        "encoding": "inplace",
        "label": "struct PeriodWrapperConsumer.PeriodWrapper",
        "members": [
          {
            "astId": 10325,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "inner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10327,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolDetail)10750_storage": {
        "encoding": "inplace",
        "label": "struct IBaseStaking.PoolDetail",
        "members": [
          {
            "astId": 10735,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10737,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "admin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10739,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10741,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingTotal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10745,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "delegatingAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 10749,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastDelegatingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PoolFields)11146_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.PoolFields",
        "members": [
          {
            "astId": 11142,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11145,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PeriodWrapper)10328_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserRewardFields)11140_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.UserRewardFields",
        "members": [
          {
            "astId": 11133,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "debited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11135,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11137,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lowestAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11139,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}