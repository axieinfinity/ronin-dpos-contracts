{
  "address": "0x04880A6B03BEAcfDA3C7C30931bBC36Ed28a5928",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "BlockProducerSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinbaseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ICoinbaseExecution.BlockRewardDeprecatedType",
          "name": "deprecatedType",
          "type": "uint8"
        }
      ],
      "name": "BlockRewardDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinbaseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "submittedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusAmount",
          "type": "uint256"
        }
      ],
      "name": "BlockRewardSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeTrackingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasuryAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        }
      ],
      "name": "CandidateGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revokingTimestamp",
          "type": "uint256"
        }
      ],
      "name": "CandidateRevokingTimestampUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topupDeadline",
          "type": "uint256"
        }
      ],
      "name": "CandidateTopupDeadlineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "CandidatesRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateUpdateScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "DeprecatedRewardRecycleFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DeprecatedRewardRecycled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "MaintenanceContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MaxPrioritizedValidatorNumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "MaxValidatorCandidateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MaxValidatorNumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numOfDays",
          "type": "uint256"
        }
      ],
      "name": "MinEffectiveDaysOnwardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MiningRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "MiningRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "SlashIndicatorContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakingRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakingVestingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jailedUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deductedStakingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "blockProducerRewardDeprecated",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "bridgeOperatorRewardDeprecated",
          "type": "bool"
        }
      ],
      "name": "ValidatorPunished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "ValidatorSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "ValidatorUnjailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "periodNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "periodEnding",
          "type": "bool"
        }
      ],
      "name": "WrappedUpEpoch",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        }
      ],
      "name": "_isPeriodEnding",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeTrackingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "checkJailed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "checkJailedAtBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addrList",
          "type": "address[]"
        }
      ],
      "name": "checkManyJailed",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_blockProducers",
          "type": "address[]"
        }
      ],
      "name": "checkMiningRewardDeprecated",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_blockProducers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "checkMiningRewardDeprecatedAtPeriod",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriodStartAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "epochEndingAt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "epochOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "execBailOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_effectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "execRequestUpdateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newJailedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashAmount",
          "type": "uint256"
        }
      ],
      "name": "execSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockProducers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_bridgeOperatorList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getCandidateInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOperatorAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "topupDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICandidateManager.ValidatorCandidate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidateInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOperatorAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "topupDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICandidateManager.ValidatorCandidate[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getJailedTimeLeft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isJailed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockLeft_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLeft_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "getJailedTimeLeftAtBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isJailed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockLeft_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLeft_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastUpdatedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorCandidates",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_validatorList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "grantValidatorCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__slashIndicatorContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__stakingVestingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__maintenanceContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__bridgeTrackingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__maxValidatorNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxValidatorCandidate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxPrioritizedValidatorNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__minEffectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__numberOfBlocksInEpoch",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isBlockProducer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        }
      ],
      "name": "isBridgeOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "isCandidateAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPeriodEnding",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidatorCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPrioritizedValidatorNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maximumPrioritizedValidatorNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidatorCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidatorNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maximumValidatorNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minEffectiveDaysOnwards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfBlocksInEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompilePickValidatorSetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompileSortValidatorsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_secsLeft",
          "type": "uint256"
        }
      ],
      "name": "requestRevokeCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeTrackingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setMaintenanceContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setMaxPrioritizedValidatorNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setMaxValidatorCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxValidatorNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numOfDays",
          "type": "uint256"
        }
      ],
      "name": "setMinEffectiveDaysOnwards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setSlashIndicatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setStakingVestingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slashIndicatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingVestingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submitBlockReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBlockProducers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgeOperators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeprecatedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapUpEpoch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xabaa1473501465ee49d795b15db23bf2430fc8a9de25faed4cc094cd4c1f1310",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x04880A6B03BEAcfDA3C7C30931bBC36Ed28a5928",
    "transactionIndex": 1,
    "gasUsed": "4934174",
    "logsBloom": "0x
    "blockHash": "0xd2a63addafdb7813e19ea7937a5d27a6ba27599cec5e7d434954e5d5886819e0",
    "transactionHash": "0xabaa1473501465ee49d795b15db23bf2430fc8a9de25faed4cc094cd4c1f1310",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12250708,
        "transactionHash": "0xabaa1473501465ee49d795b15db23bf2430fc8a9de25faed4cc094cd4c1f1310",
        "address": "0x04880A6B03BEAcfDA3C7C30931bBC36Ed28a5928",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 6,
        "blockHash": "0xd2a63addafdb7813e19ea7937a5d27a6ba27599cec5e7d434954e5d5886819e0"
      }
    ],
    "blockNumber": 12250708,
    "cumulativeGasUsed": "5298965",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7ee7c0f941167beb3dcb34451beb8d74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"BlockProducerSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinbaseAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICoinbaseExecution.BlockRewardDeprecatedType\",\"name\":\"deprecatedType\",\"type\":\"uint8\"}],\"name\":\"BlockRewardDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinbaseAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submittedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"BlockRewardSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeTrackingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"CandidateGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"}],\"name\":\"CandidateRevokingTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"name\":\"CandidateTopupDeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"CandidatesRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycleFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MaintenanceContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxPrioritizedValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorCandidateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfDays\",\"type\":\"uint256\"}],\"name\":\"MinEffectiveDaysOnwardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SlashIndicatorContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingVestingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deductedStakingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blockProducerRewardDeprecated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bridgeOperatorRewardDeprecated\",\"type\":\"bool\"}],\"name\":\"ValidatorPunished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"ValidatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ValidatorUnjailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"periodEnding\",\"type\":\"bool\"}],\"name\":\"WrappedUpEpoch\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"_isPeriodEnding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeTrackingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"checkJailedAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"}],\"name\":\"checkManyJailed\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blockProducers\",\"type\":\"address[]\"}],\"name\":\"checkMiningRewardDeprecated\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blockProducers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"checkMiningRewardDeprecatedAtPeriod\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodStartAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochEndingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"execBailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"execRequestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newJailedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"}],\"name\":\"execSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockProducers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_bridgeOperatorList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCandidateInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCandidateInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getJailedTimeLeft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"getJailedTimeLeftAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_validatorList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"grantValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__slashIndicatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingVestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__bridgeTrackingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorCandidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxPrioritizedValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__minEffectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__numberOfBlocksInEpoch\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isBlockProducer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"}],\"name\":\"isBridgeOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isCandidateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPeriodEnding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidatorCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrioritizedValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumPrioritizedValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEffectiveDaysOnwards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompilePickValidatorSetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileSortValidatorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secsLeft\",\"type\":\"uint256\"}],\"name\":\"requestRevokeCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeTrackingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaintenanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxPrioritizedValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfDays\",\"type\":\"uint256\"}],\"name\":\"setMinEffectiveDaysOnwards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSlashIndicatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakingVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashIndicatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingVestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitBlockReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockProducers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgeOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeprecatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapUpEpoch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_isPeriodEnding(uint256)\":{\"details\":\"See `ITimingInfo-isPeriodEnding`\"},\"bridgeTrackingContract()\":{\"details\":\"Returns the bridge tracking contract.\"},\"checkJailed(address)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\"},\"checkJailedAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\"},\"checkManyJailed(address[])\":{\"details\":\"Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\"},\"checkMiningRewardDeprecated(address[])\":{\"details\":\"Returns whether the incoming reward of the block producers are deprecated during the current period.\"},\"checkMiningRewardDeprecatedAtPeriod(address[],uint256)\":{\"details\":\"Returns whether the incoming reward of the block producers are deprecated during a specific period.\"},\"currentPeriod()\":{\"details\":\"Returns the period index from the current block.\"},\"currentPeriodStartAtBlock()\":{\"details\":\"Returns the block number that the current period starts at.\"},\"epochEndingAt(uint256)\":{\"details\":\"Returns whether the epoch ending is at the block number `_block`.\"},\"epochOf(uint256)\":{\"details\":\"Returns the epoch index from the block number.\"},\"execBailOut(address,uint256)\":{\"details\":\"Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`.\"},\"execRequestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`.\"},\"execSlash(address,uint256,uint256)\":{\"details\":\"Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`.\"},\"getBlockProducers()\":{\"details\":\"Returns the current block producer list.\"},\"getBridgeOperators()\":{\"details\":\"Returns the current bridge operator list.\"},\"getCandidateInfo(address)\":{\"details\":\"Returns the info of a candidate.\"},\"getCandidateInfos()\":{\"details\":\"Returns all candidate info.\"},\"getJailedTimeLeft(address)\":{\"details\":\"Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\"},\"getJailedTimeLeftAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\"},\"getLastUpdatedBlock()\":{\"details\":\"Returns the block that validator set was updated.\"},\"getValidatorCandidates()\":{\"details\":\"Returns the validator candidate.\"},\"getValidators()\":{\"details\":\"Returns the current validator list.\"},\"grantValidatorCandidate(address,address,address,address,uint256)\":{\"details\":\"Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`.\"},\"initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"isBlockProducer(address)\":{\"details\":\"Returns whether the address is block producer or not.\"},\"isBridgeOperator(address)\":{\"details\":\"Returns whether the address is bridge operator or not.\"},\"isCandidateAdmin(address,address)\":{\"details\":\"Returns whether the address is the candidate admin.\"},\"isPeriodEnding()\":{\"details\":\"Returns whether the period ending at the current block number.\"},\"isValidator(address)\":{\"details\":\"Returns whether the address is either a bridge operator or a block producer.\"},\"isValidatorCandidate(address)\":{\"details\":\"Returns whether the address is a validator (candidate).\"},\"maintenanceContract()\":{\"details\":\"Returns the maintenance contract.\"},\"maxPrioritizedValidatorNumber()\":{\"details\":\"Returns the number of reserved slots for prioritized validators\"},\"maxValidatorCandidate()\":{\"details\":\"Returns the maximum number of validator candidate.\"},\"maxValidatorNumber()\":{\"details\":\"Returns the maximum number of validators in the epoch\"},\"minEffectiveDaysOnwards()\":{\"details\":\"Returns the minimum number of days to the effective date of commission rate change.\"},\"numberOfBlocksInEpoch()\":{\"details\":\"Returns the number of blocks in a epoch.\"},\"precompilePickValidatorSetAddress()\":{\"details\":\"Gets the address of the precompile of picking validator set\"},\"precompileSortValidatorsAddress()\":{\"details\":\"Gets the address of the precompile of sorting validators\"},\"requestRevokeCandidate(address,uint256)\":{\"details\":\"Requests to revoke a validator candidate in next `_secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeTrackingContract(address)\":{\"details\":\"Sets the bridge tracking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeTrackingContractUpdated`.\"},\"setMaintenanceContract(address)\":{\"details\":\"Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`.\"},\"setMaxPrioritizedValidatorNumber(uint256)\":{\"details\":\"Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`\"},\"setMaxValidatorCandidate(uint256)\":{\"details\":\"Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event.\"},\"setMaxValidatorNumber(uint256)\":{\"details\":\"Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`\"},\"setMinEffectiveDaysOnwards(uint256)\":{\"details\":\"Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"setSlashIndicatorContract(address)\":{\"details\":\"Sets the slash indicator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `SlashIndicatorContractUpdated`.\"},\"setStakingContract(address)\":{\"details\":\"Sets the staking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingContractUpdated`.\"},\"setStakingVestingContract(address)\":{\"details\":\"Sets the staking vesting contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingVestingContractUpdated`.\"},\"slashIndicatorContract()\":{\"details\":\"Returns the slash indicator contract.\"},\"stakingContract()\":{\"details\":\"Returns the staking contract.\"},\"stakingVestingContract()\":{\"details\":\"Returns the staking vesting contract.\"},\"submitBlockReward()\":{\"details\":\"Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call.\"},\"totalBlockProducers()\":{\"details\":\"Returns total numbers of the block producers.\"},\"totalBridgeOperators()\":{\"details\":\"Returns total numbers of the bridge operators.\"},\"totalDeprecatedReward()\":{\"details\":\"Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\"},\"wrapUpEpoch()\":{\"details\":\"Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"totalBridgeOperators()\":{\"notice\":\"Notice: A validator is always a bride operator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/validator/RoninValidatorSet.sol\":\"RoninValidatorSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable _recipient, uint256 _amount) internal {\\n    require(_sendRON(_recipient, _amount), \\\"RONTransfer: unable to transfer value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Send `_amount` RON to the address `_recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    require(address(this).balance >= _amount, \\\"RONTransfer: insufficient balance\\\");\\n    return _unsafeSendRON(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `_amount` RON to the address `_recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xd2d20123d75f4d4ca6441a791a3eb1b546b5c8652119ffc8406a11c8ed16529e\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeTrackingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeTrackingContract.sol\\\";\\nimport \\\"../../interfaces/IBridgeTracking.sol\\\";\\n\\ncontract HasBridgeTrackingContract is IHasBridgeTrackingContract, HasProxyAdmin {\\n  IBridgeTracking internal _bridgeTrackingContract;\\n\\n  modifier onlyBridgeTrackingContract() {\\n    require(\\n      bridgeTrackingContract() == msg.sender,\\n      \\\"HasBridgeTrackingContract: method caller must be bridge tracking contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeTrackingContract\\n   */\\n  function bridgeTrackingContract() public view override returns (address) {\\n    return address(_bridgeTrackingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeTrackingContract\\n   */\\n  function setBridgeTrackingContract(address _addr) external virtual override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasBridgeTrackingContract: set to non-contract\\\");\\n    _setBridgeTrackingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge tracking contract.\\n   *\\n   * Emits the event `BridgeTrackingContractUpdated`.\\n   *\\n   */\\n  function _setBridgeTrackingContract(address _addr) internal {\\n    _bridgeTrackingContract = IBridgeTracking(_addr);\\n    emit BridgeTrackingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x2b6a3375612540c741aa2844458ab95c40bf6675a9a884d1bb24ccf616e6c88a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasMaintenanceContract.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\n\\ncontract HasMaintenanceContract is IHasMaintenanceContract, HasProxyAdmin {\\n  IMaintenance internal _maintenanceContract;\\n\\n  modifier onlyMaintenanceContract() {\\n    require(\\n      maintenanceContract() == msg.sender,\\n      \\\"HasMaintenanceContract: method caller must be scheduled maintenance contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function maintenanceContract() public view override returns (address) {\\n    return address(_maintenanceContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function setMaintenanceContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasMaintenanceContract: set to non-contract\\\");\\n    _setMaintenanceContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the scheduled maintenance contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function _setMaintenanceContract(address _addr) internal {\\n    _maintenanceContract = IMaintenance(_addr);\\n    emit MaintenanceContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x89970cf13d486897699cfd03d29163bd2f50689844448d5c4906b9f81bdebf0f\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    require(\\n      roninTrustedOrganizationContract() == msg.sender,\\n      \\\"HasRoninTrustedOrganizationContract: method caller must be ronin trusted organization contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasRoninTrustedOrganizationContract: set to non-contract\\\");\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xbdfbd30aa984f10f191b21e4b790ff1872445c7387cf359aadd863aac6635507\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasSlashIndicatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasSlashIndicatorContract.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\n\\ncontract HasSlashIndicatorContract is IHasSlashIndicatorContract, HasProxyAdmin {\\n  ISlashIndicator internal _slashIndicatorContract;\\n\\n  modifier onlySlashIndicatorContract() {\\n    require(\\n      slashIndicatorContract() == msg.sender,\\n      \\\"HasSlashIndicatorContract: method caller must be slash indicator contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasSlashIndicatorContract\\n   */\\n  function slashIndicatorContract() public view override returns (address) {\\n    return address(_slashIndicatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasSlashIndicatorContract\\n   */\\n  function setSlashIndicatorContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasSlashIndicatorContract: set to non-contract\\\");\\n    _setSlashIndicatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the slash indicator contract.\\n   *\\n   * Emits the event `SlashIndicatorContractUpdated`.\\n   *\\n   */\\n  function _setSlashIndicatorContract(address _addr) internal {\\n    _slashIndicatorContract = ISlashIndicator(_addr);\\n    emit SlashIndicatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xa9320a655c7d92dbfa0b6ba0c63ed651c3376be59f3b4b04fae6a8420ceaa655\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasStakingContract.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\n\\ncontract HasStakingContract is IHasStakingContract, HasProxyAdmin {\\n  IStaking internal _stakingContract;\\n\\n  modifier onlyStakingContract() {\\n    require(stakingContract() == msg.sender, \\\"HasStakingContract: method caller must be staking contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingContract\\n   */\\n  function stakingContract() public view override returns (address) {\\n    return address(_stakingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingContract\\n   */\\n  function setStakingContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasStakingContract: set to non-contract\\\");\\n    _setStakingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the staking contract.\\n   *\\n   * Emits the event `StakingContractUpdated`.\\n   *\\n   */\\n  function _setStakingContract(address _addr) internal {\\n    _stakingContract = IStaking(_addr);\\n    emit StakingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x16c7a086446cb00246f24baa214f8555f30eaf8d202a17a0c60a5c0cc39a40ce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasStakingVestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasStakingVestingContract.sol\\\";\\nimport \\\"../../interfaces/IStakingVesting.sol\\\";\\n\\ncontract HasStakingVestingContract is IHasStakingVestingContract, HasProxyAdmin {\\n  IStakingVesting internal _stakingVestingContract;\\n\\n  modifier onlyStakingVestingContract() {\\n    require(\\n      stakingVestingContract() == msg.sender,\\n      \\\"HasStakingVestingContract: method caller must be staking vesting contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingVestingContract\\n   */\\n  function stakingVestingContract() public view override returns (address) {\\n    return address(_stakingVestingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingVestingContract\\n   */\\n  function setStakingVestingContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasStakingVestingContract: set to non-contract\\\");\\n    _setStakingVestingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the staking vesting contract.\\n   *\\n   * Emits the event `StakingVestingContractUpdated`.\\n   *\\n   */\\n  function _setStakingVestingContract(address _addr) internal {\\n    _stakingVestingContract = IStakingVesting(_addr);\\n    emit StakingVestingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xeb55fd0f871fb4288f738fe7cfc3ea3e0b814e59120d9e585fd8edaef461c559\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVotes(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallots(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(uint256 _period, address[] calldata _bridgeOperators)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb2d5e9367c48a611f131c8b77f9034db8dd81df8c8bbb2c8e8d9a32286a5a8ae\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMaintenance {\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed consensusAddr, Schedule);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(address _consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `_block` or not.\\n   */\\n  function checkManyMaintained(address[] calldata _addrList, uint256 _block) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    address[] calldata _addrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` has scheduled.\\n   */\\n  function checkScheduled(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `_consensusAddr`.\\n   */\\n  function getSchedule(address _consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedules() external view returns (uint256 _count);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedules() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - The candidate `_consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(\\n    address _consensusAddr,\\n    uint256 _startedAtBlock,\\n    uint256 _endedAtBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0d063efabb136cf4e8533da1d56439e1a5d254930235f7136cfae14295139a05\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStakingVesting {\\n  /// @dev Emitted when the block bonus for block producer is transferred.\\n  event BonusTransferred(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount\\n  );\\n  /// @dev Emitted when the transfer of block bonus for block producer is failed.\\n  event BonusTransferFailed(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the block bonus for block producer is updated\\n  event BlockProducerBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the block bonus for bridge operator is updated\\n  event BridgeOperatorBonusPerBlockUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the block producer at `_block`.\\n   */\\n  function blockProducerBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the bridge validator at `_block`.\\n   */\\n  function bridgeOperatorBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Receives RON from any address.\\n   */\\n  function receiveRON() external payable;\\n\\n  /**\\n   * @dev Returns the last block number that the staking vesting is sent.\\n   */\\n  function lastBlockSendingBonus() external view returns (uint256);\\n\\n  /**\\n   * @dev Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   * - The method must be called only once per block.\\n   *\\n   * Emits the event `BonusTransferred` or `BonusTransferFailed`.\\n   *\\n   * Notes:\\n   * - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method\\n   * will not be reverted, and the underlying nodes does not hang.\\n   *\\n   * @param _forBlockProducer Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.\\n   * @param _forBridgeOperator Indicates whether requesting the bonus for the bridge operator.\\n   *\\n   * @return _success Whether the transfer is successfully. This returns false mostly because this contract is out of balance.\\n   * @return _blockProducerBonus The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.\\n   * @return _bridgeOperatorBonus The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.\\n   *\\n   */\\n  function requestBonus(bool _forBlockProducer, bool _forBridgeOperator)\\n    external\\n    returns (\\n      bool _success,\\n      uint256 _blockProducerBonus,\\n      uint256 _bridgeOperatorBonus\\n    );\\n\\n  /**\\n   * @dev Sets the bonus amount per block for block producer.\\n   *\\n   * Emits the event `BlockProducerBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBlockProducerBonusPerBlock(uint256 _amount) external;\\n\\n  /**\\n   * @dev Sets the bonus amount per block for bridge operator.\\n   *\\n   * Emits the event `BridgeOperatorBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBridgeOperatorBonusPerBlock(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x6705fdccf03c4acd34ceb1034c2ab556c901781d6d5597e63f257eafe75cf1ae\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeTrackingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasBridgeTrackingContract {\\n  /// @dev Emitted when the bridge tracking contract is updated.\\n  event BridgeTrackingContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the bridge tracking contract.\\n   */\\n  function bridgeTrackingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge tracking contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeTrackingContractUpdated`.\\n   *\\n   */\\n  function setBridgeTrackingContract(address) external;\\n}\\n\",\"keccak256\":\"0xde47e74524035698a7ced19235a527d82674be9625bc95f5f1a8abd2ccad55db\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasMaintenanceContract {\\n  /// @dev Emitted when the maintenance contract is updated.\\n  event MaintenanceContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the maintenance contract.\\n   */\\n  function maintenanceContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the maintenance contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function setMaintenanceContract(address) external;\\n}\\n\",\"keccak256\":\"0xb4497d521ee5da55cfdd349e814f763ba88b9e91d8bdc50ba12f4e5d161b65e3\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasRoninTrustedOrganizationContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x8ec2782f28a2c41d8feee0c5f213ac66e327c3757eab8d85a09104f21587ff10\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasSlashIndicatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasSlashIndicatorContract {\\n  /// @dev Emitted when the slash indicator contract is updated.\\n  event SlashIndicatorContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the slash indicator contract.\\n   */\\n  function slashIndicatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `SlashIndicatorContractUpdated`.\\n   *\\n   */\\n  function setSlashIndicatorContract(address) external;\\n}\\n\",\"keccak256\":\"0xcb5918e984abdeb1da63372c409d9f665c3246a0a078a42beff4268f6aaffb80\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasStakingContract {\\n  /// @dev Emitted when the staking contract is updated.\\n  event StakingContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the staking contract.\\n   */\\n  function stakingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the staking contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingContractUpdated`.\\n   *\\n   */\\n  function setStakingContract(address) external;\\n}\\n\",\"keccak256\":\"0x7922d1395687827e52b12f505f3ca1477c20546c5f35f4e0b175575172438241\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasStakingVestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasStakingVestingContract {\\n  /// @dev Emitted when the staking vesting contract is updated.\\n  event StakingVestingContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the staking vesting contract.\\n   */\\n  function stakingVestingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the staking vesting contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingVestingContractUpdated`.\\n   *\\n   */\\n  function setStakingVestingContract(address) external;\\n}\\n\",\"keccak256\":\"0x4e2c438040b12d3ca8475b6505c0c4b0aee25c73a0bd8815cbf39504c97861d8\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2\\n  }\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed validator, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0xedbd63e46b316156c9bfc4a88bc0d0ff016f14a031810bfc2b972b084b0e0fdd\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICreditScore {\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore,\\n    uint256 maxCreditScore,\\n    uint256 bailOutCostMultiplier,\\n    uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated\\n  event CreditScoresUpdated(address[] validators, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail\\n  event BailedOut(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function updateCreditScores(address[] calldata _validators, uint256 _period) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(address[] calldata _validators) external view returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `_validator` has been bailed out at the `_period`.\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6d5bcdcc1347812f47bd6ee2050e0a103210a55030ba943ea889b0478192352a\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashBridgeOperator {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method\\n   * `getBridgeOperatorSlashingConfigs` for param details.\\n   */\\n  event BridgeOperatorSlashingConfigsUpdated(\\n    uint256 missingVotesRatioTier1,\\n    uint256 missingVotesRatioTier2,\\n    uint256 jailDurationForMissingVotesRatioTier2,\\n    uint256 skipBridgeOperatorSlashingThreshold\\n  );\\n\\n  /**\\n   * @dev Returns the configs related to bridge operator slashing.\\n   *\\n   * @return _missingVotesRatioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio.\\n   * @return _missingVotesRatioTier2 The bridge reward and mining reward will be deprecated and the corresponding\\n   * block producer will be put in jail if (s)he misses more than this ratio.\\n   * @return _jailDurationForMissingVotesRatioTier2 The number of blocks to jail the corresponding block producer when\\n   * its bridge operator is slashed tier-2.\\n   * @return _skipBridgeOperatorSlashingThreshold The threshold to skip slashing the bridge operator in case the total\\n   * number of votes in the bridge is too small.\\n   *\\n   */\\n  function getBridgeOperatorSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2,\\n      uint256 _skipBridgeOperatorSlashingThreshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash bridge operators.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _ratioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map\\n   * to 0%-100%.\\n   * @param _ratioTier2 The bridge reward and mining reward will be deprecated and the corresponding block producer will\\n   * be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.\\n   * @param _jailDurationTier2 The number of blocks to jail the corresponding block producer when its bridge operator is\\n   * slashed tier-2.\\n   * @param _skipSlashingThreshold The threshold to skip slashing the bridge operator in case the total number of votes\\n   * in the bridge is too small.\\n   *\\n   */\\n  function setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x986ec80f07935318901fc52492d04ace26124e88f0252582543a244818344b52\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeVoting is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge voting is updated. See the method `getBridgeVotingSlashingConfigs` for param\\n   * details.\\n   */\\n  event BridgeVotingSlashingConfigsUpdated(uint256 bridgeVotingThreshold, uint256 bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Slashes for bridge voter governance.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function slashBridgeVoting(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge voting slashing.\\n   *\\n   * @return _bridgeVotingThreshold The threshold to slash when a trusted organization does not vote for bridge\\n   * operators.\\n   * @return _bridgeVotingSlashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function getBridgeVotingSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _bridgeVotingThreshold, uint256 _bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Sets the configs to slash bridge voting.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeVotingSlashingConfigsUpdated`.\\n   *\\n   * @param _threshold The threshold to slash when a trusted organization does not vote for bridge operators.\\n   * @param _slashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) external;\\n}\\n\",\"keccak256\":\"0x72c3bcfe3c49f946651caa3066bd5296d007871c9a56fa113e2d3c0f3db7eb99\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(uint256 slashDoubleSignAmount, uint256 doubleSigningJailUntilBlock);\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(\\n    address _validatorAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _slashDoubleSignAmount, uint256 _doubleSigningJailUntilBlock);\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(uint256 _slashAmount, uint256 _jailUntilBlock) external;\\n}\\n\",\"keccak256\":\"0x5639b0203facbf4769bb26e994c8491ac22c13ae0363c3c062ac375225121463\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashBridgeVoting.sol\\\";\\nimport \\\"./ISlashBridgeOperator.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is\\n  ISlashDoubleSign,\\n  ISlashBridgeVoting,\\n  ISlashBridgeOperator,\\n  ISlashUnavailability,\\n  ICreditScore\\n{}\\n\",\"keccak256\":\"0xe8b8fde3af614735cb304bc1eb82b05d65ede4df804b5d555787e5d5ecb95ec0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Retursn the unavailability indicator in the period `_period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold.\\n   * @return _unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold.\\n   * @return _slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed tier-2.\\n   * @return _jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed tier-2.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _unavailabilityTier1Threshold,\\n      uint256 _unavailabilityTier2Threshold,\\n      uint256 _slashAmountForUnavailabilityTier2Threshold,\\n      uint256 _jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param _tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param _slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param _jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb0bc405c7c1bdcf0fa975afc5d9c6cba8fc85e118dd3febe0b4fa00e3c6bf5c6\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    // Address of the pool i.e. consensus address of the validator\\n    address addr;\\n    // Pool admin address\\n    address admin;\\n    // Self-staking amount\\n    uint256 stakingAmount;\\n    // Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    // Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    // Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external;\\n}\\n\",\"keccak256\":\"0x47752fa8390d5e669b619060ffeae1a4182270eee5475250e54b660f0d86fefb\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed validator, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] validator);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed validator,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed validator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param _candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function deprecatePools(address[] calldata _pools) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0xcb3c2ae18bf699681e2226a542b2555bf20bd4ca5d39309d07e994e1bf773301\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(address _user, address[] calldata _poolAddrList)\\n    external\\n    view\\n    returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList) external returns (uint256 _amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(address[] calldata _consensusAddrList, address _consensusAddrDst)\\n    external\\n    returns (uint256 _amount);\\n}\\n\",\"keccak256\":\"0xc937036bcda0a4632af4937c514230a7b301d1f42959bfb00c377cb76f3f61bc\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Min staking amount in the period.\\n    uint256 minAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolAddr, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolAddr, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolAddr, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolAddrs, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolAddrs, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolAddrs);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(address[] calldata _poolAddrs, address[] calldata _userList)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(address _poolAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `_poolAddrs`.\\n   */\\n  function getManyStakingTotals(address[] calldata _poolAddrs) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8a4d4ab84f0b343cea84b8e86f90f4b9286051a166e348f5ef6c7d2d2c2af09f\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking {\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function recordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function deductStakingAmount(address _consensusAddr, uint256 _amount)\\n    external\\n    returns (uint256 _actualDeductingAmount);\\n\\n  /**\\n   * @dev Returns the staking pool detail.\\n   */\\n  function getStakingPool(address)\\n    external\\n    view\\n    returns (\\n      address _admin,\\n      uint256 _stakingAmount,\\n      uint256 _stakingTotal\\n    );\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(address[] calldata) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x84a3f7dfb1d291808514207da26c29fba58479a780d8f955e1cf5ea413fbba83\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function grantValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function requestRevokeCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x440a846c4cb5d268f54592976e60015f7559d2c6e394f83de3041c04ffab6458\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 amount);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(uint256 amount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xd0aef1d05e99c82fd733c97a45f3a999898c4ded0cace2cb901864e2ddc3904a\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface IRoninValidatorSet is ICandidateManager, ICommonInfo, ISlashingExecution, ICoinbaseExecution {}\\n\",\"keccak256\":\"0x2475cf9c7007277ddfeade823196d0913a6d5c3e3fc9a1a10800734c0fdef062\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0xdeb929875d06c5dfb8562029ccc2922e1c5238f2dc67c8c61acad614f5fe1e28\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x33a52025305948a8e71d32317e4cdb2cf779afc3bcdb5bcbd72df5e1513f449f\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x310f321625fac8b7dbabfdad36e82b960b0b1f7bf0e5b70b763e45438b8a8d30\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbaf184267f8a587b6c2a79868f7acde00d9372e8283baf5baab34ad19ab4abd2\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xf7f30bacc63b2e4e9548c83e45eac727eeafa46e60312f936bf189480e413323\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - min(a, b);\\n  }\\n}\\n\",\"keccak256\":\"0xa9e2a3ad43d7999a3cdbfb040b0f2dec282eae91ff8fe6ad26fdd19087121ce7\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PrecompileUsagePickValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract PrecompileUsagePickValidatorSet {\\n  /// @dev Gets the address of the precompile of picking validator set\\n  function precompilePickValidatorSetAddress() public view virtual returns (address) {\\n    return address(0x68);\\n  }\\n\\n  /**\\n   * @dev Sorts and arranges to return a new validator set.\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcPickValidatorSet(\\n    address[] memory _candidates,\\n    uint256[] memory _weights,\\n    uint256[] memory _trustedWeights,\\n    uint256 _maxValidatorNumber,\\n    uint256 _maxPrioritizedValidatorNumber\\n  ) internal view virtual returns (address[] memory _result, uint256 _newValidatorCount) {\\n    address _smc = precompilePickValidatorSetAddress();\\n    bytes memory _payload = abi.encodeWithSignature(\\n      \\\"pickValidatorSet(address[],uint256[],uint256[],uint256,uint256)\\\",\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    bool _success = true;\\n\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    require(_success, \\\"PrecompileUsagePickValidatorSet: call to precompile fails\\\");\\n\\n    _newValidatorCount = _result.length;\\n  }\\n}\\n\",\"keccak256\":\"0x04d77bc54326963e9a28b3f4d936df22d8219c263ccc1d4f2985f3703204f4aa\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompileUsageSortValidators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract PrecompileUsageSortValidators {\\n  /// @dev Gets the address of the precompile of sorting validators\\n  function precompileSortValidatorsAddress() public view virtual returns (address) {\\n    return address(0x66);\\n  }\\n\\n  /**\\n   * @dev Sorts candidates descending by their weights by calling precompile contract.\\n   *\\n   * Note: This function is marked as virtual for being wrapping in mock contract for testing purpose.\\n   */\\n  function _pcSortCandidates(address[] memory _candidates, uint256[] memory _weights)\\n    internal\\n    view\\n    virtual\\n    returns (address[] memory _result)\\n  {\\n    address _smc = precompileSortValidatorsAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload = abi.encodeWithSignature(\\\"sortValidators(address[],uint256[])\\\", _candidates, _weights);\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    require(_success, \\\"PrecompileUsageSortValidators: call to precompile fails\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x87570b28364e8389bcfb1378f5fd9619d4971dc88c2af6335ce557bb8b38e24f\",\"license\":\"MIT\"},\"contracts/ronin/validator/CandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingContract.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\n\\nabstract contract CandidateManager is ICandidateManager, PercentageConsumer, HasStakingContract {\\n  /// @dev Maximum number of validator candidate\\n  uint256 private _maxValidatorCandidate;\\n\\n  /// @dev The validator candidate array\\n  address[] internal _candidates;\\n  /// @dev Mapping from candidate address => bitwise negation of validator index in `_candidates`\\n  mapping(address => uint256) internal _candidateIndex;\\n  /// @dev Mapping from candidate address => their info\\n  mapping(address => ValidatorCandidate) internal _candidateInfo;\\n\\n  /**\\n   * @dev The minimum offset in day from current date to the effective date of a new commission schedule.\\n   * Value of 1 means the change gets affected at the beginning of the following day.\\n   **/\\n  uint256 internal _minEffectiveDaysOnwards;\\n  /// @dev Mapping from candidate address => schedule commission change.\\n  mapping(address => CommissionSchedule) internal _candidateCommissionChangeSchedule;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function maxValidatorCandidate() public view override returns (uint256) {\\n    return _maxValidatorCandidate;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function minEffectiveDaysOnwards() external view override returns (uint256) {\\n    return _minEffectiveDaysOnwards;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMaxValidatorCandidate(uint256 _number) external override onlyAdmin {\\n    _setMaxValidatorCandidate(_number);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external override onlyAdmin {\\n    _setMinEffectiveDaysOnwards(_numOfDays);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function grantValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external override onlyStakingContract {\\n    uint256 _length = _candidates.length;\\n    require(_length < maxValidatorCandidate(), \\\"CandidateManager: exceeds maximum number of candidates\\\");\\n    require(!isValidatorCandidate(_consensusAddr), \\\"CandidateManager: query for already existent candidate\\\");\\n    require(_commissionRate <= _MAX_PERCENTAGE, \\\"CandidateManager: invalid comission rate\\\");\\n\\n    for (uint _i = 0; _i < _candidates.length; _i++) {\\n      ValidatorCandidate storage existentInfo = _candidateInfo[_candidates[_i]];\\n\\n      if (_admin == existentInfo.admin) {\\n        revert(\\n          string(\\n            abi.encodePacked(\\n              \\\"CandidateManager: candidate admin address \\\",\\n              Strings.toHexString(uint160(_admin), 20),\\n              \\\" is already exist\\\"\\n            )\\n          )\\n        );\\n      }\\n\\n      if (_treasuryAddr == existentInfo.treasuryAddr) {\\n        revert(\\n          string(\\n            abi.encodePacked(\\n              \\\"CandidateManager: treasury address \\\",\\n              Strings.toHexString(uint160(address(_treasuryAddr)), 20),\\n              \\\" is already exist\\\"\\n            )\\n          )\\n        );\\n      }\\n\\n      if (_bridgeOperatorAddr == existentInfo.bridgeOperatorAddr) {\\n        revert(\\n          string(\\n            abi.encodePacked(\\n              \\\"CandidateManager: bridge operator address \\\",\\n              Strings.toHexString(uint160(_bridgeOperatorAddr), 20),\\n              \\\" is already exist\\\"\\n            )\\n          )\\n        );\\n      }\\n    }\\n\\n    _candidateIndex[_consensusAddr] = ~_length;\\n    _candidates.push(_consensusAddr);\\n\\n    ValidatorCandidate storage _info = _candidateInfo[_consensusAddr];\\n    _info.admin = _admin;\\n    _info.consensusAddr = _consensusAddr;\\n    _info.treasuryAddr = _treasuryAddr;\\n    _info.bridgeOperatorAddr = _bridgeOperatorAddr;\\n    _info.commissionRate = _commissionRate;\\n    emit CandidateGranted(_consensusAddr, _treasuryAddr, _admin, _bridgeOperatorAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function requestRevokeCandidate(address _consensusAddr, uint256 _secsLeft) external override onlyStakingContract {\\n    require(isValidatorCandidate(_consensusAddr), \\\"CandidateManager: query for non-existent candidate\\\");\\n    ValidatorCandidate storage _info = _candidateInfo[_consensusAddr];\\n    require(_info.revokingTimestamp == 0, \\\"CandidateManager: already requested before\\\");\\n\\n    uint256 _revokingTimestamp = block.timestamp + _secsLeft;\\n    _info.revokingTimestamp = _revokingTimestamp;\\n    emit CandidateRevokingTimestampUpdated(_consensusAddr, _revokingTimestamp);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external override onlyStakingContract {\\n    require(\\n      _candidateCommissionChangeSchedule[_consensusAddr].effectiveTimestamp == 0,\\n      \\\"CandidateManager: commission change schedule exists\\\"\\n    );\\n    require(_commissionRate <= _MAX_PERCENTAGE, \\\"CandidateManager: invalid commission rate\\\");\\n    require(_effectiveDaysOnwards >= _minEffectiveDaysOnwards, \\\"CandidateManager: invalid effective date\\\");\\n\\n    CommissionSchedule storage _schedule = _candidateCommissionChangeSchedule[_consensusAddr];\\n    uint256 _effectiveTimestamp = ((block.timestamp / 1 days) + _effectiveDaysOnwards) * 1 days;\\n    _schedule.effectiveTimestamp = _effectiveTimestamp;\\n    _schedule.commissionRate = _commissionRate;\\n\\n    emit CommissionRateUpdateScheduled(_consensusAddr, _effectiveTimestamp, _commissionRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isValidatorCandidate(address _addr) public view override returns (bool) {\\n    return _candidateIndex[_addr] != 0;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfos() external view override returns (ValidatorCandidate[] memory _list) {\\n    _list = new ValidatorCandidate[](_candidates.length);\\n    for (uint _i = 0; _i < _list.length; _i++) {\\n      _list[_i] = _candidateInfo[_candidates[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfo(address _candidate) external view override returns (ValidatorCandidate memory) {\\n    require(isValidatorCandidate(_candidate), \\\"CandidateManager: query for non-existent candidate\\\");\\n    return _candidateInfo[_candidate];\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getValidatorCandidates() public view override returns (address[] memory) {\\n    return _candidates;\\n  }\\n\\n  /**\\n   * @dev Removes unsastisfied candidates, the ones who have insufficient minimum candidate staking amount,\\n   * or the ones who requested to renounce their candidate role.\\n   *\\n   * Emits the event `CandidatesRevoked` when a candidate is revoked.\\n   *\\n   */\\n  function _syncCandidateSet() internal {\\n    IStaking _staking = _stakingContract;\\n    uint256 _waitingSecsToRevoke = _staking.waitingSecsToRevoke();\\n    uint256 _minStakingAmount = _staking.minValidatorStakingAmount();\\n    uint256[] memory _selfStakings = _staking.getManySelfStakings(_candidates);\\n\\n    uint256 _length = _candidates.length;\\n    uint256 _unsatisfiedCount;\\n    address[] memory _unsatisfiedCandidates = new address[](_length);\\n\\n    {\\n      uint256 _i;\\n      address _addr;\\n      ValidatorCandidate storage _info;\\n      while (_i < _length) {\\n        _addr = _candidates[_i];\\n        _info = _candidateInfo[_addr];\\n\\n        // Checks for under-balance status of candidates\\n        bool _hasTopupDeadline = _info.topupDeadline != 0;\\n        if (_selfStakings[_i] < _minStakingAmount) {\\n          // Updates deadline on the first time unsatisfied the staking amount condition\\n          if (!_hasTopupDeadline) {\\n            uint256 _topupDeadline = block.timestamp + _waitingSecsToRevoke;\\n            _info.topupDeadline = _topupDeadline;\\n            emit CandidateTopupDeadlineUpdated(_addr, _topupDeadline);\\n          }\\n        } else if (_hasTopupDeadline) {\\n          // Removes the deadline if the staking amount condition is satisfied\\n          delete _info.topupDeadline;\\n          emit CandidateTopupDeadlineUpdated(_addr, 0);\\n        }\\n\\n        // Removes unsastisfied candidates\\n        bool _revokingActivated = _info.revokingTimestamp != 0 && _info.revokingTimestamp <= block.timestamp;\\n        bool _topupDeadlineMissed = _info.topupDeadline != 0 && _info.topupDeadline <= block.timestamp;\\n        if (_revokingActivated || _topupDeadlineMissed) {\\n          _selfStakings[_i] = _selfStakings[--_length];\\n          _unsatisfiedCandidates[_unsatisfiedCount++] = _addr;\\n          _removeCandidate(_addr);\\n          continue;\\n        }\\n\\n        // Checks for schedule of commission change and updates commission rate\\n        uint256 _scheduleTimestamp = _candidateCommissionChangeSchedule[_addr].effectiveTimestamp;\\n        if (_scheduleTimestamp != 0 && _scheduleTimestamp <= block.timestamp) {\\n          uint256 _commisionRate = _candidateCommissionChangeSchedule[_addr].commissionRate;\\n          delete _candidateCommissionChangeSchedule[_addr];\\n          _info.commissionRate = _commisionRate;\\n          emit CommissionRateUpdated(_addr, _commisionRate);\\n        }\\n\\n        _i++;\\n      }\\n    }\\n\\n    if (_unsatisfiedCount > 0) {\\n      assembly {\\n        mstore(_unsatisfiedCandidates, _unsatisfiedCount)\\n      }\\n      emit CandidatesRevoked(_unsatisfiedCandidates);\\n      _staking.deprecatePools(_unsatisfiedCandidates);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view override returns (bool) {\\n    return _candidateInfo[_candidate].admin == _admin;\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr) internal view virtual returns (address) {\\n    return _candidateInfo[_consensusAddr].bridgeOperatorAddr;\\n  }\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function _setMaxValidatorCandidate(uint256 _threshold) internal {\\n    _maxValidatorCandidate = _threshold;\\n    emit MaxValidatorCandidateUpdated(_threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the minimum number of days onwards to the effective date of commission rate change.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function _setMinEffectiveDaysOnwards(uint256 _numOfDays) internal {\\n    require(_numOfDays >= 1, \\\"CandidateManager: invalid min effective days onwards\\\");\\n    _minEffectiveDaysOnwards = _numOfDays;\\n    emit MinEffectiveDaysOnwardsUpdated(_numOfDays);\\n  }\\n\\n  /**\\n   * @dev Removes the candidate.\\n   */\\n  function _removeCandidate(address _addr) private {\\n    uint256 _idx = _candidateIndex[_addr];\\n    if (_idx == 0) {\\n      return;\\n    }\\n\\n    delete _candidateInfo[_addr];\\n    delete _candidateIndex[_addr];\\n    delete _candidateCommissionChangeSchedule[_addr];\\n\\n    address _lastCandidate = _candidates[_candidates.length - 1];\\n\\n    if (_lastCandidate != _addr) {\\n      _candidateIndex[_lastCandidate] = _idx;\\n      _candidates[~_idx] = _lastCandidate;\\n    }\\n\\n    _candidates.pop();\\n  }\\n}\\n\",\"keccak256\":\"0x07c43f719d98d23eaedc565372f48c616865aeb5c27b886396713c1838226134\",\"license\":\"MIT\"},\"contracts/ronin/validator/CoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasBridgeTrackingContract.sol\\\";\\nimport \\\"../../extensions/collections/HasMaintenanceContract.sol\\\";\\nimport \\\"../../extensions/collections/HasSlashIndicatorContract.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingVestingContract.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/validator/ICoinbaseExecution.sol\\\";\\nimport \\\"../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../precompile-usages/PrecompileUsageSortValidators.sol\\\";\\nimport \\\"../../precompile-usages/PrecompileUsagePickValidatorSet.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport \\\"./CandidateManager.sol\\\";\\n\\nabstract contract CoinbaseExecution is\\n  ICoinbaseExecution,\\n  RONTransferHelper,\\n  PrecompileUsageSortValidators,\\n  PrecompileUsagePickValidatorSet,\\n  HasStakingVestingContract,\\n  HasBridgeTrackingContract,\\n  HasMaintenanceContract,\\n  HasSlashIndicatorContract,\\n  CandidateManager,\\n  CommonStorage\\n{\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  modifier onlyCoinbase() {\\n    require(msg.sender == block.coinbase, \\\"RoninValidatorSet: method caller must be coinbase\\\");\\n    _;\\n  }\\n\\n  modifier whenEpochEnding() {\\n    require(epochEndingAt(block.number), \\\"RoninValidatorSet: only allowed at the end of epoch\\\");\\n    _;\\n  }\\n\\n  modifier oncePerEpoch() {\\n    require(\\n      epochOf(_lastUpdatedBlock) < epochOf(block.number),\\n      \\\"RoninValidatorSet: query for already wrapped up epoch\\\"\\n    );\\n    _lastUpdatedBlock = block.number;\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function submitBlockReward() external payable override onlyCoinbase {\\n    uint256 _submittedReward = msg.value;\\n    address _coinbaseAddr = msg.sender;\\n    bool _requestForBlockProducer = isBlockProducer(_coinbaseAddr) &&\\n      !_jailed(_coinbaseAddr) &&\\n      !_miningRewardDeprecated(_coinbaseAddr, currentPeriod());\\n    bool _requestForBridgeOperator = true;\\n\\n    (, uint256 _blockProducerBonus, uint256 _bridgeOperatorBonus) = _stakingVestingContract.requestBonus(\\n      _requestForBlockProducer,\\n      _requestForBridgeOperator\\n    );\\n\\n    _totalBridgeReward += _bridgeOperatorBonus;\\n\\n    // Deprecates reward for non-validator or slashed validator\\n    if (!_requestForBlockProducer) {\\n      _totalDeprecatedReward += _submittedReward;\\n      emit BlockRewardDeprecated(_coinbaseAddr, _submittedReward, BlockRewardDeprecatedType.UNAVAILABILITY);\\n      return;\\n    }\\n\\n    emit BlockRewardSubmitted(_coinbaseAddr, _submittedReward, _blockProducerBonus);\\n\\n    uint256 _period = currentPeriod();\\n    uint256 _reward = _submittedReward + _blockProducerBonus;\\n    uint256 _cutOffReward;\\n    if (_miningRewardBailoutCutOffAtPeriod[_coinbaseAddr][_period]) {\\n      (, , , uint256 _cutOffPercentage) = _slashIndicatorContract.getCreditScoreConfigs();\\n      _cutOffReward = (_reward * _cutOffPercentage) / _MAX_PERCENTAGE;\\n      _totalDeprecatedReward += _cutOffReward;\\n      emit BlockRewardDeprecated(_coinbaseAddr, _cutOffReward, BlockRewardDeprecatedType.AFTER_BAILOUT);\\n    }\\n\\n    _reward -= _cutOffReward;\\n    uint256 _rate = _candidateInfo[_coinbaseAddr].commissionRate;\\n    uint256 _miningAmount = (_rate * _reward) / _MAX_PERCENTAGE;\\n    _miningReward[_coinbaseAddr] += _miningAmount;\\n\\n    uint256 _delegatingAmount = _reward - _miningAmount;\\n    _delegatingReward[_coinbaseAddr] += _delegatingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function wrapUpEpoch() external payable virtual override onlyCoinbase whenEpochEnding oncePerEpoch {\\n    uint256 _newPeriod = _computePeriod(block.timestamp);\\n    bool _periodEnding = _isPeriodEnding(_newPeriod);\\n    _currentPeriodStartAtBlock = block.number + 1;\\n\\n    address[] memory _currentValidators = getValidators();\\n    uint256 _epoch = epochOf(block.number);\\n    uint256 _lastPeriod = currentPeriod();\\n\\n    if (_periodEnding) {\\n      _syncBridgeOperatingReward(_lastPeriod, _currentValidators);\\n      (\\n        uint256 _totalDelegatingReward,\\n        uint256[] memory _delegatingRewards\\n      ) = _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(_lastPeriod, _currentValidators);\\n      _settleAndTransferDelegatingRewards(_lastPeriod, _currentValidators, _totalDelegatingReward, _delegatingRewards);\\n      _recycleDeprecatedRewards();\\n      _slashIndicatorContract.updateCreditScores(_currentValidators, _lastPeriod);\\n      _currentValidators = _syncValidatorSet(_newPeriod);\\n    }\\n\\n    _revampBlockProducers(_newPeriod, _currentValidators);\\n    emit WrappedUpEpoch(_lastPeriod, _epoch, _periodEnding);\\n    _lastUpdatedPeriod = _newPeriod;\\n  }\\n\\n  /**\\n   * @dev This loop over the all current validators to sync the bridge operating reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncBridgeOperatingReward(uint256 _lastPeriod, address[] memory _currentValidators) internal {\\n    IBridgeTracking _bridgeTracking = _bridgeTrackingContract;\\n    uint256 _totalBridgeBallots = _bridgeTracking.totalBallots(_lastPeriod);\\n    uint256 _totalBridgeVotes = _bridgeTracking.totalVotes(_lastPeriod);\\n    uint256[] memory _bridgeBallots = _bridgeTracking.getManyTotalBallots(_lastPeriod, _currentValidators);\\n    (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2,\\n      uint256 _skipBridgeOperatorSlashingThreshold\\n    ) = _slashIndicatorContract.getBridgeOperatorSlashingConfigs();\\n    for (uint _i = 0; _i < _currentValidators.length; _i++) {\\n      _updateValidatorRewardBaseOnBridgeOperatingPerformance(\\n        _lastPeriod,\\n        _currentValidators[_i],\\n        _bridgeBallots[_i],\\n        _totalBridgeVotes,\\n        _totalBridgeBallots,\\n        _missingVotesRatioTier1,\\n        _missingVotesRatioTier2,\\n        _jailDurationForMissingVotesRatioTier2,\\n        _skipBridgeOperatorSlashingThreshold\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates validator reward based on the corresponding bridge operator performance.\\n   */\\n  function _updateValidatorRewardBaseOnBridgeOperatingPerformance(\\n    uint256 _period,\\n    address _validator,\\n    uint256 _validatorBallots,\\n    uint256 _totalVotes,\\n    uint256 _totalBallots,\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipBridgeOperatorSlashingThreshold\\n  ) internal {\\n    // Shares equally in case the bridge has nothing to votes\\n    bool _emptyBallot = _totalBallots == 0;\\n    if (_emptyBallot && _totalVotes == 0) {\\n      _bridgeOperatingReward[_validator] = _totalBridgeReward / totalBridgeOperators();\\n      return;\\n    } else if (_emptyBallot) {\\n      return;\\n    }\\n\\n    // Skips slashing in case the total number of votes is too small\\n    if (_totalVotes <= _skipBridgeOperatorSlashingThreshold) {\\n      _bridgeOperatingReward[_validator] = (_totalBridgeReward * _validatorBallots) / _totalBallots;\\n      return;\\n    }\\n\\n    uint256 _votedRatio = (_validatorBallots * _MAX_PERCENTAGE) / _totalVotes;\\n    uint256 _missedRatio = _MAX_PERCENTAGE - _votedRatio;\\n    if (_missedRatio > _ratioTier2) {\\n      _bridgeRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      _miningRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      _jailedUntil[_validator] = Math.max(block.number + _jailDurationTier2, _jailedUntil[_validator]);\\n      emit ValidatorPunished(_validator, _period, _jailedUntil[_validator], 0, true, true);\\n    } else if (_missedRatio > _ratioTier1) {\\n      _bridgeRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      emit ValidatorPunished(_validator, _period, _jailedUntil[_validator], 0, false, true);\\n    } else if (_totalBallots > 0) {\\n      _bridgeOperatingReward[_validator] = (_totalBridgeReward * _validatorBallots) / _totalBallots;\\n    }\\n  }\\n\\n  /**\\n   * @dev This loops over all current validators to:\\n   * - Update delegating reward for and calculate total delegating rewards to be sent to the staking contract,\\n   * - Distribute the reward of block producers and bridge operators to their treasury addresses,\\n   * - Update the total deprecated reward if the two previous conditions do not sastify.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(\\n    uint256 _lastPeriod,\\n    address[] memory _currentValidators\\n  ) private returns (uint256 _totalDelegatingReward, uint256[] memory _delegatingRewards) {\\n    address _consensusAddr;\\n    address payable _treasury;\\n    _delegatingRewards = new uint256[](_currentValidators.length);\\n    for (uint _i = 0; _i < _currentValidators.length; _i++) {\\n      _consensusAddr = _currentValidators[_i];\\n      _treasury = _candidateInfo[_consensusAddr].treasuryAddr;\\n\\n      if (!_bridgeRewardDeprecated(_consensusAddr, _lastPeriod)) {\\n        _distributeBridgeOperatingReward(_consensusAddr, _candidateInfo[_consensusAddr].bridgeOperatorAddr, _treasury);\\n      } else {\\n        _totalDeprecatedReward += _bridgeOperatingReward[_consensusAddr];\\n      }\\n\\n      if (!_jailed(_consensusAddr) && !_miningRewardDeprecated(_consensusAddr, _lastPeriod)) {\\n        _totalDelegatingReward += _delegatingReward[_consensusAddr];\\n        _delegatingRewards[_i] = _delegatingReward[_consensusAddr];\\n        _distributeMiningReward(_consensusAddr, _treasury);\\n      } else {\\n        _totalDeprecatedReward += _miningReward[_consensusAddr] + _delegatingReward[_consensusAddr];\\n      }\\n\\n      delete _delegatingReward[_consensusAddr];\\n      delete _miningReward[_consensusAddr];\\n      delete _bridgeOperatingReward[_consensusAddr];\\n    }\\n    delete _totalBridgeReward;\\n  }\\n\\n  /**\\n   * @dev Distributes bonus of staking vesting and mining fee for the block producer.\\n   *\\n   * Emits the `MiningRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `MiningRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeMiningReward(address _consensusAddr, address payable _treasury) private {\\n    uint256 _amount = _miningReward[_consensusAddr];\\n    if (_amount > 0) {\\n      if (_unsafeSendRON(_treasury, _amount)) {\\n        emit MiningRewardDistributed(_consensusAddr, _treasury, _amount);\\n        return;\\n      }\\n\\n      emit MiningRewardDistributionFailed(_consensusAddr, _treasury, _amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Distribute bonus of staking vesting for the bridge operator.\\n   *\\n   * Emits the `BridgeOperatorRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `BridgeOperatorRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeBridgeOperatingReward(\\n    address _consensusAddr,\\n    address _bridgeOperator,\\n    address payable _treasury\\n  ) private {\\n    uint256 _amount = _bridgeOperatingReward[_consensusAddr];\\n    if (_amount > 0) {\\n      if (_unsafeSendRON(_treasury, _amount)) {\\n        emit BridgeOperatorRewardDistributed(_consensusAddr, _bridgeOperator, _treasury, _amount);\\n        return;\\n      }\\n\\n      emit BridgeOperatorRewardDistributionFailed(\\n        _consensusAddr,\\n        _bridgeOperator,\\n        _treasury,\\n        _amount,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper function to settle rewards for delegators of `_currentValidators` at the end of each period,\\n   * then transfer the rewards from this contract to the staking contract, in order to finalize a period.\\n   *\\n   * Emits the `StakingRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `StakingRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _settleAndTransferDelegatingRewards(\\n    uint256 _period,\\n    address[] memory _currentValidators,\\n    uint256 _totalDelegatingReward,\\n    uint256[] memory _delegatingRewards\\n  ) private {\\n    IStaking _staking = _stakingContract;\\n    if (_totalDelegatingReward > 0) {\\n      if (_unsafeSendRON(payable(address(_staking)), _totalDelegatingReward)) {\\n        _staking.recordRewards(_currentValidators, _delegatingRewards, _period);\\n        emit StakingRewardDistributed(_totalDelegatingReward);\\n        return;\\n      }\\n\\n      emit StakingRewardDistributionFailed(_totalDelegatingReward, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer the deprecated rewards e.g. the rewards that get deprecated when validator is slashed/maintained,\\n   * to the staking vesting contract\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   */\\n  function _recycleDeprecatedRewards() private {\\n    uint256 _withdrawAmount = _totalDeprecatedReward;\\n\\n    if (_withdrawAmount != 0) {\\n      address _withdrawTarget = stakingVestingContract();\\n\\n      delete _totalDeprecatedReward;\\n\\n      (bool _success, ) = _withdrawTarget.call{ value: _withdrawAmount }(\\n        abi.encodeWithSelector(IStakingVesting.receiveRON.selector)\\n      );\\n\\n      if (_success) {\\n        emit DeprecatedRewardRecycled(_withdrawTarget, _withdrawAmount);\\n      } else {\\n        emit DeprecatedRewardRecycleFailed(_withdrawTarget, _withdrawAmount, address(this).balance);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the validator set based on the validator candidates from the Staking contract.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   * Emits the `BridgeOperatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncValidatorSet(uint256 _newPeriod) private returns (address[] memory _newValidators) {\\n    _syncCandidateSet();\\n    uint256[] memory _weights = _stakingContract.getManyStakingTotals(_candidates);\\n    uint256[] memory _trustedWeights = _roninTrustedOrganizationContract.getConsensusWeights(_candidates);\\n    uint256 _newValidatorCount;\\n    (_newValidators, _newValidatorCount) = _pcPickValidatorSet(\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    _setNewValidatorSet(_newValidators, _newValidatorCount, _newPeriod);\\n    emit BridgeOperatorSetUpdated(_newPeriod, getBridgeOperators());\\n  }\\n\\n  /**\\n   * @dev Private helper function helps writing the new validator set into the contract storage.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _setNewValidatorSet(\\n    address[] memory _newValidators,\\n    uint256 _newValidatorCount,\\n    uint256 _newPeriod\\n  ) private {\\n    for (uint256 _i = _newValidatorCount; _i < validatorCount; _i++) {\\n      delete _validatorMap[_validators[_i]];\\n      delete _validators[_i];\\n    }\\n\\n    uint256 _count;\\n    for (uint256 _i = 0; _i < _newValidatorCount; _i++) {\\n      address _newValidator = _newValidators[_i];\\n      if (_newValidator == _validators[_count]) {\\n        _count++;\\n        continue;\\n      }\\n\\n      delete _validatorMap[_validators[_count]];\\n      _validatorMap[_newValidator] = EnumFlags.ValidatorFlag.Both;\\n      _validators[_count] = _newValidator;\\n      _count++;\\n    }\\n\\n    validatorCount = _count;\\n    emit ValidatorSetUpdated(_newPeriod, _newValidators);\\n  }\\n\\n  /**\\n   * @dev Activate/Deactivate the validators from producing blocks, based on their in jail status and maintenance status.\\n   *\\n   * Requirements:\\n   * - This method is called at the end of each epoch\\n   *\\n   * Emits the `BlockProducerSetUpdated` event.\\n   *\\n   */\\n  function _revampBlockProducers(uint256 _newPeriod, address[] memory _currentValidators) private {\\n    bool[] memory _maintainedList = _maintenanceContract.checkManyMaintained(_candidates, block.number + 1);\\n\\n    for (uint _i = 0; _i < _currentValidators.length; _i++) {\\n      address _currentValidator = _currentValidators[_i];\\n      bool _isProducerBefore = isBlockProducer(_currentValidator);\\n      bool _isProducerAfter = !(_jailed(_currentValidator) || _maintainedList[_i]);\\n\\n      if (!_isProducerBefore && _isProducerAfter) {\\n        _validatorMap[_currentValidator] = _validatorMap[_currentValidator].addFlag(\\n          EnumFlags.ValidatorFlag.BlockProducer\\n        );\\n        continue;\\n      }\\n\\n      if (_isProducerBefore && !_isProducerAfter) {\\n        _validatorMap[_currentValidator] = _validatorMap[_currentValidator].removeFlag(\\n          EnumFlags.ValidatorFlag.BlockProducer\\n        );\\n      }\\n    }\\n\\n    emit BlockProducerSetUpdated(_newPeriod, getBlockProducers());\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr)\\n    internal\\n    view\\n    virtual\\n    override(CandidateManager, ValidatorInfoStorage)\\n    returns (address)\\n  {\\n    return CandidateManager._bridgeOperatorOf(_consensusAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x1f21d878320ba010c8fe57a40637cbcf039e0d9acdfc6a9de33c6ad9f9c81fce\",\"license\":\"MIT\"},\"contracts/ronin/validator/RoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./CoinbaseExecution.sol\\\";\\nimport \\\"./SlashingExecution.sol\\\";\\n\\ncontract RoninValidatorSet is Initializable, CoinbaseExecution, SlashingExecution {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __slashIndicatorContract,\\n    address __stakingContract,\\n    address __stakingVestingContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address __bridgeTrackingContract,\\n    uint256 __maxValidatorNumber,\\n    uint256 __maxValidatorCandidate,\\n    uint256 __maxPrioritizedValidatorNumber,\\n    uint256 __minEffectiveDaysOnwards,\\n    uint256 __numberOfBlocksInEpoch\\n  ) external initializer {\\n    _setSlashIndicatorContract(__slashIndicatorContract);\\n    _setStakingContract(__stakingContract);\\n    _setStakingVestingContract(__stakingVestingContract);\\n    _setMaintenanceContract(__maintenanceContract);\\n    _setBridgeTrackingContract(__bridgeTrackingContract);\\n    _setRoninTrustedOrganizationContract(__roninTrustedOrganizationContract);\\n    _setMaxValidatorNumber(__maxValidatorNumber);\\n    _setMaxValidatorCandidate(__maxValidatorCandidate);\\n    _setMaxPrioritizedValidatorNumber(__maxPrioritizedValidatorNumber);\\n    _setMinEffectiveDaysOnwards(__minEffectiveDaysOnwards);\\n    _numberOfBlocksInEpoch = __numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @dev Only receives RON from staking vesting contract (for topping up bonus), and from staking contract (for transferring\\n   * deducting amount when slash).\\n   */\\n  function _fallback() internal view {\\n    require(\\n      msg.sender == stakingVestingContract() || msg.sender == stakingContract(),\\n      \\\"RoninValidatorSet: only receives RON from staking vesting contract or staking contract\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr)\\n    internal\\n    view\\n    override(CoinbaseExecution, ValidatorInfoStorage)\\n    returns (address)\\n  {\\n    return CoinbaseExecution._bridgeOperatorOf(_consensusAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x015303292aa2cad32b9b8fa2996972d272b17bc2f029e8dad20b38a3fca88492\",\"license\":\"MIT\"},\"contracts/ronin/validator/SlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasSlashIndicatorContract.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingContract.sol\\\";\\nimport \\\"../../interfaces/validator/ISlashingExecution.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\n\\nabstract contract SlashingExecution is\\n  ISlashingExecution,\\n  HasSlashIndicatorContract,\\n  HasStakingContract,\\n  CommonStorage\\n{\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external override onlySlashIndicatorContract {\\n    uint256 _period = currentPeriod();\\n    _miningRewardDeprecatedAtPeriod[_validatorAddr][_period] = true;\\n\\n    _totalDeprecatedReward += _miningReward[_validatorAddr] + _delegatingReward[_validatorAddr];\\n\\n    delete _miningReward[_validatorAddr];\\n    delete _delegatingReward[_validatorAddr];\\n\\n    if (_newJailedUntil > _jailedUntil[_validatorAddr]) {\\n      _jailedUntil[_validatorAddr] = _newJailedUntil;\\n    }\\n\\n    if (_slashAmount > 0) {\\n      uint256 _actualAmount = _stakingContract.deductStakingAmount(_validatorAddr, _slashAmount);\\n      _totalDeprecatedReward += _actualAmount;\\n    }\\n\\n    emit ValidatorPunished(_validatorAddr, _period, _jailedUntil[_validatorAddr], _slashAmount, true, false);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external override onlySlashIndicatorContract {\\n    // Note: Removing rewards of validator in `bailOut` function is not needed, since the rewards have been\\n    // removed previously in the `slash` function.\\n    _miningRewardBailoutCutOffAtPeriod[_validatorAddr][_period] = true;\\n    _miningRewardDeprecatedAtPeriod[_validatorAddr][_period] = false;\\n    _jailedUntil[_validatorAddr] = block.number - 1;\\n\\n    emit ValidatorUnjailed(_validatorAddr, _period);\\n  }\\n}\\n\",\"keccak256\":\"0x0231491cfb6d24dc42abac1fdc61dc7577b1a27c1c2364be44939a92d74e9661\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/CommonStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./JailingStorage.sol\\\";\\nimport \\\"./TimingStorage.sol\\\";\\nimport \\\"./ValidatorInfoStorage.sol\\\";\\n\\nabstract contract CommonStorage is ICommonInfo, TimingStorage, JailingStorage, ValidatorInfoStorage {\\n  /// @dev Mapping from consensus address => pending reward from producing block\\n  mapping(address => uint256) internal _miningReward;\\n  /// @dev Mapping from consensus address => pending reward from delegating\\n  mapping(address => uint256) internal _delegatingReward;\\n\\n  /// @dev The total reward for bridge operators\\n  uint256 internal _totalBridgeReward;\\n  /// @dev Mapping from consensus address => pending reward for being bridge operator\\n  mapping(address => uint256) internal _bridgeOperatingReward;\\n\\n  /// @dev The deprecated reward that has not been withdrawn by admin\\n  uint256 internal _totalDeprecatedReward;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function totalDeprecatedReward() external view override returns (uint256) {\\n    return _totalDeprecatedReward;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block)\\n    public\\n    view\\n    virtual\\n    override(ITimingInfo, JailingStorage, TimingStorage)\\n    returns (uint256)\\n  {\\n    return TimingStorage.epochOf(_block);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override(ITimingInfo, JailingStorage, TimingStorage) returns (uint256) {\\n    return TimingStorage.currentPeriod();\\n  }\\n}\\n\",\"keccak256\":\"0xa503cce5b82ff879d9fc834ae66df01026d9d22035cbcdb300b94794099edc12\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/JailingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/IJailingInfo.sol\\\";\\nimport \\\"./TimingStorage.sol\\\";\\n\\nabstract contract JailingStorage is IJailingInfo {\\n  /// @dev Mapping from consensus address => period number => block producer has no pending reward\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardDeprecatedAtPeriod;\\n  /// @dev Mapping from consensus address => period number => whether the block producer get cut off reward, due to bailout\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardBailoutCutOffAtPeriod;\\n  /// @dev Mapping from consensus address => period number => block operator has no pending reward\\n  mapping(address => mapping(uint256 => bool)) internal _bridgeRewardDeprecatedAtPeriod;\\n  /// @dev Mapping from consensus address => the last block that the validator is jailed\\n  mapping(address => uint256) internal _jailedUntil;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailed(address _addr) external view override returns (bool) {\\n    return checkJailedAtBlock(_addr, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    override\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    )\\n  {\\n    return getJailedTimeLeftAtBlock(_addr, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) public view override returns (bool) {\\n    return _jailedAtBlock(_addr, _blockNum);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    public\\n    view\\n    override\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    )\\n  {\\n    uint256 _jailedBlock = _jailedUntil[_addr];\\n    if (_jailedBlock < _blockNum) {\\n      return (false, 0, 0);\\n    }\\n\\n    isJailed_ = true;\\n    blockLeft_ = _jailedBlock - _blockNum + 1;\\n    epochLeft_ = epochOf(_jailedBlock) - epochOf(_blockNum) + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkManyJailed(address[] calldata _addrList) external view override returns (bool[] memory _result) {\\n    _result = new bool[](_addrList.length);\\n    for (uint256 _i; _i < _addrList.length; _i++) {\\n      _result[_i] = _jailed(_addrList[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecated(address[] calldata _blockProducers)\\n    external\\n    view\\n    override\\n    returns (bool[] memory _result)\\n  {\\n    _result = new bool[](_blockProducers.length);\\n    uint256 _period = currentPeriod();\\n    for (uint256 _i; _i < _blockProducers.length; _i++) {\\n      _result[_i] = _miningRewardDeprecated(_blockProducers[_i], _period);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    override\\n    returns (bool[] memory _result)\\n  {\\n    _result = new bool[](_blockProducers.length);\\n    for (uint256 _i; _i < _blockProducers.length; _i++) {\\n      _result[_i] = _miningRewardDeprecated(_blockProducers[_i], _period);\\n    }\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-epochOf`\\n   */\\n  function epochOf(uint256 _block) public view virtual returns (uint256);\\n\\n  /**\\n   * @dev See `ITimingInfo-currentPeriod`\\n   */\\n  function currentPeriod() public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function _jailed(address _validatorAddr) internal view returns (bool) {\\n    return _jailedAtBlock(_validatorAddr, block.number);\\n  }\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function _jailedAtBlock(address _validatorAddr, uint256 _blockNum) internal view returns (bool) {\\n    return _blockNum <= _jailedUntil[_validatorAddr];\\n  }\\n\\n  /**\\n   * @dev Returns whether the block producer has no pending reward in that period.\\n   */\\n  function _miningRewardDeprecated(address _validatorAddr, uint256 _period) internal view returns (bool) {\\n    return _miningRewardDeprecatedAtPeriod[_validatorAddr][_period];\\n  }\\n\\n  /**\\n   * @dev Returns whether the bridge operator has no pending reward in the period.\\n   */\\n  function _bridgeRewardDeprecated(address _validatorAddr, uint256 _period) internal view returns (bool) {\\n    return _bridgeRewardDeprecatedAtPeriod[_validatorAddr][_period];\\n  }\\n}\\n\",\"keccak256\":\"0xca63acbf929a9e48f8dd36259bafcb9a3706d1bc0e93fd85ec33b753a1344339\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/TimingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/ITimingInfo.sol\\\";\\n\\nabstract contract TimingStorage is ITimingInfo {\\n  /// @dev Length of period in seconds\\n  uint256 internal constant _periodLength = 1 days;\\n\\n  /// @dev The number of blocks in a epoch\\n  uint256 internal _numberOfBlocksInEpoch;\\n  /// @dev The last updated block\\n  uint256 internal _lastUpdatedBlock;\\n  /// @dev The last updated period\\n  uint256 internal _lastUpdatedPeriod;\\n  /// @dev The starting block of the last updated period\\n  uint256 internal _currentPeriodStartAtBlock;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function getLastUpdatedBlock() external view override returns (uint256) {\\n    return _lastUpdatedBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block) public view virtual override returns (uint256) {\\n    return _block / _numberOfBlocksInEpoch + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function isPeriodEnding() external view override returns (bool) {\\n    return _isPeriodEnding(_computePeriod(block.timestamp));\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochEndingAt(uint256 _block) public view virtual override returns (bool) {\\n    return _block % _numberOfBlocksInEpoch == _numberOfBlocksInEpoch - 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override returns (uint256) {\\n    return _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriodStartAtBlock() public view override returns (uint256) {\\n    return _currentPeriodStartAtBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function numberOfBlocksInEpoch() public view virtual override returns (uint256 _numberOfBlocks) {\\n    return _numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-isPeriodEnding`\\n   */\\n  function _isPeriodEnding(uint256 _newPeriod) public view virtual returns (bool) {\\n    return _newPeriod > _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @dev Returns the calculated period.\\n   */\\n  function _computePeriod(uint256 _timestamp) internal pure returns (uint256) {\\n    return _timestamp / _periodLength;\\n  }\\n}\\n\",\"keccak256\":\"0x8a55350b3f8c1f8bf4f9877ce2c63ab767e3c04784cf456f9bc99e02ec5bac7a\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/ValidatorInfoStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../../interfaces/validator/info-fragments/IValidatorInfo.sol\\\";\\n\\nabstract contract ValidatorInfoStorage is IValidatorInfo, HasRoninTrustedOrganizationContract {\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  /// @dev The maximum number of validator.\\n  uint256 internal _maxValidatorNumber;\\n\\n  /// @dev The total of validators\\n  uint256 public validatorCount;\\n  /// @dev Mapping from validator index => validator address\\n  mapping(uint256 => address) internal _validators;\\n  /// @dev Mapping from address => flag indicating the validator ability: producing block, operating bridge\\n  mapping(address => EnumFlags.ValidatorFlag) internal _validatorMap;\\n  /// @dev The number of slot that is reserved for prioritized validators\\n  uint256 internal _maxPrioritizedValidatorNumber;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getValidators() public view override returns (address[] memory _validatorList) {\\n    _validatorList = new address[](validatorCount);\\n    for (uint _i = 0; _i < _validatorList.length; _i++) {\\n      _validatorList[_i] = _validators[_i];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isValidator(address _addr) public view override returns (bool) {\\n    return !_validatorMap[_addr].isNone();\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getBlockProducers() public view override returns (address[] memory _result) {\\n    _result = new address[](validatorCount);\\n    uint256 _count = 0;\\n    for (uint _i = 0; _i < _result.length; _i++) {\\n      if (isBlockProducer(_validators[_i])) {\\n        _result[_count++] = _validators[_i];\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_result, _count)\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isBlockProducer(address _addr) public view override returns (bool) {\\n    return _validatorMap[_addr].hasFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function totalBlockProducers() external view returns (uint256 _total) {\\n    for (uint _i = 0; _i < validatorCount; _i++) {\\n      if (isBlockProducer(_validators[_i])) {\\n        _total++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getBridgeOperators() public view override returns (address[] memory _bridgeOperatorList) {\\n    _bridgeOperatorList = new address[](validatorCount);\\n    for (uint _i = 0; _i < _bridgeOperatorList.length; _i++) {\\n      _bridgeOperatorList[_i] = _bridgeOperatorOf(_validators[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isBridgeOperator(address _bridgeOperatorAddr) external view override returns (bool _result) {\\n    for (uint _i = 0; _i < validatorCount; _i++) {\\n      if (_bridgeOperatorOf(_validators[_i]) == _bridgeOperatorAddr) {\\n        _result = true;\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function maxValidatorNumber() external view override returns (uint256 _maximumValidatorNumber) {\\n    return _maxValidatorNumber;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function maxPrioritizedValidatorNumber() external view override returns (uint256 _maximumPrioritizedValidatorNumber) {\\n    return _maxPrioritizedValidatorNumber;\\n  }\\n\\n  /**\\n   * Notice: A validator is always a bride operator\\n   *\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function totalBridgeOperators() public view returns (uint256) {\\n    return validatorCount;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function setMaxValidatorNumber(uint256 _max) external override onlyAdmin {\\n    _setMaxValidatorNumber(_max);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _number) external override onlyAdmin {\\n    _setMaxPrioritizedValidatorNumber(_number);\\n  }\\n\\n  /**\\n   * @dev See `IValidatorInfo-setMaxValidatorNumber`\\n   */\\n  function _setMaxValidatorNumber(uint256 _number) internal {\\n    _maxValidatorNumber = _number;\\n    emit MaxValidatorNumberUpdated(_number);\\n  }\\n\\n  /**\\n   * @dev See `IValidatorInfo-setMaxPrioritizedValidatorNumber`\\n   */\\n  function _setMaxPrioritizedValidatorNumber(uint256 _number) internal {\\n    require(\\n      _number <= _maxValidatorNumber,\\n      \\\"RoninValidatorSet: cannot set number of prioritized greater than number of max validators\\\"\\n    );\\n\\n    _maxPrioritizedValidatorNumber = _number;\\n    emit MaxPrioritizedValidatorNumberUpdated(_number);\\n  }\\n\\n  /**\\n   * @dev Returns the bridge operator of a consensus address.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr) internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x3ff9cc33a740a140aaf68fe43efb01c1b6bc3580db1a17cc978d379484ab8298\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061039a5760003560e01c80636aa1c2ef116101dc578063a3d545f511610102578063cba44de9116100a0578063ee99205c1161006f578063ee99205c14610a47578063eeb629a814610a65578063f2811bcc14610a7a578063facd743b14610a9a576103a9565b8063cba44de9146109df578063d09f1ab4146109f4578063d2cb215e14610a09578063e5125a1d14610a27576103a9565b8063b5e337de116100dc578063b5e337de14610975578063b7ab4db514610995578063ba77b06c146109aa578063c94aaa02146109bf576103a9565b8063a3d545f514610915578063ad29578314610935578063b405aaf214610955576103a9565b80638d559c381161017a5780639c8d98da116101495780639c8d98da146108885780639dd373b9146108a85780639e94b9ec146108c8578063a0c3f2d2146108dd576103a9565b80638d559c381461081d57806396585fc2146108315780639b19dbfd146108515780639b8c334b14610866576103a9565b8063733ec970116101b6578063733ec970146107a85780637593ff71146107c8578063823a7b9c146107e857806387c891bd14610808576103a9565b80636aa1c2ef1461076b5780636efa12bd1461078057806372e46810146107a0576103a9565b80633b3159b6116102c157806352091f171161025f578063570ccb131161022e578063570ccb13146106f85780635a08482d14610718578063605239a11461073657806365244ece1461074b576103a9565b806352091f171461069b5780635248184a146106a35780635511cde1146106c5578063562d5304146106e3576103a9565b806349096d261161029b57806349096d26146106245780634de2b735146106465780634ee4d72b146106665780634f2a693f1461067b576103a9565b80633b3159b6146105d25780634493421e146105e657806346fe931114610604576103a9565b80631b6e0a99116103395780632924de71116103085780632924de711461054b578063297a8fca1461056b5780632bcf3d15146105805780633529214b146105a0576103a9565b80631b6e0a99146104bc578063217f35c2146104e957806323c65eb0146104fe57806328bde1e11461051e576103a9565b80630f43a677116103755780630f43a6771461042957806311662dc21461043f5780631196ab661461047c57806315b5ebde1461049c576103a9565b80622f5fd7146103b157806304d971ab146103d15780630604061814610406576103a9565b366103a9576103a7610aba565b005b6103a7610aba565b3480156103bd57600080fd5b506103a76103cc366004614b93565b610b75565b3480156103dd57600080fd5b506103f16103ec366004614c47565b610ce8565b60405190151581526020015b60405180910390f35b34801561041257600080fd5b5061041b610d0f565b6040519081526020016103fd565b34801561043557600080fd5b5061041b60aa5481565b34801561044b57600080fd5b5061045f61045a366004614c80565b610d1f565b6040805193151584526020840192909252908201526060016103fd565b34801561048857600080fd5b506103a7610497366004614cac565b610da2565b3480156104a857600080fd5b506103a76104b7366004614c80565b610de6565b3480156104c857600080fd5b506104dc6104d7366004614d10565b610ed1565b6040516103fd9190614d5b565b3480156104f557600080fd5b506103f1610f8e565b34801561050a57600080fd5b506103f1610519366004614c80565b610f9c565b34801561052a57600080fd5b5061053e610539366004614da1565b610fc0565b6040516103fd9190614e12565b34801561055757600080fd5b506103f1610566366004614da1565b61109f565b34801561057757600080fd5b5060045461041b565b34801561058c57600080fd5b506103a761059b366004614da1565b6110ab565b3480156105ac57600080fd5b50606d546001600160a01b03165b6040516001600160a01b0390911681526020016103fd565b3480156105de57600080fd5b5060686105ba565b3480156105f257600080fd5b50606e546001600160a01b03166105ba565b34801561061057600080fd5b506103a761061f366004614da1565b61115d565b34801561063057600080fd5b5061063961120c565b6040516103fd9190614e64565b34801561065257600080fd5b506104dc610661366004614e77565b6112f5565b34801561067257600080fd5b5060e45461041b565b34801561068757600080fd5b506103a7610696366004614cac565b6113b0565b6103a76113f1565b3480156106af57600080fd5b506106b8611789565b6040516103fd9190614eb8565b3480156106d157600080fd5b5060a8546001600160a01b03166105ba565b3480156106ef57600080fd5b5060aa5461041b565b34801561070457600080fd5b506103a7610713366004614efa565b6118e7565b34801561072457600080fd5b506070546001600160a01b03166105ba565b34801561074257600080fd5b5060725461041b565b34801561075757600080fd5b506103f1610766366004614da1565b611ae5565b34801561077757600080fd5b5060015461041b565b34801561078c57600080fd5b506103a761079b366004614c80565b611b1f565b6103a7611c65565b3480156107b457600080fd5b506103a76107c3366004614f2f565b611ec1565b3480156107d457600080fd5b506103f16107e3366004614cac565b612271565b3480156107f457600080fd5b506103a7610803366004614cac565b612295565b34801561081457600080fd5b5060025461041b565b34801561082957600080fd5b5060666105ba565b34801561083d57600080fd5b5061045f61084c366004614da1565b6122d6565b34801561085d57600080fd5b506106396122f2565b34801561087257600080fd5b506103f1610881366004614cac565b6003541090565b34801561089457600080fd5b506103a76108a3366004614da1565b6123a3565b3480156108b457600080fd5b506103a76108c3366004614da1565b612455565b3480156108d457600080fd5b5061041b612500565b3480156108e957600080fd5b506103f16108f8366004614da1565b6001600160a01b0316600090815260746020526040902054151590565b34801561092157600080fd5b5061041b610930366004614cac565b612554565b34801561094157600080fd5b506103a7610950366004614da1565b61255f565b34801561096157600080fd5b506103f1610970366004614da1565b612611565b34801561098157600080fd5b506103a7610990366004614da1565b612673565b3480156109a157600080fd5b50610639612734565b3480156109b657600080fd5b506106396127e1565b3480156109cb57600080fd5b506103a76109da366004614cac565b612843565b3480156109eb57600080fd5b5060765461041b565b348015610a0057600080fd5b5060a95461041b565b348015610a1557600080fd5b50606f546001600160a01b03166105ba565b348015610a3357600080fd5b506103a7610a42366004614efa565b612884565b348015610a5357600080fd5b506071546001600160a01b03166105ba565b348015610a7157600080fd5b5060ad5461041b565b348015610a8657600080fd5b506104dc610a95366004614e77565b612a9c565b348015610aa657600080fd5b506103f1610ab5366004614da1565b612b65565b606d546001600160a01b0316331480610add57506071546001600160a01b031633145b610b735760405162461bcd60e51b815260206004820152605660248201527f526f6e696e56616c696461746f725365743a206f6e6c7920726563656976657360448201527f20524f4e2066726f6d207374616b696e672076657374696e6720636f6e74726160648201527518dd081bdc881cdd185ada5b99c818dbdb9d1c9858dd60521b608482015260a4015b60405180910390fd5b565b600054610100900460ff1615808015610b955750600054600160ff909116105b80610baf5750303b158015610baf575060005460ff166001145b610c125760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b6a565b6000805460ff191660011790558015610c35576000805461ff0019166101001790555b610c3e8c612ba2565b610c478b612bf7565b610c508a612c45565b610c5989612c93565b610c6287612ce1565b610c6b88612d2f565b610c7486612d7d565b610c7d85612db2565b610c8684612de7565b610c8f83612eba565b60018290558015610cda576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b6001600160a01b038281166000908152607560205260409020548116908216145b92915050565b6000610d1a60035490565b905090565b6001600160a01b0382166000908152603a60205260408120548190819084811015610d5557600080600093509350935050610d9b565b60019350610d638582614fa9565b610d6e906001614fbc565b9250610d7985612554565b610d8282612554565b610d8c9190614fa9565b610d97906001614fbc565b9150505b9250925092565b610daa612f5d565b6001600160a01b0316336001600160a01b031614610dda5760405162461bcd60e51b8152600401610b6a90614fcf565b610de381612eba565b50565b33610df96070546001600160a01b031690565b6001600160a01b031614610e1f5760405162461bcd60e51b8152600401610b6a90615011565b6001600160a01b038216600081815260386020908152604080832085845282528083208054600160ff199182168117909255948452603783528184208685529092529091208054909216909155610e769043614fa9565b6001600160a01b0383166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e90610ec59084815260200190565b60405180910390a25050565b6060826001600160401b03811115610eeb57610eeb615080565b604051908082528060200260200182016040528015610f14578160200160208202803683370190505b50905060005b83811015610f8657610f52858583818110610f3757610f37615096565b9050602002016020810190610f4c9190614da1565b84612f8b565b828281518110610f6457610f64615096565b9115156020928302919091019091015280610f7e816150ac565b915050610f1a565b509392505050565b6000610d1a61088142612fb6565b6001600160a01b0382166000908152603a60205260408120548211155b9392505050565b6040805160e08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c083018290526001600160a01b038516825260749052919091205461102a5760405162461bcd60e51b8152600401610b6a906150c5565b506001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015290565b6000610d098243610f9c565b6110b3612f5d565b6001600160a01b0316336001600160a01b0316146110e35760405162461bcd60e51b8152600401610b6a90614fcf565b6000816001600160a01b03163b116111545760405162461bcd60e51b815260206004820152602e60248201527f486173536c617368496e64696361746f72436f6e74726163743a20736574207460448201526d1bc81b9bdb8b58dbdb9d1c9858dd60921b6064820152608401610b6a565b610de381612ba2565b611165612f5d565b6001600160a01b0316336001600160a01b0316146111955760405162461bcd60e51b8152600401610b6a90614fcf565b6000816001600160a01b03163b116112035760405162461bcd60e51b815260206004820152602b60248201527f4861734d61696e74656e616e6365436f6e74726163743a2073657420746f206e60448201526a1bdb8b58dbdb9d1c9858dd60aa1b6064820152608401610b6a565b610de381612c93565b606060aa546001600160401b0381111561122857611228615080565b604051908082528060200260200182016040528015611251578160200160208202803683370190505b5090506000805b82518110156112ef57600081815260ab6020526040902054611282906001600160a01b0316611ae5565b156112dd57600081815260ab60205260409020546001600160a01b031683836112aa816150ac565b9450815181106112bc576112bc615096565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806112e7816150ac565b915050611258565b50815290565b6060816001600160401b0381111561130f5761130f615080565b604051908082528060200260200182016040528015611338578160200160208202803683370190505b50905060005b828110156113a95761137584848381811061135b5761135b615096565b90506020020160208101906113709190614da1565b612fc5565b82828151811061138757611387615096565b91151560209283029190910190910152806113a1816150ac565b91505061133e565b5092915050565b6113b8612f5d565b6001600160a01b0316336001600160a01b0316146113e85760405162461bcd60e51b8152600401610b6a90614fcf565b610de381612db2565b3341146114105760405162461bcd60e51b8152600401610b6a90615117565b3433600061141d82611ae5565b801561142f575061142d82612fc5565b155b8015611449575061144782611442610d0f565b612f8b565b155b606d54604051630634f5b960e01b8152821515600482015260016024820181905292935060009182916001600160a01b0390911690630634f5b9906044016060604051808303816000875af11580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca919061517d565b92509250508060e260008282546114e19190614fbc565b90915550849050611551578560e460008282546114fe9190614fbc565b92505081905550846001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e8760016040516115419291906151c8565b60405180910390a2505050505050565b60408051878152602081018490526001600160a01b038716917f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b1910160405180910390a2600061159f610d0f565b905060006115ad8489614fbc565b6001600160a01b03881660009081526038602090815260408083208684529091528120549192509060ff16156116ca576070546040805163631c8fd160e11b815290516000926001600160a01b03169163c6391fa29160048083019260809291908290030181865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b91906151fa565b9350505050612710818461165f9190615230565b611669919061525d565b91508160e4600082825461167d9190614fbc565b92505081905550886001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e8360026040516116c09291906151c8565b60405180910390a2505b6116d48183614fa9565b6001600160a01b0389166000908152607560205260408120600401549193506127106117008584615230565b61170a919061525d565b6001600160a01b038b16600090815260e06020526040812080549293508392909190611737908490614fbc565b90915550600090506117498286614fa9565b6001600160a01b038c16600090815260e16020526040812080549293508392909190611776908490614fbc565b9091555050505050505050505050505050565b6073546060906001600160401b038111156117a6576117a6615080565b60405190808252806020026020018201604052801561180d57816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c082015282526000199092019101816117c45790505b50905060005b81518110156118e357607560006073838154811061183357611833615096565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015282518390839081106118c5576118c5615096565b602002602001018190525080806118db906150ac565b915050611813565b5090565b336118fa6070546001600160a01b031690565b6001600160a01b0316146119205760405162461bcd60e51b8152600401610b6a90615011565b600061192a610d0f565b6001600160a01b03851660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e09091529190205491925061197891614fbc565b60e460008282546119899190614fbc565b90915550506001600160a01b038416600090815260e06020908152604080832083905560e18252808320839055603a9091529020548311156119e1576001600160a01b0384166000908152603a602052604090208390555b8115611a7a5760715460405163c905bb3560e01b81526001600160a01b03868116600483015260248201859052600092169063c905bb35906044016020604051808303816000875af1158015611a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5f9190615271565b90508060e46000828254611a739190614fbc565b9091555050505b6001600160a01b0384166000818152603a6020908152604080832054815190815291820186905260019082015260608101919091528291907f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a9060800160405180910390a350505050565b6001600160a01b038116600090815260ac6020526040812054610d099060019060ff166003811115611b1957611b196151b2565b90612fe6565b33611b326071546001600160a01b031690565b6001600160a01b031614611b585760405162461bcd60e51b8152600401610b6a9061528a565b6001600160a01b038216600090815260746020526040902054611b8d5760405162461bcd60e51b8152600401610b6a906150c5565b6001600160a01b0382166000908152607560205260409020600581015415611c0a5760405162461bcd60e51b815260206004820152602a60248201527f43616e6469646174654d616e616765723a20616c726561647920726571756573604482015269746564206265666f726560b01b6064820152608401610b6a565b6000611c168342614fbc565b600583018190556040518181529091506001600160a01b038516907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e7906020015b60405180910390a250505050565b334114611c845760405162461bcd60e51b8152600401610b6a90615117565b611c8d43612271565b611cf55760405162461bcd60e51b815260206004820152603360248201527f526f6e696e56616c696461746f725365743a206f6e6c7920616c6c6f776564206044820152720c2e840e8d0ca40cadcc840decc40cae0dec6d606b1b6064820152608401610b6a565b611cfe43612554565b611d09600254612554565b10611d745760405162461bcd60e51b815260206004820152603560248201527f526f6e696e56616c696461746f725365743a20717565727920666f7220616c726044820152740cac2c8f240eee4c2e0e0cac840eae040cae0dec6d605b1b6064820152608401610b6a565b436002556000611d8342612fb6565b90506000611d92826003541090565b9050611d9f436001614fbc565b6004556000611dac612734565b90506000611db943612554565b90506000611dc5610d0f565b90508315611e6e57611dd78184613019565b600080611de48386613266565b91509150611df4838684846134a3565b611dfc6135a6565b607054604051631da0214360e21b81526001600160a01b0390911690637680850c90611e2e90889087906004016152e7565b600060405180830381600087803b158015611e4857600080fd5b505af1158015611e5c573d6000803e3d6000fd5b50505050611e69876136ed565b945050505b611e7885846138b0565b81817f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce786604051611ead911515815260200190565b60405180910390a350505060039190915550565b33611ed46071546001600160a01b031690565b6001600160a01b031614611efa5760405162461bcd60e51b8152600401610b6a9061528a565b6073546072548110611f6d5760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174654d616e616765723a2065786365656473206d6178696d756044820152756d206e756d626572206f662063616e6469646174657360501b6064820152608401610b6a565b6001600160a01b03851660009081526074602052604090205415611ff25760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174654d616e616765723a20717565727920666f7220616c7265604482015275616479206578697374656e742063616e64696461746560501b6064820152608401610b6a565b6127108211156120555760405162461bcd60e51b815260206004820152602860248201527f43616e6469646174654d616e616765723a20696e76616c696420636f6d697373604482015267696f6e207261746560c01b6064820152608401610b6a565b60005b607354811015612188576000607560006073848154811061207b5761207b615096565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902080549092508116908916036120fd576120c7886001600160a01b03166014613af4565b6040516020016120d7919061532d565b60408051601f198184030181529082905262461bcd60e51b8252610b6a916004016153a0565b60028101546001600160a01b039081169087160361213957612129866001600160a01b03166014613af4565b6040516020016120d791906153d3565b60038101546001600160a01b039081169086160361217557612165856001600160a01b03166014613af4565b6040516020016120d7919061543f565b5080612180816150ac565b915050612058565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b031990811687179091556075845293829020805485168d88169081178255918101805486168717905560028101805486168c8916908117909155600382018054909616978b1697881790955560048101899055915195865290949093917fd690f592ed983cfbc05717fbcf06c4e10ae328432c309fe49246cf4a4be69fcd910160405180910390a450505050505050565b6000600180546122819190614fa9565b60015461228e908461548a565b1492915050565b61229d612f5d565b6001600160a01b0316336001600160a01b0316146122cd5760405162461bcd60e51b8152600401610b6a90614fcf565b610de381612d7d565b60008060006122e58443610d1f565b9250925092509193909250565b606060aa546001600160401b0381111561230e5761230e615080565b604051908082528060200260200182016040528015612337578160200160208202803683370190505b50905060005b81518110156118e357600081815260ab6020526040902054612367906001600160a01b0316613c8f565b82828151811061237957612379615096565b6001600160a01b03909216602092830291909101909101528061239b816150ac565b91505061233d565b6123ab612f5d565b6001600160a01b0316336001600160a01b0316146123db5760405162461bcd60e51b8152600401610b6a90614fcf565b6000816001600160a01b03163b1161244c5760405162461bcd60e51b815260206004820152602e60248201527f486173427269646765547261636b696e67436f6e74726163743a20736574207460448201526d1bc81b9bdb8b58dbdb9d1c9858dd60921b6064820152608401610b6a565b610de381612ce1565b61245d612f5d565b6001600160a01b0316336001600160a01b03161461248d5760405162461bcd60e51b8152600401610b6a90614fcf565b6000816001600160a01b03163b116124f75760405162461bcd60e51b815260206004820152602760248201527f4861735374616b696e67436f6e74726163743a2073657420746f206e6f6e2d636044820152661bdb9d1c9858dd60ca1b6064820152608401610b6a565b610de381612bf7565b6000805b60aa548110156118e357600081815260ab602052604090205461252f906001600160a01b0316611ae5565b15612542578161253e816150ac565b9250505b8061254c816150ac565b915050612504565b6000610d0982613c9a565b612567612f5d565b6001600160a01b0316336001600160a01b0316146125975760405162461bcd60e51b8152600401610b6a90614fcf565b6000816001600160a01b03163b116126085760405162461bcd60e51b815260206004820152602e60248201527f4861735374616b696e6756657374696e67436f6e74726163743a20736574207460448201526d1bc81b9bdb8b58dbdb9d1c9858dd60921b6064820152608401610b6a565b610de381612c45565b6000805b60aa5481101561266d57600081815260ab60205260409020546001600160a01b03808516916126449116613c8f565b6001600160a01b03160361265b576001915061266d565b80612665816150ac565b915050612615565b50919050565b61267b612f5d565b6001600160a01b0316336001600160a01b0316146126ab5760405162461bcd60e51b8152600401610b6a90614fcf565b6000816001600160a01b03163b1161272b5760405162461bcd60e51b815260206004820152603860248201527f486173526f6e696e547275737465644f7267616e697a6174696f6e436f6e747260448201527f6163743a2073657420746f206e6f6e2d636f6e747261637400000000000000006064820152608401610b6a565b610de381612d2f565b606060aa546001600160401b0381111561275057612750615080565b604051908082528060200260200182016040528015612779578160200160208202803683370190505b50905060005b81518110156118e357600081815260ab602052604090205482516001600160a01b03909116908390839081106127b7576127b7615096565b6001600160a01b0390921660209283029190910190910152806127d9816150ac565b91505061277f565b6060607380548060200260200160405190810160405280929190818152602001828054801561283957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161281b575b5050505050905090565b61284b612f5d565b6001600160a01b0316336001600160a01b03161461287b5760405162461bcd60e51b8152600401610b6a90614fcf565b610de381612de7565b336128976071546001600160a01b031690565b6001600160a01b0316146128bd5760405162461bcd60e51b8152600401610b6a9061528a565b6001600160a01b0383166000908152607760205260409020541561293f5760405162461bcd60e51b815260206004820152603360248201527f43616e6469646174654d616e616765723a20636f6d6d697373696f6e206368616044820152726e6765207363686564756c652065786973747360681b6064820152608401610b6a565b6127108111156129a35760405162461bcd60e51b815260206004820152602960248201527f43616e6469646174654d616e616765723a20696e76616c696420636f6d6d697360448201526873696f6e207261746560b81b6064820152608401610b6a565b607654821015612a065760405162461bcd60e51b815260206004820152602860248201527f43616e6469646174654d616e616765723a20696e76616c696420656666656374604482015267697665206461746560c01b6064820152608401610b6a565b6001600160a01b03831660009081526077602052604081209083612a2d620151804261525d565b612a379190614fbc565b612a449062015180615230565b8083556001830184905560408051828152602081018690529192506001600160a01b038716917f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f21910160405180910390a25050505050565b6060816001600160401b03811115612ab657612ab6615080565b604051908082528060200260200182016040528015612adf578160200160208202803683370190505b5090506000612aec610d0f565b905060005b83811015612b5d57612b29858583818110612b0e57612b0e615096565b9050602002016020810190612b239190614da1565b83612f8b565b838281518110612b3b57612b3b615096565b9115156020928302919091019091015280612b55816150ac565b915050612af1565b505092915050565b6001600160a01b038116600090815260ac6020526040812054612b9b9060ff166003811115612b9657612b966151b2565b613cb5565b1592915050565b607080546001600160a01b0319166001600160a01b0383169081179091556040519081527faa5b07dd43aa44c69b70a6a2b9c3fcfed12b6e5f6323596ba7ac91035ab80a4f906020015b60405180910390a150565b607180546001600160a01b0319166001600160a01b0383169081179091556040519081527f6397f5b135542bb3f477cb346cfab5abdec1251d08dc8f8d4efb4ffe122ea0bf90602001612bec565b606d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fc328090a37d855191ab58469296f98f87a851ca57d5cdfd1e9ac3c83e9e7096d90602001612bec565b606f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b90602001612bec565b606e80546001600160a01b0319166001600160a01b0383169081179091556040519081527f034c8da497df28467c79ddadbba1cc3cdd41f510ea73faae271e6f16a611162190602001612bec565b60a880546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001612bec565b60a98190556040518181527fb5464c05fd0e0f000c535850116cda2742ee1f7b34384cb920ad7b8e802138b590602001612bec565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab490602001612bec565b60a954811115612e855760405162461bcd60e51b815260206004820152605960248201527f526f6e696e56616c696461746f725365743a2063616e6e6f7420736574206e7560448201527f6d626572206f66207072696f726974697a65642067726561746572207468616e60648201527f206e756d626572206f66206d61782076616c696461746f727300000000000000608482015260a401610b6a565b60ad8190556040518181527fa9588dc77416849bd922605ce4fc806712281ad8a8f32d4238d6c8cca548e15e90602001612bec565b6001811015612f285760405162461bcd60e51b815260206004820152603460248201527f43616e6469646174654d616e616765723a20696e76616c6964206d696e206566604482015273666563746976652064617973206f6e776172647360601b6064820152608401610b6a565b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a2526790602001612bec565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b6000610d09620151808361525d565b6001600160a01b0381166000908152603a6020526040812054431115610d09565b6000816003811115612ffa57612ffa6151b2565b83600381111561300c5761300c6151b2565b1660ff1615159392505050565b606e5460405163889998ef60e01b8152600481018490526001600160a01b0390911690600090829063889998ef90602401602060405180830381865afa158015613067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308b9190615271565b60405163033cdc2b60e31b8152600481018690529091506000906001600160a01b038416906319e6e15890602401602060405180830381865afa1580156130d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fa9190615271565b90506000836001600160a01b031663f67e815287876040518363ffffffff1660e01b815260040161312c92919061549e565b600060405180830381865afa158015613149573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131719190810190615512565b9050600080600080607060009054906101000a90046001600160a01b03166001600160a01b0316631079402a6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156131cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f091906151fa565b935093509350935060005b8951811015613259576132478b8b838151811061321a5761321a615096565b602002602001015188848151811061323457613234615096565b60200260200101518a8c8a8a8a8a613cd3565b80613251816150ac565b9150506131fb565b5050505050505050505050565b6000606060008084516001600160401b0381111561328657613286615080565b6040519080825280602002602001820160405280156132af578160200160208202803683370190505b50925060005b8551811015613493578581815181106132d0576132d0615096565b6020908102919091018101516001600160a01b03808216600090815260758452604080822060020154603986528183208d845290955290205491955091909116925060ff16613348576001600160a01b038084166000908152607560205260409020600301546133439185911684613fc9565b61337a565b6001600160a01b038316600090815260e3602052604081205460e4805491929091613374908490614fbc565b90915550505b61338383612fc5565b15801561339757506133958388612f8b565b155b1561340b576001600160a01b038316600090815260e160205260409020546133bf9086614fbc565b6001600160a01b038416600090815260e160205260409020548551919650908590839081106133f0576133f0615096565b60200260200101818152505061340683836140ac565b613451565b6001600160a01b038316600090815260e1602090815260408083205460e09092529091205461343a9190614fbc565b60e4600082825461344b9190614fbc565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e39091528120558061348b816150ac565b9150506132b5565b5060e26000905550509250929050565b6071546001600160a01b0316821561359e576134bf8184614171565b1561356557604051633b8cb16b60e01b81526001600160a01b03821690633b8cb16b906134f490879086908a906004016155d7565b600060405180830381600087803b15801561350e57600080fd5b505af1158015613522573d6000803e3d6000fd5b505050507feb09b8cc1cefa77cd4ec30003e6364cf60afcedd20be8c09f26e717788baf1398360405161355791815260200190565b60405180910390a1506135a0565b604080518481524760208201527f0752cb1e4b6fb7b2beb1cf423d908acaec7acfb7782e67a88d158351b1c0c4a5910160405180910390a15b505b50505050565b60e4548015610de35760006135c3606d546001600160a01b031690565b600060e481905560408051600481526024810182526020810180516001600160e01b03166359f778df60e01b179052905192935090916001600160a01b038416918591613610919061560d565b60006040518083038185875af1925050503d806000811461364d576040519150601f19603f3d011682016040523d82523d6000602084013e613652565b606091505b5050905080156136a457816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc88460405161369791815260200190565b60405180910390a2505050565b604080518481524760208201526001600160a01b038416917fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b73910160405180910390a25b505050565b60606136f76141cd565b6071546040516391f8723f60e01b81526000916001600160a01b0316906391f8723f9061372990607390600401615667565b600060405180830381865afa158015613746573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261376e9190810190615512565b60a854604051632907e73160e11b81529192506000916001600160a01b039091169063520fce62906137a590607390600401615667565b600060405180830381865afa1580156137c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137ea9190810190615512565b90506000613859607380548060200260200160405190810160405280929190818152602001828054801561384757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613829575b5050505050848460a95460ad546146ba565b90945090506138698482876147d9565b847f8d7d519e81c2b8dc67b44fd645fd2c8805110d9ab1d643e3dd68b622bde331ff6138936122f2565b6040516138a09190614e64565b60405180910390a2505050919050565b606f546000906001600160a01b031663fdadda8160736138d1436001614fbc565b6040518363ffffffff1660e01b81526004016138ee92919061567a565b600060405180830381865afa15801561390b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613933919081019061568d565b905060005b8251811015613abc57600083828151811061395557613955615096565b60200260200101519050600061396a82611ae5565b9050600061397783612fc5565b80613998575084848151811061398f5761398f615096565b60200260200101515b159050811580156139a65750805b15613a24576001600160a01b038316600090815260ac60205260409020546139e59060019060ff1660038111156139df576139df6151b2565b90614951565b6001600160a01b038416600090815260ac60205260409020805460ff19166001836003811115613a1757613a176151b2565b0217905550505050613aaa565b818015613a2f575080155b15613aa6576001600160a01b038316600090815260ac6020526040902054613a6e9060019060ff166003811115613a6857613a686151b2565b9061498c565b6001600160a01b038416600090815260ac60205260409020805460ff19166001836003811115613aa057613aa06151b2565b02179055505b5050505b80613ab4816150ac565b915050613938565b50827f60324bb9c8b0d077621d76762c52d6cc937043427992a2f6a602b449315922ef613ae761120c565b6040516136979190614e64565b60606000613b03836002615230565b613b0e906002614fbc565b6001600160401b03811115613b2557613b25615080565b6040519080825280601f01601f191660200182016040528015613b4f576020820181803683370190505b509050600360fc1b81600081518110613b6a57613b6a615096565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b9957613b99615096565b60200101906001600160f81b031916908160001a9053506000613bbd846002615230565b613bc8906001614fbc565b90505b6001811115613c40576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613bfc57613bfc615096565b1a60f81b828281518110613c1257613c12615096565b60200101906001600160f81b031916908160001a90535060049490941c93613c3981615719565b9050613bcb565b508315610fb95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b6a565b6000610d09826149c8565b600060015482613caa919061525d565b610d09906001614fbc565b6000816003811115613cc957613cc96151b2565b60ff161592915050565b8415808015613ce0575086155b15613d145760aa5460e254613cf5919061525d565b6001600160a01b038a16600090815260e3602052604090205550613fbe565b8015613d205750613fbe565b818711613d4057858860e254613d369190615230565b613cf5919061525d565b600087613d4f6127108b615230565b613d59919061525d565b90506000613d6982612710614fa9565b905085811115613eaa576001603960008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff0219169083151502179055506001603760008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff021916908315150217905550613e3e8543613e209190614fbc565b6001600160a01b038d166000908152603a60205260409020546149ed565b6001600160a01b038c166000818152603a60209081526040808320859055805194855290840191909152600190830181905260608301528d917f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a906080015b60405180910390a3610cda565b86811115613f82576001603960008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff0219169083151502179055508b8b6001600160a01b03167f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a603a60008f6001600160a01b03166001600160a01b03168152602001908152602001600020546000806001604051613e9d94939291909384526020840192909252151560408301521515606082015260800190565b8715610cda57878a60e254613f979190615230565b613fa1919061525d565b6001600160a01b038c16600090815260e360205260409020555050505b505050505050505050565b6001600160a01b038316600090815260e3602052604090205480156135a057613ff28282614171565b1561405457816001600160a01b0316836001600160a01b0316856001600160a01b03167f72a57dc38837a1cba7881b7b1a5594d9e6b65cec6a985b54e2cee3e89369691c8460405161404691815260200190565b60405180910390a450505050565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fd35d76d87d51ed89407fc7ceaaccf32cf72784b94530892ce33546540e141b728447604051614046929190918252602082015260400190565b6001600160a01b038216600090815260e0602052604090205480156136e8576140d58282614171565b1561412c57816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec8360405161411f91815260200190565b60405180910390a3505050565b604080518281524760208201526001600160a01b0380851692908616917f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e910161411f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146141be576040519150601f19603f3d011682016040523d82523d6000602084013e6141c3565b606091505b5090949350505050565b6071546040805163af24542960e01b815290516001600160a01b0390921691600091839163af245429916004808201926020929091908290030181865afa15801561421c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142409190615271565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a69190615271565b90506000836001600160a01b03166342ef3c3460736040518263ffffffff1660e01b81526004016142d79190615667565b600060405180830381865afa1580156142f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261431c9190810190615512565b607354909150600080826001600160401b0381111561433d5761433d615080565b604051908082528060200260200182016040528015614366578160200160208202803683370190505b50905060008060005b85831015614613576073838154811061438a5761438a615096565b60009182526020808320909101546001600160a01b0316808352607590915260409091206006810154895192945090925015159089908990869081106143d2576143d2615096565b60200260200101511015614440578061443b5760006143f18b42614fbc565b600684018190556040518181529091506001600160a01b038516907f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342759060200160405180910390a2505b614493565b8015614493578160060160009055826001600160a01b03167f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a34275600060405161448a91815260200190565b60405180910390a25b600082600501546000141580156144ae575042836005015411155b9050600083600601546000141580156144cb575042846006015411155b905081806144d65750805b1561456c57896144e58a615719565b995089815181106144f8576144f8615096565b60200260200101518a878151811061451257614512615096565b6020908102919091010152848789614529816150ac565b9a508151811061453b5761453b615096565b60200260200101906001600160a01b031690816001600160a01b03168152505061456485614a04565b50505061436f565b6001600160a01b03851660009081526077602052604090205480158015906145945750428111155b156145fd576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b86614607816150ac565b9750505050505061436f565b5050821590506146b1578181527f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c918160405161464f9190614e64565b60405180910390a16040516374d62f0360e11b81526001600160a01b0388169063e9ac5e0690614683908490600401614e64565b600060405180830381600087803b15801561469d57600080fd5b505af1158015613259573d6000803e3d6000fd5b50505050505050565b606060008060689050600088888888886040516024016146de959493929190615730565b60408051601f19818403018152919052602080820180516001600160e01b0316633bca0a8960e11b17905281518b51929350600192909160009161472191615230565b61472c906040614fbc565b90506020840181888483895afa61474257600093505b503d61474d57600092505b602087019650826147c65760405162461bcd60e51b815260206004820152603960248201527f507265636f6d70696c6555736167655069636b56616c696461746f725365743a60448201527f2063616c6c20746f20707265636f6d70696c65206661696c73000000000000006064820152608401610b6a565b8651955050505050509550959350505050565b815b60aa5481101561483757600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b03191690558061482f816150ac565b9150506147db565b506000805b8381101561491957600085828151811061485857614858615096565b602090810291909101810151600085815260ab9092526040909120549091506001600160a01b039081169082160361489d5782614894816150ac565b93505050614907565b600083815260ab6020818152604080842080546001600160a01b03908116865260ac8452828620805460ff19908116909155908716808752928620805490911660031790559387905291905281546001600160a01b03191617905582614902816150ac565b935050505b80614911816150ac565b91505061483c565b508060aa81905550817f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e85604051611c579190614e64565b6000816003811115614965576149656151b2565b836003811115614977576149776151b2565b1760ff166003811115610fb957610fb96151b2565b60008160038111156149a0576149a06151b2565b198360038111156149b3576149b36151b2565b1660ff166003811115610fb957610fb96151b2565b6001600160a01b03808216600090815260756020526040812060030154909116610d09565b6000818310156149fd5781610fb9565b5090919050565b6001600160a01b03811660009081526074602052604081205490819003614a29575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b031990811682556001808301805483169055600283018054831690556003830180549092169091556004820185905560058201859055600690910184905560748352818420849055607790925282208281558101829055607380549091614ab391614fa9565b81548110614ac357614ac3615096565b6000918252602090912001546001600160a01b03908116915083168114614b46576001600160a01b0381166000908152607460205260409020829055607380548291908419908110614b1757614b17615096565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6073805480614b5757614b5761577e565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6001600160a01b0381168114610de357600080fd5b60008060008060008060008060008060006101608c8e031215614bb557600080fd5b8b35614bc081614b7e565b9a5060208c0135614bd081614b7e565b995060408c0135614be081614b7e565b985060608c0135614bf081614b7e565b975060808c0135614c0081614b7e565b965060a08c0135614c1081614b7e565b9a9d999c50979a9699959895975050505060c08401359360e081013593610100820135935061012082013592506101409091013590565b60008060408385031215614c5a57600080fd5b8235614c6581614b7e565b91506020830135614c7581614b7e565b809150509250929050565b60008060408385031215614c9357600080fd5b8235614c9e81614b7e565b946020939093013593505050565b600060208284031215614cbe57600080fd5b5035919050565b60008083601f840112614cd757600080fd5b5081356001600160401b03811115614cee57600080fd5b6020830191508360208260051b8501011115614d0957600080fd5b9250929050565b600080600060408486031215614d2557600080fd5b83356001600160401b03811115614d3b57600080fd5b614d4786828701614cc5565b909790965060209590950135949350505050565b6020808252825182820181905260009190848201906040850190845b81811015614d95578351151583529284019291840191600101614d77565b50909695505050505050565b600060208284031215614db357600080fd5b8135610fb981614b7e565b60018060a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60e08101610d098284614dbe565b600081518084526020808501945080840160005b83811015614e595781516001600160a01b031687529582019590820190600101614e34565b509495945050505050565b602081526000610fb96020830184614e20565b60008060208385031215614e8a57600080fd5b82356001600160401b03811115614ea057600080fd5b614eac85828601614cc5565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015614d9557614ee7838551614dbe565b9284019260e09290920191600101614ed4565b600080600060608486031215614f0f57600080fd5b8335614f1a81614b7e565b95602085013595506040909401359392505050565b600080600080600060a08688031215614f4757600080fd5b8535614f5281614b7e565b94506020860135614f6281614b7e565b93506040860135614f7281614b7e565b92506060860135614f8281614b7e565b949793965091946080013592915050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610d0957610d09614f93565b80820180821115610d0957610d09614f93565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b60208082526049908201527f486173536c617368496e64696361746f72436f6e74726163743a206d6574686f60408201527f642063616c6c6572206d75737420626520736c61736820696e64696361746f726060820152680818dbdb9d1c9858dd60ba1b608082015260a00190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016150be576150be614f93565b5060010190565b60208082526032908201527f43616e6469646174654d616e616765723a20717565727920666f72206e6f6e2d6040820152716578697374656e742063616e64696461746560701b606082015260800190565b60208082526031908201527f526f6e696e56616c696461746f725365743a206d6574686f642063616c6c6572604082015270206d75737420626520636f696e6261736560781b606082015260800190565b8051801515811461517857600080fd5b919050565b60008060006060848603121561519257600080fd5b61519b84615168565b925060208401519150604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b82815260408101600383106151ed57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000806000806080858703121561521057600080fd5b505082516020840151604085015160609095015191969095509092509050565b8082028115828204841417610d0957610d09614f93565b634e487b7160e01b600052601260045260246000fd5b60008261526c5761526c615247565b500490565b60006020828403121561528357600080fd5b5051919050565b6020808252603a908201527f4861735374616b696e67436f6e74726163743a206d6574686f642063616c6c6560408201527f72206d757374206265207374616b696e6720636f6e7472616374000000000000606082015260800190565b6040815260006152fa6040830185614e20565b90508260208301529392505050565b60005b8381101561532457818101518382015260200161530c565b50506000910152565b7f43616e6469646174654d616e616765723a2063616e6469646174652061646d698152690371030b2323932b9b9960b51b60208201526000825161537881602a850160208701615309565b70081a5cc8185b1c9958591e48195e1a5cdd607a1b602a939091019283015250603b01919050565b60208152600082518060208401526153bf816040850160208701615309565b601f01601f19169190910160400192915050565b7f43616e6469646174654d616e616765723a207472656173757279206164647265815262039b9960ed1b602082015260008251615417816023850160208701615309565b70081a5cc8185b1c9958591e48195e1a5cdd607a1b6023939091019283015250603401919050565b7f43616e6469646174654d616e616765723a20627269646765206f70657261746f8152690391030b2323932b9b9960b51b60208201526000825161537881602a850160208701615309565b60008261549957615499615247565b500690565b8281526040602082015260006154b76040830184614e20565b949350505050565b604051601f8201601f191681016001600160401b03811182821017156154e7576154e7615080565b604052919050565b60006001600160401b0382111561550857615508615080565b5060051b60200190565b6000602080838503121561552557600080fd5b82516001600160401b0381111561553b57600080fd5b8301601f8101851361554c57600080fd5b805161555f61555a826154ef565b6154bf565b81815260059190911b8201830190838101908783111561557e57600080fd5b928401925b8284101561559c57835182529284019290840190615583565b979650505050505050565b600081518084526020808501945080840160005b83811015614e59578151875295820195908201906001016155bb565b6060815260006155ea6060830186614e20565b82810360208401526155fc81866155a7565b915050826040830152949350505050565b6000825161561f818460208701615309565b9190910192915050565b6000815480845260208085019450836000528060002060005b83811015614e595781546001600160a01b031687529582019560019182019101615642565b602081526000610fb96020830184615629565b6040815260006152fa6040830185615629565b600060208083850312156156a057600080fd5b82516001600160401b038111156156b657600080fd5b8301601f810185136156c757600080fd5b80516156d561555a826154ef565b81815260059190911b820183019083810190878311156156f457600080fd5b928401925b8284101561559c5761570a84615168565b825292840192908401906156f9565b60008161572857615728614f93565b506000190190565b60a08152600061574360a0830188614e20565b828103602084015261575581886155a7565b9050828103604084015261576981876155a7565b60608401959095525050608001529392505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220adb59a845d708dc587c864fe8adf9b32f1b95b5bf2929a4a2e0173f0c007e17c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_isPeriodEnding(uint256)": {
        "details": "See `ITimingInfo-isPeriodEnding`"
      },
      "bridgeTrackingContract()": {
        "details": "Returns the bridge tracking contract."
      },
      "checkJailed(address)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) during the current period."
      },
      "checkJailedAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) at a specific block."
      },
      "checkManyJailed(address[])": {
        "details": "Returns whether the validators are put in jail (cannot join the set of validators) during the current period."
      },
      "checkMiningRewardDeprecated(address[])": {
        "details": "Returns whether the incoming reward of the block producers are deprecated during the current period."
      },
      "checkMiningRewardDeprecatedAtPeriod(address[],uint256)": {
        "details": "Returns whether the incoming reward of the block producers are deprecated during a specific period."
      },
      "currentPeriod()": {
        "details": "Returns the period index from the current block."
      },
      "currentPeriodStartAtBlock()": {
        "details": "Returns the block number that the current period starts at."
      },
      "epochEndingAt(uint256)": {
        "details": "Returns whether the epoch ending is at the block number `_block`."
      },
      "epochOf(uint256)": {
        "details": "Returns the epoch index from the block number."
      },
      "execBailOut(address,uint256)": {
        "details": "Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`."
      },
      "execRequestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`."
      },
      "execSlash(address,uint256,uint256)": {
        "details": "Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`."
      },
      "getBlockProducers()": {
        "details": "Returns the current block producer list."
      },
      "getBridgeOperators()": {
        "details": "Returns the current bridge operator list."
      },
      "getCandidateInfo(address)": {
        "details": "Returns the info of a candidate."
      },
      "getCandidateInfos()": {
        "details": "Returns all candidate info."
      },
      "getJailedTimeLeft(address)": {
        "details": "Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail."
      },
      "getJailedTimeLeftAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail."
      },
      "getLastUpdatedBlock()": {
        "details": "Returns the block that validator set was updated."
      },
      "getValidatorCandidates()": {
        "details": "Returns the validator candidate."
      },
      "getValidators()": {
        "details": "Returns the current validator list."
      },
      "grantValidatorCandidate(address,address,address,address,uint256)": {
        "details": "Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`."
      },
      "initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "isBlockProducer(address)": {
        "details": "Returns whether the address is block producer or not."
      },
      "isBridgeOperator(address)": {
        "details": "Returns whether the address is bridge operator or not."
      },
      "isCandidateAdmin(address,address)": {
        "details": "Returns whether the address is the candidate admin."
      },
      "isPeriodEnding()": {
        "details": "Returns whether the period ending at the current block number."
      },
      "isValidator(address)": {
        "details": "Returns whether the address is either a bridge operator or a block producer."
      },
      "isValidatorCandidate(address)": {
        "details": "Returns whether the address is a validator (candidate)."
      },
      "maintenanceContract()": {
        "details": "Returns the maintenance contract."
      },
      "maxPrioritizedValidatorNumber()": {
        "details": "Returns the number of reserved slots for prioritized validators"
      },
      "maxValidatorCandidate()": {
        "details": "Returns the maximum number of validator candidate."
      },
      "maxValidatorNumber()": {
        "details": "Returns the maximum number of validators in the epoch"
      },
      "minEffectiveDaysOnwards()": {
        "details": "Returns the minimum number of days to the effective date of commission rate change."
      },
      "numberOfBlocksInEpoch()": {
        "details": "Returns the number of blocks in a epoch."
      },
      "precompilePickValidatorSetAddress()": {
        "details": "Gets the address of the precompile of picking validator set"
      },
      "precompileSortValidatorsAddress()": {
        "details": "Gets the address of the precompile of sorting validators"
      },
      "requestRevokeCandidate(address,uint256)": {
        "details": "Requests to revoke a validator candidate in next `_secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeTrackingContract(address)": {
        "details": "Sets the bridge tracking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeTrackingContractUpdated`."
      },
      "setMaintenanceContract(address)": {
        "details": "Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`."
      },
      "setMaxPrioritizedValidatorNumber(uint256)": {
        "details": "Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`"
      },
      "setMaxValidatorCandidate(uint256)": {
        "details": "Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event."
      },
      "setMaxValidatorNumber(uint256)": {
        "details": "Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`"
      },
      "setMinEffectiveDaysOnwards(uint256)": {
        "details": "Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "setSlashIndicatorContract(address)": {
        "details": "Sets the slash indicator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `SlashIndicatorContractUpdated`."
      },
      "setStakingContract(address)": {
        "details": "Sets the staking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingContractUpdated`."
      },
      "setStakingVestingContract(address)": {
        "details": "Sets the staking vesting contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingVestingContractUpdated`."
      },
      "slashIndicatorContract()": {
        "details": "Returns the slash indicator contract."
      },
      "stakingContract()": {
        "details": "Returns the staking contract."
      },
      "stakingVestingContract()": {
        "details": "Returns the staking vesting contract."
      },
      "submitBlockReward()": {
        "details": "Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call."
      },
      "totalBlockProducers()": {
        "details": "Returns total numbers of the block producers."
      },
      "totalBridgeOperators()": {
        "details": "Returns total numbers of the bridge operators."
      },
      "totalDeprecatedReward()": {
        "details": "Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators"
      },
      "wrapUpEpoch()": {
        "details": "Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "totalBridgeOperators()": {
        "notice": "Notice: A validator is always a bride operator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1373,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 28545,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_numberOfBlocksInEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 28548,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 28551,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 28554,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_currentPeriodStartAtBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 28559,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28181,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 28188,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardBailoutCutOffAtPeriod",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 28195,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 28200,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_jailedUntil",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28205,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6319,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_stakingVestingContract",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IStakingVesting)9598"
      },
      {
        "astId": 5812,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeTrackingContract",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(IBridgeTracking)8726"
      },
      {
        "astId": 5891,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maintenanceContract",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(IMaintenance)9075"
      },
      {
        "astId": 6161,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_slashIndicatorContract",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(ISlashIndicator)10088"
      },
      {
        "astId": 6240,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_stakingContract",
        "offset": 0,
        "slot": "113",
        "type": "t_contract(IStaking)10616"
      },
      {
        "astId": 25687,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorCandidate",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 25691,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidates",
        "offset": 0,
        "slot": "115",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25696,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateIndex",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25702,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateInfo",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_address,t_struct(ValidatorCandidate)10633_storage)"
      },
      {
        "astId": 25705,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_minEffectiveDaysOnwards",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 25711,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateCommissionChangeSchedule",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_struct(CommissionSchedule)10638_storage)"
      },
      {
        "astId": 25716,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "120",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 6082,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "168",
        "type": "t_contract(IRoninTrustedOrganization)9509"
      },
      {
        "astId": 28691,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorNumber",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 28694,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "validatorCount",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 28699,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validators",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 28705,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorMap",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_enum(ValidatorFlag)11372)"
      },
      {
        "astId": 28708,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxPrioritizedValidatorNumber",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 28713,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "174",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28103,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningReward",
        "offset": 0,
        "slot": "224",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28108,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_delegatingReward",
        "offset": 0,
        "slot": "225",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28111,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalBridgeReward",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 28116,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeOperatingReward",
        "offset": 0,
        "slot": "227",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28119,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalDeprecatedReward",
        "offset": 0,
        "slot": "228",
        "type": "t_uint256"
      },
      {
        "astId": 28124,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "229",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBridgeTracking)8726": {
        "encoding": "inplace",
        "label": "contract IBridgeTracking",
        "numberOfBytes": "20"
      },
      "t_contract(IMaintenance)9075": {
        "encoding": "inplace",
        "label": "contract IMaintenance",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)9509": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(ISlashIndicator)10088": {
        "encoding": "inplace",
        "label": "contract ISlashIndicator",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)10616": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingVesting)9598": {
        "encoding": "inplace",
        "label": "contract IStakingVesting",
        "numberOfBytes": "20"
      },
      "t_enum(ValidatorFlag)11372": {
        "encoding": "inplace",
        "label": "enum EnumFlags.ValidatorFlag",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(ValidatorFlag)11372)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum EnumFlags.ValidatorFlag)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidatorFlag)11372"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(CommissionSchedule)10638_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.CommissionSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(CommissionSchedule)10638_storage"
      },
      "t_mapping(t_address,t_struct(ValidatorCandidate)10633_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.ValidatorCandidate)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorCandidate)10633_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(CommissionSchedule)10638_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.CommissionSchedule",
        "members": [
          {
            "astId": 10635,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "effectiveTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10637,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ValidatorCandidate)10633_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.ValidatorCandidate",
        "members": [
          {
            "astId": 10620,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10622,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "consensusAddr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10624,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "treasuryAddr",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 10626,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "bridgeOperatorAddr",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 10628,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10630,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "revokingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10632,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "topupDeadline",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}