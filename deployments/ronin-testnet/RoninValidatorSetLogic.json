{
  "address": "0x7eF866Cb4a917AfE4e8B415Bc1dE112e49217B90",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyRequestedEmergencyExit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyRequestedRevokingCandidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyRequestedUpdatingCommissionRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyWrappedEpoch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrAtEndOfEpochOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallPrecompiled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeBridgeTrackingContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeCoinbase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeMaintenanceContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeRoninTrustedOrgContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeSlashIndicatorContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeStakingContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeStakingVestingContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ErrCannotBailout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrExceedsMaxNumberOfCandidate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        }
      ],
      "name": "ErrExistentBridgeOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrExistentCandidate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAdminAddr",
          "type": "address"
        }
      ],
      "name": "ErrExistentCandidateAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddr",
          "type": "address"
        }
      ],
      "name": "ErrExistentTreasury",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidCommissionRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidEffectiveDaysOnwards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidMaxPrioritizedValidatorNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidMinEffectiveDaysOnwards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrNonExistentCandidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrRecipientRevert",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrTrustedOrgCannotRenounce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnauthorizedReceiveRON",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "BlockProducerSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinbaseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ICoinbaseExecution.BlockRewardDeprecatedType",
          "name": "deprecatedType",
          "type": "uint8"
        }
      ],
      "name": "BlockRewardDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinbaseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "submittedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusAmount",
          "type": "uint256"
        }
      ],
      "name": "BlockRewardSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeTrackingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasuryAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        }
      ],
      "name": "CandidateGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revokingTimestamp",
          "type": "uint256"
        }
      ],
      "name": "CandidateRevokingTimestampUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topupDeadline",
          "type": "uint256"
        }
      ],
      "name": "CandidateTopupDeadlineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "CandidatesRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateUpdateScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "CommissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "DeprecatedRewardRecycleFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DeprecatedRewardRecycled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitLockedAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedAmount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitLockedFundReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitLockedFundReleasingFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExpiryDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "MaintenanceContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MaxPrioritizedValidatorNumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "MaxValidatorCandidateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MaxValidatorNumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numOfDays",
          "type": "uint256"
        }
      ],
      "name": "MinEffectiveDaysOnwardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MiningRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "MiningRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "SlashIndicatorContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "StakingRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakingVestingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jailedUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deductedStakingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "blockProducerRewardDeprecated",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "bridgeOperatorRewardDeprecated",
          "type": "bool"
        }
      ],
      "name": "ValidatorPunished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "ValidatorSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "ValidatorUnjailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "periodNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "periodEnding",
          "type": "bool"
        }
      ],
      "name": "WrappedUpEpoch",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "bridgeTrackingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "checkBridgeRewardDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "checkJailed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "checkJailedAtBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addrList",
          "type": "address[]"
        }
      ],
      "name": "checkManyJailed",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_blockProducers",
          "type": "address[]"
        }
      ],
      "name": "checkMiningRewardDeprecated",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_blockProducers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "checkMiningRewardDeprecatedAtPeriod",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriodStartAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExitLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExpiryDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "epochEndingAt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "epochOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidateAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "execApplyValidatorCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "execBailOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_secLeftToRevoke",
          "type": "uint256"
        }
      ],
      "name": "execEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "execReleaseLockedFundForEmergencyExitRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_secsLeft",
          "type": "uint256"
        }
      ],
      "name": "execRequestRenounceCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_effectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "execRequestUpdateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newJailedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_cannotBailout",
          "type": "bool"
        }
      ],
      "name": "execSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockProducers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validatorAddrs",
          "type": "address[]"
        }
      ],
      "name": "getBridgeOperatorsOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getCandidateInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOperatorAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "topupDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICandidateManager.ValidatorCandidate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidateInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOperatorAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "topupDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICandidateManager.ValidatorCandidate[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getCommissionChangeSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "effectiveTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICandidateManager.CommissionSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "getEmergencyExitInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recyclingAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICommonInfo.EmergencyExitInfo",
          "name": "_info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getJailedTimeLeft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isJailed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockLeft_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLeft_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "getJailedTimeLeftAtBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isJailed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockLeft_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLeft_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastUpdatedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorCandidates",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_validatorList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__slashIndicatorContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__stakingVestingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__maintenanceContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__bridgeTrackingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__maxValidatorNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxValidatorCandidate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxPrioritizedValidatorNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__minEffectiveDaysOnwards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__numberOfBlocksInEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "__emergencyExitConfigs",
          "type": "uint256[2]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isBlockProducer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        }
      ],
      "name": "isBridgeOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "isCandidateAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "isOperatingBridge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPeriodEnding",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidatorCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPrioritizedValidatorNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maximumPrioritizedValidatorNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidatorCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidatorNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maximumValidatorNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minEffectiveDaysOnwards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfBlocksInEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompilePickValidatorSetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompileSortValidatorsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeTrackingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emergencyExitLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "setEmergencyExitLockedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emergencyExpiryDuration",
          "type": "uint256"
        }
      ],
      "name": "setEmergencyExpiryDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setMaintenanceContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setMaxPrioritizedValidatorNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setMaxValidatorCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxValidatorNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numOfDays",
          "type": "uint256"
        }
      ],
      "name": "setMinEffectiveDaysOnwards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setSlashIndicatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setStakingVestingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slashIndicatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingVestingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submitBlockReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBlockProducers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgeOperators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeprecatedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "tryGetPeriodOfEpoch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_filled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_periodNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapUpEpoch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0d946e371c19e5173bdfb4235dec1af229a6e298df27a6d2694dc2f4bbd284da",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x7eF866Cb4a917AfE4e8B415Bc1dE112e49217B90",
    "transactionIndex": 0,
    "gasUsed": "5355471",
    "logsBloom": "0x
    "blockHash": "0xd742850d93161eb5b12ddbc5faedb04d5a122ff82871528587d5653f87204c55",
    "transactionHash": "0x0d946e371c19e5173bdfb4235dec1af229a6e298df27a6d2694dc2f4bbd284da",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14747793,
        "transactionHash": "0x0d946e371c19e5173bdfb4235dec1af229a6e298df27a6d2694dc2f4bbd284da",
        "address": "0x7eF866Cb4a917AfE4e8B415Bc1dE112e49217B90",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xd742850d93161eb5b12ddbc5faedb04d5a122ff82871528587d5653f87204c55"
      }
    ],
    "blockNumber": 14747793,
    "cumulativeGasUsed": "5355471",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "1fd2739e5c5a547bccbf26ee45f48ee5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedEmergencyExit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedRevokingCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedUpdatingCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyWrappedEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAtEndOfEpochOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeBridgeTrackingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeCoinbase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeMaintenanceContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeRoninTrustedOrgContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeSlashIndicatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeStakingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeStakingVestingContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ErrCannotBailout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExceedsMaxNumberOfCandidate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentBridgeOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExistentCandidate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAdminAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentCandidateAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidEffectiveDaysOnwards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMaxPrioritizedValidatorNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMinEffectiveDaysOnwards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNonExistentCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrTrustedOrgCannotRenounce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnauthorizedReceiveRON\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"BlockProducerSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinbaseAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICoinbaseExecution.BlockRewardDeprecatedType\",\"name\":\"deprecatedType\",\"type\":\"uint8\"}],\"name\":\"BlockRewardDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinbaseAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submittedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"BlockRewardSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeTrackingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"CandidateGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"}],\"name\":\"CandidateRevokingTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"name\":\"CandidateTopupDeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"CandidatesRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycleFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedFundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedFundReleasingFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExpiryDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MaintenanceContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxPrioritizedValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorCandidateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfDays\",\"type\":\"uint256\"}],\"name\":\"MinEffectiveDaysOnwardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SlashIndicatorContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StakingRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingVestingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deductedStakingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blockProducerRewardDeprecated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bridgeOperatorRewardDeprecated\",\"type\":\"bool\"}],\"name\":\"ValidatorPunished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"ValidatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ValidatorUnjailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"periodEnding\",\"type\":\"bool\"}],\"name\":\"WrappedUpEpoch\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"bridgeTrackingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"checkBridgeRewardDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"checkJailedAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"}],\"name\":\"checkManyJailed\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blockProducers\",\"type\":\"address[]\"}],\"name\":\"checkMiningRewardDeprecated\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blockProducers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"checkMiningRewardDeprecatedAtPeriod\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodStartAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExitLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochEndingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"execApplyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"execBailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secLeftToRevoke\",\"type\":\"uint256\"}],\"name\":\"execEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"execReleaseLockedFundForEmergencyExitRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secsLeft\",\"type\":\"uint256\"}],\"name\":\"execRequestRenounceCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"execRequestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newJailedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_cannotBailout\",\"type\":\"bool\"}],\"name\":\"execSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockProducers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validatorAddrs\",\"type\":\"address[]\"}],\"name\":\"getBridgeOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCandidateInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCandidateInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCommissionChangeSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.CommissionSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"getEmergencyExitInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recyclingAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommonInfo.EmergencyExitInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getJailedTimeLeft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"getJailedTimeLeftAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_validatorList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__slashIndicatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingVestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__bridgeTrackingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorCandidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxPrioritizedValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__minEffectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__numberOfBlocksInEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"__emergencyExitConfigs\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isBlockProducer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"}],\"name\":\"isBridgeOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isCandidateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"isOperatingBridge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPeriodEnding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidatorCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrioritizedValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumPrioritizedValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEffectiveDaysOnwards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompilePickValidatorSetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileSortValidatorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeTrackingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emergencyExitLockedAmount\",\"type\":\"uint256\"}],\"name\":\"setEmergencyExitLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emergencyExpiryDuration\",\"type\":\"uint256\"}],\"name\":\"setEmergencyExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaintenanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxPrioritizedValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfDays\",\"type\":\"uint256\"}],\"name\":\"setMinEffectiveDaysOnwards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSlashIndicatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakingVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashIndicatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingVestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitBlockReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockProducers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgeOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeprecatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"tryGetPeriodOfEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_filled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_periodNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapUpEpoch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyRequestedEmergencyExit()\":[{\"details\":\"Error of already requested emergency exit before.\"}],\"ErrAlreadyRequestedRevokingCandidate()\":[{\"details\":\"Error of already requested revoking candidate before.\"}],\"ErrAlreadyRequestedUpdatingCommissionRate()\":[{\"details\":\"Error of commission change schedule exists.\"}],\"ErrAlreadyWrappedEpoch()\":[{\"details\":\"Error of query for already wrapped up epoch\"}],\"ErrAtEndOfEpochOnly()\":[{\"details\":\"Error of only allowed at the end of epoch\"}],\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrCallerMustBeBridgeTrackingContract()\":[{\"details\":\"Error of method caller must be bridge tracking contract.\"}],\"ErrCallerMustBeCoinbase()\":[{\"details\":\"Error of method caller must be coinbase\"}],\"ErrCallerMustBeMaintenanceContract()\":[{\"details\":\"Error of method caller must be maintenance contract.\"}],\"ErrCallerMustBeRoninTrustedOrgContract()\":[{\"details\":\"Error of method caller must be Ronin trusted org contract.\"}],\"ErrCallerMustBeSlashIndicatorContract()\":[{\"details\":\"Error of method caller must be slash indicator contract.\"}],\"ErrCallerMustBeStakingContract()\":[{\"details\":\"Error of method caller must be staking contract.\"}],\"ErrCallerMustBeStakingVestingContract()\":[{\"details\":\"Error of method caller must be staking vesting contract.\"}],\"ErrCannotBailout(address)\":[{\"details\":\"Error of cannot bailout due to high tier slash.\"}],\"ErrExceedsMaxNumberOfCandidate()\":[{\"details\":\"Error of exceeding maximum number of candidates.\"}],\"ErrExistentBridgeOperator(address)\":[{\"details\":\"Error of bridge operator already exists.\"}],\"ErrExistentCandidate()\":[{\"details\":\"Error of querying for already existent candidate.\"}],\"ErrExistentCandidateAdmin(address)\":[{\"details\":\"Error of candidate admin already exists.\"}],\"ErrExistentTreasury(address)\":[{\"details\":\"Error of treasury already exists.\"}],\"ErrInsufficientBalance()\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInvalidCommissionRate()\":[{\"details\":\"Error of invalid commission rate.\"}],\"ErrInvalidEffectiveDaysOnwards()\":[{\"details\":\"Error of invalid effective days onwards.\"}],\"ErrInvalidMaxPrioritizedValidatorNumber()\":[{\"details\":\"Error of number of prioritized greater than number of max validators.\"}],\"ErrInvalidMinEffectiveDaysOnwards()\":[{\"details\":\"Error of invalid min effective days onwards.\"}],\"ErrNonExistentCandidate()\":[{\"details\":\"Error of querying for non-existent candidate.\"}],\"ErrRecipientRevert()\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrTrustedOrgCannotRenounce()\":[{\"details\":\"Error of trusted org cannot renounce.\"}],\"ErrZeroCodeContract()\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"bridgeTrackingContract()\":{\"details\":\"Returns the bridge tracking contract.\"},\"checkBridgeRewardDeprecated(address)\":{\"details\":\"Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the current period.\"},\"checkJailed(address)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\"},\"checkJailedAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\"},\"checkManyJailed(address[])\":{\"details\":\"Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\"},\"checkMiningRewardDeprecated(address[])\":{\"details\":\"Returns whether the incoming reward of the block producers are deprecated during the current period.\"},\"checkMiningRewardDeprecatedAtPeriod(address[],uint256)\":{\"details\":\"Returns whether the incoming reward of the block producers are deprecated during a specific period.\"},\"currentPeriod()\":{\"details\":\"Returns the period index from the current block.\"},\"currentPeriodStartAtBlock()\":{\"details\":\"Returns the block number that the current period starts at.\"},\"emergencyExitLockedAmount()\":{\"details\":\"Returns the amount of RON to lock from a consensus address.\"},\"emergencyExpiryDuration()\":{\"details\":\"Returns the duration that an emergency request is expired and the fund will be recycled.\"},\"epochEndingAt(uint256)\":{\"details\":\"Returns whether the epoch ending is at the block number `_block`.\"},\"epochOf(uint256)\":{\"details\":\"Returns the epoch index from the block number.\"},\"execApplyValidatorCandidate(address,address,address,address,uint256)\":{\"details\":\"Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`.\"},\"execBailOut(address,uint256)\":{\"details\":\"Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`.\"},\"execEmergencyExit(address,uint256)\":{\"details\":\"Fallback function of `IStaking-requestEmergencyExit`. Requirements: - The method caller is staking contract.\"},\"execReleaseLockedFundForEmergencyExitRequest(address,address)\":{\"details\":\"Unlocks fund for emergency exit request. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked. Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\"},\"execRequestRenounceCandidate(address,uint256)\":{\"details\":\"Requests to revoke a validator candidate in next `_secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`.\"},\"execRequestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`.\"},\"execSlash(address,uint256,uint256,bool)\":{\"details\":\"Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`.\"},\"getBlockProducers()\":{\"details\":\"Returns the current block producer list.\"},\"getBridgeOperators()\":{\"details\":\"Returns the current bridge operator list.\"},\"getBridgeOperatorsOf(address[])\":{\"details\":\"Returns the bridge operator list corresponding to validator address list.\"},\"getCandidateInfo(address)\":{\"details\":\"Returns the info of a candidate.\"},\"getCandidateInfos()\":{\"details\":\"Returns all candidate info.\"},\"getCommissionChangeSchedule(address)\":{\"details\":\"Returns the schedule of changing commission rate of a candidate address.\"},\"getEmergencyExitInfo(address)\":{\"details\":\"Returns the emergency exit request.\"},\"getJailedTimeLeft(address)\":{\"details\":\"Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\"},\"getJailedTimeLeftAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\"},\"getLastUpdatedBlock()\":{\"details\":\"Returns the block that validator set was updated.\"},\"getValidatorCandidates()\":{\"details\":\"Returns the validator candidate.\"},\"getValidators()\":{\"details\":\"Returns the current validator list.\"},\"initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256[2])\":{\"details\":\"Initializes the contract storage.\"},\"isBlockProducer(address)\":{\"details\":\"Returns whether the address is block producer or not.\"},\"isBridgeOperator(address)\":{\"details\":\"Returns whether the address is bridge operator or not.\"},\"isCandidateAdmin(address,address)\":{\"details\":\"Returns whether the address is the candidate admin.\"},\"isOperatingBridge(address)\":{\"details\":\"Returns whether the consensus address is operating the bridge or not.\"},\"isPeriodEnding()\":{\"details\":\"Returns whether the period ending at the current block number.\"},\"isValidator(address)\":{\"details\":\"Returns whether the address is either a bridge operator or a block producer.\"},\"isValidatorCandidate(address)\":{\"details\":\"Returns whether the address is a validator (candidate).\"},\"maintenanceContract()\":{\"details\":\"Returns the maintenance contract.\"},\"maxPrioritizedValidatorNumber()\":{\"details\":\"Returns the number of reserved slots for prioritized validators.\"},\"maxValidatorCandidate()\":{\"details\":\"Returns the maximum number of validator candidate.\"},\"maxValidatorNumber()\":{\"details\":\"Returns the maximum number of validators in the epoch.\"},\"minEffectiveDaysOnwards()\":{\"details\":\"Returns the minimum number of days to the effective date of commission rate change.\"},\"numberOfBlocksInEpoch()\":{\"details\":\"Returns the number of blocks in a epoch.\"},\"precompilePickValidatorSetAddress()\":{\"details\":\"Gets the address of the precompile of picking validator set\"},\"precompileSortValidatorsAddress()\":{\"details\":\"Gets the address of the precompile of sorting validators\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeTrackingContract(address)\":{\"details\":\"Sets the bridge tracking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeTrackingContractUpdated`.\"},\"setEmergencyExitLockedAmount(uint256)\":{\"details\":\"Sets the amount of RON to lock from a consensus address. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedAmountUpdated`.\"},\"setEmergencyExpiryDuration(uint256)\":{\"details\":\"Sets the duration that an emergency request is expired and the fund will be recycled. Requirements: - The method caller is admin. Emits the event `EmergencyExpiryDurationUpdated`.\"},\"setMaintenanceContract(address)\":{\"details\":\"Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`.\"},\"setMaxPrioritizedValidatorNumber(uint256)\":{\"details\":\"Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`\"},\"setMaxValidatorCandidate(uint256)\":{\"details\":\"Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event.\"},\"setMaxValidatorNumber(uint256)\":{\"details\":\"Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`\"},\"setMinEffectiveDaysOnwards(uint256)\":{\"details\":\"Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"setSlashIndicatorContract(address)\":{\"details\":\"Sets the slash indicator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `SlashIndicatorContractUpdated`.\"},\"setStakingContract(address)\":{\"details\":\"Sets the staking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingContractUpdated`.\"},\"setStakingVestingContract(address)\":{\"details\":\"Sets the staking vesting contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingVestingContractUpdated`.\"},\"slashIndicatorContract()\":{\"details\":\"Returns the slash indicator contract.\"},\"stakingContract()\":{\"details\":\"Returns the staking contract.\"},\"stakingVestingContract()\":{\"details\":\"Returns the staking vesting contract.\"},\"submitBlockReward()\":{\"details\":\"Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call.\"},\"totalBlockProducers()\":{\"details\":\"Returns total numbers of the block producers.\"},\"totalBridgeOperators()\":{\"details\":\"Returns total numbers of the bridge operators.\"},\"totalDeprecatedReward()\":{\"details\":\"Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\"},\"tryGetPeriodOfEpoch(uint256)\":{\"details\":\"Tries to get the period index from the epoch number.\"},\"wrapUpEpoch()\":{\"details\":\"Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/validator/RoninValidatorSet.sol\":\"RoninValidatorSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert();\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance();\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable _recipient, uint256 _amount) internal {\\n    if (!_sendRON(_recipient, _amount)) revert ErrRecipientRevert();\\n  }\\n\\n  /**\\n   * @dev Send `_amount` RON to the address `_recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    if (address(this).balance < _amount) revert ErrInsufficientBalance();\\n    return _unsafeSendRON(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `_amount` RON to the address `_recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRON(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRON(\\n    address payable _recipient,\\n    uint256 _amount,\\n    uint256 _gas\\n  ) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount, gas: _gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xbf47d40b2431cf190fa737b803e4cb6fb55aee3f8804470da57a9e340f7914f8\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeTrackingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeTrackingContract.sol\\\";\\nimport \\\"../../interfaces/IBridgeTracking.sol\\\";\\n\\ncontract HasBridgeTrackingContract is IHasBridgeTrackingContract, HasProxyAdmin {\\n  IBridgeTracking internal _bridgeTrackingContract;\\n\\n  modifier onlyBridgeTrackingContract() {\\n    if (bridgeTrackingContract() != msg.sender) revert ErrCallerMustBeBridgeTrackingContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeTrackingContract\\n   */\\n  function bridgeTrackingContract() public view override returns (address) {\\n    return address(_bridgeTrackingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeTrackingContract\\n   */\\n  function setBridgeTrackingContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setBridgeTrackingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge tracking contract.\\n   *\\n   * Emits the event `BridgeTrackingContractUpdated`.\\n   *\\n   */\\n  function _setBridgeTrackingContract(address _addr) internal {\\n    _bridgeTrackingContract = IBridgeTracking(_addr);\\n    emit BridgeTrackingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x195b0d3fc2305aa4620f5091ba161f3e983b4cef2272d80f5f5b180a8ab98a34\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasMaintenanceContract.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\n\\ncontract HasMaintenanceContract is IHasMaintenanceContract, HasProxyAdmin {\\n  IMaintenance internal _maintenanceContract;\\n\\n  modifier onlyMaintenanceContract() {\\n    if (maintenanceContract() != msg.sender) revert ErrCallerMustBeMaintenanceContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function maintenanceContract() public view override returns (address) {\\n    return address(_maintenanceContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function setMaintenanceContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setMaintenanceContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the scheduled maintenance contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function _setMaintenanceContract(address _addr) internal {\\n    _maintenanceContract = IMaintenance(_addr);\\n    emit MaintenanceContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x117a29d878d44a20350df8ab539d34335713ba0f3b2c768a58124f61efb74357\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    if (roninTrustedOrganizationContract() != msg.sender) revert ErrCallerMustBeRoninTrustedOrgContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x951fd730f4853d8c932da5484ea093f3094c8186735b603d31fb53035c395751\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasSlashIndicatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasSlashIndicatorContract.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\n\\ncontract HasSlashIndicatorContract is IHasSlashIndicatorContract, HasProxyAdmin {\\n  ISlashIndicator internal _slashIndicatorContract;\\n\\n  modifier onlySlashIndicatorContract() {\\n    if (slashIndicatorContract() != msg.sender) revert ErrCallerMustBeSlashIndicatorContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasSlashIndicatorContract\\n   */\\n  function slashIndicatorContract() public view override returns (address) {\\n    return address(_slashIndicatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasSlashIndicatorContract\\n   */\\n  function setSlashIndicatorContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setSlashIndicatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the slash indicator contract.\\n   *\\n   * Emits the event `SlashIndicatorContractUpdated`.\\n   *\\n   */\\n  function _setSlashIndicatorContract(address _addr) internal {\\n    _slashIndicatorContract = ISlashIndicator(_addr);\\n    emit SlashIndicatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x280c56e53c53bf1438cf7d3e71026baf383d24332359bce59282074c94abe5bb\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasStakingContract.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\n\\ncontract HasStakingContract is IHasStakingContract, HasProxyAdmin {\\n  IStaking internal _stakingContract;\\n\\n  modifier onlyStakingContract() {\\n    if (stakingContract() != msg.sender) revert ErrCallerMustBeStakingContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingContract\\n   */\\n  function stakingContract() public view override returns (address) {\\n    return address(_stakingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingContract\\n   */\\n  function setStakingContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setStakingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the staking contract.\\n   *\\n   * Emits the event `StakingContractUpdated`.\\n   *\\n   */\\n  function _setStakingContract(address _addr) internal {\\n    _stakingContract = IStaking(_addr);\\n    emit StakingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x54d2a4608e0a8819ebd7fdb4ae784d3c709285e93f002034f9e2e787a6607923\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasStakingVestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasStakingVestingContract.sol\\\";\\nimport \\\"../../interfaces/IStakingVesting.sol\\\";\\n\\ncontract HasStakingVestingContract is IHasStakingVestingContract, HasProxyAdmin {\\n  IStakingVesting internal _stakingVestingContract;\\n\\n  modifier onlyStakingVestingContract() {\\n    if (stakingVestingContract() != msg.sender) revert ErrCallerMustBeStakingVestingContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingVestingContract\\n   */\\n  function stakingVestingContract() public view override returns (address) {\\n    return address(_stakingVestingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingVestingContract\\n   */\\n  function setStakingVestingContract(address _addr) external override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setStakingVestingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the staking vesting contract.\\n   *\\n   * Emits the event `StakingVestingContractUpdated`.\\n   *\\n   */\\n  function _setStakingVestingContract(address _addr) internal {\\n    _stakingVestingContract = IStakingVesting(_addr);\\n    emit StakingVestingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x1893fae5d612b0d78f6d66695194aa6b03817a3b92be602887918781fba29e37\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVotes(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallots(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(uint256 _period, address[] calldata _bridgeOperators)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb2d5e9367c48a611f131c8b77f9034db8dd81df8c8bbb2c8e8d9a32286a5a8ae\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMaintenance {\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed consensusAddr, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed consensusAddr);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(address _consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `_block` or not.\\n   */\\n  function checkManyMaintained(address[] calldata _addrList, uint256 _block) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    address[] calldata _addrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` has scheduled.\\n   */\\n  function checkScheduled(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr`\\n   */\\n  function checkCooldownEnds(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `_consensusAddr`.\\n   */\\n  function getSchedule(address _consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedules() external view returns (uint256 _count);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules,\\n    uint256 _cooldownSecsToMaintain\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedules() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - The candidate `_consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(\\n    address _consensusAddr,\\n    uint256 _startedAtBlock,\\n    uint256 _endedAtBlock\\n  ) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - A schedule for the `_consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x4f06c8f3ad7ec8b863882c655ddf443675d557272445e51d8a1e1f3454089d09\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BridgeOperatorsBallot.sol\\\";\\n\\ninterface IRoninGovernanceAdmin {\\n  /// @dev Emitted when the bridge operators are approved.\\n  event BridgeOperatorsApproved(uint256 _period, uint256 _epoch, address[] _operators);\\n  /// @dev Emitted when an emergency exit poll is created.\\n  event EmergencyExitPollCreated(\\n    bytes32 _voteHash,\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  );\\n  /// @dev Emitted when an emergency exit poll is approved.\\n  event EmergencyExitPollApproved(bytes32 _voteHash);\\n  /// @dev Emitted when an emergency exit poll is expired.\\n  event EmergencyExitPollExpired(bytes32 _voteHash);\\n\\n  /**\\n   * @dev Returns the last voted block of the bridge voter.\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the synced bridge operator set info.\\n   */\\n  function lastSyncedBridgeOperatorSetInfo()\\n    external\\n    view\\n    returns (BridgeOperatorsBallot.BridgeOperatorSet memory _bridgeOperatorSetInfo);\\n\\n  /**\\n   * @dev Create a vote to agree that an emergency exit is valid and should return the locked funds back.a\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   */\\n  function createEmergencyExitPoll(\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1aa218f9a8cad8fa9f865c179b257aa8f2614e034100dedebdd352da9a7d96d9\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStakingVesting {\\n  /// @dev Emitted when the block bonus for block producer is transferred.\\n  event BonusTransferred(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount\\n  );\\n  /// @dev Emitted when the transfer of block bonus for block producer is failed.\\n  event BonusTransferFailed(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the block bonus for block producer is updated\\n  event BlockProducerBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the block bonus for bridge operator is updated\\n  event BridgeOperatorBonusPerBlockUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the block producer at `_block`.\\n   */\\n  function blockProducerBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the bridge validator at `_block`.\\n   */\\n  function bridgeOperatorBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Receives RON from any address.\\n   */\\n  function receiveRON() external payable;\\n\\n  /**\\n   * @dev Returns the last block number that the staking vesting is sent.\\n   */\\n  function lastBlockSendingBonus() external view returns (uint256);\\n\\n  /**\\n   * @dev Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   * - The method must be called only once per block.\\n   *\\n   * Emits the event `BonusTransferred` or `BonusTransferFailed`.\\n   *\\n   * Notes:\\n   * - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method\\n   * will not be reverted, and the underlying nodes does not hang.\\n   *\\n   * @param _forBlockProducer Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.\\n   * @param _forBridgeOperator Indicates whether requesting the bonus for the bridge operator.\\n   *\\n   * @return _success Whether the transfer is successfully. This returns false mostly because this contract is out of balance.\\n   * @return _blockProducerBonus The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.\\n   * @return _bridgeOperatorBonus The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.\\n   *\\n   */\\n  function requestBonus(bool _forBlockProducer, bool _forBridgeOperator)\\n    external\\n    returns (\\n      bool _success,\\n      uint256 _blockProducerBonus,\\n      uint256 _bridgeOperatorBonus\\n    );\\n\\n  /**\\n   * @dev Sets the bonus amount per block for block producer.\\n   *\\n   * Emits the event `BlockProducerBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBlockProducerBonusPerBlock(uint256 _amount) external;\\n\\n  /**\\n   * @dev Sets the bonus amount per block for bridge operator.\\n   *\\n   * Emits the event `BridgeOperatorBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBridgeOperatorBonusPerBlock(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x6705fdccf03c4acd34ceb1034c2ab556c901781d6d5597e63f257eafe75cf1ae\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeTrackingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasBridgeTrackingContract is IHasContract {\\n  /// @dev Emitted when the bridge tracking contract is updated.\\n  event BridgeTrackingContractUpdated(address);\\n\\n  /// @dev Error of method caller must be bridge tracking contract.\\n  error ErrCallerMustBeBridgeTrackingContract();\\n\\n  /**\\n   * @dev Returns the bridge tracking contract.\\n   */\\n  function bridgeTrackingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge tracking contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeTrackingContractUpdated`.\\n   *\\n   */\\n  function setBridgeTrackingContract(address) external;\\n}\\n\",\"keccak256\":\"0x2d1b7e356826bfe1c2a3348137d828f46ca931f7c2f48197379ad987e713714b\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasContract {\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract();\\n}\\n\",\"keccak256\":\"0x8a17785d841137fcae5b5d542f1714de0492c85b54ca074f0b9c1c490ad3f342\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasMaintenanceContract is IHasContract {\\n  /// @dev Emitted when the maintenance contract is updated.\\n  event MaintenanceContractUpdated(address);\\n\\n  /// @dev Error of method caller must be maintenance contract.\\n  error ErrCallerMustBeMaintenanceContract();\\n\\n  /**\\n   * @dev Returns the maintenance contract.\\n   */\\n  function maintenanceContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the maintenance contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function setMaintenanceContract(address) external;\\n}\\n\",\"keccak256\":\"0x0a0ef6ba14e2929c7c8dda0642a7a831c9997d1b0d049eb83f64dfc21ff0e72e\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasRoninTrustedOrganizationContract is IHasContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /// @dev Error of method caller must be Ronin trusted org contract.\\n  error ErrCallerMustBeRoninTrustedOrgContract();\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x7d0a0b1d658e9cf4d69f4934748e0a5c1d22183024d26927f5d621fc61aff0b2\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasSlashIndicatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasSlashIndicatorContract is IHasContract {\\n  /// @dev Emitted when the slash indicator contract is updated.\\n  event SlashIndicatorContractUpdated(address);\\n\\n  /// @dev Error of method caller must be slash indicator contract.\\n  error ErrCallerMustBeSlashIndicatorContract();\\n\\n  /**\\n   * @dev Returns the slash indicator contract.\\n   */\\n  function slashIndicatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `SlashIndicatorContractUpdated`.\\n   *\\n   */\\n  function setSlashIndicatorContract(address) external;\\n}\\n\",\"keccak256\":\"0xfaaeec87f74039a55fe451c07c341b88794e62a8a331c878a8d9e91f55f1ff45\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasStakingContract is IHasContract {\\n  /// @dev Emitted when the staking contract is updated.\\n  event StakingContractUpdated(address);\\n\\n  /// @dev Error of method caller must be staking contract.\\n  error ErrCallerMustBeStakingContract();\\n\\n  /**\\n   * @dev Returns the staking contract.\\n   */\\n  function stakingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the staking contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingContractUpdated`.\\n   *\\n   */\\n  function setStakingContract(address) external;\\n}\\n\",\"keccak256\":\"0xd5e9b017f7ba0157fa41152a8bb166edbc6ef54a97fa3bb71a2a9b333d846c0b\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasStakingVestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasStakingVestingContract is IHasContract {\\n  /// @dev Emitted when the staking vesting contract is updated.\\n  event StakingVestingContractUpdated(address);\\n\\n  /// @dev Error of method caller must be staking vesting contract.\\n  error ErrCallerMustBeStakingVestingContract();\\n\\n  /**\\n   * @dev Returns the staking vesting contract.\\n   */\\n  function stakingVestingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the staking vesting contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingVestingContractUpdated`.\\n   *\\n   */\\n  function setStakingVestingContract(address) external;\\n}\\n\",\"keccak256\":\"0xfc5f14854b15f81d5b535e4baaeca7cedca69b26813bfc6ade75fdabc4eaffcf\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2,\\n    UNAVAILABILITY_TIER_3\\n  }\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed validator, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0x04d449f2852840566dfff4e3673929f6e9b8d9b5fc5b29744bf4f344dc7f9bc0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICreditScore {\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore,\\n    uint256 maxCreditScore,\\n    uint256 bailOutCostMultiplier,\\n    uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated.\\n  event CreditScoresUpdated(address[] validators, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail.\\n  event BailedOut(address indexed validator, uint256 period, uint256 usedCreditScore);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function updateCreditScores(address[] calldata _validators, uint256 _period) external;\\n\\n  /**\\n   * @dev Resets the credit score for the revoked validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execResetCreditScores(address[] calldata _validators) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(address[] calldata _validators) external view returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `_validator` has been bailed out at the `_period`.\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5364db88efb971f73aac569e27e5604758a123f28567af757b9933fdddd14f8\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeOperator is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method\\n   * `getBridgeOperatorSlashingConfigs` for param details.\\n   */\\n  event BridgeOperatorSlashingConfigsUpdated(\\n    uint256 missingVotesRatioTier1,\\n    uint256 missingVotesRatioTier2,\\n    uint256 jailDurationForMissingVotesRatioTier2,\\n    uint256 skipBridgeOperatorSlashingThreshold\\n  );\\n\\n  /**\\n   * @dev Acknowledges bridge operator slash and emit `Slashed` event correspondingly.\\n   * @param _tier The tier of the slash, in value of {1, 2}, corresponding to `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_1`\\n   * and `SlashType.BRIDGE_OPERATOR_MISSING_VOTE_TIER_2`\\n   *\\n   * Requirements:\\n   * - Only validator contract can invoke this method.\\n   * - Should be called only at the end of period.\\n   * - Should be called only when there is slash of bridge operator.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function execSlashBridgeOperator(\\n    address _consensusAddr,\\n    uint256 _tier,\\n    uint256 _period\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge operator slashing.\\n   *\\n   * @return _missingVotesRatioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio.\\n   * @return _missingVotesRatioTier2 The bridge reward and mining reward will be deprecated and the corresponding\\n   * block producer will be put in jail if (s)he misses more than this ratio.\\n   * @return _jailDurationForMissingVotesRatioTier2 The number of blocks to jail the corresponding block producer when\\n   * its bridge operator is slashed tier-2.\\n   * @return _skipBridgeOperatorSlashingThreshold The threshold to skip slashing the bridge operator in case the total\\n   * number of votes in the bridge is too small.\\n   *\\n   */\\n  function getBridgeOperatorSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2,\\n      uint256 _skipBridgeOperatorSlashingThreshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash bridge operators.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _ratioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map\\n   * to 0%-100%.\\n   * @param _ratioTier2 The bridge reward and mining reward will be deprecated and the corresponding block producer will\\n   * be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.\\n   * @param _jailDurationTier2 The number of blocks to jail the corresponding block producer when its bridge operator is\\n   * slashed tier-2.\\n   * @param _skipSlashingThreshold The threshold to skip slashing the bridge operator in case the total number of votes\\n   * in the bridge is too small.\\n   *\\n   */\\n  function setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5c09ac11ead005bfa25ae58e970c441144849b14d58fd5f53fadc3b9be16e5d6\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeVoting is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge voting is updated. See the method `getBridgeVotingSlashingConfigs` for param\\n   * details.\\n   */\\n  event BridgeVotingSlashingConfigsUpdated(uint256 bridgeVotingThreshold, uint256 bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Slashes for bridge voter governance.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function slashBridgeVoting(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge voting slashing.\\n   *\\n   * @return _bridgeVotingThreshold The threshold to slash when a trusted organization does not vote for bridge\\n   * operators.\\n   * @return _bridgeVotingSlashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function getBridgeVotingSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _bridgeVotingThreshold, uint256 _bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Sets the configs to slash bridge voting.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeVotingSlashingConfigsUpdated`.\\n   *\\n   * @param _threshold The threshold to slash when a trusted organization does not vote for bridge operators.\\n   * @param _slashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) external;\\n}\\n\",\"keccak256\":\"0x72c3bcfe3c49f946651caa3066bd5296d007871c9a56fa113e2d3c0f3db7eb99\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(\\n    uint256 slashDoubleSignAmount,\\n    uint256 doubleSigningJailUntilBlock,\\n    uint256 doubleSigningOffsetLimitBlock\\n  );\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(\\n    address _validatorAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _slashDoubleSignAmount,\\n      uint256 _doubleSigningJailUntilBlock,\\n      uint256 _doubleSigningOffsetLimitBlock\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _doubleSigningOffsetLimitBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe72708c42d468b0c40ffa0c72b3386899f11273e4149425aab490a78d5312222\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashBridgeVoting.sol\\\";\\nimport \\\"./ISlashBridgeOperator.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is\\n  ISlashDoubleSign,\\n  ISlashBridgeVoting,\\n  ISlashBridgeOperator,\\n  ISlashUnavailability,\\n  ICreditScore\\n{}\\n\",\"keccak256\":\"0xe8b8fde3af614735cb304bc1eb82b05d65ede4df804b5d555787e5d5ecb95ec0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the unavailability indicator in the period `_period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold. This threshold is applied for tier-1 and tier-3 slash.\\n   * @return _unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   * @return _slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed with tier-2 or tier-3.\\n   * @return _jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed with tier-2 or tier-3.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _unavailabilityTier1Threshold,\\n      uint256 _unavailabilityTier2Threshold,\\n      uint256 _slashAmountForUnavailabilityTier2Threshold,\\n      uint256 _jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param _tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param _slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param _jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x92f7d8e9c6f80d4fedab80515c68db0a46cf4f8da143f8d766bf5f7582aa0a21\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    // Address of the pool i.e. consensus address of the validator\\n    address addr;\\n    // Pool admin address\\n    address admin;\\n    // Self-staking amount\\n    uint256 stakingAmount;\\n    // Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    // Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    // Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(address poolAddr);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `_poolAdminAddr` is currently active.\\n   */\\n  function isAdminOfActivePool(address _poolAdminAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address _poolAdminAddr) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool detail.\\n   */\\n  function getPoolDetail(address)\\n    external\\n    view\\n    returns (\\n      address _admin,\\n      uint256 _stakingAmount,\\n      uint256 _stakingTotal\\n    );\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(address[] calldata) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external;\\n}\\n\",\"keccak256\":\"0x008b3d42a3104820de7b7edb5ea4b21c75d4417767fc0791f89f00ac9a2cce8d\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the max commission rate is updated.\\n  event MaxCommissionRateUpdated(uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed validator, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] validator);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed validator,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed validator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of three operation addresses must be distinct in applying for validator candidate.\\n  error ErrThreeOperationAddrsNotDistinct();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max commission rate that the candidate can set.\\n   */\\n  function maxCommissionRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the max commission rate that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxCommissionRateUpdated` event.\\n   *\\n   */\\n  function setMaxCommissionRate(uint256 _maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param _candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata _pools, uint256 _period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x4160e8b8dc00df59a35823589d69dcbf5655d7024f5d8e17e823e243ffb44b9d\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(address _user, address[] calldata _poolAddrList)\\n    external\\n    view\\n    returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList) external returns (uint256 _amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(address[] calldata _consensusAddrList, address _consensusAddrDst)\\n    external\\n    returns (uint256 _amount);\\n}\\n\",\"keccak256\":\"0x5ce840a920ed06139f9e33d306c8ee50b2a81e4bd2ac6ed24b47297c348576b8\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolAddr, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolAddr, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolAddr, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolAddrs, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolAddrs, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolAddrs);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(address[] calldata _poolAddrs, address[] calldata _userList)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(address _poolAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `_poolAddrs`.\\n   */\\n  function getManyStakingTotals(address[] calldata _poolAddrs) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x92315ca9d6d93f55a7752adf2567adb86745f708198bfcd74b9a626b6570208f\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking {\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address _consensusAddr, uint256 _amount)\\n    external\\n    returns (uint256 _actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xb7942c5032c16ea567ac0bfc07ecacd84840d6de134735ea538aa22fc6da05a5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xc382bd50ca507308ec23826308bc9ff0a22cfb9b3fcd09c7ac7a63c37729d33e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xe4060b7e3b04a0043bd334011fe4ba67c990b0484dad52d7f14b35040989b6ab\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  // Error thrown when receives RON from neither staking vesting contract nor staking contract\\\"\\n  error ErrUnauthorizedReceiveRON();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0x4e81a61359a3f8bcc9d452615e3df7b0d0201823ce88f763530ddd4f00c2fc48\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the current period.\\n   */\\n\\n  function checkBridgeRewardDeprecated(address _consensusAddr) external view returns (bool _result);\\n}\\n\",\"keccak256\":\"0x853e7d0ac33ad868721733fc2ab4b78f2e613973a579eb0ea485cbdaa750e057\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /// @dev Error of number of prioritized greater than number of max validators.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the bridge operator list corresponding to validator address list.\\n   */\\n  function getBridgeOperatorsOf(address[] memory _validatorAddrs) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xbd10b0207a749e3a7a2aadcb6e93784cb17343a5266d056a3d0b79acb7c5c93d\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  struct BridgeOperatorSet {\\n    uint256 period;\\n    uint256 epoch;\\n    address[] operators;\\n  }\\n\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,uint256 epoch,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a;\\n\\n  /**\\n   * @dev Verifies whether the ballot is valid or not.\\n   *\\n   * Requirements:\\n   * - The ballot is not for an empty operator set.\\n   * - The operator address list is in order.\\n   *\\n   */\\n  function verifyBallot(BridgeOperatorSet calldata _ballot) internal pure {\\n    require(_ballot.operators.length > 0, \\\"BridgeOperatorsBallot: invalid array length\\\");\\n    address _addr = _ballot.operators[0];\\n    for (uint _i = 1; _i < _ballot.operators.length; _i++) {\\n      require(_addr < _ballot.operators[_i], \\\"BridgeOperatorsBallot: invalid order of bridge operators\\\");\\n      _addr = _ballot.operators[_i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(BridgeOperatorSet calldata _ballot) internal pure returns (bytes32) {\\n    bytes32 _operatorsHash;\\n    address[] memory _operators = _ballot.operators;\\n\\n    assembly {\\n      _operatorsHash := keccak256(add(_operators, 32), mul(mload(_operators), 32))\\n    }\\n\\n    return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _ballot.period, _ballot.epoch, _operatorsHash));\\n  }\\n}\\n\",\"keccak256\":\"0x986425ebae2dcfcfa266c9ca825232ff300ec8ce796e8975da6714d87e921793\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - min(a, b);\\n  }\\n}\\n\",\"keccak256\":\"0xa9e2a3ad43d7999a3cdbfb040b0f2dec282eae91ff8fe6ad26fdd19087121ce7\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUPickValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUPickValidatorSet is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of picking validator set\\n  function precompilePickValidatorSetAddress() public view virtual returns (address) {\\n    return address(0x68);\\n  }\\n\\n  /**\\n   * @dev Sorts and arranges to return a new validator set.\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcPickValidatorSet(\\n    address[] memory _candidates,\\n    uint256[] memory _weights,\\n    uint256[] memory _trustedWeights,\\n    uint256 _maxValidatorNumber,\\n    uint256 _maxPrioritizedValidatorNumber\\n  ) internal view virtual returns (address[] memory _result, uint256 _newValidatorCount) {\\n    address _smc = precompilePickValidatorSetAddress();\\n    bytes memory _payload = abi.encodeWithSignature(\\n      \\\"pickValidatorSet(address[],uint256[],uint256[],uint256,uint256)\\\",\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    bool _success = true;\\n\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n\\n    _newValidatorCount = _result.length;\\n  }\\n}\\n\",\"keccak256\":\"0xcb57a021897a773d11be9d98a195e0653f2124b7e95e84c4832b57d9d36d67e1\",\"license\":\"MIT\"},\"contracts/precompile-usages/PCUSortValidators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUSortValidators is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of sorting validators\\n  function precompileSortValidatorsAddress() public view virtual returns (address) {\\n    return address(0x66);\\n  }\\n\\n  /**\\n   * @dev Sorts candidates descending by their weights by calling precompile contract.\\n   *\\n   * Note: This function is marked as virtual for being wrapping in mock contract for testing purpose.\\n   */\\n  function _pcSortCandidates(address[] memory _candidates, uint256[] memory _weights)\\n    internal\\n    view\\n    virtual\\n    returns (address[] memory _result)\\n  {\\n    address _smc = precompileSortValidatorsAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload = abi.encodeWithSignature(\\\"sortValidators(address[],uint256[])\\\", _candidates, _weights);\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n  }\\n}\\n\",\"keccak256\":\"0xc779a5a5e29fb4416450b2eb6608a09e2cf63f6d9af5b2c1eec130dd16b0d22a\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/validator/CandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasStakingContract.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\n\\nabstract contract CandidateManager is ICandidateManager, PercentageConsumer, HasStakingContract {\\n  /// @dev Maximum number of validator candidate\\n  uint256 private _maxValidatorCandidate;\\n\\n  /// @dev The validator candidate array\\n  address[] internal _candidates;\\n  /// @dev Mapping from candidate consensus address => bitwise negation of validator index in `_candidates`\\n  mapping(address => uint256) internal _candidateIndex;\\n  /// @dev Mapping from candidate consensus address => their info\\n  mapping(address => ValidatorCandidate) internal _candidateInfo;\\n\\n  /**\\n   * @dev The minimum offset in day from current date to the effective date of a new commission schedule.\\n   * Value of 1 means the change gets affected at the beginning of the following day.\\n   **/\\n  uint256 internal _minEffectiveDaysOnwards;\\n  /// @dev Mapping from candidate consensus address => schedule commission change.\\n  mapping(address => CommissionSchedule) internal _candidateCommissionChangeSchedule;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function maxValidatorCandidate() public view override returns (uint256) {\\n    return _maxValidatorCandidate;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function minEffectiveDaysOnwards() external view override returns (uint256) {\\n    return _minEffectiveDaysOnwards;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMaxValidatorCandidate(uint256 _number) external override onlyAdmin {\\n    _setMaxValidatorCandidate(_number);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external override onlyAdmin {\\n    _setMinEffectiveDaysOnwards(_numOfDays);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function execApplyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external override onlyStakingContract {\\n    uint256 _length = _candidates.length;\\n    if (_length >= maxValidatorCandidate()) revert ErrExceedsMaxNumberOfCandidate();\\n    if (isValidatorCandidate(_consensusAddr)) revert ErrExistentCandidate();\\n    if (_commissionRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n\\n    for (uint _i = 0; _i < _candidates.length; _i++) {\\n      ValidatorCandidate storage existentInfo = _candidateInfo[_candidates[_i]];\\n      if (_candidateAdmin == existentInfo.admin) revert ErrExistentCandidateAdmin(_candidateAdmin);\\n      if (_treasuryAddr == existentInfo.treasuryAddr) revert ErrExistentTreasury(_treasuryAddr);\\n      if (_bridgeOperatorAddr == existentInfo.bridgeOperatorAddr) revert ErrExistentBridgeOperator(_bridgeOperatorAddr);\\n    }\\n\\n    _candidateIndex[_consensusAddr] = ~_length;\\n    _candidates.push(_consensusAddr);\\n\\n    ValidatorCandidate storage _info = _candidateInfo[_consensusAddr];\\n    _info.admin = _candidateAdmin;\\n    _info.consensusAddr = _consensusAddr;\\n    _info.treasuryAddr = _treasuryAddr;\\n    _info.bridgeOperatorAddr = _bridgeOperatorAddr;\\n    _info.commissionRate = _commissionRate;\\n    emit CandidateGranted(_consensusAddr, _treasuryAddr, _candidateAdmin, _bridgeOperatorAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function execRequestRenounceCandidate(address _consensusAddr, uint256 _secsLeft)\\n    external\\n    override\\n    onlyStakingContract\\n  {\\n    if (_isTrustedOrg(_consensusAddr)) revert ErrTrustedOrgCannotRenounce();\\n\\n    ValidatorCandidate storage _info = _candidateInfo[_consensusAddr];\\n    if (_info.revokingTimestamp != 0) revert ErrAlreadyRequestedRevokingCandidate();\\n    _setRevokingTimestamp(_info, block.timestamp + _secsLeft);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveDaysOnwards,\\n    uint256 _commissionRate\\n  ) external override onlyStakingContract {\\n    if (_candidateCommissionChangeSchedule[_consensusAddr].effectiveTimestamp != 0) {\\n      revert ErrAlreadyRequestedUpdatingCommissionRate();\\n    }\\n    if (_commissionRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n    if (_effectiveDaysOnwards < _minEffectiveDaysOnwards) revert ErrInvalidEffectiveDaysOnwards();\\n\\n    CommissionSchedule storage _schedule = _candidateCommissionChangeSchedule[_consensusAddr];\\n    uint256 _effectiveTimestamp = ((block.timestamp / 1 days) + _effectiveDaysOnwards) * 1 days;\\n    _schedule.effectiveTimestamp = _effectiveTimestamp;\\n    _schedule.commissionRate = _commissionRate;\\n\\n    emit CommissionRateUpdateScheduled(_consensusAddr, _effectiveTimestamp, _commissionRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isValidatorCandidate(address _addr) public view override returns (bool) {\\n    return _candidateIndex[_addr] != 0;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfos() external view override returns (ValidatorCandidate[] memory _list) {\\n    _list = new ValidatorCandidate[](_candidates.length);\\n    for (uint _i = 0; _i < _list.length; _i++) {\\n      _list[_i] = _candidateInfo[_candidates[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfo(address _candidate) external view override returns (ValidatorCandidate memory) {\\n    if (!isValidatorCandidate(_candidate)) revert ErrNonExistentCandidate();\\n    return _candidateInfo[_candidate];\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getValidatorCandidates() public view override returns (address[] memory) {\\n    return _candidates;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view override returns (CommissionSchedule memory) {\\n    return _candidateCommissionChangeSchedule[_candidate];\\n  }\\n\\n  /**\\n   * @dev Removes unsastisfied candidates, the ones who have insufficient minimum candidate staking amount,\\n   * or the ones who requested to renounce their candidate role.\\n   *\\n   * Emits the event `CandidatesRevoked` when a candidate is revoked.\\n   *\\n   */\\n  function _syncCandidateSet(uint256 _nextPeriod) internal returns (address[] memory _unsatisfiedCandidates) {\\n    IStaking _staking = _stakingContract;\\n    uint256 _waitingSecsToRevoke = _staking.waitingSecsToRevoke();\\n    uint256 _minStakingAmount = _staking.minValidatorStakingAmount();\\n    uint256[] memory _selfStakings = _staking.getManySelfStakings(_candidates);\\n\\n    uint256 _length = _candidates.length;\\n    uint256 _unsatisfiedCount;\\n    _unsatisfiedCandidates = new address[](_length);\\n\\n    {\\n      uint256 _i;\\n      address _addr;\\n      ValidatorCandidate storage _info;\\n      while (_i < _length) {\\n        _addr = _candidates[_i];\\n        _info = _candidateInfo[_addr];\\n\\n        // Checks for under-balance status of candidates\\n        bool _hasTopupDeadline = _info.topupDeadline != 0;\\n        if (_selfStakings[_i] < _minStakingAmount) {\\n          // Updates deadline on the first time unsatisfied the staking amount condition\\n          if (!_hasTopupDeadline) {\\n            uint256 _topupDeadline = block.timestamp + _waitingSecsToRevoke;\\n            _info.topupDeadline = _topupDeadline;\\n            emit CandidateTopupDeadlineUpdated(_addr, _topupDeadline);\\n          }\\n        } else if (_hasTopupDeadline) {\\n          // Removes the deadline if the staking amount condition is satisfied\\n          delete _info.topupDeadline;\\n          emit CandidateTopupDeadlineUpdated(_addr, 0);\\n        }\\n\\n        // Removes unsastisfied candidates\\n        bool _revokingActivated = (_info.revokingTimestamp != 0 && _info.revokingTimestamp <= block.timestamp) ||\\n          _emergencyExitLockedFundReleased(_addr);\\n        bool _topupDeadlineMissed = _info.topupDeadline != 0 && _info.topupDeadline <= block.timestamp;\\n        if (_revokingActivated || _topupDeadlineMissed) {\\n          _selfStakings[_i] = _selfStakings[--_length];\\n          _unsatisfiedCandidates[_unsatisfiedCount++] = _addr;\\n          _removeCandidate(_addr);\\n          continue;\\n        }\\n\\n        // Checks for schedule of commission change and updates commission rate\\n        uint256 _scheduleTimestamp = _candidateCommissionChangeSchedule[_addr].effectiveTimestamp;\\n        if (_scheduleTimestamp != 0 && _scheduleTimestamp <= block.timestamp) {\\n          uint256 _commisionRate = _candidateCommissionChangeSchedule[_addr].commissionRate;\\n          delete _candidateCommissionChangeSchedule[_addr];\\n          _info.commissionRate = _commisionRate;\\n          emit CommissionRateUpdated(_addr, _commisionRate);\\n        }\\n\\n        _i++;\\n      }\\n    }\\n\\n    if (_unsatisfiedCount > 0) {\\n      assembly {\\n        mstore(_unsatisfiedCandidates, _unsatisfiedCount)\\n      }\\n      emit CandidatesRevoked(_unsatisfiedCandidates);\\n      _staking.execDeprecatePools(_unsatisfiedCandidates, _nextPeriod);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view override returns (bool) {\\n    return _candidateInfo[_candidate].admin == _admin;\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr) internal view virtual returns (address) {\\n    return _candidateInfo[_consensusAddr].bridgeOperatorAddr;\\n  }\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function _setMaxValidatorCandidate(uint256 _threshold) internal {\\n    _maxValidatorCandidate = _threshold;\\n    emit MaxValidatorCandidateUpdated(_threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the minimum number of days onwards to the effective date of commission rate change.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function _setMinEffectiveDaysOnwards(uint256 _numOfDays) internal {\\n    if (_numOfDays < 1) revert ErrInvalidMinEffectiveDaysOnwards();\\n    _minEffectiveDaysOnwards = _numOfDays;\\n    emit MinEffectiveDaysOnwardsUpdated(_numOfDays);\\n  }\\n\\n  /**\\n   * @dev Removes the candidate.\\n   */\\n  function _removeCandidate(address _addr) internal virtual {\\n    uint256 _idx = _candidateIndex[_addr];\\n    if (_idx == 0) {\\n      return;\\n    }\\n\\n    delete _candidateInfo[_addr];\\n    delete _candidateIndex[_addr];\\n    delete _candidateCommissionChangeSchedule[_addr];\\n\\n    address _lastCandidate = _candidates[_candidates.length - 1];\\n    if (_lastCandidate != _addr) {\\n      _candidateIndex[_lastCandidate] = _idx;\\n      _candidates[~_idx] = _lastCandidate;\\n    }\\n\\n    _candidates.pop();\\n  }\\n\\n  /**\\n   * @dev Sets timestamp to revoke a candidate.\\n   */\\n  function _setRevokingTimestamp(ValidatorCandidate storage _candidate, uint256 _timestamp) internal {\\n    if (!isValidatorCandidate(_candidate.consensusAddr)) revert ErrNonExistentCandidate();\\n    _candidate.revokingTimestamp = _timestamp;\\n    emit CandidateRevokingTimestampUpdated(_candidate.consensusAddr, _timestamp);\\n  }\\n\\n  /**\\n   * @dev Returns a flag indicating whether the fund is unlocked.\\n   */\\n  function _emergencyExitLockedFundReleased(address _consensusAddr) internal virtual returns (bool);\\n\\n  /**\\n   * @dev Returns whether the consensus address is a trusted org or not.\\n   */\\n  function _isTrustedOrg(address _consensusAddr) internal virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc0c0a923c6315c40160ba4c6ad5eb006e3adc50bdbcbabc09018459e9da826c9\",\"license\":\"MIT\"},\"contracts/ronin/validator/CoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasBridgeTrackingContract.sol\\\";\\nimport \\\"../../extensions/collections/HasMaintenanceContract.sol\\\";\\nimport \\\"../../extensions/collections/HasSlashIndicatorContract.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingVestingContract.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/validator/ICoinbaseExecution.sol\\\";\\nimport \\\"../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../precompile-usages/PCUSortValidators.sol\\\";\\nimport \\\"../../precompile-usages/PCUPickValidatorSet.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport \\\"./CandidateManager.sol\\\";\\nimport \\\"./EmergencyExit.sol\\\";\\n\\nabstract contract CoinbaseExecution is\\n  ICoinbaseExecution,\\n  RONTransferHelper,\\n  PCUSortValidators,\\n  PCUPickValidatorSet,\\n  HasStakingVestingContract,\\n  HasBridgeTrackingContract,\\n  HasMaintenanceContract,\\n  HasSlashIndicatorContract,\\n  EmergencyExit\\n{\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  modifier onlyCoinbase() {\\n    if (msg.sender != block.coinbase) revert ErrCallerMustBeCoinbase();\\n    _;\\n  }\\n\\n  modifier whenEpochEnding() {\\n    if (!epochEndingAt(block.number)) revert ErrAtEndOfEpochOnly();\\n    _;\\n  }\\n\\n  modifier oncePerEpoch() {\\n    if (epochOf(_lastUpdatedBlock) >= epochOf(block.number)) revert ErrAlreadyWrappedEpoch();\\n    _lastUpdatedBlock = block.number;\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function submitBlockReward() external payable override onlyCoinbase {\\n    uint256 _submittedReward = msg.value;\\n    address _coinbaseAddr = msg.sender;\\n    bool _requestForBlockProducer = isBlockProducer(_coinbaseAddr) &&\\n      !_jailed(_coinbaseAddr) &&\\n      !_miningRewardDeprecated(_coinbaseAddr, currentPeriod());\\n    bool _requestForBridgeOperator = true;\\n\\n    (, uint256 _blockProducerBonus, uint256 _bridgeOperatorBonus) = _stakingVestingContract.requestBonus(\\n      _requestForBlockProducer,\\n      _requestForBridgeOperator\\n    );\\n\\n    _totalBridgeReward += _bridgeOperatorBonus;\\n\\n    // Deprecates reward for non-validator or slashed validator\\n    if (!_requestForBlockProducer) {\\n      _totalDeprecatedReward += _submittedReward;\\n      emit BlockRewardDeprecated(_coinbaseAddr, _submittedReward, BlockRewardDeprecatedType.UNAVAILABILITY);\\n      return;\\n    }\\n\\n    emit BlockRewardSubmitted(_coinbaseAddr, _submittedReward, _blockProducerBonus);\\n\\n    uint256 _period = currentPeriod();\\n    uint256 _reward = _submittedReward + _blockProducerBonus;\\n    uint256 _cutOffReward;\\n    if (_miningRewardBailoutCutOffAtPeriod[_coinbaseAddr][_period]) {\\n      (, , , uint256 _cutOffPercentage) = _slashIndicatorContract.getCreditScoreConfigs();\\n      _cutOffReward = (_reward * _cutOffPercentage) / _MAX_PERCENTAGE;\\n      _totalDeprecatedReward += _cutOffReward;\\n      emit BlockRewardDeprecated(_coinbaseAddr, _cutOffReward, BlockRewardDeprecatedType.AFTER_BAILOUT);\\n    }\\n\\n    _reward -= _cutOffReward;\\n    uint256 _maxRate = _stakingContract.maxCommissionRate();\\n    uint256 _rate = Math.min(_candidateInfo[_coinbaseAddr].commissionRate, _maxRate);\\n    uint256 _miningAmount = (_rate * _reward) / _MAX_PERCENTAGE;\\n    _miningReward[_coinbaseAddr] += _miningAmount;\\n\\n    uint256 _delegatingAmount = _reward - _miningAmount;\\n    _delegatingReward[_coinbaseAddr] += _delegatingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function wrapUpEpoch() external payable virtual override onlyCoinbase whenEpochEnding oncePerEpoch {\\n    uint256 _newPeriod = _computePeriod(block.timestamp);\\n    bool _periodEnding = _isPeriodEnding(_newPeriod);\\n\\n    address[] memory _currentValidators = getValidators();\\n    address[] memory _revokedCandidates;\\n    uint256 _epoch = epochOf(block.number);\\n    uint256 _nextEpoch = _epoch + 1;\\n    uint256 _lastPeriod = currentPeriod();\\n\\n    if (_periodEnding) {\\n      _syncBridgeOperatingReward(_lastPeriod, _currentValidators);\\n      (\\n        uint256 _totalDelegatingReward,\\n        uint256[] memory _delegatingRewards\\n      ) = _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(_lastPeriod, _currentValidators);\\n      _settleAndTransferDelegatingRewards(_lastPeriod, _currentValidators, _totalDelegatingReward, _delegatingRewards);\\n      _tryRecycleLockedFundsFromEmergencyExits();\\n      _recycleDeprecatedRewards();\\n      _slashIndicatorContract.updateCreditScores(_currentValidators, _lastPeriod);\\n      (_currentValidators, _revokedCandidates) = _syncValidatorSet(_newPeriod);\\n      if (_revokedCandidates.length > 0) {\\n        _slashIndicatorContract.execResetCreditScores(_revokedCandidates);\\n      }\\n      _currentPeriodStartAtBlock = block.number + 1;\\n    }\\n    _revampRoles(_newPeriod, _nextEpoch, _currentValidators);\\n    emit WrappedUpEpoch(_lastPeriod, _epoch, _periodEnding);\\n    _periodOf[_nextEpoch] = _newPeriod;\\n    _lastUpdatedPeriod = _newPeriod;\\n  }\\n\\n  /**\\n   * @dev This loop over the all current validators to sync the bridge operating reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncBridgeOperatingReward(uint256 _lastPeriod, address[] memory _currentValidators) internal {\\n    IBridgeTracking _bridgeTracking = _bridgeTrackingContract;\\n    uint256 _totalBridgeBallots = _bridgeTracking.totalBallots(_lastPeriod);\\n    uint256 _totalBridgeVotes = _bridgeTracking.totalVotes(_lastPeriod);\\n    address[] memory _correspondingBridgeOperators = getBridgeOperatorsOf(_currentValidators);\\n    uint256[] memory _bridgeBallots = _bridgeTracking.getManyTotalBallots(_lastPeriod, _correspondingBridgeOperators);\\n    (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2,\\n      uint256 _skipBridgeOperatorSlashingThreshold\\n    ) = _slashIndicatorContract.getBridgeOperatorSlashingConfigs();\\n    for (uint _i = 0; _i < _currentValidators.length; _i++) {\\n      _updateValidatorRewardBaseOnBridgeOperatingPerformance(\\n        _lastPeriod,\\n        _currentValidators[_i],\\n        _bridgeBallots[_i],\\n        _totalBridgeVotes,\\n        _totalBridgeBallots,\\n        _missingVotesRatioTier1,\\n        _missingVotesRatioTier2,\\n        _jailDurationForMissingVotesRatioTier2,\\n        _skipBridgeOperatorSlashingThreshold\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates validator reward based on the corresponding bridge operator performance.\\n   */\\n  function _updateValidatorRewardBaseOnBridgeOperatingPerformance(\\n    uint256 _period,\\n    address _validator,\\n    uint256 _validatorBallots,\\n    uint256 _totalVotes,\\n    uint256 _totalBallots,\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipBridgeOperatorSlashingThreshold\\n  ) internal {\\n    // Shares equally in case the bridge has nothing to votes\\n    bool _emptyBallot = _totalBallots == 0;\\n    if (_emptyBallot && _totalVotes == 0) {\\n      _bridgeOperatingReward[_validator] = _totalBridgeReward / totalBridgeOperators();\\n      return;\\n    } else if (_emptyBallot) {\\n      return;\\n    }\\n\\n    // Skips slashing in case the total number of votes is too small\\n    if (_totalVotes <= _skipBridgeOperatorSlashingThreshold) {\\n      _bridgeOperatingReward[_validator] = (_totalBridgeReward * _validatorBallots) / _totalBallots;\\n      return;\\n    }\\n\\n    uint256 _votedRatio = (_validatorBallots * _MAX_PERCENTAGE) / _totalVotes;\\n    uint256 _missedRatio = _MAX_PERCENTAGE - _votedRatio;\\n    if (_missedRatio >= _ratioTier2) {\\n      _bridgeRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      _miningRewardDeprecatedAtPeriod[_validator][_period] = true;\\n\\n      // Cannot saving gas by temp variable here due to too deep stack.\\n      _blockProducerJailedBlock[_validator] = Math.max(\\n        block.number + _jailDurationTier2,\\n        _blockProducerJailedBlock[_validator]\\n      );\\n      _cannotBailoutUntilBlock[_validator] = Math.max(\\n        block.number + _jailDurationTier2,\\n        _cannotBailoutUntilBlock[_validator]\\n      );\\n\\n      _slashIndicatorContract.execSlashBridgeOperator(_validator, 2, _period);\\n      emit ValidatorPunished(_validator, _period, _blockProducerJailedBlock[_validator], 0, true, true);\\n    } else if (_missedRatio >= _ratioTier1) {\\n      _bridgeRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      _slashIndicatorContract.execSlashBridgeOperator(_validator, 1, _period);\\n      emit ValidatorPunished(_validator, _period, _blockProducerJailedBlock[_validator], 0, false, true);\\n    } else if (_totalBallots > 0) {\\n      _bridgeOperatingReward[_validator] = (_totalBridgeReward * _validatorBallots) / _totalBallots;\\n    }\\n  }\\n\\n  /**\\n   * @dev This loops over all current validators to:\\n   * - Update delegating reward for and calculate total delegating rewards to be sent to the staking contract,\\n   * - Distribute the reward of block producers and bridge operators to their treasury addresses,\\n   * - Update the total deprecated reward if the two previous conditions do not sastify.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(\\n    uint256 _lastPeriod,\\n    address[] memory _currentValidators\\n  ) private returns (uint256 _totalDelegatingReward, uint256[] memory _delegatingRewards) {\\n    address _consensusAddr;\\n    address payable _treasury;\\n    _delegatingRewards = new uint256[](_currentValidators.length);\\n    for (uint _i = 0; _i < _currentValidators.length; _i++) {\\n      _consensusAddr = _currentValidators[_i];\\n      _treasury = _candidateInfo[_consensusAddr].treasuryAddr;\\n\\n      if (!_bridgeRewardDeprecated(_consensusAddr, _lastPeriod)) {\\n        _distributeBridgeOperatingReward(_consensusAddr, _candidateInfo[_consensusAddr].bridgeOperatorAddr, _treasury);\\n      } else {\\n        _totalDeprecatedReward += _bridgeOperatingReward[_consensusAddr];\\n      }\\n\\n      if (!_jailed(_consensusAddr) && !_miningRewardDeprecated(_consensusAddr, _lastPeriod)) {\\n        _totalDelegatingReward += _delegatingReward[_consensusAddr];\\n        _delegatingRewards[_i] = _delegatingReward[_consensusAddr];\\n        _distributeMiningReward(_consensusAddr, _treasury);\\n      } else {\\n        _totalDeprecatedReward += _miningReward[_consensusAddr] + _delegatingReward[_consensusAddr];\\n      }\\n\\n      delete _delegatingReward[_consensusAddr];\\n      delete _miningReward[_consensusAddr];\\n      delete _bridgeOperatingReward[_consensusAddr];\\n    }\\n    delete _totalBridgeReward;\\n  }\\n\\n  /**\\n   * @dev Distributes bonus of staking vesting and mining fee for the block producer.\\n   *\\n   * Emits the `MiningRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `MiningRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeMiningReward(address _consensusAddr, address payable _treasury) private {\\n    uint256 _amount = _miningReward[_consensusAddr];\\n    if (_amount > 0) {\\n      if (_unsafeSendRON(_treasury, _amount, 3500)) {\\n        emit MiningRewardDistributed(_consensusAddr, _treasury, _amount);\\n        return;\\n      }\\n\\n      emit MiningRewardDistributionFailed(_consensusAddr, _treasury, _amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Distribute bonus of staking vesting for the bridge operator.\\n   *\\n   * Emits the `BridgeOperatorRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `BridgeOperatorRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeBridgeOperatingReward(\\n    address _consensusAddr,\\n    address _bridgeOperator,\\n    address payable _treasury\\n  ) private {\\n    uint256 _amount = _bridgeOperatingReward[_consensusAddr];\\n    if (_amount > 0) {\\n      if (_unsafeSendRON(_treasury, _amount, 3500)) {\\n        emit BridgeOperatorRewardDistributed(_consensusAddr, _bridgeOperator, _treasury, _amount);\\n        return;\\n      }\\n\\n      emit BridgeOperatorRewardDistributionFailed(\\n        _consensusAddr,\\n        _bridgeOperator,\\n        _treasury,\\n        _amount,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper function to settle rewards for delegators of `_currentValidators` at the end of each period,\\n   * then transfer the rewards from this contract to the staking contract, in order to finalize a period.\\n   *\\n   * Emits the `StakingRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `StakingRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _settleAndTransferDelegatingRewards(\\n    uint256 _period,\\n    address[] memory _currentValidators,\\n    uint256 _totalDelegatingReward,\\n    uint256[] memory _delegatingRewards\\n  ) private {\\n    IStaking _staking = _stakingContract;\\n    if (_totalDelegatingReward > 0) {\\n      if (_unsafeSendRON(payable(address(_staking)), _totalDelegatingReward)) {\\n        _staking.execRecordRewards(_currentValidators, _delegatingRewards, _period);\\n        emit StakingRewardDistributed(_totalDelegatingReward, _currentValidators, _delegatingRewards);\\n        return;\\n      }\\n\\n      emit StakingRewardDistributionFailed(\\n        _totalDelegatingReward,\\n        _currentValidators,\\n        _delegatingRewards,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer the deprecated rewards e.g. the rewards that get deprecated when validator is slashed/maintained,\\n   * to the staking vesting contract\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   */\\n  function _recycleDeprecatedRewards() private {\\n    uint256 _withdrawAmount = _totalDeprecatedReward;\\n\\n    if (_withdrawAmount != 0) {\\n      address _withdrawTarget = stakingVestingContract();\\n\\n      delete _totalDeprecatedReward;\\n\\n      (bool _success, ) = _withdrawTarget.call{ value: _withdrawAmount }(\\n        abi.encodeWithSelector(IStakingVesting.receiveRON.selector)\\n      );\\n\\n      if (_success) {\\n        emit DeprecatedRewardRecycled(_withdrawTarget, _withdrawAmount);\\n      } else {\\n        emit DeprecatedRewardRecycleFailed(_withdrawTarget, _withdrawAmount, address(this).balance);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the validator set based on the validator candidates from the Staking contract.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncValidatorSet(uint256 _newPeriod)\\n    private\\n    returns (address[] memory _newValidators, address[] memory _unsastifiedCandidates)\\n  {\\n    _unsastifiedCandidates = _syncCandidateSet(_newPeriod);\\n    uint256[] memory _weights = _stakingContract.getManyStakingTotals(_candidates);\\n    uint256[] memory _trustedWeights = _roninTrustedOrganizationContract.getConsensusWeights(_candidates);\\n    uint256 _newValidatorCount;\\n    (_newValidators, _newValidatorCount) = _pcPickValidatorSet(\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    _setNewValidatorSet(_newValidators, _newValidatorCount, _newPeriod);\\n  }\\n\\n  /**\\n   * @dev Private helper function helps writing the new validator set into the contract storage.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _setNewValidatorSet(\\n    address[] memory _newValidators,\\n    uint256 _newValidatorCount,\\n    uint256 _newPeriod\\n  ) private {\\n    // Remove exceeding validators in the current set\\n    for (uint256 _i = _newValidatorCount; _i < validatorCount; _i++) {\\n      delete _validatorMap[_validators[_i]];\\n      delete _validators[_i];\\n    }\\n\\n    // Remove flag for all validator in the current set\\n    for (uint _i = 0; _i < _newValidatorCount; _i++) {\\n      delete _validatorMap[_validators[_i]];\\n    }\\n\\n    // Update new validator set and set flag correspondingly.\\n    for (uint256 _i = 0; _i < _newValidatorCount; _i++) {\\n      address _newValidator = _newValidators[_i];\\n      _validatorMap[_newValidator] = EnumFlags.ValidatorFlag.Both;\\n      _validators[_i] = _newValidator;\\n    }\\n\\n    validatorCount = _newValidatorCount;\\n    emit ValidatorSetUpdated(_newPeriod, _newValidators);\\n  }\\n\\n  /**\\n   * @dev Activate/Deactivate the validators from producing blocks, based on their in jail status and maintenance status.\\n   *\\n   * Requirements:\\n   * - This method is called at the end of each epoch\\n   *\\n   * Emits the `BlockProducerSetUpdated` event.\\n   * Emits the `BridgeOperatorSetUpdated` event.\\n   *\\n   */\\n  function _revampRoles(\\n    uint256 _newPeriod,\\n    uint256 _nextEpoch,\\n    address[] memory _currentValidators\\n  ) private {\\n    bool[] memory _maintainedList = _maintenanceContract.checkManyMaintained(_currentValidators, block.number + 1);\\n\\n    for (uint _i = 0; _i < _currentValidators.length; _i++) {\\n      address _validator = _currentValidators[_i];\\n      bool _emergencyExitRequested = block.timestamp <= _emergencyExitJailedTimestamp[_validator];\\n      bool _isProducerBefore = isBlockProducer(_validator);\\n      bool _isProducerAfter = !(_jailed(_validator) || _maintainedList[_i] || _emergencyExitRequested);\\n\\n      if (!_isProducerBefore && _isProducerAfter) {\\n        _validatorMap[_validator] = _validatorMap[_validator].addFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n      } else if (_isProducerBefore && !_isProducerAfter) {\\n        _validatorMap[_validator] = _validatorMap[_validator].removeFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n      }\\n\\n      bool _isBridgeOperatorBefore = isOperatingBridge(_validator);\\n      bool _isBridgeOperatorAfter = !_emergencyExitRequested;\\n      if (!_isBridgeOperatorBefore && _isBridgeOperatorAfter) {\\n        _validatorMap[_validator] = _validatorMap[_validator].addFlag(EnumFlags.ValidatorFlag.BridgeOperator);\\n      } else if (_isBridgeOperatorBefore && !_isBridgeOperatorAfter) {\\n        _validatorMap[_validator] = _validatorMap[_validator].removeFlag(EnumFlags.ValidatorFlag.BridgeOperator);\\n      }\\n    }\\n\\n    emit BlockProducerSetUpdated(_newPeriod, _nextEpoch, getBlockProducers());\\n    emit BridgeOperatorSetUpdated(_newPeriod, _nextEpoch, getBridgeOperators());\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_isTrustedOrg`.\\n   */\\n  function _isTrustedOrg(address _consensusAddr) internal view override returns (bool) {\\n    return _roninTrustedOrganizationContract.getConsensusWeight(_consensusAddr) > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x401382e40fd85a6eaa98e6b622e9743c43dfc7f8d2aec6f2bda006435c5a79c6\",\"license\":\"MIT\"},\"contracts/ronin/validator/EmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/IRoninGovernanceAdmin.sol\\\";\\nimport \\\"../../interfaces/validator/IEmergencyExit.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport \\\"./CandidateManager.sol\\\";\\n\\nabstract contract EmergencyExit is IEmergencyExit, RONTransferHelper, CandidateManager, CommonStorage {\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function emergencyExitLockedAmount() external view returns (uint256) {\\n    return _emergencyExitLockedAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function emergencyExpiryDuration() external view returns (uint256) {\\n    return _emergencyExpiryDuration;\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external onlyStakingContract {\\n    EmergencyExitInfo storage _info = _exitInfo[_consensusAddr];\\n    if (_info.recyclingAt != 0) revert ErrAlreadyRequestedEmergencyExit();\\n\\n    uint256 _revokingTimestamp = block.timestamp + _secLeftToRevoke;\\n    _setRevokingTimestamp(_candidateInfo[_consensusAddr], _revokingTimestamp);\\n    _emergencyExitJailedTimestamp[_consensusAddr] = _revokingTimestamp;\\n\\n    uint256 _deductedAmount = _stakingContract.execDeductStakingAmount(_consensusAddr, _emergencyExitLockedAmount);\\n    if (_deductedAmount > 0) {\\n      uint256 _recyclingAt = block.timestamp + _emergencyExpiryDuration;\\n      _lockedConsensusList.push(_consensusAddr);\\n      _info.lockedAmount = _deductedAmount;\\n      _info.recyclingAt = _recyclingAt;\\n      IRoninGovernanceAdmin(_getAdmin()).createEmergencyExitPoll(\\n        _consensusAddr,\\n        _candidateInfo[_consensusAddr].treasuryAddr,\\n        block.timestamp,\\n        _recyclingAt\\n      );\\n    }\\n    emit EmergencyExitRequested(_consensusAddr, _deductedAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external onlyAdmin {\\n    _setEmergencyExitLockedAmount(_emergencyExitLockedAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external onlyAdmin {\\n    _setEmergencyExpiryDuration(_emergencyExpiryDuration);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient)\\n    external\\n    onlyAdmin\\n  {\\n    if (_exitInfo[_consensusAddr].recyclingAt == 0) {\\n      return;\\n    }\\n\\n    uint256 _length = _lockedConsensusList.length;\\n    uint256 _index = _length;\\n\\n    for (uint _i = 0; _i < _length; _i++) {\\n      if (_lockedConsensusList[_i] == _consensusAddr) {\\n        _index = _i;\\n        break;\\n      }\\n    }\\n\\n    // The locked amount might be recycled\\n    if (_index == _length) {\\n      return;\\n    }\\n\\n    uint256 _amount = _exitInfo[_consensusAddr].lockedAmount;\\n    if (_amount > 0) {\\n      delete _exitInfo[_consensusAddr];\\n      if (_length > 1) {\\n        _lockedConsensusList[_index] = _lockedConsensusList[_length - 1];\\n      }\\n      _lockedConsensusList.pop();\\n\\n      _lockedFundReleased[_consensusAddr] = true;\\n      if (_unsafeSendRON(_recipient, _amount, 3500)) {\\n        emit EmergencyExitLockedFundReleased(_consensusAddr, _recipient, _amount);\\n        return;\\n      }\\n\\n      emit EmergencyExitLockedFundReleasingFailed(_consensusAddr, _recipient, _amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tries to recycle the locked funds from emergency exit requests.\\n   */\\n  function _tryRecycleLockedFundsFromEmergencyExits() internal {\\n    uint256 _length = _lockedConsensusList.length;\\n\\n    uint256 _i;\\n    address _addr;\\n    EmergencyExitInfo storage _info;\\n\\n    while (_i < _length) {\\n      _addr = _lockedConsensusList[_i];\\n      _info = _exitInfo[_addr];\\n\\n      if (_info.recyclingAt <= block.timestamp) {\\n        _totalDeprecatedReward += _info.lockedAmount;\\n\\n        delete _exitInfo[_addr];\\n        if (--_length > 0) {\\n          _lockedConsensusList[_i] = _lockedConsensusList[_length];\\n        }\\n        _lockedConsensusList.pop();\\n        continue;\\n      }\\n\\n      _i++;\\n    }\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_emergencyExitLockedFundReleased`.\\n   */\\n  function _emergencyExitLockedFundReleased(address _consensusAddr) internal virtual override returns (bool) {\\n    return _lockedFundReleased[_consensusAddr];\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_removeCandidate`.\\n   */\\n  function _removeCandidate(address _consensusAddr) internal override {\\n    delete _lockedFundReleased[_consensusAddr];\\n    super._removeCandidate(_consensusAddr);\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr)\\n    internal\\n    view\\n    virtual\\n    override(CandidateManager, ValidatorInfoStorage)\\n    returns (address)\\n  {\\n    return CandidateManager._bridgeOperatorOf(_consensusAddr);\\n  }\\n\\n  /**\\n   * @dev See `setEmergencyExitLockedAmount.\\n   */\\n  function _setEmergencyExitLockedAmount(uint256 _amount) internal {\\n    _emergencyExitLockedAmount = _amount;\\n    emit EmergencyExitLockedAmountUpdated(_amount);\\n  }\\n\\n  /**\\n   * @dev See `setEmergencyExpiryDuration`.\\n   */\\n  function _setEmergencyExpiryDuration(uint256 _duration) internal {\\n    _emergencyExpiryDuration = _duration;\\n    emit EmergencyExpiryDurationUpdated(_duration);\\n  }\\n}\\n\",\"keccak256\":\"0x710fc39363de3b8a4659ee6dd9cb9fc68e8ac9dc24ea97f0666b087539c73c54\",\"license\":\"MIT\"},\"contracts/ronin/validator/RoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./CoinbaseExecution.sol\\\";\\nimport \\\"./SlashingExecution.sol\\\";\\n\\ncontract RoninValidatorSet is Initializable, CoinbaseExecution, SlashingExecution {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __slashIndicatorContract,\\n    address __stakingContract,\\n    address __stakingVestingContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address __bridgeTrackingContract,\\n    uint256 __maxValidatorNumber,\\n    uint256 __maxValidatorCandidate,\\n    uint256 __maxPrioritizedValidatorNumber,\\n    uint256 __minEffectiveDaysOnwards,\\n    uint256 __numberOfBlocksInEpoch,\\n    // __emergencyExitConfigs[0]: emergencyExitLockedAmount\\n    // __emergencyExitConfigs[1]: emergencyExpiryDuration\\n    uint256[2] calldata __emergencyExitConfigs\\n  ) external initializer {\\n    _setSlashIndicatorContract(__slashIndicatorContract);\\n    _setStakingContract(__stakingContract);\\n    _setStakingVestingContract(__stakingVestingContract);\\n    _setMaintenanceContract(__maintenanceContract);\\n    _setBridgeTrackingContract(__bridgeTrackingContract);\\n    _setRoninTrustedOrganizationContract(__roninTrustedOrganizationContract);\\n    _setMaxValidatorNumber(__maxValidatorNumber);\\n    _setMaxValidatorCandidate(__maxValidatorCandidate);\\n    _setMaxPrioritizedValidatorNumber(__maxPrioritizedValidatorNumber);\\n    _setMinEffectiveDaysOnwards(__minEffectiveDaysOnwards);\\n    _setEmergencyExitLockedAmount(__emergencyExitConfigs[0]);\\n    _setEmergencyExpiryDuration(__emergencyExitConfigs[1]);\\n    _numberOfBlocksInEpoch = __numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @dev Only receives RON from staking vesting contract (for topping up bonus), and from staking contract (for transferring\\n   * deducting amount on slashing).\\n   */\\n  function _fallback() internal view {\\n    if (msg.sender != stakingVestingContract() && msg.sender != stakingContract()) revert ErrUnauthorizedReceiveRON();\\n  }\\n\\n  /**\\n   * @dev Override `ValidatorInfoStorage-_bridgeOperatorOf`.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr)\\n    internal\\n    view\\n    override(EmergencyExit, ValidatorInfoStorage)\\n    returns (address)\\n  {\\n    return super._bridgeOperatorOf(_consensusAddr);\\n  }\\n}\\n\",\"keccak256\":\"0xd7a2ac4d3a2c8edbd1bbfb1ef3549ef0a019b4c9b4f1c12f1fd07b116b1adab3\",\"license\":\"MIT\"},\"contracts/ronin/validator/SlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasSlashIndicatorContract.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingContract.sol\\\";\\nimport \\\"../../interfaces/validator/ISlashingExecution.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\n\\nabstract contract SlashingExecution is\\n  ISlashingExecution,\\n  HasSlashIndicatorContract,\\n  HasStakingContract,\\n  CommonStorage\\n{\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external override onlySlashIndicatorContract {\\n    uint256 _period = currentPeriod();\\n    _miningRewardDeprecatedAtPeriod[_validatorAddr][_period] = true;\\n\\n    _totalDeprecatedReward += _miningReward[_validatorAddr] + _delegatingReward[_validatorAddr];\\n\\n    delete _miningReward[_validatorAddr];\\n    delete _delegatingReward[_validatorAddr];\\n\\n    _blockProducerJailedBlock[_validatorAddr] = Math.max(_newJailedUntil, _blockProducerJailedBlock[_validatorAddr]);\\n\\n    if (_slashAmount > 0) {\\n      uint256 _actualAmount = _stakingContract.execDeductStakingAmount(_validatorAddr, _slashAmount);\\n      _totalDeprecatedReward += _actualAmount;\\n    }\\n\\n    if (_cannotBailout) {\\n      _cannotBailoutUntilBlock[_validatorAddr] = Math.max(_newJailedUntil, _cannotBailoutUntilBlock[_validatorAddr]);\\n    }\\n\\n    emit ValidatorPunished(\\n      _validatorAddr,\\n      _period,\\n      _blockProducerJailedBlock[_validatorAddr],\\n      _slashAmount,\\n      true,\\n      false\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external override onlySlashIndicatorContract {\\n    if (block.number <= _cannotBailoutUntilBlock[_validatorAddr]) revert ErrCannotBailout(_validatorAddr);\\n\\n    // Note: Removing rewards of validator in `bailOut` function is not needed, since the rewards have been\\n    // removed previously in the `slash` function.\\n    _miningRewardBailoutCutOffAtPeriod[_validatorAddr][_period] = true;\\n    _miningRewardDeprecatedAtPeriod[_validatorAddr][_period] = false;\\n    _blockProducerJailedBlock[_validatorAddr] = block.number - 1;\\n\\n    emit ValidatorUnjailed(_validatorAddr, _period);\\n  }\\n}\\n\",\"keccak256\":\"0xf10b8566c1397e3dc86c6c16dcd20bf91011726b01dbff7da3a9d9a59bdee9b0\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/CommonStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./JailingStorage.sol\\\";\\nimport \\\"./TimingStorage.sol\\\";\\nimport \\\"./ValidatorInfoStorage.sol\\\";\\n\\nabstract contract CommonStorage is ICommonInfo, TimingStorage, JailingStorage, ValidatorInfoStorage {\\n  /// @dev Mapping from consensus address => pending reward from producing block\\n  mapping(address => uint256) internal _miningReward;\\n  /// @dev Mapping from consensus address => pending reward from delegating\\n  mapping(address => uint256) internal _delegatingReward;\\n\\n  /// @dev The total reward for bridge operators\\n  uint256 internal _totalBridgeReward;\\n  /// @dev Mapping from consensus address => pending reward for being bridge operator\\n  mapping(address => uint256) internal _bridgeOperatingReward;\\n\\n  /// @dev The deprecated reward that has not been withdrawn by admin\\n  uint256 internal _totalDeprecatedReward;\\n\\n  /// @dev The amount of RON to lock from a consensus address.\\n  uint256 internal _emergencyExitLockedAmount;\\n  /// @dev The duration that an emergency request is expired and the fund will be recycled.\\n  uint256 internal _emergencyExpiryDuration;\\n  /// @dev The address list of consensus addresses that being locked fund.\\n  address[] internal _lockedConsensusList;\\n  /// @dev Mapping from consensus => request exist info\\n  mapping(address => EmergencyExitInfo) internal _exitInfo;\\n  /// @dev Mapping from consensus => flag indicating whether the locked fund is released\\n  mapping(address => bool) internal _lockedFundReleased;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[44] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr)\\n    external\\n    view\\n    override\\n    returns (EmergencyExitInfo memory _info)\\n  {\\n    _info = _exitInfo[_consensusAddr];\\n    require(_info.recyclingAt > 0, \\\"CommonStorage: non-existent info\\\");\\n  }\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function totalDeprecatedReward() external view override returns (uint256) {\\n    return _totalDeprecatedReward;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block)\\n    public\\n    view\\n    virtual\\n    override(ITimingInfo, JailingStorage, TimingStorage)\\n    returns (uint256)\\n  {\\n    return TimingStorage.epochOf(_block);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override(ITimingInfo, JailingStorage, TimingStorage) returns (uint256) {\\n    return TimingStorage.currentPeriod();\\n  }\\n}\\n\",\"keccak256\":\"0x3eecd5f27c0e4654ceac91669b480698af93f8dfc6c7cff8f475cab76bd20c36\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/JailingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/IJailingInfo.sol\\\";\\nimport \\\"./TimingStorage.sol\\\";\\n\\nabstract contract JailingStorage is IJailingInfo {\\n  /// @dev Mapping from consensus address => period number => block producer has no pending reward.\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardDeprecatedAtPeriod;\\n  /// @dev Mapping from consensus address => period number => whether the block producer get cut off reward, due to bailout.\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardBailoutCutOffAtPeriod;\\n  /// @dev Mapping from consensus address => period number => block operator has no pending reward.\\n  mapping(address => mapping(uint256 => bool)) internal _bridgeRewardDeprecatedAtPeriod;\\n\\n  /// @dev Mapping from consensus address => the last block that the block producer is jailed.\\n  mapping(address => uint256) internal _blockProducerJailedBlock;\\n  /// @dev Mapping from consensus address => the last timestamp that the bridge operator is jailed.\\n  mapping(address => uint256) internal _emergencyExitJailedTimestamp;\\n  /// @dev Mapping from consensus address => the last block that the block producer cannot bailout.\\n  mapping(address => uint256) internal _cannotBailoutUntilBlock;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailed(address _addr) external view override returns (bool) {\\n    return checkJailedAtBlock(_addr, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    override\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    )\\n  {\\n    return getJailedTimeLeftAtBlock(_addr, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) public view override returns (bool) {\\n    return _jailedAtBlock(_addr, _blockNum);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    public\\n    view\\n    override\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    )\\n  {\\n    uint256 _jailedBlock = _blockProducerJailedBlock[_addr];\\n    if (_jailedBlock < _blockNum) {\\n      return (false, 0, 0);\\n    }\\n\\n    isJailed_ = true;\\n    blockLeft_ = _jailedBlock - _blockNum + 1;\\n    epochLeft_ = epochOf(_jailedBlock) - epochOf(_blockNum) + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkManyJailed(address[] calldata _addrList) external view override returns (bool[] memory _result) {\\n    _result = new bool[](_addrList.length);\\n    for (uint256 _i; _i < _addrList.length; _i++) {\\n      _result[_i] = _jailed(_addrList[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecated(address[] calldata _blockProducers)\\n    external\\n    view\\n    override\\n    returns (bool[] memory _result)\\n  {\\n    _result = new bool[](_blockProducers.length);\\n    uint256 _period = currentPeriod();\\n    for (uint256 _i; _i < _blockProducers.length; _i++) {\\n      _result[_i] = _miningRewardDeprecated(_blockProducers[_i], _period);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    override\\n    returns (bool[] memory _result)\\n  {\\n    _result = new bool[](_blockProducers.length);\\n    for (uint256 _i; _i < _blockProducers.length; _i++) {\\n      _result[_i] = _miningRewardDeprecated(_blockProducers[_i], _period);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkBridgeRewardDeprecated(address _consensusAddr) external view override returns (bool _result) {\\n    uint256 _period = currentPeriod();\\n    return _bridgeRewardDeprecated(_consensusAddr, _period);\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-epochOf`\\n   */\\n  function epochOf(uint256 _block) public view virtual returns (uint256);\\n\\n  /**\\n   * @dev See `ITimingInfo-currentPeriod`\\n   */\\n  function currentPeriod() public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function _jailed(address _validatorAddr) internal view returns (bool) {\\n    return _jailedAtBlock(_validatorAddr, block.number);\\n  }\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function _jailedAtBlock(address _validatorAddr, uint256 _blockNum) internal view returns (bool) {\\n    return _blockNum <= _blockProducerJailedBlock[_validatorAddr];\\n  }\\n\\n  /**\\n   * @dev Returns whether the block producer has no pending reward in that period.\\n   */\\n  function _miningRewardDeprecated(address _validatorAddr, uint256 _period) internal view returns (bool) {\\n    return _miningRewardDeprecatedAtPeriod[_validatorAddr][_period];\\n  }\\n\\n  /**\\n   * @dev Returns whether the bridge operator has no pending reward in the period.\\n   */\\n  function _bridgeRewardDeprecated(address _validatorAddr, uint256 _period) internal view returns (bool) {\\n    return _bridgeRewardDeprecatedAtPeriod[_validatorAddr][_period];\\n  }\\n}\\n\",\"keccak256\":\"0x2fc32e0620caf841ac519fb68b8f18cd0413eac9bc2430e20bd4c61ed298ae75\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/TimingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/ITimingInfo.sol\\\";\\n\\nabstract contract TimingStorage is ITimingInfo {\\n  /// @dev Length of period in seconds\\n  uint256 internal constant _periodLength = 1 days;\\n\\n  /// @dev The number of blocks in a epoch\\n  uint256 internal _numberOfBlocksInEpoch;\\n  /// @dev The last updated block\\n  uint256 internal _lastUpdatedBlock;\\n  /// @dev The last updated period\\n  uint256 internal _lastUpdatedPeriod;\\n  /// @dev The starting block of the last updated period\\n  uint256 internal _currentPeriodStartAtBlock;\\n\\n  /// @dev Mapping from epoch index => period index\\n  mapping(uint256 => uint256) internal _periodOf;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function getLastUpdatedBlock() external view override returns (uint256) {\\n    return _lastUpdatedBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block) public view virtual override returns (uint256) {\\n    return _block / _numberOfBlocksInEpoch + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber) {\\n    return (_epoch <= epochOf(block.number) || _periodOf[_epoch] > 0, _periodOf[_epoch]);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function isPeriodEnding() external view override returns (bool) {\\n    return _isPeriodEnding(_computePeriod(block.timestamp));\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochEndingAt(uint256 _block) public view virtual override returns (bool) {\\n    return _block % _numberOfBlocksInEpoch == _numberOfBlocksInEpoch - 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override returns (uint256) {\\n    return _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriodStartAtBlock() public view override returns (uint256) {\\n    return _currentPeriodStartAtBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function numberOfBlocksInEpoch() public view virtual override returns (uint256 _numberOfBlocks) {\\n    return _numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-isPeriodEnding`\\n   */\\n  function _isPeriodEnding(uint256 _newPeriod) internal view virtual returns (bool) {\\n    return _newPeriod > _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @dev Returns the calculated period.\\n   */\\n  function _computePeriod(uint256 _timestamp) internal pure returns (uint256) {\\n    return _timestamp / _periodLength;\\n  }\\n}\\n\",\"keccak256\":\"0x57d3ff59127de2366ea3877c300962a30b70c163edc057cecf8d7be6e1ba7578\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/ValidatorInfoStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../../interfaces/validator/info-fragments/IValidatorInfo.sol\\\";\\n\\nabstract contract ValidatorInfoStorage is IValidatorInfo, HasRoninTrustedOrganizationContract {\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  /// @dev The maximum number of validator.\\n  uint256 internal _maxValidatorNumber;\\n\\n  /// @dev The total of validators\\n  uint256 public validatorCount;\\n  /// @dev Mapping from validator index => validator address\\n  mapping(uint256 => address) internal _validators;\\n  /// @dev Mapping from address => flag indicating the validator ability: producing block, operating bridge\\n  mapping(address => EnumFlags.ValidatorFlag) internal _validatorMap;\\n  /// @dev The number of slot that is reserved for prioritized validators\\n  uint256 internal _maxPrioritizedValidatorNumber;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getValidators() public view override returns (address[] memory _validatorList) {\\n    _validatorList = new address[](validatorCount);\\n    for (uint _i = 0; _i < _validatorList.length; _i++) {\\n      _validatorList[_i] = _validators[_i];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isValidator(address _addr) public view override returns (bool) {\\n    return !_validatorMap[_addr].isNone();\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getBlockProducers() public view override returns (address[] memory _result) {\\n    _result = new address[](validatorCount);\\n    uint256 _count = 0;\\n    for (uint _i = 0; _i < _result.length; _i++) {\\n      if (isBlockProducer(_validators[_i])) {\\n        _result[_count++] = _validators[_i];\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_result, _count)\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isBlockProducer(address _addr) public view override returns (bool) {\\n    return _validatorMap[_addr].hasFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function totalBlockProducers() external view returns (uint256 _total) {\\n    for (uint _i = 0; _i < validatorCount; _i++) {\\n      if (isBlockProducer(_validators[_i])) {\\n        _total++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getBridgeOperators() public view override returns (address[] memory _result) {\\n    _result = new address[](validatorCount);\\n    uint256 _count = 0;\\n    for (uint _i = 0; _i < _result.length; _i++) {\\n      if (isOperatingBridge(_validators[_i])) {\\n        _result[_count++] = _bridgeOperatorOf(_validators[_i]);\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_result, _count)\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function getBridgeOperatorsOf(address[] memory _validatorAddrs)\\n    public\\n    view\\n    override\\n    returns (address[] memory _result)\\n  {\\n    _result = new address[](_validatorAddrs.length);\\n    for (uint _i = 0; _i < _result.length; _i++) {\\n      _result[_i] = _bridgeOperatorOf(_validatorAddrs[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isBridgeOperator(address _bridgeOperatorAddr) external view override returns (bool _result) {\\n    for (uint _i = 0; _i < validatorCount; _i++) {\\n      if (_bridgeOperatorOf(_validators[_i]) == _bridgeOperatorAddr && isOperatingBridge(_validators[_i])) {\\n        _result = true;\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function isOperatingBridge(address _consensusAddr) public view override returns (bool) {\\n    return _validatorMap[_consensusAddr].hasFlag(EnumFlags.ValidatorFlag.BridgeOperator);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function maxValidatorNumber() external view override returns (uint256 _maximumValidatorNumber) {\\n    return _maxValidatorNumber;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function maxPrioritizedValidatorNumber() external view override returns (uint256 _maximumPrioritizedValidatorNumber) {\\n    return _maxPrioritizedValidatorNumber;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function totalBridgeOperators() public view returns (uint256 _total) {\\n    for (uint _i = 0; _i < validatorCount; _i++) {\\n      if (isOperatingBridge(_validators[_i])) {\\n        _total++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function setMaxValidatorNumber(uint256 _max) external override onlyAdmin {\\n    _setMaxValidatorNumber(_max);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfo\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _number) external override onlyAdmin {\\n    _setMaxPrioritizedValidatorNumber(_number);\\n  }\\n\\n  /**\\n   * @dev Returns the bridge operator of a consensus address.\\n   */\\n  function _bridgeOperatorOf(address _consensusAddr) internal view virtual returns (address);\\n\\n  /**\\n   * @dev See `IValidatorInfo-setMaxValidatorNumber`\\n   */\\n  function _setMaxValidatorNumber(uint256 _number) internal {\\n    _maxValidatorNumber = _number;\\n    emit MaxValidatorNumberUpdated(_number);\\n  }\\n\\n  /**\\n   * @dev See `IValidatorInfo-setMaxPrioritizedValidatorNumber`\\n   */\\n  function _setMaxPrioritizedValidatorNumber(uint256 _number) internal {\\n    if (_number > _maxValidatorNumber) revert ErrInvalidMaxPrioritizedValidatorNumber();\\n    _maxPrioritizedValidatorNumber = _number;\\n    emit MaxPrioritizedValidatorNumberUpdated(_number);\\n  }\\n}\\n\",\"keccak256\":\"0x7182a866705a783a82df9aef8cc04bcf9ae1be09a42422859fd61143ace10272\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615f6b80620000f46000396000f3fe6080604052600436106103345760003560e01c8063605239a1116101ae578063605239a1146107bb57806365244ece146107d05780636611f843146107f0578063690b7536146108105780636aa1c2ef1461082557806372e468101461083a5780637593ff7114610842578063823a7b9c1461086257806387c891bd146108825780638d559c381461089757806396585fc2146108ab5780639b19dbfd146108cb5780639c8d98da146108e05780639dd373b9146109005780639e94b9ec14610920578063a0c3f2d214610935578063a3d545f514610955578063a66c0f7714610975578063a7c2f1191461098a578063ad295783146109aa578063b405aaf2146109ca578063b5e337de146109ea578063b7ab4db514610a0a578063ba77b06c14610a1f578063c3c8b5d614610a34578063c94aaa0214610a54578063cba44de914610a74578063d09f1ab414610a89578063d2cb215e14610a9e578063dd716ad314610abc578063e5125a1d14610adc578063edb194bb14610afc578063ee99205c14610b5e578063eeb629a814610b73578063f2811bcc14610b88578063facd743b14610ba857610343565b806303bbfb301461034b57806304d971ab1461038057806306040618146103a05780630f43a677146103c35780631104e528146103d957806311662dc2146103f95780631196ab661461043657806315b5ebde146104565780631b6e0a99146104765780631f628801146104a3578063217f35c2146104c357806323c65eb0146104d857806328bde1e1146104f85780632924de7114610525578063297a8fca146105455780632bcf3d151461055a5780632d784a981461057a5780632f78204c146105a75780633529214b146105c7578063367ec12b146105e95780633b3159b6146106095780634244d4c91461061d5780634493421e1461064a578063468c96ae1461066857806346fe93111461069f57806349096d26146106bf5780634d8df063146106d45780634de2b735146106f45780634ee4d72b146107145780634f2a693f1461072957806352091f17146107495780635248184a146107515780635511cde114610773578063562d5304146107915780635a08482d146107a657610343565b3661034357610341610bc8565b005b610341610bc8565b34801561035757600080fd5b5061036b6103663660046153d5565b610c2d565b60405190151581526020015b60405180910390f35b34801561038c57600080fd5b5061036b61039b3660046153f2565b610c4b565b3480156103ac57600080fd5b506103b5610c72565b604051908152602001610377565b3480156103cf57600080fd5b506103b560aa5481565b3480156103e557600080fd5b506103416103f436600461542b565b610c82565b34801561040557600080fd5b5061041961041436600461548f565b610f0d565b604080519315158452602084019290925290820152606001610377565b34801561044257600080fd5b506103416104513660046154bb565b610f90565b34801561046257600080fd5b5061034161047136600461548f565b610fd4565b34801561048257600080fd5b5061049661049136600461551f565b6110f0565b604051610377919061556a565b3480156104af57600080fd5b5061036b6104be3660046153d5565b6111ad565b3480156104cf57600080fd5b5061036b6111e7565b3480156104e457600080fd5b5061036b6104f336600461548f565b6111fc565b34801561050457600080fd5b506105186105133660046153d5565b611208565b6040516103779190615604565b34801561053157600080fd5b5061036b6105403660046153d5565b6112ab565b34801561055157600080fd5b506004546103b5565b34801561056657600080fd5b506103416105753660046153d5565b6112b7565b34801561058657600080fd5b5061059a6105953660046153d5565b611323565b6040516103779190615612565b3480156105b357600080fd5b506103416105c2366004615637565b6113b3565b3480156105d357600080fd5b506105dc6115cf565b6040516103779190615681565b3480156105f557600080fd5b506103416106043660046156a6565b6115de565b34801561061557600080fd5b5060686105dc565b34801561062957600080fd5b5061063d6106383660046157d5565b611769565b60405161037791906158b7565b34801561065657600080fd5b50606e546001600160a01b03166105dc565b34801561067457600080fd5b506106886106833660046154bb565b611820565b604080519215158352602083019190915201610377565b3480156106ab57600080fd5b506103416106ba3660046153d5565b61185e565b3480156106cb57600080fd5b5061063d6118ca565b3480156106e057600080fd5b506103416106ef3660046154bb565b6119b3565b34801561070057600080fd5b5061049661070f3660046158ca565b6119f4565b34801561072057600080fd5b5060e4546103b5565b34801561073557600080fd5b506103416107443660046154bb565b611aaf565b610341611af0565b34801561075d57600080fd5b50610766611eef565b604051610377919061590b565b34801561077f57600080fd5b5060a8546001600160a01b03166105dc565b34801561079d57600080fd5b506103b561201f565b3480156107b257600080fd5b506105dc612073565b3480156107c757600080fd5b506072546103b5565b3480156107dc57600080fd5b5061036b6107eb3660046153d5565b612082565b3480156107fc57600080fd5b5061034161080b3660046154bb565b6120b6565b34801561081c57600080fd5b5060e5546103b5565b34801561083157600080fd5b506001546103b5565b6103416120f7565b34801561084e57600080fd5b5061036b61085d3660046154bb565b612355565b34801561086e57600080fd5b5061034161087d3660046154bb565b612379565b34801561088e57600080fd5b506002546103b5565b3480156108a357600080fd5b5060666105dc565b3480156108b757600080fd5b506104196108c63660046153d5565b6123ba565b3480156108d757600080fd5b5061063d6123d6565b3480156108ec57600080fd5b506103416108fb3660046153d5565b6124c2565b34801561090c57600080fd5b5061034161091b3660046153d5565b61252e565b34801561092c57600080fd5b506103b561259a565b34801561094157600080fd5b5061036b6109503660046153d5565b6125ee565b34801561096157600080fd5b506103b56109703660046154bb565b61260b565b34801561098157600080fd5b5060e6546103b5565b34801561099657600080fd5b506103416109a536600461548f565b612616565b3480156109b657600080fd5b506103416109c53660046153d5565b612884565b3480156109d657600080fd5b5061036b6109e53660046153d5565b6128f0565b3480156109f657600080fd5b50610341610a053660046153d5565b612975565b348015610a1657600080fd5b5061063d6129e1565b348015610a2b57600080fd5b5061063d612a8e565b348015610a4057600080fd5b50610341610a4f3660046153f2565b612af0565b348015610a6057600080fd5b50610341610a6f3660046154bb565b612d73565b348015610a8057600080fd5b506076546103b5565b348015610a9557600080fd5b5060a9546103b5565b348015610aaa57600080fd5b50606f546001600160a01b03166105dc565b348015610ac857600080fd5b50610341610ad736600461548f565b612db4565b348015610ae857600080fd5b50610341610af736600461594d565b612e5e565b348015610b0857600080fd5b5061059a610b173660046153d5565b6040805180820190915260008082526020820152506001600160a01b0316600090815260776020908152604091829020825180840190935280548352600101549082015290565b348015610b6a57600080fd5b506105dc612f93565b348015610b7f57600080fd5b5060ad546103b5565b348015610b9457600080fd5b50610496610ba33660046158ca565b612fa2565b348015610bb457600080fd5b5061036b610bc33660046153d5565b61306b565b610bd06115cf565b6001600160a01b0316336001600160a01b031614158015610c0a5750610bf4612f93565b6001600160a01b0316336001600160a01b031614155b15610c2b5760405160016234baed60e01b0319815260040160405180910390fd5b565b600080610c38610c72565b9050610c4483826130a8565b9392505050565b6001600160a01b038281166000908152607560205260409020548116908216145b92915050565b6000610c7d60035490565b905090565b33610c8b612f93565b6001600160a01b031614610cb257604051638aaf4a0760e01b815260040160405180910390fd5b6073546072548110610cd757604051638616841b60e01b815260040160405180910390fd5b610ce0856125ee565b15610cfe57604051638ad9cdf960e01b815260040160405180910390fd5b612710821115610d2157604051631b8454a360e21b815260040160405180910390fd5b60005b607354811015610e1c5760006075600060738481548110610d4757610d47615982565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250811690891603610da3578760405163fc3d8c7560e01b8152600401610d9a9190615681565b60405180910390fd5b60028101546001600160a01b0390811690871603610dd65785604051632d33a7e760e11b8152600401610d9a9190615681565b60038101546001600160a01b0390811690861603610e0957846040516350e1263b60e01b8152600401610d9a9190615681565b5080610e14816159ae565b915050610d24565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b03199081168717909155607590935292819020805483168c87169081178255938101805484168617905560028101805484168b8816908117909155600382018054909416968a1696909617909255600482018790555190939192907fd690f592ed983cfbc05717fbcf06c4e10ae328432c309fe49246cf4a4be69fcd90610efc908990615681565b60405180910390a450505050505050565b6001600160a01b0382166000908152603a60205260408120548190819084811015610f4357600080600093509350935050610f89565b60019350610f5185826159c7565b610f5c9060016159da565b9250610f678561260b565b610f708261260b565b610f7a91906159c7565b610f859060016159da565b9150505b9250925092565b610f986130d3565b6001600160a01b0316336001600160a01b031614610fc85760405162461bcd60e51b8152600401610d9a906159ed565b610fd181613101565b50565b33610fdd612073565b6001600160a01b031614611004576040516328b9c24b60e21b815260040160405180910390fd5b6001600160a01b0382166000908152603c6020526040902054431161103e57816040516353e0424d60e01b8152600401610d9a9190615681565b6001600160a01b038216600081815260386020908152604080832085845282528083208054600160ff19918216811790925594845260378352818420868552909252909120805490921690915561109590436159c7565b6001600160a01b0383166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e906110e49084815260200190565b60405180910390a25050565b6060826001600160401b0381111561110a5761110a61576c565b604051908082528060200260200182016040528015611133578160200160208202803683370190505b50905060005b838110156111a55761117185858381811061115657611156615982565b905060200201602081019061116b91906153d5565b8461315f565b82828151811061118357611183615982565b911515602092830291909101909101528061119d816159ae565b915050611139565b509392505050565b6001600160a01b038116600090815260ac6020526040812054610c6c9060029060ff1660038111156111e1576111e1615a2f565b9061318a565b6000610c7d6111f5426131bd565b6003541090565b6000610c4483836131cc565b611210615384565b611219826125ee565b6112365760405163a64b34ad60e01b815260040160405180910390fd5b506001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015290565b6000610c6c82436111fc565b6112bf6130d3565b6001600160a01b0316336001600160a01b0316146112ef5760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b60000361131a57604051637bcd509160e01b815260040160405180910390fd5b610fd1816131ec565b604080518082018252600080825260209182018190526001600160a01b038416815260e88252829020825180840190935280548352600101549082018190526113ae5760405162461bcd60e51b815260206004820181905260248201527f436f6d6d6f6e53746f726167653a206e6f6e2d6578697374656e7420696e666f6044820152606401610d9a565b919050565b336113bc612073565b6001600160a01b0316146113e3576040516328b9c24b60e21b815260040160405180910390fd5b60006113ed610c72565b6001600160a01b03861660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e09091529190205491925061143b916159da565b60e4600082825461144c91906159da565b90915550506001600160a01b038516600090815260e06020908152604080832083905560e18252808320839055603a90915290205461148c908590613237565b6001600160a01b0386166000908152603a6020526040902055821561153c5760715460405163138ac02f60e11b81526000916001600160a01b031690632715805e906114de9089908890600401615a45565b6020604051808303816000875af11580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190615a5e565b90508060e4600082825461153591906159da565b9091555050505b8115611580576001600160a01b0385166000908152603c6020526040902054611566908590613237565b6001600160a01b0386166000908152603c60205260409020555b6001600160a01b0385166000818152603a6020526040808220549051849392600080516020615f16833981519152926115c0929091899160019190615a77565b60405180910390a35050505050565b606d546001600160a01b031690565b600054610100900460ff16158080156115fe5750600054600160ff909116105b806116185750303b158015611618575060005460ff166001145b61167b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d9a565b6000805460ff19166001179055801561169e576000805461ff0019166101001790555b6116a78d6131ec565b6116b08c61324e565b6116b98b613299565b6116c28a6132e4565b6116cb8861332f565b6116d48961337a565b6116dd876133c5565b6116e6866133fa565b6116ef8561342f565b6116f884613101565b6117028235613487565b61170f60208301356134bc565b6001839055801561175a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b606081516001600160401b038111156117845761178461576c565b6040519080825280602002602001820160405280156117ad578160200160208202803683370190505b50905060005b815181101561181a576117de8382815181106117d1576117d1615982565b60200260200101516134f1565b8282815181106117f0576117f0615982565b6001600160a01b039092166020928302919091019091015280611812816159ae565b9150506117b3565b50919050565b60008061182c4361260b565b83111580611847575060008381526005602052604090205415155b600093845260056020526040909320549293915050565b6118666130d3565b6001600160a01b0316336001600160a01b0316146118965760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b6000036118c157604051637bcd509160e01b815260040160405180910390fd5b610fd1816132e4565b606060aa546001600160401b038111156118e6576118e661576c565b60405190808252806020026020018201604052801561190f578160200160208202803683370190505b5090506000805b82518110156119ad57600081815260ab6020526040902054611940906001600160a01b0316612082565b1561199b57600081815260ab60205260409020546001600160a01b03168383611968816159ae565b94508151811061197a5761197a615982565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806119a5816159ae565b915050611916565b50815290565b6119bb6130d3565b6001600160a01b0316336001600160a01b0316146119eb5760405162461bcd60e51b8152600401610d9a906159ed565b610fd1816134bc565b6060816001600160401b03811115611a0e57611a0e61576c565b604051908082528060200260200182016040528015611a37578160200160208202803683370190505b50905060005b82811015611aa857611a74848483818110611a5a57611a5a615982565b9050602002016020810190611a6f91906153d5565b6134fc565b828281518110611a8657611a86615982565b9115156020928302919091019091015280611aa0816159ae565b915050611a3d565b5092915050565b611ab76130d3565b6001600160a01b0316336001600160a01b031614611ae75760405162461bcd60e51b8152600401610d9a906159ed565b610fd1816133fa565b334114611b10576040516309f358fd60e01b815260040160405180910390fd5b34336000611b1d82612082565b8015611b2f5750611b2d826134fc565b155b8015611b495750611b4782611b42610c72565b61315f565b155b606d54604051630634f5b960e01b8152821515600482015260016024820181905292935060009182916001600160a01b0390911690630634f5b9906044016060604051808303816000875af1158015611ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bca9190615a96565b92509250508060e26000828254611be191906159da565b90915550849050611c3f578560e46000828254611bfe91906159da565b92505081905550846001600160a01b0316600080516020615ef6833981519152876001604051611c2f929190615acd565b60405180910390a2505050505050565b846001600160a01b03167f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b18784604051611c7a929190615aff565b60405180910390a26000611c8c610c72565b90506000611c9a84896159da565b6001600160a01b03881660009081526038602090815260408083208684529091528120549192509060ff1615611da5576070546040805163631c8fd160e11b815290516000926001600160a01b03169163c6391fa29160048083019260809291908290030181865afa158015611d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d389190615b0d565b93505050506127108184611d4c9190615b43565b611d569190615b70565b91508160e46000828254611d6a91906159da565b92505081905550886001600160a01b0316600080516020615ef6833981519152836002604051611d9b929190615acd565b60405180910390a2505b611daf81836159c7565b91506000607160009054906101000a90046001600160a01b03166001600160a01b031663c673316c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2a9190615a5e565b6001600160a01b038a1660009081526075602052604081206004015491925090611e549083613508565b90506000612710611e658684615b43565b611e6f9190615b70565b6001600160a01b038c16600090815260e06020526040812080549293508392909190611e9c9084906159da565b9091555060009050611eae82876159c7565b6001600160a01b038d16600090815260e16020526040812080549293508392909190611edb9084906159da565b909155505050505050505050505050505050565b6073546060906001600160401b03811115611f0c57611f0c61576c565b604051908082528060200260200182016040528015611f4557816020015b611f32615384565b815260200190600190039081611f2a5790505b50905060005b815181101561201b576075600060738381548110611f6b57611f6b615982565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c08201528251839083908110611ffd57611ffd615982565b60200260200101819052508080612013906159ae565b915050611f4b565b5090565b6000805b60aa5481101561201b57600081815260ab602052604090205461204e906001600160a01b03166111ad565b15612061578161205d816159ae565b9250505b8061206b816159ae565b915050612023565b6070546001600160a01b031690565b6001600160a01b038116600090815260ac6020526040812054610c6c9060019060ff1660038111156111e1576111e1615a2f565b6120be6130d3565b6001600160a01b0316336001600160a01b0316146120ee5760405162461bcd60e51b8152600401610d9a906159ed565b610fd181613487565b334114612117576040516309f358fd60e01b815260040160405180910390fd5b61212043612355565b61213d57604051636c74eecf60e01b815260040160405180910390fd5b6121464361260b565b61215160025461260b565b1061216f57604051632458f64160e01b815260040160405180910390fd5b43600255600061217e426131bd565b9050600061218d826003541090565b905060006121996129e1565b9050606060006121a84361260b565b905060006121b78260016159da565b905060006121c3610c72565b905085156122ef576121d58186613517565b6000806121e28388613772565b915091506121f2838884846139a4565b6121fa613aad565b612202613c08565b607054604051631da0214360e21b81526001600160a01b0390911690637680850c90612234908a908790600401615b84565b600060405180830381600087803b15801561224e57600080fd5b505af1158015612262573d6000803e3d6000fd5b5050505061226f89613d37565b80519198509650156122de576070546040516303e1697b60e11b81526001600160a01b03909116906307c2d2f6906122ab9089906004016158b7565b600060405180830381600087803b1580156122c557600080fd5b505af11580156122d9573d6000803e3d6000fd5b505050505b6122e94360016159da565b60045550505b6122fa878387613ec2565b82817f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce78860405161232f911515815260200190565b60405180910390a350600090815260056020526040902085905550505060039190915550565b60006001805461236591906159c7565b6001546123729084615ba6565b1492915050565b6123816130d3565b6001600160a01b0316336001600160a01b0316146123b15760405162461bcd60e51b8152600401610d9a906159ed565b610fd1816133c5565b60008060006123c98443610f0d565b9250925092509193909250565b606060aa546001600160401b038111156123f2576123f261576c565b60405190808252806020026020018201604052801561241b578160200160208202803683370190505b5090506000805b82518110156119ad57600081815260ab602052604090205461244c906001600160a01b03166111ad565b156124b057600081815260ab6020526040902054612472906001600160a01b03166134f1565b838361247d816159ae565b94508151811061248f5761248f615982565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806124ba816159ae565b915050612422565b6124ca6130d3565b6001600160a01b0316336001600160a01b0316146124fa5760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b60000361252557604051637bcd509160e01b815260040160405180910390fd5b610fd18161332f565b6125366130d3565b6001600160a01b0316336001600160a01b0316146125665760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b60000361259157604051637bcd509160e01b815260040160405180910390fd5b610fd18161324e565b6000805b60aa5481101561201b57600081815260ab60205260409020546125c9906001600160a01b0316612082565b156125dc57816125d8816159ae565b9250505b806125e6816159ae565b91505061259e565b6001600160a01b0316600090815260746020526040902054151590565b6000610c6c82614287565b3361261f612f93565b6001600160a01b03161461264657604051638aaf4a0760e01b815260040160405180910390fd5b6001600160a01b038216600090815260e8602052604090206001810154156126815760405163057aab3160e31b815260040160405180910390fd5b600061268d83426159da565b6001600160a01b03851660009081526075602052604090209091506126b290826142a2565b6001600160a01b038085166000908152603b602052604080822084905560715460e554915163138ac02f60e11b815292931691632715805e916126fa91899190600401615a45565b6020604051808303816000875af1158015612719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273d9190615a5e565b9050801561283a57600060e6544261275591906159da565b60e78054600180820183556000929092527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a10180546001600160a01b0319166001600160a01b038a16179055838655850181905590506127b36130d3565b6001600160a01b0387811660008181526075602052604090819020600201549051630a2fae5760e41b81526004810192909252821660248201524260448201526064810184905291169063a2fae57090608401600060405180830381600087803b15801561282057600080fd5b505af1158015612834573d6000803e3d6000fd5b50505050505b846001600160a01b03167f77a1a819870c0f4d04c3ca4cc2881a0393136abc28bd651af50aedade94a27c48260405161287591815260200190565b60405180910390a25050505050565b61288c6130d3565b6001600160a01b0316336001600160a01b0316146128bc5760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b6000036128e757604051637bcd509160e01b815260040160405180910390fd5b610fd181613299565b6000805b60aa5481101561181a57600081815260ab60205260409020546001600160a01b038085169161292391166134f1565b6001600160a01b03161480156129555750600081815260ab6020526040902054612955906001600160a01b03166111ad565b15612963576001915061181a565b8061296d816159ae565b9150506128f4565b61297d6130d3565b6001600160a01b0316336001600160a01b0316146129ad5760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b6000036129d857604051637bcd509160e01b815260040160405180910390fd5b610fd18161337a565b606060aa546001600160401b038111156129fd576129fd61576c565b604051908082528060200260200182016040528015612a26578160200160208202803683370190505b50905060005b815181101561201b57600081815260ab602052604090205482516001600160a01b0390911690839083908110612a6457612a64615982565b6001600160a01b039092166020928302919091019091015280612a86816159ae565b915050612a2c565b60606073805480602002602001604051908101604052809291908181526020018280548015612ae657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ac8575b5050505050905090565b612af86130d3565b6001600160a01b0316336001600160a01b031614612b285760405162461bcd60e51b8152600401610d9a906159ed565b6001600160a01b038216600090815260e8602052604090206001015415612d6f5760e7548060005b82811015612ba957846001600160a01b031660e78281548110612b7557612b75615982565b6000918252602090912001546001600160a01b031603612b9757809150612ba9565b80612ba1816159ae565b915050612b50565b50818103612bb75750505050565b6001600160a01b038416600090815260e860205260409020548015612d6b576001600160a01b038516600090815260e860205260408120818155600190810191909155831115612c795760e7612c0e6001856159c7565b81548110612c1e57612c1e615982565b60009182526020909120015460e780546001600160a01b039092169184908110612c4a57612c4a615982565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480612c8a57612c8a615bba565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260e9905260409020805460ff19166001179055612cdc8482610dac61431e565b15612d2657836001600160a01b0316856001600160a01b03167f7229136a18186c71a86246c012af3bb1df6460ef163934bbdccd6368abdd41e4836040516115c091815260200190565b836001600160a01b0316856001600160a01b03167f3747d14eb72ad3e35cba9c3e00dab3b8d15b40cac6bdbd08402356e4f69f30a183476040516115c0929190615aff565b5050505b5050565b612d7b6130d3565b6001600160a01b0316336001600160a01b031614612dab5760405162461bcd60e51b8152600401610d9a906159ed565b610fd18161342f565b33612dbd612f93565b6001600160a01b031614612de457604051638aaf4a0760e01b815260040160405180910390fd5b612ded8261437e565b15612e0b5760405163030081e760e01b815260040160405180910390fd5b6001600160a01b0382166000908152607560205260409020600581015415612e465760405163fab9167360e01b815260040160405180910390fd5b612e5981612e5484426159da565b6142a2565b505050565b33612e67612f93565b6001600160a01b031614612e8e57604051638aaf4a0760e01b815260040160405180910390fd5b6001600160a01b03831660009081526077602052604090205415612ec557604051632f32dcdd60e11b815260040160405180910390fd5b612710811115612ee857604051631b8454a360e21b815260040160405180910390fd5b607654821015612f0b5760405163fa0ae69360e01b815260040160405180910390fd5b6001600160a01b03831660009081526077602052604081209083612f326201518042615b70565b612f3c91906159da565b612f499062015180615b43565b808355600183018490556040519091506001600160a01b038616907f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f21906128759084908790615aff565b6071546001600160a01b031690565b6060816001600160401b03811115612fbc57612fbc61576c565b604051908082528060200260200182016040528015612fe5578160200160208202803683370190505b5090506000612ff2610c72565b905060005b838110156130635761302f85858381811061301457613014615982565b905060200201602081019061302991906153d5565b8361315f565b83828151811061304157613041615982565b911515602092830291909101909101528061305b816159ae565b915050612ff7565b505092915050565b6001600160a01b038116600090815260ac60205260408120546130a19060ff16600381111561309c5761309c615a2f565b6143fb565b1592915050565b6001600160a01b03919091166000908152603960209081526040808320938352929052205460ff1690565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001811015613123576040516317b8970f60e01b815260040160405180910390fd5b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a25267906020015b60405180910390a150565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b600081600381111561319e5761319e615a2f565b8360038111156131b0576131b0615a2f565b1660ff1615159392505050565b6000610c6c6201518083615b70565b6001600160a01b03919091166000908152603a6020526040902054101590565b607080546001600160a01b0319166001600160a01b0383161790556040517faa5b07dd43aa44c69b70a6a2b9c3fcfed12b6e5f6323596ba7ac91035ab80a4f90613154908390615681565b6000818310156132475781610c44565b5090919050565b607180546001600160a01b0319166001600160a01b0383161790556040517f6397f5b135542bb3f477cb346cfab5abdec1251d08dc8f8d4efb4ffe122ea0bf90613154908390615681565b606d80546001600160a01b0319166001600160a01b0383161790556040517fc328090a37d855191ab58469296f98f87a851ca57d5cdfd1e9ac3c83e9e7096d90613154908390615681565b606f80546001600160a01b0319166001600160a01b0383161790556040517f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b90613154908390615681565b606e80546001600160a01b0319166001600160a01b0383161790556040517f034c8da497df28467c79ddadbba1cc3cdd41f510ea73faae271e6f16a611162190613154908390615681565b60a880546001600160a01b0319166001600160a01b0383161790556040517ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790613154908390615681565b60a98190556040518181527fb5464c05fd0e0f000c535850116cda2742ee1f7b34384cb920ad7b8e802138b590602001613154565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab490602001613154565b60a954811115613452576040516355408ce960e11b815260040160405180910390fd5b60ad8190556040518181527fa9588dc77416849bd922605ce4fc806712281ad8a8f32d4238d6c8cca548e15e90602001613154565b60e58190556040518181527f17a6c3eb965cdd7439982da25abf85be88f0f772ca33198f548e2f99fee0289a90602001613154565b60e68190556040518181527f0a50c66137118f386332efb949231ddd3946100dbf880003daca37ddd9e0662b90602001613154565b6000610c6c82614419565b6000610c6c82436131cc565b60008183106132475781610c44565b606e5460405163889998ef60e01b8152600481018490526001600160a01b0390911690600090829063889998ef90602401602060405180830381865afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135899190615a5e565b60405163033cdc2b60e31b8152600481018690529091506000906001600160a01b038416906319e6e15890602401602060405180830381865afa1580156135d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f89190615a5e565b9050600061360585611769565b90506000846001600160a01b031663f67e815288846040518363ffffffff1660e01b8152600401613637929190615bd0565b600060405180830381865afa158015613654573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261367c9190810190615bf1565b9050600080600080607060009054906101000a90046001600160a01b03166001600160a01b0316631079402a6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156136d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fb9190615b0d565b935093509350935060005b8a51811015613764576137528c8c838151811061372557613725615982565b602002602001015188848151811061373f5761373f615982565b60200260200101518b8d8a8a8a8a61443e565b8061375c816159ae565b915050613706565b505050505050505050505050565b6000606060008084516001600160401b038111156137925761379261576c565b6040519080825280602002602001820160405280156137bb578160200160208202803683370190505b50925060005b8551811015613994578581815181106137dc576137dc615982565b6020908102919091018101516001600160a01b038082166000908152607590935260409092206002015490945016915061381683886130a8565b613849576001600160a01b03808416600090815260756020526040902060030154613844918591168461485e565b61387b565b6001600160a01b038316600090815260e3602052604081205460e48054919290916138759084906159da565b90915550505b613884836134fc565b1580156138985750613896838861315f565b155b1561390c576001600160a01b038316600090815260e160205260409020546138c090866159da565b6001600160a01b038416600090815260e160205260409020548551919650908590839081106138f1576138f1615982565b602002602001018181525050613907838361493b565b613952565b6001600160a01b038316600090815260e1602090815260408083205460e09092529091205461393b91906159da565b60e4600082825461394c91906159da565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e39091528120558061398c816159ae565b9150506137c1565b5060e26000905550509250929050565b6071546001600160a01b03168215612d6b576139c08184614a03565b15613a685760405163566bce2360e11b81526001600160a01b0382169063acd79c46906139f590879086908a90600401615ca6565b600060405180830381600087803b158015613a0f57600080fd5b505af1158015613a23573d6000803e3d6000fd5b505050507f9e242ca1ef9dde96eb71ef8d19a3f0f6a619b63e4c0d3998771387103656d087838584604051613a5a93929190615cdc565b60405180910390a150613aa7565b7fe5668ec1bb2b6bb144a50f810e388da4b1d7d3fc05fcb9d588a1aac59d248f8983858447604051613a9d9493929190615d11565b60405180910390a1505b50505050565b60e754600080805b83831015613aa75760e78381548110613ad057613ad0615982565b60009182526020808320909101546001600160a01b031680835260e89091526040909120600181015491935091504210613bf657805460e48054600090613b189084906159da565b90915550506001600160a01b038216600090815260e860205260408120818155600101819055613b4785615d4e565b9450841115613bbe5760e78481548110613b6357613b63615982565b60009182526020909120015460e780546001600160a01b039092169185908110613b8f57613b8f615982565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480613bcf57613bcf615bba565b600082815260209020810160001990810180546001600160a01b0319169055019055613ab5565b82613c00816159ae565b935050613ab5565b60e4548015610fd1576000613c1b6115cf565b600060e481905560408051600481526024810182526020810180516001600160e01b03166359f778df60e01b179052905192935090916001600160a01b038416918591613c689190615d65565b60006040518083038185875af1925050503d8060008114613ca5576040519150601f19603f3d011682016040523d82523d6000602084013e613caa565b606091505b505090508015613cfc57816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc884604051613cef91815260200190565b60405180910390a2505050565b816001600160a01b03167fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b738447604051613cef929190615aff565b606080613d4383614a5f565b6071546040516391f8723f60e01b81529192506000916001600160a01b03909116906391f8723f90613d7a90607390600401615d94565b600060405180830381865afa158015613d97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dbf9190810190615bf1565b60a854604051632907e73160e11b81529192506000916001600160a01b039091169063520fce6290613df690607390600401615d94565b600060405180830381865afa158015613e13573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e3b9190810190615bf1565b90506000613eaa6073805480602002602001604051908101604052809291908181526020018280548015613e9857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e7a575b5050505050848460a95460ad54614f53565b9095509050613eba85828861501d565b505050915091565b606f546000906001600160a01b031663fdadda8183613ee24360016159da565b6040518363ffffffff1660e01b8152600401613eff929190615b84565b600060405180830381865afa158015613f1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f449190810190615dd8565b905060005b8251811015614200576000838281518110613f6657613f66615982565b6020908102919091018101516001600160a01b0381166000908152603b909252604082205490925042111590613f9b83612082565b90506000613fa8846134fc565b80613fc95750858581518110613fc057613fc0615982565b60200260200101515b80613fd15750825b15905081158015613fdf5750805b1561405a576001600160a01b038416600090815260ac602052604090205461401e9060019060ff16600381111561401857614018615a2f565b9061517b565b6001600160a01b038516600090815260ac60205260409020805460ff1916600183600381111561405057614050615a2f565b02179055506140dc565b818015614065575080155b156140dc576001600160a01b038416600090815260ac60205260409020546140a49060019060ff16600381111561409e5761409e615a2f565b906151b6565b6001600160a01b038516600090815260ac60205260409020805460ff191660018360038111156140d6576140d6615a2f565b02179055505b60006140e7856111ad565b90508315811580156140f65750805b1561416b576001600160a01b038616600090815260ac602052604090205461412f9060029060ff16600381111561401857614018615a2f565b6001600160a01b038716600090815260ac60205260409020805460ff1916600183600381111561416157614161615a2f565b02179055506141e7565b818015614176575080155b156141e7576001600160a01b038616600090815260ac60205260409020546141af9060029060ff16600381111561409e5761409e615a2f565b6001600160a01b038716600090815260ac60205260409020805460ff191660018360038111156141e1576141e1615a2f565b02179055505b50505050505080806141f8906159ae565b915050613f49565b5082847f283b50d76057d5f828df85bc87724c6af604e9b55c363a07c9faa2a2cd688b8261422c6118ca565b60405161423991906158b7565b60405180910390a382847f773d1888df530d69716b183a92450d45f97fba49f2a4bb34fae3b23da0e2cc6f61426c6123d6565b60405161427991906158b7565b60405180910390a350505050565b6000600154826142979190615b70565b610c6c9060016159da565b60018201546142b9906001600160a01b03166125ee565b6142d65760405163a64b34ad60e01b815260040160405180910390fd5b6005820181905560018201546040518281526001600160a01b03909116907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e7906020016110e4565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d806000811461436e576040519150601f19603f3d011682016040523d82523d6000602084013e614373565b606091505b509095945050505050565b60a85460405163107fbb4760e21b815260009182916001600160a01b03909116906341feed1c906143b3908690600401615681565b602060405180830381865afa1580156143d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143f49190615a5e565b1192915050565b600081600381111561440f5761440f615a2f565b60ff161592915050565b6001600160a01b03808216600090815260756020526040812060030154909116610c6c565b841580801561444b575086155b156144845761445861201f565b60e2546144659190615b70565b6001600160a01b038a16600090815260e3602052604090205550614853565b80156144905750614853565b8187116144b057858860e2546144a69190615b43565b6144659190615b70565b6000876144bf6127108b615b43565b6144c99190615b70565b905060006144d9826127106159c7565b90508581106146f4576001603960008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff0219169083151502179055506001603760008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff0219169083151502179055506145ad854361458f91906159da565b6001600160a01b038d166000908152603a6020526040902054613237565b6001600160a01b038c166000908152603a60205260409020556145f16145d386436159da565b6001600160a01b038d166000908152603c6020526040902054613237565b603c60008d6001600160a01b03166001600160a01b0316815260200190815260200160002081905550607060009054906101000a90046001600160a01b03166001600160a01b031663c008ce398c60028f6040518463ffffffff1660e01b815260040161466093929190615e66565b600060405180830381600087803b15801561467a57600080fd5b505af115801561468e573d6000803e3d6000fd5b505050508b8b6001600160a01b0316600080516020615f16833981519152603a60008f6001600160a01b03166001600160a01b031681526020019081526020016000205460006001806040516146e79493929190615a77565b60405180910390a3613764565b868110614817576001603960008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff021916908315150217905550607060009054906101000a90046001600160a01b03166001600160a01b031663c008ce398c60018f6040518463ffffffff1660e01b815260040161479093929190615e66565b600060405180830381600087803b1580156147aa57600080fd5b505af11580156147be573d6000803e3d6000fd5b505050508b8b6001600160a01b0316600080516020615f16833981519152603a60008f6001600160a01b03166001600160a01b031681526020019081526020016000205460008060016040516146e79493929190615a77565b871561376457878a60e25461482c9190615b43565b6148369190615b70565b6001600160a01b038c16600090815260e360205260409020555050505b505050505050505050565b6001600160a01b038316600090815260e360205260409020548015613aa75761488a8282610dac61431e565b156148ec57816001600160a01b0316836001600160a01b0316856001600160a01b03167f72a57dc38837a1cba7881b7b1a5594d9e6b65cec6a985b54e2cee3e89369691c846040516148de91815260200190565b60405180910390a450505050565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fd35d76d87d51ed89407fc7ceaaccf32cf72784b94530892ce33546540e141b7284476040516148de929190615aff565b6001600160a01b038216600090815260e060205260409020548015612e59576149678282610dac61431e565b156149be57816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec836040516149b191815260200190565b60405180910390a3505050565b816001600160a01b0316836001600160a01b03167f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e83476040516149b1929190615aff565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614a50576040519150601f19603f3d011682016040523d82523d6000602084013e614a55565b606091505b5090949350505050565b6071546040805163af24542960e01b815290516060926001600160a01b031691600091839163af2454299160048083019260209291908290030181865afa158015614aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ad29190615a5e565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b389190615a5e565b90506000836001600160a01b03166342ef3c3460736040518263ffffffff1660e01b8152600401614b699190615d94565b600060405180830381865afa158015614b86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614bae9190810190615bf1565b6073549091506000816001600160401b03811115614bce57614bce61576c565b604051908082528060200260200182016040528015614bf7578160200160208202803683370190505b50965060008060005b84831015614ea35760738381548110614c1b57614c1b615982565b60009182526020808320909101546001600160a01b031680835260759091526040909120600681015488519294509092501515908890889086908110614c6357614c63615982565b60200260200101511015614cbf5780614cba576000614c828a426159da565b600684018190556040518181529091506001600160a01b03851690600080516020615ed68339815191529060200160405180910390a2505b614d00565b8015614d00578160060160009055826001600160a01b0316600080516020615ed68339815191526000604051614cf791815260200190565b60405180910390a25b60008260050154600014158015614d1b575042836005015411155b80614d3e57506001600160a01b038416600090815260e9602052604090205460ff165b905060008360060154600014158015614d5b575042846006015411155b90508180614d665750805b15614dfc5788614d7589615d4e565b98508881518110614d8857614d88615982565b6020026020010151898781518110614da257614da2615982565b6020908102919091010152848d88614db9816159ae565b995081518110614dcb57614dcb615982565b60200260200101906001600160a01b031690816001600160a01b031681525050614df4856151f2565b505050614c00565b6001600160a01b0385166000908152607760205260409020548015801590614e245750428111155b15614e8d576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b86614e97816159ae565b97505050505050614c00565b505081159050614f48578087527f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c9187604051614edf91906158b7565b60405180910390a160405163e22d1c9d60e01b81526001600160a01b0387169063e22d1c9d90614f15908a908c90600401615b84565b600060405180830381600087803b158015614f2f57600080fd5b505af1158015614f43573d6000803e3d6000fd5b505050505b505050505050919050565b60606000806068905060008888888888604051602401614f77959493929190615e87565b60408051601f19818403018152919052602080820180516001600160e01b0316633bca0a8960e11b17905281518b519293506001929091600091614fba91615b43565b614fc59060406159da565b90506020840181888483895afa614fdb57600093505b503d614fe657600092505b6020870196508261500a57604051630fc2632160e01b815260040160405180910390fd5b8651955050505050509550959350505050565b815b60aa5481101561507b57600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b031916905580615073816159ae565b91505061501f565b5060005b828110156150c557600081815260ab60209081526040808320546001600160a01b0316835260ac9091529020805460ff19169055806150bd816159ae565b91505061507f565b5060005b828110156151435760008482815181106150e5576150e5615982565b6020908102919091018101516001600160a01b0316600081815260ac83526040808220805460ff1916600317905585825260ab9093529190912080546001600160a01b0319169091179055508061513b816159ae565b9150506150c9565b508160aa81905550807f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e84604051613cef91906158b7565b600081600381111561518f5761518f615a2f565b8360038111156151a1576151a1615a2f565b1760ff166003811115610c4457610c44615a2f565b60008160038111156151ca576151ca615a2f565b198360038111156151dd576151dd615a2f565b1660ff166003811115610c4457610c44615a2f565b6001600160a01b038116600090815260e960209081526040808320805460ff191690556074909152812054610fd19183919081900361522f575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b0319908116825560018083018054831690556002830180548316905560038301805490921690915560048201859055600582018590556006909101849055607483528184208490556077909252822082815581018290556073805490916152b9916159c7565b815481106152c9576152c9615982565b6000918252602090912001546001600160a01b0390811691508316811461534c576001600160a01b038116600090815260746020526040902082905560738054829190841990811061531d5761531d615982565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b607380548061535d5761535d615bba565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6001600160a01b0381168114610fd157600080fd5b6000602082840312156153e757600080fd5b8135610c44816153c0565b6000806040838503121561540557600080fd5b8235615410816153c0565b91506020830135615420816153c0565b809150509250929050565b600080600080600060a0868803121561544357600080fd5b853561544e816153c0565b9450602086013561545e816153c0565b9350604086013561546e816153c0565b9250606086013561547e816153c0565b949793965091946080013592915050565b600080604083850312156154a257600080fd5b82356154ad816153c0565b946020939093013593505050565b6000602082840312156154cd57600080fd5b5035919050565b60008083601f8401126154e657600080fd5b5081356001600160401b038111156154fd57600080fd5b6020830191508360208260051b850101111561551857600080fd5b9250929050565b60008060006040848603121561553457600080fd5b83356001600160401b0381111561554a57600080fd5b615556868287016154d4565b909790965060209590950135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156155a4578351151583529284019291840191600101615586565b50909695505050505050565b60018060a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60e08101610c6c82846155b0565b815181526020808301519082015260408101610c6c565b8015158114610fd157600080fd5b6000806000806080858703121561564d57600080fd5b8435615658816153c0565b93506020850135925060408501359150606085013561567681615629565b939692955090935050565b6001600160a01b0391909116815260200190565b8060408101831015610c6c57600080fd5b6000806000806000806000806000806000806101a08d8f0312156156c957600080fd5b8c356156d4816153c0565b9b5060208d01356156e4816153c0565b9a5060408d01356156f4816153c0565b995060608d0135615704816153c0565b985060808d0135615714816153c0565b975060a08d0135615724816153c0565b965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d0135915061575a8e6101608f01615695565b90509295989b509295989b509295989b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156157aa576157aa61576c565b604052919050565b60006001600160401b038211156157cb576157cb61576c565b5060051b60200190565b600060208083850312156157e857600080fd5b82356001600160401b038111156157fe57600080fd5b8301601f8101851361580f57600080fd5b803561582261581d826157b2565b615782565b81815260059190911b8201830190838101908783111561584157600080fd5b928401925b82841015615868578335615859816153c0565b82529284019290840190615846565b979650505050505050565b600081518084526020808501945080840160005b838110156158ac5781516001600160a01b031687529582019590820190600101615887565b509495945050505050565b602081526000610c446020830184615873565b600080602083850312156158dd57600080fd5b82356001600160401b038111156158f357600080fd5b6158ff858286016154d4565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156155a45761593a8385516155b0565b9284019260e09290920191600101615927565b60008060006060848603121561596257600080fd5b833561596d816153c0565b95602085013595506040909401359392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016159c0576159c0615998565b5060010190565b81810381811115610c6c57610c6c615998565b80820180821115610c6c57610c6c615998565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03929092168252602082015260400190565b600060208284031215615a7057600080fd5b5051919050565b9384526020840192909252151560408301521515606082015260800190565b600080600060608486031215615aab57600080fd5b8351615ab681615629565b602085015160409095015190969495509392505050565b8281526040810160038310615af257634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b918252602082015260400190565b60008060008060808587031215615b2357600080fd5b505082516020840151604085015160609095015191969095509092509050565b8082028115828204841417610c6c57610c6c615998565b634e487b7160e01b600052601260045260246000fd5b600082615b7f57615b7f615b5a565b500490565b604081526000615b976040830185615873565b90508260208301529392505050565b600082615bb557615bb5615b5a565b500690565b634e487b7160e01b600052603160045260246000fd5b828152604060208201526000615be96040830184615873565b949350505050565b60006020808385031215615c0457600080fd5b82516001600160401b03811115615c1a57600080fd5b8301601f81018513615c2b57600080fd5b8051615c3961581d826157b2565b81815260059190911b82018301908381019087831115615c5857600080fd5b928401925b8284101561586857835182529284019290840190615c5d565b600081518084526020808501945080840160005b838110156158ac57815187529582019590820190600101615c8a565b606081526000615cb96060830186615873565b8281036020840152615ccb8186615c76565b915050826040830152949350505050565b838152606060208201526000615cf56060830185615873565b8281036040840152615d078185615c76565b9695505050505050565b848152608060208201526000615d2a6080830186615873565b8281036040840152615d3c8186615c76565b91505082606083015295945050505050565b600081615d5d57615d5d615998565b506000190190565b6000825160005b81811015615d865760208186018101518583015201615d6c565b506000920191825250919050565b6020808252825482820181905260008481528281209092916040850190845b818110156155a45783546001600160a01b031683526001938401939285019201615db3565b60006020808385031215615deb57600080fd5b82516001600160401b03811115615e0157600080fd5b8301601f81018513615e1257600080fd5b8051615e2061581d826157b2565b81815260059190911b82018301908381019087831115615e3f57600080fd5b928401925b82841015615868578351615e5781615629565b82529284019290840190615e44565b6001600160a01b039390931683526020830191909152604082015260600190565b60a081526000615e9a60a0830188615873565b8281036020840152615eac8188615c76565b90508281036040840152615ec08187615c76565b6060840195909552505060800152939250505056fe88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342754042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68aa2646970667358221220c404751bdd0e38f9d7131910efc0fb8267dfc163279ad93e029aff6c6f812a0764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103345760003560e01c8063605239a1116101ae578063605239a1146107bb57806365244ece146107d05780636611f843146107f0578063690b7536146108105780636aa1c2ef1461082557806372e468101461083a5780637593ff7114610842578063823a7b9c1461086257806387c891bd146108825780638d559c381461089757806396585fc2146108ab5780639b19dbfd146108cb5780639c8d98da146108e05780639dd373b9146109005780639e94b9ec14610920578063a0c3f2d214610935578063a3d545f514610955578063a66c0f7714610975578063a7c2f1191461098a578063ad295783146109aa578063b405aaf2146109ca578063b5e337de146109ea578063b7ab4db514610a0a578063ba77b06c14610a1f578063c3c8b5d614610a34578063c94aaa0214610a54578063cba44de914610a74578063d09f1ab414610a89578063d2cb215e14610a9e578063dd716ad314610abc578063e5125a1d14610adc578063edb194bb14610afc578063ee99205c14610b5e578063eeb629a814610b73578063f2811bcc14610b88578063facd743b14610ba857610343565b806303bbfb301461034b57806304d971ab1461038057806306040618146103a05780630f43a677146103c35780631104e528146103d957806311662dc2146103f95780631196ab661461043657806315b5ebde146104565780631b6e0a99146104765780631f628801146104a3578063217f35c2146104c357806323c65eb0146104d857806328bde1e1146104f85780632924de7114610525578063297a8fca146105455780632bcf3d151461055a5780632d784a981461057a5780632f78204c146105a75780633529214b146105c7578063367ec12b146105e95780633b3159b6146106095780634244d4c91461061d5780634493421e1461064a578063468c96ae1461066857806346fe93111461069f57806349096d26146106bf5780634d8df063146106d45780634de2b735146106f45780634ee4d72b146107145780634f2a693f1461072957806352091f17146107495780635248184a146107515780635511cde114610773578063562d5304146107915780635a08482d146107a657610343565b3661034357610341610bc8565b005b610341610bc8565b34801561035757600080fd5b5061036b6103663660046153d5565b610c2d565b60405190151581526020015b60405180910390f35b34801561038c57600080fd5b5061036b61039b3660046153f2565b610c4b565b3480156103ac57600080fd5b506103b5610c72565b604051908152602001610377565b3480156103cf57600080fd5b506103b560aa5481565b3480156103e557600080fd5b506103416103f436600461542b565b610c82565b34801561040557600080fd5b5061041961041436600461548f565b610f0d565b604080519315158452602084019290925290820152606001610377565b34801561044257600080fd5b506103416104513660046154bb565b610f90565b34801561046257600080fd5b5061034161047136600461548f565b610fd4565b34801561048257600080fd5b5061049661049136600461551f565b6110f0565b604051610377919061556a565b3480156104af57600080fd5b5061036b6104be3660046153d5565b6111ad565b3480156104cf57600080fd5b5061036b6111e7565b3480156104e457600080fd5b5061036b6104f336600461548f565b6111fc565b34801561050457600080fd5b506105186105133660046153d5565b611208565b6040516103779190615604565b34801561053157600080fd5b5061036b6105403660046153d5565b6112ab565b34801561055157600080fd5b506004546103b5565b34801561056657600080fd5b506103416105753660046153d5565b6112b7565b34801561058657600080fd5b5061059a6105953660046153d5565b611323565b6040516103779190615612565b3480156105b357600080fd5b506103416105c2366004615637565b6113b3565b3480156105d357600080fd5b506105dc6115cf565b6040516103779190615681565b3480156105f557600080fd5b506103416106043660046156a6565b6115de565b34801561061557600080fd5b5060686105dc565b34801561062957600080fd5b5061063d6106383660046157d5565b611769565b60405161037791906158b7565b34801561065657600080fd5b50606e546001600160a01b03166105dc565b34801561067457600080fd5b506106886106833660046154bb565b611820565b604080519215158352602083019190915201610377565b3480156106ab57600080fd5b506103416106ba3660046153d5565b61185e565b3480156106cb57600080fd5b5061063d6118ca565b3480156106e057600080fd5b506103416106ef3660046154bb565b6119b3565b34801561070057600080fd5b5061049661070f3660046158ca565b6119f4565b34801561072057600080fd5b5060e4546103b5565b34801561073557600080fd5b506103416107443660046154bb565b611aaf565b610341611af0565b34801561075d57600080fd5b50610766611eef565b604051610377919061590b565b34801561077f57600080fd5b5060a8546001600160a01b03166105dc565b34801561079d57600080fd5b506103b561201f565b3480156107b257600080fd5b506105dc612073565b3480156107c757600080fd5b506072546103b5565b3480156107dc57600080fd5b5061036b6107eb3660046153d5565b612082565b3480156107fc57600080fd5b5061034161080b3660046154bb565b6120b6565b34801561081c57600080fd5b5060e5546103b5565b34801561083157600080fd5b506001546103b5565b6103416120f7565b34801561084e57600080fd5b5061036b61085d3660046154bb565b612355565b34801561086e57600080fd5b5061034161087d3660046154bb565b612379565b34801561088e57600080fd5b506002546103b5565b3480156108a357600080fd5b5060666105dc565b3480156108b757600080fd5b506104196108c63660046153d5565b6123ba565b3480156108d757600080fd5b5061063d6123d6565b3480156108ec57600080fd5b506103416108fb3660046153d5565b6124c2565b34801561090c57600080fd5b5061034161091b3660046153d5565b61252e565b34801561092c57600080fd5b506103b561259a565b34801561094157600080fd5b5061036b6109503660046153d5565b6125ee565b34801561096157600080fd5b506103b56109703660046154bb565b61260b565b34801561098157600080fd5b5060e6546103b5565b34801561099657600080fd5b506103416109a536600461548f565b612616565b3480156109b657600080fd5b506103416109c53660046153d5565b612884565b3480156109d657600080fd5b5061036b6109e53660046153d5565b6128f0565b3480156109f657600080fd5b50610341610a053660046153d5565b612975565b348015610a1657600080fd5b5061063d6129e1565b348015610a2b57600080fd5b5061063d612a8e565b348015610a4057600080fd5b50610341610a4f3660046153f2565b612af0565b348015610a6057600080fd5b50610341610a6f3660046154bb565b612d73565b348015610a8057600080fd5b506076546103b5565b348015610a9557600080fd5b5060a9546103b5565b348015610aaa57600080fd5b50606f546001600160a01b03166105dc565b348015610ac857600080fd5b50610341610ad736600461548f565b612db4565b348015610ae857600080fd5b50610341610af736600461594d565b612e5e565b348015610b0857600080fd5b5061059a610b173660046153d5565b6040805180820190915260008082526020820152506001600160a01b0316600090815260776020908152604091829020825180840190935280548352600101549082015290565b348015610b6a57600080fd5b506105dc612f93565b348015610b7f57600080fd5b5060ad546103b5565b348015610b9457600080fd5b50610496610ba33660046158ca565b612fa2565b348015610bb457600080fd5b5061036b610bc33660046153d5565b61306b565b610bd06115cf565b6001600160a01b0316336001600160a01b031614158015610c0a5750610bf4612f93565b6001600160a01b0316336001600160a01b031614155b15610c2b5760405160016234baed60e01b0319815260040160405180910390fd5b565b600080610c38610c72565b9050610c4483826130a8565b9392505050565b6001600160a01b038281166000908152607560205260409020548116908216145b92915050565b6000610c7d60035490565b905090565b33610c8b612f93565b6001600160a01b031614610cb257604051638aaf4a0760e01b815260040160405180910390fd5b6073546072548110610cd757604051638616841b60e01b815260040160405180910390fd5b610ce0856125ee565b15610cfe57604051638ad9cdf960e01b815260040160405180910390fd5b612710821115610d2157604051631b8454a360e21b815260040160405180910390fd5b60005b607354811015610e1c5760006075600060738481548110610d4757610d47615982565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250811690891603610da3578760405163fc3d8c7560e01b8152600401610d9a9190615681565b60405180910390fd5b60028101546001600160a01b0390811690871603610dd65785604051632d33a7e760e11b8152600401610d9a9190615681565b60038101546001600160a01b0390811690861603610e0957846040516350e1263b60e01b8152600401610d9a9190615681565b5080610e14816159ae565b915050610d24565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b03199081168717909155607590935292819020805483168c87169081178255938101805484168617905560028101805484168b8816908117909155600382018054909416968a1696909617909255600482018790555190939192907fd690f592ed983cfbc05717fbcf06c4e10ae328432c309fe49246cf4a4be69fcd90610efc908990615681565b60405180910390a450505050505050565b6001600160a01b0382166000908152603a60205260408120548190819084811015610f4357600080600093509350935050610f89565b60019350610f5185826159c7565b610f5c9060016159da565b9250610f678561260b565b610f708261260b565b610f7a91906159c7565b610f859060016159da565b9150505b9250925092565b610f986130d3565b6001600160a01b0316336001600160a01b031614610fc85760405162461bcd60e51b8152600401610d9a906159ed565b610fd181613101565b50565b33610fdd612073565b6001600160a01b031614611004576040516328b9c24b60e21b815260040160405180910390fd5b6001600160a01b0382166000908152603c6020526040902054431161103e57816040516353e0424d60e01b8152600401610d9a9190615681565b6001600160a01b038216600081815260386020908152604080832085845282528083208054600160ff19918216811790925594845260378352818420868552909252909120805490921690915561109590436159c7565b6001600160a01b0383166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e906110e49084815260200190565b60405180910390a25050565b6060826001600160401b0381111561110a5761110a61576c565b604051908082528060200260200182016040528015611133578160200160208202803683370190505b50905060005b838110156111a55761117185858381811061115657611156615982565b905060200201602081019061116b91906153d5565b8461315f565b82828151811061118357611183615982565b911515602092830291909101909101528061119d816159ae565b915050611139565b509392505050565b6001600160a01b038116600090815260ac6020526040812054610c6c9060029060ff1660038111156111e1576111e1615a2f565b9061318a565b6000610c7d6111f5426131bd565b6003541090565b6000610c4483836131cc565b611210615384565b611219826125ee565b6112365760405163a64b34ad60e01b815260040160405180910390fd5b506001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015290565b6000610c6c82436111fc565b6112bf6130d3565b6001600160a01b0316336001600160a01b0316146112ef5760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b60000361131a57604051637bcd509160e01b815260040160405180910390fd5b610fd1816131ec565b604080518082018252600080825260209182018190526001600160a01b038416815260e88252829020825180840190935280548352600101549082018190526113ae5760405162461bcd60e51b815260206004820181905260248201527f436f6d6d6f6e53746f726167653a206e6f6e2d6578697374656e7420696e666f6044820152606401610d9a565b919050565b336113bc612073565b6001600160a01b0316146113e3576040516328b9c24b60e21b815260040160405180910390fd5b60006113ed610c72565b6001600160a01b03861660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e09091529190205491925061143b916159da565b60e4600082825461144c91906159da565b90915550506001600160a01b038516600090815260e06020908152604080832083905560e18252808320839055603a90915290205461148c908590613237565b6001600160a01b0386166000908152603a6020526040902055821561153c5760715460405163138ac02f60e11b81526000916001600160a01b031690632715805e906114de9089908890600401615a45565b6020604051808303816000875af11580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190615a5e565b90508060e4600082825461153591906159da565b9091555050505b8115611580576001600160a01b0385166000908152603c6020526040902054611566908590613237565b6001600160a01b0386166000908152603c60205260409020555b6001600160a01b0385166000818152603a6020526040808220549051849392600080516020615f16833981519152926115c0929091899160019190615a77565b60405180910390a35050505050565b606d546001600160a01b031690565b600054610100900460ff16158080156115fe5750600054600160ff909116105b806116185750303b158015611618575060005460ff166001145b61167b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d9a565b6000805460ff19166001179055801561169e576000805461ff0019166101001790555b6116a78d6131ec565b6116b08c61324e565b6116b98b613299565b6116c28a6132e4565b6116cb8861332f565b6116d48961337a565b6116dd876133c5565b6116e6866133fa565b6116ef8561342f565b6116f884613101565b6117028235613487565b61170f60208301356134bc565b6001839055801561175a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b606081516001600160401b038111156117845761178461576c565b6040519080825280602002602001820160405280156117ad578160200160208202803683370190505b50905060005b815181101561181a576117de8382815181106117d1576117d1615982565b60200260200101516134f1565b8282815181106117f0576117f0615982565b6001600160a01b039092166020928302919091019091015280611812816159ae565b9150506117b3565b50919050565b60008061182c4361260b565b83111580611847575060008381526005602052604090205415155b600093845260056020526040909320549293915050565b6118666130d3565b6001600160a01b0316336001600160a01b0316146118965760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b6000036118c157604051637bcd509160e01b815260040160405180910390fd5b610fd1816132e4565b606060aa546001600160401b038111156118e6576118e661576c565b60405190808252806020026020018201604052801561190f578160200160208202803683370190505b5090506000805b82518110156119ad57600081815260ab6020526040902054611940906001600160a01b0316612082565b1561199b57600081815260ab60205260409020546001600160a01b03168383611968816159ae565b94508151811061197a5761197a615982565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806119a5816159ae565b915050611916565b50815290565b6119bb6130d3565b6001600160a01b0316336001600160a01b0316146119eb5760405162461bcd60e51b8152600401610d9a906159ed565b610fd1816134bc565b6060816001600160401b03811115611a0e57611a0e61576c565b604051908082528060200260200182016040528015611a37578160200160208202803683370190505b50905060005b82811015611aa857611a74848483818110611a5a57611a5a615982565b9050602002016020810190611a6f91906153d5565b6134fc565b828281518110611a8657611a86615982565b9115156020928302919091019091015280611aa0816159ae565b915050611a3d565b5092915050565b611ab76130d3565b6001600160a01b0316336001600160a01b031614611ae75760405162461bcd60e51b8152600401610d9a906159ed565b610fd1816133fa565b334114611b10576040516309f358fd60e01b815260040160405180910390fd5b34336000611b1d82612082565b8015611b2f5750611b2d826134fc565b155b8015611b495750611b4782611b42610c72565b61315f565b155b606d54604051630634f5b960e01b8152821515600482015260016024820181905292935060009182916001600160a01b0390911690630634f5b9906044016060604051808303816000875af1158015611ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bca9190615a96565b92509250508060e26000828254611be191906159da565b90915550849050611c3f578560e46000828254611bfe91906159da565b92505081905550846001600160a01b0316600080516020615ef6833981519152876001604051611c2f929190615acd565b60405180910390a2505050505050565b846001600160a01b03167f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b18784604051611c7a929190615aff565b60405180910390a26000611c8c610c72565b90506000611c9a84896159da565b6001600160a01b03881660009081526038602090815260408083208684529091528120549192509060ff1615611da5576070546040805163631c8fd160e11b815290516000926001600160a01b03169163c6391fa29160048083019260809291908290030181865afa158015611d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d389190615b0d565b93505050506127108184611d4c9190615b43565b611d569190615b70565b91508160e46000828254611d6a91906159da565b92505081905550886001600160a01b0316600080516020615ef6833981519152836002604051611d9b929190615acd565b60405180910390a2505b611daf81836159c7565b91506000607160009054906101000a90046001600160a01b03166001600160a01b031663c673316c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2a9190615a5e565b6001600160a01b038a1660009081526075602052604081206004015491925090611e549083613508565b90506000612710611e658684615b43565b611e6f9190615b70565b6001600160a01b038c16600090815260e06020526040812080549293508392909190611e9c9084906159da565b9091555060009050611eae82876159c7565b6001600160a01b038d16600090815260e16020526040812080549293508392909190611edb9084906159da565b909155505050505050505050505050505050565b6073546060906001600160401b03811115611f0c57611f0c61576c565b604051908082528060200260200182016040528015611f4557816020015b611f32615384565b815260200190600190039081611f2a5790505b50905060005b815181101561201b576075600060738381548110611f6b57611f6b615982565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c08201528251839083908110611ffd57611ffd615982565b60200260200101819052508080612013906159ae565b915050611f4b565b5090565b6000805b60aa5481101561201b57600081815260ab602052604090205461204e906001600160a01b03166111ad565b15612061578161205d816159ae565b9250505b8061206b816159ae565b915050612023565b6070546001600160a01b031690565b6001600160a01b038116600090815260ac6020526040812054610c6c9060019060ff1660038111156111e1576111e1615a2f565b6120be6130d3565b6001600160a01b0316336001600160a01b0316146120ee5760405162461bcd60e51b8152600401610d9a906159ed565b610fd181613487565b334114612117576040516309f358fd60e01b815260040160405180910390fd5b61212043612355565b61213d57604051636c74eecf60e01b815260040160405180910390fd5b6121464361260b565b61215160025461260b565b1061216f57604051632458f64160e01b815260040160405180910390fd5b43600255600061217e426131bd565b9050600061218d826003541090565b905060006121996129e1565b9050606060006121a84361260b565b905060006121b78260016159da565b905060006121c3610c72565b905085156122ef576121d58186613517565b6000806121e28388613772565b915091506121f2838884846139a4565b6121fa613aad565b612202613c08565b607054604051631da0214360e21b81526001600160a01b0390911690637680850c90612234908a908790600401615b84565b600060405180830381600087803b15801561224e57600080fd5b505af1158015612262573d6000803e3d6000fd5b5050505061226f89613d37565b80519198509650156122de576070546040516303e1697b60e11b81526001600160a01b03909116906307c2d2f6906122ab9089906004016158b7565b600060405180830381600087803b1580156122c557600080fd5b505af11580156122d9573d6000803e3d6000fd5b505050505b6122e94360016159da565b60045550505b6122fa878387613ec2565b82817f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce78860405161232f911515815260200190565b60405180910390a350600090815260056020526040902085905550505060039190915550565b60006001805461236591906159c7565b6001546123729084615ba6565b1492915050565b6123816130d3565b6001600160a01b0316336001600160a01b0316146123b15760405162461bcd60e51b8152600401610d9a906159ed565b610fd1816133c5565b60008060006123c98443610f0d565b9250925092509193909250565b606060aa546001600160401b038111156123f2576123f261576c565b60405190808252806020026020018201604052801561241b578160200160208202803683370190505b5090506000805b82518110156119ad57600081815260ab602052604090205461244c906001600160a01b03166111ad565b156124b057600081815260ab6020526040902054612472906001600160a01b03166134f1565b838361247d816159ae565b94508151811061248f5761248f615982565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806124ba816159ae565b915050612422565b6124ca6130d3565b6001600160a01b0316336001600160a01b0316146124fa5760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b60000361252557604051637bcd509160e01b815260040160405180910390fd5b610fd18161332f565b6125366130d3565b6001600160a01b0316336001600160a01b0316146125665760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b60000361259157604051637bcd509160e01b815260040160405180910390fd5b610fd18161324e565b6000805b60aa5481101561201b57600081815260ab60205260409020546125c9906001600160a01b0316612082565b156125dc57816125d8816159ae565b9250505b806125e6816159ae565b91505061259e565b6001600160a01b0316600090815260746020526040902054151590565b6000610c6c82614287565b3361261f612f93565b6001600160a01b03161461264657604051638aaf4a0760e01b815260040160405180910390fd5b6001600160a01b038216600090815260e8602052604090206001810154156126815760405163057aab3160e31b815260040160405180910390fd5b600061268d83426159da565b6001600160a01b03851660009081526075602052604090209091506126b290826142a2565b6001600160a01b038085166000908152603b602052604080822084905560715460e554915163138ac02f60e11b815292931691632715805e916126fa91899190600401615a45565b6020604051808303816000875af1158015612719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273d9190615a5e565b9050801561283a57600060e6544261275591906159da565b60e78054600180820183556000929092527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a10180546001600160a01b0319166001600160a01b038a16179055838655850181905590506127b36130d3565b6001600160a01b0387811660008181526075602052604090819020600201549051630a2fae5760e41b81526004810192909252821660248201524260448201526064810184905291169063a2fae57090608401600060405180830381600087803b15801561282057600080fd5b505af1158015612834573d6000803e3d6000fd5b50505050505b846001600160a01b03167f77a1a819870c0f4d04c3ca4cc2881a0393136abc28bd651af50aedade94a27c48260405161287591815260200190565b60405180910390a25050505050565b61288c6130d3565b6001600160a01b0316336001600160a01b0316146128bc5760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b6000036128e757604051637bcd509160e01b815260040160405180910390fd5b610fd181613299565b6000805b60aa5481101561181a57600081815260ab60205260409020546001600160a01b038085169161292391166134f1565b6001600160a01b03161480156129555750600081815260ab6020526040902054612955906001600160a01b03166111ad565b15612963576001915061181a565b8061296d816159ae565b9150506128f4565b61297d6130d3565b6001600160a01b0316336001600160a01b0316146129ad5760405162461bcd60e51b8152600401610d9a906159ed565b806001600160a01b03163b6000036129d857604051637bcd509160e01b815260040160405180910390fd5b610fd18161337a565b606060aa546001600160401b038111156129fd576129fd61576c565b604051908082528060200260200182016040528015612a26578160200160208202803683370190505b50905060005b815181101561201b57600081815260ab602052604090205482516001600160a01b0390911690839083908110612a6457612a64615982565b6001600160a01b039092166020928302919091019091015280612a86816159ae565b915050612a2c565b60606073805480602002602001604051908101604052809291908181526020018280548015612ae657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ac8575b5050505050905090565b612af86130d3565b6001600160a01b0316336001600160a01b031614612b285760405162461bcd60e51b8152600401610d9a906159ed565b6001600160a01b038216600090815260e8602052604090206001015415612d6f5760e7548060005b82811015612ba957846001600160a01b031660e78281548110612b7557612b75615982565b6000918252602090912001546001600160a01b031603612b9757809150612ba9565b80612ba1816159ae565b915050612b50565b50818103612bb75750505050565b6001600160a01b038416600090815260e860205260409020548015612d6b576001600160a01b038516600090815260e860205260408120818155600190810191909155831115612c795760e7612c0e6001856159c7565b81548110612c1e57612c1e615982565b60009182526020909120015460e780546001600160a01b039092169184908110612c4a57612c4a615982565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480612c8a57612c8a615bba565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260e9905260409020805460ff19166001179055612cdc8482610dac61431e565b15612d2657836001600160a01b0316856001600160a01b03167f7229136a18186c71a86246c012af3bb1df6460ef163934bbdccd6368abdd41e4836040516115c091815260200190565b836001600160a01b0316856001600160a01b03167f3747d14eb72ad3e35cba9c3e00dab3b8d15b40cac6bdbd08402356e4f69f30a183476040516115c0929190615aff565b5050505b5050565b612d7b6130d3565b6001600160a01b0316336001600160a01b031614612dab5760405162461bcd60e51b8152600401610d9a906159ed565b610fd18161342f565b33612dbd612f93565b6001600160a01b031614612de457604051638aaf4a0760e01b815260040160405180910390fd5b612ded8261437e565b15612e0b5760405163030081e760e01b815260040160405180910390fd5b6001600160a01b0382166000908152607560205260409020600581015415612e465760405163fab9167360e01b815260040160405180910390fd5b612e5981612e5484426159da565b6142a2565b505050565b33612e67612f93565b6001600160a01b031614612e8e57604051638aaf4a0760e01b815260040160405180910390fd5b6001600160a01b03831660009081526077602052604090205415612ec557604051632f32dcdd60e11b815260040160405180910390fd5b612710811115612ee857604051631b8454a360e21b815260040160405180910390fd5b607654821015612f0b5760405163fa0ae69360e01b815260040160405180910390fd5b6001600160a01b03831660009081526077602052604081209083612f326201518042615b70565b612f3c91906159da565b612f499062015180615b43565b808355600183018490556040519091506001600160a01b038616907f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f21906128759084908790615aff565b6071546001600160a01b031690565b6060816001600160401b03811115612fbc57612fbc61576c565b604051908082528060200260200182016040528015612fe5578160200160208202803683370190505b5090506000612ff2610c72565b905060005b838110156130635761302f85858381811061301457613014615982565b905060200201602081019061302991906153d5565b8361315f565b83828151811061304157613041615982565b911515602092830291909101909101528061305b816159ae565b915050612ff7565b505092915050565b6001600160a01b038116600090815260ac60205260408120546130a19060ff16600381111561309c5761309c615a2f565b6143fb565b1592915050565b6001600160a01b03919091166000908152603960209081526040808320938352929052205460ff1690565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001811015613123576040516317b8970f60e01b815260040160405180910390fd5b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a25267906020015b60405180910390a150565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b600081600381111561319e5761319e615a2f565b8360038111156131b0576131b0615a2f565b1660ff1615159392505050565b6000610c6c6201518083615b70565b6001600160a01b03919091166000908152603a6020526040902054101590565b607080546001600160a01b0319166001600160a01b0383161790556040517faa5b07dd43aa44c69b70a6a2b9c3fcfed12b6e5f6323596ba7ac91035ab80a4f90613154908390615681565b6000818310156132475781610c44565b5090919050565b607180546001600160a01b0319166001600160a01b0383161790556040517f6397f5b135542bb3f477cb346cfab5abdec1251d08dc8f8d4efb4ffe122ea0bf90613154908390615681565b606d80546001600160a01b0319166001600160a01b0383161790556040517fc328090a37d855191ab58469296f98f87a851ca57d5cdfd1e9ac3c83e9e7096d90613154908390615681565b606f80546001600160a01b0319166001600160a01b0383161790556040517f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b90613154908390615681565b606e80546001600160a01b0319166001600160a01b0383161790556040517f034c8da497df28467c79ddadbba1cc3cdd41f510ea73faae271e6f16a611162190613154908390615681565b60a880546001600160a01b0319166001600160a01b0383161790556040517ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790613154908390615681565b60a98190556040518181527fb5464c05fd0e0f000c535850116cda2742ee1f7b34384cb920ad7b8e802138b590602001613154565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab490602001613154565b60a954811115613452576040516355408ce960e11b815260040160405180910390fd5b60ad8190556040518181527fa9588dc77416849bd922605ce4fc806712281ad8a8f32d4238d6c8cca548e15e90602001613154565b60e58190556040518181527f17a6c3eb965cdd7439982da25abf85be88f0f772ca33198f548e2f99fee0289a90602001613154565b60e68190556040518181527f0a50c66137118f386332efb949231ddd3946100dbf880003daca37ddd9e0662b90602001613154565b6000610c6c82614419565b6000610c6c82436131cc565b60008183106132475781610c44565b606e5460405163889998ef60e01b8152600481018490526001600160a01b0390911690600090829063889998ef90602401602060405180830381865afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135899190615a5e565b60405163033cdc2b60e31b8152600481018690529091506000906001600160a01b038416906319e6e15890602401602060405180830381865afa1580156135d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f89190615a5e565b9050600061360585611769565b90506000846001600160a01b031663f67e815288846040518363ffffffff1660e01b8152600401613637929190615bd0565b600060405180830381865afa158015613654573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261367c9190810190615bf1565b9050600080600080607060009054906101000a90046001600160a01b03166001600160a01b0316631079402a6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156136d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fb9190615b0d565b935093509350935060005b8a51811015613764576137528c8c838151811061372557613725615982565b602002602001015188848151811061373f5761373f615982565b60200260200101518b8d8a8a8a8a61443e565b8061375c816159ae565b915050613706565b505050505050505050505050565b6000606060008084516001600160401b038111156137925761379261576c565b6040519080825280602002602001820160405280156137bb578160200160208202803683370190505b50925060005b8551811015613994578581815181106137dc576137dc615982565b6020908102919091018101516001600160a01b038082166000908152607590935260409092206002015490945016915061381683886130a8565b613849576001600160a01b03808416600090815260756020526040902060030154613844918591168461485e565b61387b565b6001600160a01b038316600090815260e3602052604081205460e48054919290916138759084906159da565b90915550505b613884836134fc565b1580156138985750613896838861315f565b155b1561390c576001600160a01b038316600090815260e160205260409020546138c090866159da565b6001600160a01b038416600090815260e160205260409020548551919650908590839081106138f1576138f1615982565b602002602001018181525050613907838361493b565b613952565b6001600160a01b038316600090815260e1602090815260408083205460e09092529091205461393b91906159da565b60e4600082825461394c91906159da565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e39091528120558061398c816159ae565b9150506137c1565b5060e26000905550509250929050565b6071546001600160a01b03168215612d6b576139c08184614a03565b15613a685760405163566bce2360e11b81526001600160a01b0382169063acd79c46906139f590879086908a90600401615ca6565b600060405180830381600087803b158015613a0f57600080fd5b505af1158015613a23573d6000803e3d6000fd5b505050507f9e242ca1ef9dde96eb71ef8d19a3f0f6a619b63e4c0d3998771387103656d087838584604051613a5a93929190615cdc565b60405180910390a150613aa7565b7fe5668ec1bb2b6bb144a50f810e388da4b1d7d3fc05fcb9d588a1aac59d248f8983858447604051613a9d9493929190615d11565b60405180910390a1505b50505050565b60e754600080805b83831015613aa75760e78381548110613ad057613ad0615982565b60009182526020808320909101546001600160a01b031680835260e89091526040909120600181015491935091504210613bf657805460e48054600090613b189084906159da565b90915550506001600160a01b038216600090815260e860205260408120818155600101819055613b4785615d4e565b9450841115613bbe5760e78481548110613b6357613b63615982565b60009182526020909120015460e780546001600160a01b039092169185908110613b8f57613b8f615982565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480613bcf57613bcf615bba565b600082815260209020810160001990810180546001600160a01b0319169055019055613ab5565b82613c00816159ae565b935050613ab5565b60e4548015610fd1576000613c1b6115cf565b600060e481905560408051600481526024810182526020810180516001600160e01b03166359f778df60e01b179052905192935090916001600160a01b038416918591613c689190615d65565b60006040518083038185875af1925050503d8060008114613ca5576040519150601f19603f3d011682016040523d82523d6000602084013e613caa565b606091505b505090508015613cfc57816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc884604051613cef91815260200190565b60405180910390a2505050565b816001600160a01b03167fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b738447604051613cef929190615aff565b606080613d4383614a5f565b6071546040516391f8723f60e01b81529192506000916001600160a01b03909116906391f8723f90613d7a90607390600401615d94565b600060405180830381865afa158015613d97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dbf9190810190615bf1565b60a854604051632907e73160e11b81529192506000916001600160a01b039091169063520fce6290613df690607390600401615d94565b600060405180830381865afa158015613e13573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e3b9190810190615bf1565b90506000613eaa6073805480602002602001604051908101604052809291908181526020018280548015613e9857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e7a575b5050505050848460a95460ad54614f53565b9095509050613eba85828861501d565b505050915091565b606f546000906001600160a01b031663fdadda8183613ee24360016159da565b6040518363ffffffff1660e01b8152600401613eff929190615b84565b600060405180830381865afa158015613f1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f449190810190615dd8565b905060005b8251811015614200576000838281518110613f6657613f66615982565b6020908102919091018101516001600160a01b0381166000908152603b909252604082205490925042111590613f9b83612082565b90506000613fa8846134fc565b80613fc95750858581518110613fc057613fc0615982565b60200260200101515b80613fd15750825b15905081158015613fdf5750805b1561405a576001600160a01b038416600090815260ac602052604090205461401e9060019060ff16600381111561401857614018615a2f565b9061517b565b6001600160a01b038516600090815260ac60205260409020805460ff1916600183600381111561405057614050615a2f565b02179055506140dc565b818015614065575080155b156140dc576001600160a01b038416600090815260ac60205260409020546140a49060019060ff16600381111561409e5761409e615a2f565b906151b6565b6001600160a01b038516600090815260ac60205260409020805460ff191660018360038111156140d6576140d6615a2f565b02179055505b60006140e7856111ad565b90508315811580156140f65750805b1561416b576001600160a01b038616600090815260ac602052604090205461412f9060029060ff16600381111561401857614018615a2f565b6001600160a01b038716600090815260ac60205260409020805460ff1916600183600381111561416157614161615a2f565b02179055506141e7565b818015614176575080155b156141e7576001600160a01b038616600090815260ac60205260409020546141af9060029060ff16600381111561409e5761409e615a2f565b6001600160a01b038716600090815260ac60205260409020805460ff191660018360038111156141e1576141e1615a2f565b02179055505b50505050505080806141f8906159ae565b915050613f49565b5082847f283b50d76057d5f828df85bc87724c6af604e9b55c363a07c9faa2a2cd688b8261422c6118ca565b60405161423991906158b7565b60405180910390a382847f773d1888df530d69716b183a92450d45f97fba49f2a4bb34fae3b23da0e2cc6f61426c6123d6565b60405161427991906158b7565b60405180910390a350505050565b6000600154826142979190615b70565b610c6c9060016159da565b60018201546142b9906001600160a01b03166125ee565b6142d65760405163a64b34ad60e01b815260040160405180910390fd5b6005820181905560018201546040518281526001600160a01b03909116907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e7906020016110e4565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d806000811461436e576040519150601f19603f3d011682016040523d82523d6000602084013e614373565b606091505b509095945050505050565b60a85460405163107fbb4760e21b815260009182916001600160a01b03909116906341feed1c906143b3908690600401615681565b602060405180830381865afa1580156143d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143f49190615a5e565b1192915050565b600081600381111561440f5761440f615a2f565b60ff161592915050565b6001600160a01b03808216600090815260756020526040812060030154909116610c6c565b841580801561444b575086155b156144845761445861201f565b60e2546144659190615b70565b6001600160a01b038a16600090815260e3602052604090205550614853565b80156144905750614853565b8187116144b057858860e2546144a69190615b43565b6144659190615b70565b6000876144bf6127108b615b43565b6144c99190615b70565b905060006144d9826127106159c7565b90508581106146f4576001603960008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff0219169083151502179055506001603760008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff0219169083151502179055506145ad854361458f91906159da565b6001600160a01b038d166000908152603a6020526040902054613237565b6001600160a01b038c166000908152603a60205260409020556145f16145d386436159da565b6001600160a01b038d166000908152603c6020526040902054613237565b603c60008d6001600160a01b03166001600160a01b0316815260200190815260200160002081905550607060009054906101000a90046001600160a01b03166001600160a01b031663c008ce398c60028f6040518463ffffffff1660e01b815260040161466093929190615e66565b600060405180830381600087803b15801561467a57600080fd5b505af115801561468e573d6000803e3d6000fd5b505050508b8b6001600160a01b0316600080516020615f16833981519152603a60008f6001600160a01b03166001600160a01b031681526020019081526020016000205460006001806040516146e79493929190615a77565b60405180910390a3613764565b868110614817576001603960008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060006101000a81548160ff021916908315150217905550607060009054906101000a90046001600160a01b03166001600160a01b031663c008ce398c60018f6040518463ffffffff1660e01b815260040161479093929190615e66565b600060405180830381600087803b1580156147aa57600080fd5b505af11580156147be573d6000803e3d6000fd5b505050508b8b6001600160a01b0316600080516020615f16833981519152603a60008f6001600160a01b03166001600160a01b031681526020019081526020016000205460008060016040516146e79493929190615a77565b871561376457878a60e25461482c9190615b43565b6148369190615b70565b6001600160a01b038c16600090815260e360205260409020555050505b505050505050505050565b6001600160a01b038316600090815260e360205260409020548015613aa75761488a8282610dac61431e565b156148ec57816001600160a01b0316836001600160a01b0316856001600160a01b03167f72a57dc38837a1cba7881b7b1a5594d9e6b65cec6a985b54e2cee3e89369691c846040516148de91815260200190565b60405180910390a450505050565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fd35d76d87d51ed89407fc7ceaaccf32cf72784b94530892ce33546540e141b7284476040516148de929190615aff565b6001600160a01b038216600090815260e060205260409020548015612e59576149678282610dac61431e565b156149be57816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec836040516149b191815260200190565b60405180910390a3505050565b816001600160a01b0316836001600160a01b03167f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e83476040516149b1929190615aff565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614a50576040519150601f19603f3d011682016040523d82523d6000602084013e614a55565b606091505b5090949350505050565b6071546040805163af24542960e01b815290516060926001600160a01b031691600091839163af2454299160048083019260209291908290030181865afa158015614aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ad29190615a5e565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b389190615a5e565b90506000836001600160a01b03166342ef3c3460736040518263ffffffff1660e01b8152600401614b699190615d94565b600060405180830381865afa158015614b86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614bae9190810190615bf1565b6073549091506000816001600160401b03811115614bce57614bce61576c565b604051908082528060200260200182016040528015614bf7578160200160208202803683370190505b50965060008060005b84831015614ea35760738381548110614c1b57614c1b615982565b60009182526020808320909101546001600160a01b031680835260759091526040909120600681015488519294509092501515908890889086908110614c6357614c63615982565b60200260200101511015614cbf5780614cba576000614c828a426159da565b600684018190556040518181529091506001600160a01b03851690600080516020615ed68339815191529060200160405180910390a2505b614d00565b8015614d00578160060160009055826001600160a01b0316600080516020615ed68339815191526000604051614cf791815260200190565b60405180910390a25b60008260050154600014158015614d1b575042836005015411155b80614d3e57506001600160a01b038416600090815260e9602052604090205460ff165b905060008360060154600014158015614d5b575042846006015411155b90508180614d665750805b15614dfc5788614d7589615d4e565b98508881518110614d8857614d88615982565b6020026020010151898781518110614da257614da2615982565b6020908102919091010152848d88614db9816159ae565b995081518110614dcb57614dcb615982565b60200260200101906001600160a01b031690816001600160a01b031681525050614df4856151f2565b505050614c00565b6001600160a01b0385166000908152607760205260409020548015801590614e245750428111155b15614e8d576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b86614e97816159ae565b97505050505050614c00565b505081159050614f48578087527f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c9187604051614edf91906158b7565b60405180910390a160405163e22d1c9d60e01b81526001600160a01b0387169063e22d1c9d90614f15908a908c90600401615b84565b600060405180830381600087803b158015614f2f57600080fd5b505af1158015614f43573d6000803e3d6000fd5b505050505b505050505050919050565b60606000806068905060008888888888604051602401614f77959493929190615e87565b60408051601f19818403018152919052602080820180516001600160e01b0316633bca0a8960e11b17905281518b519293506001929091600091614fba91615b43565b614fc59060406159da565b90506020840181888483895afa614fdb57600093505b503d614fe657600092505b6020870196508261500a57604051630fc2632160e01b815260040160405180910390fd5b8651955050505050509550959350505050565b815b60aa5481101561507b57600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b031916905580615073816159ae565b91505061501f565b5060005b828110156150c557600081815260ab60209081526040808320546001600160a01b0316835260ac9091529020805460ff19169055806150bd816159ae565b91505061507f565b5060005b828110156151435760008482815181106150e5576150e5615982565b6020908102919091018101516001600160a01b0316600081815260ac83526040808220805460ff1916600317905585825260ab9093529190912080546001600160a01b0319169091179055508061513b816159ae565b9150506150c9565b508160aa81905550807f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e84604051613cef91906158b7565b600081600381111561518f5761518f615a2f565b8360038111156151a1576151a1615a2f565b1760ff166003811115610c4457610c44615a2f565b60008160038111156151ca576151ca615a2f565b198360038111156151dd576151dd615a2f565b1660ff166003811115610c4457610c44615a2f565b6001600160a01b038116600090815260e960209081526040808320805460ff191690556074909152812054610fd19183919081900361522f575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b0319908116825560018083018054831690556002830180548316905560038301805490921690915560048201859055600582018590556006909101849055607483528184208490556077909252822082815581018290556073805490916152b9916159c7565b815481106152c9576152c9615982565b6000918252602090912001546001600160a01b0390811691508316811461534c576001600160a01b038116600090815260746020526040902082905560738054829190841990811061531d5761531d615982565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b607380548061535d5761535d615bba565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6001600160a01b0381168114610fd157600080fd5b6000602082840312156153e757600080fd5b8135610c44816153c0565b6000806040838503121561540557600080fd5b8235615410816153c0565b91506020830135615420816153c0565b809150509250929050565b600080600080600060a0868803121561544357600080fd5b853561544e816153c0565b9450602086013561545e816153c0565b9350604086013561546e816153c0565b9250606086013561547e816153c0565b949793965091946080013592915050565b600080604083850312156154a257600080fd5b82356154ad816153c0565b946020939093013593505050565b6000602082840312156154cd57600080fd5b5035919050565b60008083601f8401126154e657600080fd5b5081356001600160401b038111156154fd57600080fd5b6020830191508360208260051b850101111561551857600080fd5b9250929050565b60008060006040848603121561553457600080fd5b83356001600160401b0381111561554a57600080fd5b615556868287016154d4565b909790965060209590950135949350505050565b6020808252825182820181905260009190848201906040850190845b818110156155a4578351151583529284019291840191600101615586565b50909695505050505050565b60018060a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60e08101610c6c82846155b0565b815181526020808301519082015260408101610c6c565b8015158114610fd157600080fd5b6000806000806080858703121561564d57600080fd5b8435615658816153c0565b93506020850135925060408501359150606085013561567681615629565b939692955090935050565b6001600160a01b0391909116815260200190565b8060408101831015610c6c57600080fd5b6000806000806000806000806000806000806101a08d8f0312156156c957600080fd5b8c356156d4816153c0565b9b5060208d01356156e4816153c0565b9a5060408d01356156f4816153c0565b995060608d0135615704816153c0565b985060808d0135615714816153c0565b975060a08d0135615724816153c0565b965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d0135915061575a8e6101608f01615695565b90509295989b509295989b509295989b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156157aa576157aa61576c565b604052919050565b60006001600160401b038211156157cb576157cb61576c565b5060051b60200190565b600060208083850312156157e857600080fd5b82356001600160401b038111156157fe57600080fd5b8301601f8101851361580f57600080fd5b803561582261581d826157b2565b615782565b81815260059190911b8201830190838101908783111561584157600080fd5b928401925b82841015615868578335615859816153c0565b82529284019290840190615846565b979650505050505050565b600081518084526020808501945080840160005b838110156158ac5781516001600160a01b031687529582019590820190600101615887565b509495945050505050565b602081526000610c446020830184615873565b600080602083850312156158dd57600080fd5b82356001600160401b038111156158f357600080fd5b6158ff858286016154d4565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156155a45761593a8385516155b0565b9284019260e09290920191600101615927565b60008060006060848603121561596257600080fd5b833561596d816153c0565b95602085013595506040909401359392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016159c0576159c0615998565b5060010190565b81810381811115610c6c57610c6c615998565b80820180821115610c6c57610c6c615998565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03929092168252602082015260400190565b600060208284031215615a7057600080fd5b5051919050565b9384526020840192909252151560408301521515606082015260800190565b600080600060608486031215615aab57600080fd5b8351615ab681615629565b602085015160409095015190969495509392505050565b8281526040810160038310615af257634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b918252602082015260400190565b60008060008060808587031215615b2357600080fd5b505082516020840151604085015160609095015191969095509092509050565b8082028115828204841417610c6c57610c6c615998565b634e487b7160e01b600052601260045260246000fd5b600082615b7f57615b7f615b5a565b500490565b604081526000615b976040830185615873565b90508260208301529392505050565b600082615bb557615bb5615b5a565b500690565b634e487b7160e01b600052603160045260246000fd5b828152604060208201526000615be96040830184615873565b949350505050565b60006020808385031215615c0457600080fd5b82516001600160401b03811115615c1a57600080fd5b8301601f81018513615c2b57600080fd5b8051615c3961581d826157b2565b81815260059190911b82018301908381019087831115615c5857600080fd5b928401925b8284101561586857835182529284019290840190615c5d565b600081518084526020808501945080840160005b838110156158ac57815187529582019590820190600101615c8a565b606081526000615cb96060830186615873565b8281036020840152615ccb8186615c76565b915050826040830152949350505050565b838152606060208201526000615cf56060830185615873565b8281036040840152615d078185615c76565b9695505050505050565b848152608060208201526000615d2a6080830186615873565b8281036040840152615d3c8186615c76565b91505082606083015295945050505050565b600081615d5d57615d5d615998565b506000190190565b6000825160005b81811015615d865760208186018101518583015201615d6c565b506000920191825250919050565b6020808252825482820181905260008481528281209092916040850190845b818110156155a45783546001600160a01b031683526001938401939285019201615db3565b60006020808385031215615deb57600080fd5b82516001600160401b03811115615e0157600080fd5b8301601f81018513615e1257600080fd5b8051615e2061581d826157b2565b81815260059190911b82018301908381019087831115615e3f57600080fd5b928401925b82841015615868578351615e5781615629565b82529284019290840190615e44565b6001600160a01b039390931683526020830191909152604082015260600190565b60a081526000615e9a60a0830188615873565b8281036020840152615eac8188615c76565b90508281036040840152615ec08187615c76565b6060840195909552505060800152939250505056fe88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342754042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68aa2646970667358221220c404751bdd0e38f9d7131910efc0fb8267dfc163279ad93e029aff6c6f812a0764736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ErrAlreadyRequestedEmergencyExit()": [
        {
          "details": "Error of already requested emergency exit before."
        }
      ],
      "ErrAlreadyRequestedRevokingCandidate()": [
        {
          "details": "Error of already requested revoking candidate before."
        }
      ],
      "ErrAlreadyRequestedUpdatingCommissionRate()": [
        {
          "details": "Error of commission change schedule exists."
        }
      ],
      "ErrAlreadyWrappedEpoch()": [
        {
          "details": "Error of query for already wrapped up epoch"
        }
      ],
      "ErrAtEndOfEpochOnly()": [
        {
          "details": "Error of only allowed at the end of epoch"
        }
      ],
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrCallerMustBeBridgeTrackingContract()": [
        {
          "details": "Error of method caller must be bridge tracking contract."
        }
      ],
      "ErrCallerMustBeCoinbase()": [
        {
          "details": "Error of method caller must be coinbase"
        }
      ],
      "ErrCallerMustBeMaintenanceContract()": [
        {
          "details": "Error of method caller must be maintenance contract."
        }
      ],
      "ErrCallerMustBeRoninTrustedOrgContract()": [
        {
          "details": "Error of method caller must be Ronin trusted org contract."
        }
      ],
      "ErrCallerMustBeSlashIndicatorContract()": [
        {
          "details": "Error of method caller must be slash indicator contract."
        }
      ],
      "ErrCallerMustBeStakingContract()": [
        {
          "details": "Error of method caller must be staking contract."
        }
      ],
      "ErrCallerMustBeStakingVestingContract()": [
        {
          "details": "Error of method caller must be staking vesting contract."
        }
      ],
      "ErrCannotBailout(address)": [
        {
          "details": "Error of cannot bailout due to high tier slash."
        }
      ],
      "ErrExceedsMaxNumberOfCandidate()": [
        {
          "details": "Error of exceeding maximum number of candidates."
        }
      ],
      "ErrExistentBridgeOperator(address)": [
        {
          "details": "Error of bridge operator already exists."
        }
      ],
      "ErrExistentCandidate()": [
        {
          "details": "Error of querying for already existent candidate."
        }
      ],
      "ErrExistentCandidateAdmin(address)": [
        {
          "details": "Error of candidate admin already exists."
        }
      ],
      "ErrExistentTreasury(address)": [
        {
          "details": "Error of treasury already exists."
        }
      ],
      "ErrInsufficientBalance()": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInvalidCommissionRate()": [
        {
          "details": "Error of invalid commission rate."
        }
      ],
      "ErrInvalidEffectiveDaysOnwards()": [
        {
          "details": "Error of invalid effective days onwards."
        }
      ],
      "ErrInvalidMaxPrioritizedValidatorNumber()": [
        {
          "details": "Error of number of prioritized greater than number of max validators."
        }
      ],
      "ErrInvalidMinEffectiveDaysOnwards()": [
        {
          "details": "Error of invalid min effective days onwards."
        }
      ],
      "ErrNonExistentCandidate()": [
        {
          "details": "Error of querying for non-existent candidate."
        }
      ],
      "ErrRecipientRevert()": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrTrustedOrgCannotRenounce()": [
        {
          "details": "Error of trusted org cannot renounce."
        }
      ],
      "ErrZeroCodeContract()": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bridgeTrackingContract()": {
        "details": "Returns the bridge tracking contract."
      },
      "checkBridgeRewardDeprecated(address)": {
        "details": "Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the current period."
      },
      "checkJailed(address)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) during the current period."
      },
      "checkJailedAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) at a specific block."
      },
      "checkManyJailed(address[])": {
        "details": "Returns whether the validators are put in jail (cannot join the set of validators) during the current period."
      },
      "checkMiningRewardDeprecated(address[])": {
        "details": "Returns whether the incoming reward of the block producers are deprecated during the current period."
      },
      "checkMiningRewardDeprecatedAtPeriod(address[],uint256)": {
        "details": "Returns whether the incoming reward of the block producers are deprecated during a specific period."
      },
      "currentPeriod()": {
        "details": "Returns the period index from the current block."
      },
      "currentPeriodStartAtBlock()": {
        "details": "Returns the block number that the current period starts at."
      },
      "emergencyExitLockedAmount()": {
        "details": "Returns the amount of RON to lock from a consensus address."
      },
      "emergencyExpiryDuration()": {
        "details": "Returns the duration that an emergency request is expired and the fund will be recycled."
      },
      "epochEndingAt(uint256)": {
        "details": "Returns whether the epoch ending is at the block number `_block`."
      },
      "epochOf(uint256)": {
        "details": "Returns the epoch index from the block number."
      },
      "execApplyValidatorCandidate(address,address,address,address,uint256)": {
        "details": "Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`."
      },
      "execBailOut(address,uint256)": {
        "details": "Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`."
      },
      "execEmergencyExit(address,uint256)": {
        "details": "Fallback function of `IStaking-requestEmergencyExit`. Requirements: - The method caller is staking contract."
      },
      "execReleaseLockedFundForEmergencyExitRequest(address,address)": {
        "details": "Unlocks fund for emergency exit request. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked. Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock."
      },
      "execRequestRenounceCandidate(address,uint256)": {
        "details": "Requests to revoke a validator candidate in next `_secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`."
      },
      "execRequestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`."
      },
      "execSlash(address,uint256,uint256,bool)": {
        "details": "Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`."
      },
      "getBlockProducers()": {
        "details": "Returns the current block producer list."
      },
      "getBridgeOperators()": {
        "details": "Returns the current bridge operator list."
      },
      "getBridgeOperatorsOf(address[])": {
        "details": "Returns the bridge operator list corresponding to validator address list."
      },
      "getCandidateInfo(address)": {
        "details": "Returns the info of a candidate."
      },
      "getCandidateInfos()": {
        "details": "Returns all candidate info."
      },
      "getCommissionChangeSchedule(address)": {
        "details": "Returns the schedule of changing commission rate of a candidate address."
      },
      "getEmergencyExitInfo(address)": {
        "details": "Returns the emergency exit request."
      },
      "getJailedTimeLeft(address)": {
        "details": "Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail."
      },
      "getJailedTimeLeftAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail."
      },
      "getLastUpdatedBlock()": {
        "details": "Returns the block that validator set was updated."
      },
      "getValidatorCandidates()": {
        "details": "Returns the validator candidate."
      },
      "getValidators()": {
        "details": "Returns the current validator list."
      },
      "initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256[2])": {
        "details": "Initializes the contract storage."
      },
      "isBlockProducer(address)": {
        "details": "Returns whether the address is block producer or not."
      },
      "isBridgeOperator(address)": {
        "details": "Returns whether the address is bridge operator or not."
      },
      "isCandidateAdmin(address,address)": {
        "details": "Returns whether the address is the candidate admin."
      },
      "isOperatingBridge(address)": {
        "details": "Returns whether the consensus address is operating the bridge or not."
      },
      "isPeriodEnding()": {
        "details": "Returns whether the period ending at the current block number."
      },
      "isValidator(address)": {
        "details": "Returns whether the address is either a bridge operator or a block producer."
      },
      "isValidatorCandidate(address)": {
        "details": "Returns whether the address is a validator (candidate)."
      },
      "maintenanceContract()": {
        "details": "Returns the maintenance contract."
      },
      "maxPrioritizedValidatorNumber()": {
        "details": "Returns the number of reserved slots for prioritized validators."
      },
      "maxValidatorCandidate()": {
        "details": "Returns the maximum number of validator candidate."
      },
      "maxValidatorNumber()": {
        "details": "Returns the maximum number of validators in the epoch."
      },
      "minEffectiveDaysOnwards()": {
        "details": "Returns the minimum number of days to the effective date of commission rate change."
      },
      "numberOfBlocksInEpoch()": {
        "details": "Returns the number of blocks in a epoch."
      },
      "precompilePickValidatorSetAddress()": {
        "details": "Gets the address of the precompile of picking validator set"
      },
      "precompileSortValidatorsAddress()": {
        "details": "Gets the address of the precompile of sorting validators"
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeTrackingContract(address)": {
        "details": "Sets the bridge tracking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeTrackingContractUpdated`."
      },
      "setEmergencyExitLockedAmount(uint256)": {
        "details": "Sets the amount of RON to lock from a consensus address. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedAmountUpdated`."
      },
      "setEmergencyExpiryDuration(uint256)": {
        "details": "Sets the duration that an emergency request is expired and the fund will be recycled. Requirements: - The method caller is admin. Emits the event `EmergencyExpiryDurationUpdated`."
      },
      "setMaintenanceContract(address)": {
        "details": "Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`."
      },
      "setMaxPrioritizedValidatorNumber(uint256)": {
        "details": "Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`"
      },
      "setMaxValidatorCandidate(uint256)": {
        "details": "Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event."
      },
      "setMaxValidatorNumber(uint256)": {
        "details": "Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`"
      },
      "setMinEffectiveDaysOnwards(uint256)": {
        "details": "Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "setSlashIndicatorContract(address)": {
        "details": "Sets the slash indicator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `SlashIndicatorContractUpdated`."
      },
      "setStakingContract(address)": {
        "details": "Sets the staking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingContractUpdated`."
      },
      "setStakingVestingContract(address)": {
        "details": "Sets the staking vesting contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingVestingContractUpdated`."
      },
      "slashIndicatorContract()": {
        "details": "Returns the slash indicator contract."
      },
      "stakingContract()": {
        "details": "Returns the staking contract."
      },
      "stakingVestingContract()": {
        "details": "Returns the staking vesting contract."
      },
      "submitBlockReward()": {
        "details": "Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call."
      },
      "totalBlockProducers()": {
        "details": "Returns total numbers of the block producers."
      },
      "totalBridgeOperators()": {
        "details": "Returns total numbers of the bridge operators."
      },
      "totalDeprecatedReward()": {
        "details": "Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators"
      },
      "tryGetPeriodOfEpoch(uint256)": {
        "details": "Tries to get the period index from the epoch number."
      },
      "wrapUpEpoch()": {
        "details": "Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1373,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 32331,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_numberOfBlocksInEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 32334,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 32337,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 32340,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_currentPeriodStartAtBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 32345,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_periodOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 32350,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31937,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 31944,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardBailoutCutOffAtPeriod",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 31951,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 31956,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_blockProducerJailedBlock",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31961,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExitJailedTimestamp",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31966,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_cannotBailoutUntilBlock",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31971,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "61",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 6383,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_stakingVestingContract",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IStakingVesting)10285"
      },
      {
        "astId": 5876,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeTrackingContract",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(IBridgeTracking)9335"
      },
      {
        "astId": 5955,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maintenanceContract",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(IMaintenance)9709"
      },
      {
        "astId": 6225,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_slashIndicatorContract",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(ISlashIndicator)10863"
      },
      {
        "astId": 6304,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_stakingContract",
        "offset": 0,
        "slot": "113",
        "type": "t_contract(IStaking)11497"
      },
      {
        "astId": 28739,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorCandidate",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 28743,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidates",
        "offset": 0,
        "slot": "115",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 28748,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateIndex",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28754,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateInfo",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_address,t_struct(ValidatorCandidate)11514_storage)"
      },
      {
        "astId": 28757,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_minEffectiveDaysOnwards",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 28763,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateCommissionChangeSchedule",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_struct(CommissionSchedule)11519_storage)"
      },
      {
        "astId": 28768,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "120",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 6146,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "168",
        "type": "t_contract(IRoninTrustedOrganization)10196"
      },
      {
        "astId": 32510,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorNumber",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 32513,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "validatorCount",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 32518,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validators",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 32524,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorMap",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_enum(ValidatorFlag)12605)"
      },
      {
        "astId": 32527,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxPrioritizedValidatorNumber",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 32532,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "174",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 31813,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningReward",
        "offset": 0,
        "slot": "224",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31818,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_delegatingReward",
        "offset": 0,
        "slot": "225",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31821,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalBridgeReward",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 31826,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeOperatingReward",
        "offset": 0,
        "slot": "227",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31829,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalDeprecatedReward",
        "offset": 0,
        "slot": "228",
        "type": "t_uint256"
      },
      {
        "astId": 31832,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExitLockedAmount",
        "offset": 0,
        "slot": "229",
        "type": "t_uint256"
      },
      {
        "astId": 31835,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExpiryDuration",
        "offset": 0,
        "slot": "230",
        "type": "t_uint256"
      },
      {
        "astId": 31839,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lockedConsensusList",
        "offset": 0,
        "slot": "231",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 31845,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_exitInfo",
        "offset": 0,
        "slot": "232",
        "type": "t_mapping(t_address,t_struct(EmergencyExitInfo)12044_storage)"
      },
      {
        "astId": 31850,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lockedFundReleased",
        "offset": 0,
        "slot": "233",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 31855,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "234",
        "type": "t_array(t_uint256)44_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBridgeTracking)9335": {
        "encoding": "inplace",
        "label": "contract IBridgeTracking",
        "numberOfBytes": "20"
      },
      "t_contract(IMaintenance)9709": {
        "encoding": "inplace",
        "label": "contract IMaintenance",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)10196": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(ISlashIndicator)10863": {
        "encoding": "inplace",
        "label": "contract ISlashIndicator",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)11497": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingVesting)10285": {
        "encoding": "inplace",
        "label": "contract IStakingVesting",
        "numberOfBytes": "20"
      },
      "t_enum(ValidatorFlag)12605": {
        "encoding": "inplace",
        "label": "enum EnumFlags.ValidatorFlag",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ValidatorFlag)12605)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum EnumFlags.ValidatorFlag)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidatorFlag)12605"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(CommissionSchedule)11519_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.CommissionSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(CommissionSchedule)11519_storage"
      },
      "t_mapping(t_address,t_struct(EmergencyExitInfo)12044_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICommonInfo.EmergencyExitInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(EmergencyExitInfo)12044_storage"
      },
      "t_mapping(t_address,t_struct(ValidatorCandidate)11514_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.ValidatorCandidate)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorCandidate)11514_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CommissionSchedule)11519_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.CommissionSchedule",
        "members": [
          {
            "astId": 11516,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "effectiveTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11518,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(EmergencyExitInfo)12044_storage": {
        "encoding": "inplace",
        "label": "struct ICommonInfo.EmergencyExitInfo",
        "members": [
          {
            "astId": 12041,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12043,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "recyclingAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ValidatorCandidate)11514_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.ValidatorCandidate",
        "members": [
          {
            "astId": 11501,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11503,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "consensusAddr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11505,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "treasuryAddr",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 11507,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "bridgeOperatorAddr",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11509,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11511,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "revokingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11513,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "topupDeadline",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}