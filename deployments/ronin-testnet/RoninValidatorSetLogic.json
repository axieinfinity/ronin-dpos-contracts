{
  "address": "0xF7837778b6E180Df6696C8Fa986d62f8b6186752",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "BlockProducerSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinbaseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IRoninValidatorSet.BlockRewardDeprecatedType",
          "name": "deprecatedType",
          "type": "uint8"
        }
      ],
      "name": "BlockRewardDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coinbaseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "submittedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusAmount",
          "type": "uint256"
        }
      ],
      "name": "BlockRewardSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeTrackingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasuryAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        }
      ],
      "name": "CandidateGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revokedTimestamp",
          "type": "uint256"
        }
      ],
      "name": "CandidateRevokedTimestampUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "CandidatesRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "MaintenanceContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MaxPrioritizedValidatorNumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "MaxValidatorCandidateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "MaxValidatorNumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MiningRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "MiningRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "SlashIndicatorContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakingRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractBalance",
          "type": "uint256"
        }
      ],
      "name": "StakingRewardDistributionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakingVestingContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consensusAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jailedUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deductedStakingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "blockProducerRewardDeprecated",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "bridgeOperatorRewardDeprecated",
          "type": "bool"
        }
      ],
      "name": "ValidatorPunished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "consensusAddrs",
          "type": "address[]"
        }
      ],
      "name": "ValidatorSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "ValidatorUnjailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "periodNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "periodEnding",
          "type": "bool"
        }
      ],
      "name": "WrappedUpEpoch",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        }
      ],
      "name": "_isPeriodEnding",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeTrackingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addrList",
          "type": "address[]"
        }
      ],
      "name": "bulkJailed",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriodStartAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "epochEndingAt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "epochOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "execBailOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newJailedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashAmount",
          "type": "uint256"
        }
      ],
      "name": "execSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockProducers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_bridgeOperatorList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "getCandidateInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOperatorAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICandidateManager.ValidatorCandidate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidateInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddr",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOperatorAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "commissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICandidateManager.ValidatorCandidate[]",
          "name": "_list",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastUpdatedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorCandidates",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_validatorList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_commissionRate",
          "type": "uint256"
        }
      ],
      "name": "grantValidatorCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__slashIndicatorContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__stakingVestingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__maintenanceContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__bridgeTrackingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "__maxValidatorNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxValidatorCandidate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__maxPrioritizedValidatorNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__numberOfBlocksInEpoch",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isBlockProducer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeOperatorAddr",
          "type": "address"
        }
      ],
      "name": "isBridgeOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "isCandidateAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPeriodEnding",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidatorCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "jailed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "jailedAtBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "jailedTimeLeft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isJailed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockLeft_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLeft_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "jailedTimeLeftAtBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isJailed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "blockLeft_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLeft_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPrioritizedValidatorNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maximumPrioritizedValidatorNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidatorCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidatorNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maximumValidatorNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_blockProducers",
          "type": "address[]"
        }
      ],
      "name": "miningRewardDeprecated",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_blockProducers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "miningRewardDeprecatedAtPeriod",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_result",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfBlocksInEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompilePickValidatorSetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompileSortValidatorsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_secsLeft",
          "type": "uint256"
        }
      ],
      "name": "requestRevokeCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeTrackingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setMaintenanceContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setMaxPrioritizedValidatorNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setMaxValidatorCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxValidatorNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setSlashIndicatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setStakingVestingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slashIndicatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingVestingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submitBlockReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBlockProducers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgeOperators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapUpEpoch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1ef5c516cdfeda99ab2fbd244a5456dc0d419ea2e5708e5f06bdabd2368760c1",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xF7837778b6E180Df6696C8Fa986d62f8b6186752",
    "transactionIndex": 0,
    "gasUsed": "4256799",
    "logsBloom": "0x
    "blockHash": "0xefe90e9d1131c43c890513f3b969d2c7c934c25ea3802b66bf16a9c1bbf136d2",
    "transactionHash": "0x1ef5c516cdfeda99ab2fbd244a5456dc0d419ea2e5708e5f06bdabd2368760c1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11817724,
        "transactionHash": "0x1ef5c516cdfeda99ab2fbd244a5456dc0d419ea2e5708e5f06bdabd2368760c1",
        "address": "0xF7837778b6E180Df6696C8Fa986d62f8b6186752",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xefe90e9d1131c43c890513f3b969d2c7c934c25ea3802b66bf16a9c1bbf136d2"
      }
    ],
    "blockNumber": 11817724,
    "cumulativeGasUsed": "4256799",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d53902dd90cd91eebd679fc038e76a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"BlockProducerSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinbaseAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IRoninValidatorSet.BlockRewardDeprecatedType\",\"name\":\"deprecatedType\",\"type\":\"uint8\"}],\"name\":\"BlockRewardDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coinbaseAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submittedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"BlockRewardSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeTrackingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"CandidateGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokedTimestamp\",\"type\":\"uint256\"}],\"name\":\"CandidateRevokedTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"CandidatesRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MaintenanceContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxPrioritizedValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorCandidateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SlashIndicatorContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingVestingContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deductedStakingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blockProducerRewardDeprecated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bridgeOperatorRewardDeprecated\",\"type\":\"bool\"}],\"name\":\"ValidatorPunished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"ValidatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ValidatorUnjailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"periodEnding\",\"type\":\"bool\"}],\"name\":\"WrappedUpEpoch\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"_isPeriodEnding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeTrackingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrList\",\"type\":\"address[]\"}],\"name\":\"bulkJailed\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodStartAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochEndingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"execBailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newJailedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"}],\"name\":\"execSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockProducers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_bridgeOperatorList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getCandidateInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCandidateInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate[]\",\"name\":\"_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_validatorList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"grantValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__slashIndicatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingVestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__bridgeTrackingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorCandidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxPrioritizedValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__numberOfBlocksInEpoch\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isBlockProducer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeOperatorAddr\",\"type\":\"address\"}],\"name\":\"isBridgeOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isCandidateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPeriodEnding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidatorCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"jailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"jailedAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"jailedTimeLeft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"jailedTimeLeftAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrioritizedValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumPrioritizedValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blockProducers\",\"type\":\"address[]\"}],\"name\":\"miningRewardDeprecated\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blockProducers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"miningRewardDeprecatedAtPeriod\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_result\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompilePickValidatorSetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileSortValidatorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secsLeft\",\"type\":\"uint256\"}],\"name\":\"requestRevokeCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeTrackingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaintenanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxPrioritizedValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setSlashIndicatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakingVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashIndicatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingVestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitBlockReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockProducers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgeOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapUpEpoch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_isPeriodEnding(uint256)\":{\"details\":\"See {IRoninValidatorSet-isPeriodEnding}\"},\"bridgeTrackingContract()\":{\"details\":\"Returns the bridge tracking contract.\"},\"bulkJailed(address[])\":{\"details\":\"Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\"},\"currentPeriod()\":{\"details\":\"Returns the period index from the current block.\"},\"currentPeriodStartAtBlock()\":{\"details\":\"Returns the block number that the current period starts at.\"},\"epochEndingAt(uint256)\":{\"details\":\"Returns whether the epoch ending is at the block number `_block`.\"},\"epochOf(uint256)\":{\"details\":\"Returns the epoch index from the block number.\"},\"execBailOut(address,uint256)\":{\"details\":\"Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`.\"},\"execSlash(address,uint256,uint256)\":{\"details\":\"Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`.\"},\"getBlockProducers()\":{\"details\":\"Returns the current block producer list.\"},\"getBridgeOperators()\":{\"details\":\"Returns the current bridge operator list.\"},\"getCandidateInfo(address)\":{\"details\":\"Returns the info of a candidate.\"},\"getCandidateInfos()\":{\"details\":\"Returns all candidate info.\"},\"getLastUpdatedBlock()\":{\"details\":\"Returns the block that validator set was updated.\"},\"getValidatorCandidates()\":{\"details\":\"Returns the validator candidate.\"},\"getValidators()\":{\"details\":\"Returns the current validator list.\"},\"grantValidatorCandidate(address,address,address,address,uint256)\":{\"details\":\"Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`.\"},\"initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"isBlockProducer(address)\":{\"details\":\"Returns whether the address is block producer or not.\"},\"isBridgeOperator(address)\":{\"details\":\"Returns whether the address is bridge operator or not.\"},\"isCandidateAdmin(address,address)\":{\"details\":\"Returns whether the address is the candidate admin.\"},\"isPeriodEnding()\":{\"details\":\"Returns whether the period ending at the current block number.\"},\"isValidator(address)\":{\"details\":\"Returns whether the address is either a bridge operator or a block producer.\"},\"isValidatorCandidate(address)\":{\"details\":\"Returns whether the address is a validator (candidate).\"},\"jailed(address)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\"},\"jailedAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\"},\"jailedTimeLeft(address)\":{\"details\":\"Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\"},\"jailedTimeLeftAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\"},\"maintenanceContract()\":{\"details\":\"Returns the maintenance contract.\"},\"maxPrioritizedValidatorNumber()\":{\"details\":\"Returns the number of reserved slots for prioritized validators\"},\"maxValidatorCandidate()\":{\"details\":\"Returns the maximum number of validator candidate.\"},\"maxValidatorNumber()\":{\"details\":\"Returns the maximum number of validators in the epoch\"},\"miningRewardDeprecated(address[])\":{\"details\":\"Returns whether the incoming reward of the block producers are deprecated during the current period.\"},\"miningRewardDeprecatedAtPeriod(address[],uint256)\":{\"details\":\"Returns whether the incoming reward of the block producers are deprecated during a specific period.\"},\"numberOfBlocksInEpoch()\":{\"details\":\"Returns the number of blocks in a epoch.\"},\"precompilePickValidatorSetAddress()\":{\"details\":\"Gets the address of the precompile of picking validator set\"},\"precompileSortValidatorsAddress()\":{\"details\":\"Gets the address of the precompile of sorting validators\"},\"requestRevokeCandidate(address,uint256)\":{\"details\":\"Requests to revoke a validator candidate in next `_secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokedTimestampUpdated`.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeTrackingContract(address)\":{\"details\":\"Sets the bridge tracking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeTrackingContractUpdated`.\"},\"setMaintenanceContract(address)\":{\"details\":\"Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`.\"},\"setMaxPrioritizedValidatorNumber(uint256)\":{\"details\":\"Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`\"},\"setMaxValidatorCandidate(uint256)\":{\"details\":\"Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event.\"},\"setMaxValidatorNumber(uint256)\":{\"details\":\"Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"setSlashIndicatorContract(address)\":{\"details\":\"Sets the slash indicator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `SlashIndicatorContractUpdated`.\"},\"setStakingContract(address)\":{\"details\":\"Sets the staking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingContractUpdated`.\"},\"setStakingVestingContract(address)\":{\"details\":\"Sets the staking vesting contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingVestingContractUpdated`.\"},\"slashIndicatorContract()\":{\"details\":\"Returns the slash indicator contract.\"},\"stakingContract()\":{\"details\":\"Returns the staking contract.\"},\"stakingVestingContract()\":{\"details\":\"Returns the staking vesting contract.\"},\"submitBlockReward()\":{\"details\":\"Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call.\"},\"totalBlockProducers()\":{\"details\":\"Returns total numbers of the block producers.\"},\"totalBridgeOperators()\":{\"details\":\"Returns total numbers of the bridge operators.\"},\"wrapUpEpoch()\":{\"details\":\"Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`.\"}},\"stateVariables\":{\"_bridgeOperatingReward\":{\"details\":\"Mapping from consensus address => pending reward for being bridge operator\"},\"_bridgeRewardDeprecatedAtPeriod\":{\"details\":\"Mapping from consensus address => period number => block operator has no pending reward\"},\"_currentPeriodStartAtBlock\":{\"details\":\"The starting block of the last updated period\"},\"_delegatingReward\":{\"details\":\"Mapping from consensus address => pending reward from delegating\"},\"_jailedUntil\":{\"details\":\"Mapping from consensus address => the last block that the validator is jailed\"},\"_lastUpdatedBlock\":{\"details\":\"The last updated block\"},\"_lastUpdatedPeriod\":{\"details\":\"The last updated period\"},\"_maxPrioritizedValidatorNumber\":{\"details\":\"The number of slot that is reserved for prioritized validators\"},\"_maxValidatorNumber\":{\"details\":\"The maximum number of validator.\"},\"_miningReward\":{\"details\":\"Mapping from consensus address => pending reward from producing block\"},\"_miningRewardBailoutCutOffAtPeriod\":{\"details\":\"Mapping from consensus address => period number => whether the block producer get cut off reward, due to bailout\"},\"_miningRewardDeprecatedAtPeriod\":{\"details\":\"Mapping from consensus address => period number => block producer has no pending reward\"},\"_numberOfBlocksInEpoch\":{\"details\":\"The number of blocks in a epoch\"},\"_periodLength\":{\"details\":\"Length of period in seconds\"},\"_totalBridgeReward\":{\"details\":\"The total reward for bridge operators\"},\"_validatorMap\":{\"details\":\"Mapping from address => flag indicating the validator ability: producing block, operating bridge\"},\"_validators\":{\"details\":\"Mapping from validator index => validator address\"},\"validatorCount\":{\"details\":\"The total of validators\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"totalBridgeOperators()\":{\"notice\":\"Notice: A validator is always a bride operator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/validator/RoninValidatorSet.sol\":\"RoninValidatorSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable _recipient, uint256 _amount) internal {\\n    require(_sendRON(_recipient, _amount), \\\"RONTransfer: unable to transfer value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Send `_amount` RON to the address `_recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    require(address(this).balance >= _amount, \\\"RONTransfer: insufficient balance\\\");\\n    return _unsafeSendRON(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `_amount` RON to the address `_recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable _recipient, uint256 _amount) internal returns (bool _success) {\\n    (_success, ) = _recipient.call{ value: _amount }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xd2d20123d75f4d4ca6441a791a3eb1b546b5c8652119ffc8406a11c8ed16529e\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeTrackingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeTrackingContract.sol\\\";\\nimport \\\"../../interfaces/IBridgeTracking.sol\\\";\\n\\ncontract HasBridgeTrackingContract is IHasBridgeTrackingContract, HasProxyAdmin {\\n  IBridgeTracking internal _bridgeTrackingContract;\\n\\n  modifier onlyBridgeTrackingContract() {\\n    require(\\n      bridgeTrackingContract() == msg.sender,\\n      \\\"HasBridgeTrackingContract: method caller must be bridge tracking contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeTrackingContract\\n   */\\n  function bridgeTrackingContract() public view override returns (address) {\\n    return address(_bridgeTrackingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeTrackingContract\\n   */\\n  function setBridgeTrackingContract(address _addr) external virtual override onlyAdmin {\\n    _setBridgeTrackingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge tracking contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeTrackingContractUpdated`.\\n   *\\n   */\\n  function _setBridgeTrackingContract(address _addr) internal {\\n    _bridgeTrackingContract = IBridgeTracking(_addr);\\n    emit BridgeTrackingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x3cd1e37ef24bc7ff8b07235c5f06b6a0b372f56fd255e2f830733904adb89a4d\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasMaintenanceContract.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\n\\ncontract HasMaintenanceContract is IHasMaintenanceContract, HasProxyAdmin {\\n  IMaintenance internal _maintenanceContract;\\n\\n  modifier onlyMaintenanceContract() {\\n    require(\\n      maintenanceContract() == msg.sender,\\n      \\\"HasMaintenanceContract: method caller must be scheduled maintenance contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function maintenanceContract() public view override returns (address) {\\n    return address(_maintenanceContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function setMaintenanceContract(address _addr) external override onlyAdmin {\\n    _setMaintenanceContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the scheduled maintenance contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function _setMaintenanceContract(address _addr) internal {\\n    _maintenanceContract = IMaintenance(_addr);\\n    emit MaintenanceContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xc8f084215f6de4f9ec7c4a1205a2308b858c81c9336ccb09a9037c301373617f\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    require(\\n      roninTrustedOrganizationContract() == msg.sender,\\n      \\\"HasRoninTrustedOrganizationContract: method caller must be ronin trusted organization contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x0a79acbb2439826b8a28f562026b7e5be6b857c78bfdd130a8c4ebc47f777cc6\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasSlashIndicatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasSlashIndicatorContract.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\n\\ncontract HasSlashIndicatorContract is IHasSlashIndicatorContract, HasProxyAdmin {\\n  ISlashIndicator internal _slashIndicatorContract;\\n\\n  modifier onlySlashIndicatorContract() {\\n    require(\\n      slashIndicatorContract() == msg.sender,\\n      \\\"HasSlashIndicatorContract: method caller must be slash indicator contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasSlashIndicatorContract\\n   */\\n  function slashIndicatorContract() public view override returns (address) {\\n    return address(_slashIndicatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasSlashIndicatorContract\\n   */\\n  function setSlashIndicatorContract(address _addr) external override onlyAdmin {\\n    _setSlashIndicatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `SlashIndicatorContractUpdated`.\\n   *\\n   */\\n  function _setSlashIndicatorContract(address _addr) internal {\\n    _slashIndicatorContract = ISlashIndicator(_addr);\\n    emit SlashIndicatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x690dbb18e2c57466b85d09ec6ff67e9924f42dbbb283ef5443dd27c1d1d40e2c\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasStakingContract.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\n\\ncontract HasStakingContract is IHasStakingContract, HasProxyAdmin {\\n  IStaking internal _stakingContract;\\n\\n  modifier onlyStakingContract() {\\n    require(stakingContract() == msg.sender, \\\"HasStakingManager: method caller must be staking contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingContract\\n   */\\n  function stakingContract() public view override returns (address) {\\n    return address(_stakingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingContract\\n   */\\n  function setStakingContract(address _addr) external override onlyAdmin {\\n    _setStakingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the staking contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingContractUpdated`.\\n   *\\n   */\\n  function _setStakingContract(address _addr) internal {\\n    _stakingContract = IStaking(_addr);\\n    emit StakingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x2debf8e3ee5fb80a189bceb7427da96b67c8638297e4d32ecdc1dda2b1e46377\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasStakingVestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasStakingVestingContract.sol\\\";\\nimport \\\"../../interfaces/IStakingVesting.sol\\\";\\n\\ncontract HasStakingVestingContract is IHasStakingVestingContract, HasProxyAdmin {\\n  IStakingVesting internal _stakingVestingContract;\\n\\n  modifier onlyStakingVestingContract() {\\n    require(\\n      stakingVestingContract() == msg.sender,\\n      \\\"HasStakingVestingContract: method caller must be staking vesting contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingVestingContract\\n   */\\n  function stakingVestingContract() public view override returns (address) {\\n    return address(_stakingVestingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasStakingVestingContract\\n   */\\n  function setStakingVestingContract(address _addr) external override onlyAdmin {\\n    _setStakingVestingContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the staking vesting contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingVestingContractUpdated`.\\n   *\\n   */\\n  function _setStakingVestingContract(address _addr) internal {\\n    _stakingVestingContract = IStakingVesting(_addr);\\n    emit StakingVestingContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x243c98fd83ca6d2b2bbe6aa0ade21d4b02a59d7653a689532bc919ad0e95d1c1\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVotes(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallots(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function bulkTotalBallotsOf(uint256 _period, address[] calldata _bridgeOperators)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd151b4f84727bed8751d2e750f632957c27d5d33b2d3ed21002de18dc40dc0b3\",\"license\":\"MIT\"},\"contracts/interfaces/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that the candidate to be revoked.\\n    uint256 revokedTimestamp;\\n    // Extra data\\n    bytes extraData;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoked timestamp of a candidate is updated.\\n  event CandidateRevokedTimestampUpdated(address indexed consensusAddr, uint256 revokedTimestamp);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function grantValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokedTimestampUpdated`.\\n   *\\n   */\\n  function requestRevokeCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n}\\n\",\"keccak256\":\"0xd7084e227756c3803017cee02c96cd057e7596703af46f86e51397d836def98f\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMaintenance {\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed consensusAddr, Schedule);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` is maintaining at the block number `_block`.\\n   */\\n  function maintaining(address _consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` was maintaining in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function maintainingInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validator is maintaining or not.\\n   */\\n  function bulkMaintaining(address[] calldata _addrList, uint256 _block) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validator was maintaining in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function bulkMaintainingInBlockRange(\\n    address[] calldata _addrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` has scheduled.\\n   */\\n  function scheduled(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `_consensusAddr`.\\n   */\\n  function getSchedule(address _consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules\\n  ) external;\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedules() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedules() external view returns (uint256 _count);\\n\\n  /**\\n   * @dev Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - The candidate `_consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(\\n    address _consensusAddr,\\n    uint256 _startedAtBlock,\\n    uint256 _endedAtBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe1886f6414990514cbd4905c68300f9660c24c29e351bb11bede02163dc5ef32\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\n\\ninterface IRoninValidatorSet is ICandidateManager {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the number of max validator is updated\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 amount);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(uint256 amount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                              FUNCTIONS FOR COINBASE                               //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                            FUNCTIONS FOR SLASH INDICATOR                          //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function jailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function jailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function jailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function jailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function bulkJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function miningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function miningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                             FUNCTIONS FOR NORMAL USER                             //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                               FUNCTIONS FOR ADMIN                                 //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xb5338c54693f5e188795e5c197be0a288c5233853535d064380be7b86d067889\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStakingVesting {\\n  /// @dev Emitted when the block bonus for block producer is transferred.\\n  event BonusTransferred(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount\\n  );\\n  /// @dev Emitted when the transfer of block bonus for block producer is failed.\\n  event BonusTransferFailed(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the block bonus for block producer is updated\\n  event BlockProducerBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the block bonus for bridge operator is updated\\n  event BridgeOperatorBonusPerBlockUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the block producer at `_block`.\\n   */\\n  function blockProducerBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the bridge validator at `_block`.\\n   */\\n  function bridgeOperatorBlockBonus(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Receives RON from any address.\\n   */\\n  function receiveRON() external payable;\\n\\n  /**\\n   * @dev Returns the last block number that the staking vesting is sent.\\n   */\\n  function lastBlockSendingBonus() external view returns (uint256);\\n\\n  /**\\n   * @dev Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   * - The method must be called only once per block.\\n   *\\n   * Emits the event `BonusTransferred` or `BonusTransferFailed`.\\n   *\\n   * Notes:\\n   * - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method\\n   * will not be reverted, and the underlying nodes does not hang.\\n   *\\n   * @param _forBlockProducer Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.\\n   * @param _forBridgeOperator Indicates whether requesting the bonus for the bridge operator.\\n   *\\n   * @return _success Whether the transfer is successfully. This returns false mostly because this contract is out of balance.\\n   * @return _blockProducerBonus The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.\\n   * @return _bridgeOperatorBonus The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.\\n   *\\n   */\\n  function requestBonus(bool _forBlockProducer, bool _forBridgeOperator)\\n    external\\n    returns (\\n      bool _success,\\n      uint256 _blockProducerBonus,\\n      uint256 _bridgeOperatorBonus\\n    );\\n\\n  /**\\n   * @dev Sets the bonus amount per block for block producer.\\n   *\\n   * Emits the event `BlockProducerBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBlockProducerBonusPerBlock(uint256 _amount) external;\\n\\n  /**\\n   * @dev Sets the bonus amount per block for bridge operator.\\n   *\\n   * Emits the event `BridgeOperatorBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBridgeOperatorBonusPerBlock(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x6705fdccf03c4acd34ceb1034c2ab556c901781d6d5597e63f257eafe75cf1ae\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeTrackingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasBridgeTrackingContract {\\n  /// @dev Emitted when the bridge tracking contract is updated.\\n  event BridgeTrackingContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the bridge tracking contract.\\n   */\\n  function bridgeTrackingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge tracking contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeTrackingContractUpdated`.\\n   *\\n   */\\n  function setBridgeTrackingContract(address) external;\\n}\\n\",\"keccak256\":\"0xde47e74524035698a7ced19235a527d82674be9625bc95f5f1a8abd2ccad55db\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasMaintenanceContract {\\n  /// @dev Emitted when the maintenance contract is updated.\\n  event MaintenanceContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the maintenance contract.\\n   */\\n  function maintenanceContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the maintenance contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function setMaintenanceContract(address) external;\\n}\\n\",\"keccak256\":\"0xb4497d521ee5da55cfdd349e814f763ba88b9e91d8bdc50ba12f4e5d161b65e3\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasRoninTrustedOrganizationContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x8ec2782f28a2c41d8feee0c5f213ac66e327c3757eab8d85a09104f21587ff10\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasSlashIndicatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasSlashIndicatorContract {\\n  /// @dev Emitted when the slash indicator contract is updated.\\n  event SlashIndicatorContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the slash indicator contract.\\n   */\\n  function slashIndicatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `SlashIndicatorContractUpdated`.\\n   *\\n   */\\n  function setSlashIndicatorContract(address) external;\\n}\\n\",\"keccak256\":\"0xcb5918e984abdeb1da63372c409d9f665c3246a0a078a42beff4268f6aaffb80\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasStakingContract {\\n  /// @dev Emitted when the staking contract is updated.\\n  event StakingContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the staking contract.\\n   */\\n  function stakingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the staking contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingContractUpdated`.\\n   *\\n   */\\n  function setStakingContract(address) external;\\n}\\n\",\"keccak256\":\"0x7922d1395687827e52b12f505f3ca1477c20546c5f35f4e0b175575172438241\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasStakingVestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasStakingVestingContract {\\n  /// @dev Emitted when the staking vesting contract is updated.\\n  event StakingVestingContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the staking vesting contract.\\n   */\\n  function stakingVestingContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the staking vesting contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `StakingVestingContractUpdated`.\\n   *\\n   */\\n  function setStakingVestingContract(address) external;\\n}\\n\",\"keccak256\":\"0x4e2c438040b12d3ca8475b6505c0c4b0aee25c73a0bd8815cbf39504c97861d8\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2\\n  }\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed validator, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0xedbd63e46b316156c9bfc4a88bc0d0ff016f14a031810bfc2b972b084b0e0fdd\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICreditScore {\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore,\\n    uint256 maxCreditScore,\\n    uint256 bailOutCostMultiplier,\\n    uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated\\n  event CreditScoresUpdated(address[] validators, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail\\n  event BailedOut(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function updateCreditScore(address[] calldata _validators, uint256 _period) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainCreditScore The max gained number of credit score per period.\\n   * @param _maxCreditScore The max number of credit score that a validator can hold.\\n   * @param _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainCreditScore,\\n    uint256 _maxCreditScore,\\n    uint256 _bailOutCostMultiplier,\\n    uint256 _cutOffPercentageAfterBailout\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The max gained number of credit score per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getBulkCreditScore(address[] calldata _validators) external view returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `_validator` has been bailed out at the `_period`.\\n   */\\n  function bailedOutAtPeriod(address _validator, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9eeaf569331d464fe9397e715a6b5d6d6a7ad74e1fda27e0ba1b3f7c24ed821f\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashBridgeOperator {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method\\n   * `getBridgeOperatorSlashingConfigs` for param details.\\n   */\\n  event BridgeOperatorSlashingConfigsUpdated(\\n    uint256 missingVotesRatioTier1,\\n    uint256 missingVotesRatioTier2,\\n    uint256 jailDurationForMissingVotesRatioTier2\\n  );\\n\\n  /**\\n   * @dev Returns the configs related to bridge operator slashing.\\n   *\\n   * @return _missingVotesRatioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio.\\n   * @return _missingVotesRatioTier2 The bridge reward and mining reward will be deprecated and the corresponding\\n   * block producer will be put in jail if (s)he misses more than this ratio.\\n   * @return _jailDurationForMissingVotesRatioTier2 The number of blocks to jail the corresponding block producer when\\n   * its bridge operator is slashed tier-2.\\n   *\\n   */\\n  function getBridgeOperatorSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash bridge operators.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _ratioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map\\n   * to 0%-100%.\\n   * @param _ratioTier2 The bridge reward and mining reward will be deprecated and the corresponding block producer will\\n   * be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.\\n   * @param _jailDurationTier2 The number of blocks to jail the corresponding block producer when its bridge operator is\\n   * slashed tier-2.\\n   *\\n   */\\n  function setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7f08deac0a2c742999aac7083fb0787d73ef2d481f36fa259d901df6999bccfc\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeVoting is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge voting is updated. See the method `getBridgeVotingSlashingConfigs` for param\\n   * details.\\n   */\\n  event BridgeVotingSlashingConfigsUpdated(uint256 bridgeVotingThreshold, uint256 bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Slashes for bridge voter governance.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function slashBridgeVoting(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge voting slashing.\\n   *\\n   * @return _bridgeVotingThreshold The threshold to slash when a trusted organization does not vote for bridge\\n   * operators.\\n   * @return _bridgeVotingSlashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function getBridgeVotingSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _bridgeVotingThreshold, uint256 _bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Sets the configs to slash bridge voting.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeVotingSlashingConfigsUpdated`.\\n   *\\n   * @param _threshold The threshold to slash when a trusted organization does not vote for bridge operators.\\n   * @param _slashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) external;\\n}\\n\",\"keccak256\":\"0x72c3bcfe3c49f946651caa3066bd5296d007871c9a56fa113e2d3c0f3db7eb99\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(uint256 slashDoubleSignAmount, uint256 doubleSigningJailUntilBlock);\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(\\n    address _validatorAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _slashDoubleSignAmount, uint256 _doubleSigningJailUntilBlock);\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(uint256 _slashAmount, uint256 _jailUntilBlock) external;\\n}\\n\",\"keccak256\":\"0x5639b0203facbf4769bb26e994c8491ac22c13ae0363c3c062ac375225121463\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashBridgeVoting.sol\\\";\\nimport \\\"./ISlashBridgeOperator.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is\\n  ISlashDoubleSign,\\n  ISlashBridgeVoting,\\n  ISlashBridgeOperator,\\n  ISlashUnavailability,\\n  ICreditScore\\n{}\\n\",\"keccak256\":\"0xe8b8fde3af614735cb304bc1eb82b05d65ede4df804b5d555787e5d5ecb95ec0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Retursn the unavailability indicator in the period `_period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold.\\n   * @return _unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold.\\n   * @return _slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed tier-2.\\n   * @return _jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed tier-2.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _unavailabilityTier1Threshold,\\n      uint256 _unavailabilityTier2Threshold,\\n      uint256 _slashAmountForUnavailabilityTier2Threshold,\\n      uint256 _jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param _tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param _slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param _jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb0bc405c7c1bdcf0fa975afc5d9c6cba8fc85e118dd3febe0b4fa00e3c6bf5c6\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    // Address of the pool i.e. consensus address of the validator\\n    address addr;\\n    // Pool admin address\\n    address admin;\\n    // Self-staking amount\\n    uint256 stakingAmount;\\n    // Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    // Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    // Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 _cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 _secs) external;\\n}\\n\",\"keccak256\":\"0x47752fa8390d5e669b619060ffeae1a4182270eee5475250e54b660f0d86fefb\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed consensuAddr, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed validator, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] validator);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed validator,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param _candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address _candidateAdmin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function deprecatePools(address[] calldata _pools) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(address _consensusAddr) external;\\n}\\n\",\"keccak256\":\"0xe17fafb205837d5f43a80d79fc6022b82f5271c0082a102ae9b47810f2fa7296\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed consensuAddr, uint256 amount);\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(address _consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(address[] calldata _consensusAddrs, uint256[] calldata _amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(\\n    address _consensusAddrSrc,\\n    address _consensusAddrDst,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(address _user, address[] calldata _poolAddrList)\\n    external\\n    view\\n    returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(address[] calldata _consensusAddrList) external returns (uint256 _amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(address[] calldata _consensusAddrList, address _consensusAddrDst)\\n    external\\n    returns (uint256 _amount);\\n}\\n\",\"keccak256\":\"0xc937036bcda0a4632af4937c514230a7b301d1f42959bfb00c377cb76f3f61bc\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Min staking amount in the period.\\n    uint256 minAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolAddr, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolAddr, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolAddr, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolAddrs, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolAddrs, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolAddrs);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function stakingAmountOf(address _poolAddr, address _user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function bulkStakingAmountOf(address[] calldata _poolAddrs, address[] calldata _userList)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function stakingTotal(address _poolAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `_poolAddrs`.\\n   */\\n  function bulkStakingTotal(address[] calldata _poolAddrs) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xab6a9fc357eef8a966088b2d903654c3e20f712cc9f11658f546c4695fb4509d\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking {\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function recordRewards(\\n    address[] calldata _consensusAddrs,\\n    uint256[] calldata _rewards,\\n    uint256 _period\\n  ) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function deductStakingAmount(address _consensusAddr, uint256 _amount) external;\\n\\n  /**\\n   * @dev Returns the staking pool detail.\\n   */\\n  function getStakingPool(address)\\n    external\\n    view\\n    returns (\\n      address _admin,\\n      uint256 _stakingAmount,\\n      uint256 _stakingTotal\\n    );\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function bulkSelfStaking(address[] calldata) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xce6deaad2456b3d4388d4db0188d715da4f208993e795a78c49d20e0fd809640\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - min(a, b);\\n  }\\n}\\n\",\"keccak256\":\"0xa9e2a3ad43d7999a3cdbfb040b0f2dec282eae91ff8fe6ad26fdd19087121ce7\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PrecompileUsagePickValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract PrecompileUsagePickValidatorSet {\\n  /// @dev Gets the address of the precompile of picking validator set\\n  function precompilePickValidatorSetAddress() public view virtual returns (address) {\\n    return address(0x68);\\n  }\\n\\n  /**\\n   * @dev Sorts and arranges to return a new validator set.\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcPickValidatorSet(\\n    address[] memory _candidates,\\n    uint256[] memory _weights,\\n    uint256[] memory _trustedWeights,\\n    uint256 _maxValidatorNumber,\\n    uint256 _maxPrioritizedValidatorNumber\\n  ) internal view virtual returns (address[] memory _result, uint256 _newValidatorCount) {\\n    address _smc = precompilePickValidatorSetAddress();\\n    bytes memory _payload = abi.encodeWithSignature(\\n      \\\"pickValidatorSet(address[],uint256[],uint256[],uint256,uint256)\\\",\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    bool _success = true;\\n\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    require(_success, \\\"PrecompileUsagePickValidatorSet: call to precompile fails\\\");\\n\\n    _newValidatorCount = _result.length;\\n  }\\n}\\n\",\"keccak256\":\"0x04d77bc54326963e9a28b3f4d936df22d8219c263ccc1d4f2985f3703204f4aa\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompileUsageSortValidators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract PrecompileUsageSortValidators {\\n  /// @dev Gets the address of the precompile of sorting validators\\n  function precompileSortValidatorsAddress() public view virtual returns (address) {\\n    return address(0x66);\\n  }\\n\\n  /**\\n   * @dev Sorts candidates descending by their weights by calling precompile contract.\\n   *\\n   * Note: This function is marked as virtual for being wrapping in mock contract for testing purpose.\\n   */\\n  function _pcSortCandidates(address[] memory _candidates, uint256[] memory _weights)\\n    internal\\n    view\\n    virtual\\n    returns (address[] memory _result)\\n  {\\n    address _smc = precompileSortValidatorsAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload = abi.encodeWithSignature(\\\"sortValidators(address[],uint256[])\\\", _candidates, _weights);\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    require(_success, \\\"PrecompileUsageSortValidators: call to precompile fails\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x87570b28364e8389bcfb1378f5fd9619d4971dc88c2af6335ce557bb8b38e24f\",\"license\":\"MIT\"},\"contracts/ronin/validator/CandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasStakingContract.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../interfaces/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\n\\nabstract contract CandidateManager is ICandidateManager, HasStakingContract, PercentageConsumer {\\n  /// @dev Maximum number of validator candidate\\n  uint256 private _maxValidatorCandidate;\\n\\n  /// @dev The validator candidate array\\n  address[] internal _candidates;\\n  /// @dev Mapping from candidate address => bitwise negation of validator index in `_candidates`\\n  mapping(address => uint256) internal _candidateIndex;\\n  /// @dev Mapping from candidate address => their info\\n  mapping(address => ValidatorCandidate) internal _candidateInfo;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function maxValidatorCandidate() public view override returns (uint256) {\\n    return _maxValidatorCandidate;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMaxValidatorCandidate(uint256 _number) external override onlyAdmin {\\n    _setMaxValidatorCandidate(_number);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function grantValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external override onlyStakingContract {\\n    uint256 _length = _candidates.length;\\n    require(_length < maxValidatorCandidate(), \\\"CandidateManager: exceeds maximum number of candidates\\\");\\n    require(!isValidatorCandidate(_consensusAddr), \\\"CandidateManager: query for already existent candidate\\\");\\n    require(_commissionRate <= _MAX_PERCENTAGE, \\\"CandidateManager: invalid comission rate\\\");\\n\\n    _candidateIndex[_consensusAddr] = ~_length;\\n    _candidates.push(_consensusAddr);\\n    _candidateInfo[_consensusAddr] = ValidatorCandidate(\\n      _admin,\\n      _consensusAddr,\\n      _treasuryAddr,\\n      _bridgeOperatorAddr,\\n      _commissionRate,\\n      type(uint256).max,\\n      new bytes(0)\\n    );\\n    emit CandidateGranted(_consensusAddr, _treasuryAddr, _admin, _bridgeOperatorAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function requestRevokeCandidate(address _consensusAddr, uint256 _secsLeft) external override onlyStakingContract {\\n    require(isValidatorCandidate(_consensusAddr), \\\"CandidateManager: query for non-existent candidate\\\");\\n    uint256 _revokedTimestamp = block.timestamp + _secsLeft;\\n    require(\\n      _revokedTimestamp < _candidateInfo[_consensusAddr].revokedTimestamp,\\n      \\\"CandidateManager: invalid revoked timestamp\\\"\\n    );\\n    _candidateInfo[_consensusAddr].revokedTimestamp = _revokedTimestamp;\\n    emit CandidateRevokedTimestampUpdated(_consensusAddr, _revokedTimestamp);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isValidatorCandidate(address _addr) public view override returns (bool) {\\n    return _candidateIndex[_addr] != 0;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfos() external view override returns (ValidatorCandidate[] memory _list) {\\n    _list = new ValidatorCandidate[](_candidates.length);\\n    for (uint _i = 0; _i < _list.length; _i++) {\\n      _list[_i] = _candidateInfo[_candidates[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfo(address _candidate) external view override returns (ValidatorCandidate memory) {\\n    require(isValidatorCandidate(_candidate), \\\"CandidateManager: query for non-existent candidate\\\");\\n    return _candidateInfo[_candidate];\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getValidatorCandidates() public view override returns (address[] memory) {\\n    return _candidates;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function currentPeriod() public view virtual override returns (uint256);\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function numberOfBlocksInEpoch() public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Removes unsastisfied candidates, the ones who have insufficient minimum candidate staking amount,\\n   * or the ones who revoked their candidate role.\\n   *\\n   * Emits the event `CandidatesRevoked` when a candidate is revoked.\\n   *\\n   */\\n  function _filterUnsatisfiedCandidates() internal {\\n    IStaking _staking = _stakingContract;\\n    uint256 _minStakingAmount = _stakingContract.minValidatorStakingAmount();\\n    uint256[] memory _selfStakings = _staking.bulkSelfStaking(_candidates);\\n\\n    uint256 _length = _candidates.length;\\n    uint256 _unsatisfiedCount;\\n    address[] memory _unsatisfiedCandidates = new address[](_length);\\n\\n    {\\n      address _addr;\\n      uint256 _i;\\n      while (_i < _length) {\\n        _addr = _candidates[_i];\\n        if (_selfStakings[_i] < _minStakingAmount || _candidateInfo[_addr].revokedTimestamp <= block.timestamp) {\\n          _selfStakings[_i] = _selfStakings[--_length];\\n          _unsatisfiedCandidates[_unsatisfiedCount++] = _addr;\\n          _removeCandidate(_addr);\\n          continue;\\n        }\\n        _i++;\\n      }\\n    }\\n\\n    if (_unsatisfiedCount > 0) {\\n      assembly {\\n        mstore(_unsatisfiedCandidates, _unsatisfiedCount)\\n      }\\n      emit CandidatesRevoked(_unsatisfiedCandidates);\\n      _staking.deprecatePools(_unsatisfiedCandidates);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view override returns (bool) {\\n    return _candidateInfo[_candidate].admin == _admin;\\n  }\\n\\n  /**\\n   * @dev Removes the candidate.\\n   */\\n  function _removeCandidate(address _addr) internal {\\n    uint256 _idx = _candidateIndex[_addr];\\n    if (_idx == 0) {\\n      return;\\n    }\\n\\n    delete _candidateInfo[_addr];\\n    delete _candidateIndex[_addr];\\n\\n    address _lastCandidate = _candidates[_candidates.length - 1];\\n\\n    if (_lastCandidate != _addr) {\\n      _candidateIndex[_lastCandidate] = _idx;\\n      _candidates[~_idx] = _lastCandidate;\\n    }\\n\\n    _candidates.pop();\\n  }\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function _setMaxValidatorCandidate(uint256 _threshold) internal {\\n    _maxValidatorCandidate = _threshold;\\n    emit MaxValidatorCandidateUpdated(_threshold);\\n  }\\n}\\n\",\"keccak256\":\"0x4c8a68aa19fe2772cf4d8335f6df3edee554b915aba187818d8b4aea1dbb57f8\",\"license\":\"MIT\"},\"contracts/ronin/validator/RoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingVestingContract.sol\\\";\\nimport \\\"../../extensions/collections/HasStakingContract.sol\\\";\\nimport \\\"../../extensions/collections/HasSlashIndicatorContract.sol\\\";\\nimport \\\"../../extensions/collections/HasMaintenanceContract.sol\\\";\\nimport \\\"../../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../extensions/collections/HasBridgeTrackingContract.sol\\\";\\nimport \\\"../../interfaces/IRoninValidatorSet.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../precompile-usages/PrecompileUsageSortValidators.sol\\\";\\nimport \\\"../../precompile-usages/PrecompileUsagePickValidatorSet.sol\\\";\\nimport \\\"./CandidateManager.sol\\\";\\n\\ncontract RoninValidatorSet is\\n  IRoninValidatorSet,\\n  PrecompileUsageSortValidators,\\n  PrecompileUsagePickValidatorSet,\\n  RONTransferHelper,\\n  HasStakingContract,\\n  HasStakingVestingContract,\\n  HasSlashIndicatorContract,\\n  HasMaintenanceContract,\\n  HasRoninTrustedOrganizationContract,\\n  HasBridgeTrackingContract,\\n  CandidateManager,\\n  Initializable\\n{\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  /// @dev Length of period in seconds\\n  uint256 internal constant _periodLength = 1 days;\\n\\n  /// @dev The maximum number of validator.\\n  uint256 internal _maxValidatorNumber;\\n  /// @dev The number of blocks in a epoch\\n  uint256 internal _numberOfBlocksInEpoch;\\n  /// @dev The last updated block\\n  uint256 internal _lastUpdatedBlock;\\n  /// @dev The last updated period\\n  uint256 internal _lastUpdatedPeriod;\\n  /// @dev The starting block of the last updated period\\n  uint256 internal _currentPeriodStartAtBlock;\\n\\n  /// @dev The total of validators\\n  uint256 public validatorCount;\\n  /// @dev Mapping from validator index => validator address\\n  mapping(uint256 => address) internal _validators;\\n  /// @dev Mapping from address => flag indicating the validator ability: producing block, operating bridge\\n  mapping(address => EnumFlags.ValidatorFlag) internal _validatorMap;\\n  /// @dev The number of slot that is reserved for prioritized validators\\n  uint256 internal _maxPrioritizedValidatorNumber;\\n\\n  /// @dev Mapping from consensus address => period number => block producer has no pending reward\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardDeprecatedAtPeriod;\\n  /// @dev Mapping from consensus address => period number => whether the block producer get cut off reward, due to bailout\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardBailoutCutOffAtPeriod;\\n  /// @dev Mapping from consensus address => period number => block operator has no pending reward\\n  mapping(address => mapping(uint256 => bool)) internal _bridgeRewardDeprecatedAtPeriod;\\n  /// @dev Mapping from consensus address => the last block that the validator is jailed\\n  mapping(address => uint256) internal _jailedUntil;\\n\\n  /// @dev Mapping from consensus address => pending reward from producing block\\n  mapping(address => uint256) internal _miningReward;\\n  /// @dev Mapping from consensus address => pending reward from delegating\\n  mapping(address => uint256) internal _delegatingReward;\\n\\n  /// @dev The total reward for bridge operators\\n  uint256 internal _totalBridgeReward;\\n  /// @dev Mapping from consensus address => pending reward for being bridge operator\\n  mapping(address => uint256) internal _bridgeOperatingReward;\\n\\n  modifier onlyCoinbase() {\\n    require(msg.sender == block.coinbase, \\\"RoninValidatorSet: method caller must be coinbase\\\");\\n    _;\\n  }\\n\\n  modifier whenEpochEnding() {\\n    require(epochEndingAt(block.number), \\\"RoninValidatorSet: only allowed at the end of epoch\\\");\\n    _;\\n  }\\n\\n  modifier oncePerEpoch() {\\n    require(\\n      epochOf(_lastUpdatedBlock) < epochOf(block.number),\\n      \\\"RoninValidatorSet: query for already wrapped up epoch\\\"\\n    );\\n    _lastUpdatedBlock = block.number;\\n    _;\\n  }\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __slashIndicatorContract,\\n    address __stakingContract,\\n    address __stakingVestingContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address __bridgeTrackingContract,\\n    uint256 __maxValidatorNumber,\\n    uint256 __maxValidatorCandidate,\\n    uint256 __maxPrioritizedValidatorNumber,\\n    uint256 __numberOfBlocksInEpoch\\n  ) external initializer {\\n    _setSlashIndicatorContract(__slashIndicatorContract);\\n    _setStakingContract(__stakingContract);\\n    _setStakingVestingContract(__stakingVestingContract);\\n    _setMaintenanceContract(__maintenanceContract);\\n    _setBridgeTrackingContract(__bridgeTrackingContract);\\n    _setRoninTrustedOrganizationContract(__roninTrustedOrganizationContract);\\n    _setMaxValidatorNumber(__maxValidatorNumber);\\n    _setMaxValidatorCandidate(__maxValidatorCandidate);\\n    _setMaxPrioritizedValidatorNumber(__maxPrioritizedValidatorNumber);\\n    _numberOfBlocksInEpoch = __numberOfBlocksInEpoch;\\n  }\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                              FUNCTIONS FOR COINBASE                               //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function submitBlockReward() external payable override onlyCoinbase {\\n    uint256 _submittedReward = msg.value;\\n    address _coinbaseAddr = msg.sender;\\n    bool _requestForBlockProducer = isBlockProducer(_coinbaseAddr) &&\\n      !_jailed(_coinbaseAddr) &&\\n      !_miningRewardDeprecated(_coinbaseAddr, currentPeriod());\\n    bool _requestForBridgeOperator = true;\\n\\n    (, uint256 _blockProducerBonus, uint256 _bridgeOperatorBonus) = _stakingVestingContract.requestBonus(\\n      _requestForBlockProducer,\\n      _requestForBridgeOperator\\n    );\\n\\n    _totalBridgeReward += _bridgeOperatorBonus;\\n\\n    // Deprecates reward for non-validator or slashed validator\\n    if (!_requestForBlockProducer) {\\n      emit BlockRewardDeprecated(_coinbaseAddr, _submittedReward, BlockRewardDeprecatedType.UNAVAILABILITY);\\n      return;\\n    }\\n\\n    emit BlockRewardSubmitted(_coinbaseAddr, _submittedReward, _blockProducerBonus);\\n\\n    uint256 _period = currentPeriod();\\n    uint256 _reward = _submittedReward + _blockProducerBonus;\\n    uint256 _cutOffReward;\\n    if (_miningRewardBailoutCutOffAtPeriod[_coinbaseAddr][_period]) {\\n      (, , , uint256 _cutOffPercentage) = _slashIndicatorContract.getCreditScoreConfigs();\\n      _cutOffReward = (_reward * _cutOffPercentage) / _MAX_PERCENTAGE;\\n      emit BlockRewardDeprecated(_coinbaseAddr, _cutOffReward, BlockRewardDeprecatedType.AFTER_BAILOUT);\\n    }\\n\\n    _reward -= _cutOffReward;\\n    uint256 _rate = _candidateInfo[_coinbaseAddr].commissionRate;\\n    uint256 _miningAmount = (_rate * _reward) / _MAX_PERCENTAGE;\\n    _miningReward[_coinbaseAddr] += _miningAmount;\\n\\n    uint256 _delegatingAmount = _reward - _miningAmount;\\n    _delegatingReward[_coinbaseAddr] += _delegatingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function wrapUpEpoch() external payable virtual override onlyCoinbase whenEpochEnding oncePerEpoch {\\n    uint256 _newPeriod = _computePeriod(block.timestamp);\\n    bool _periodEnding = _isPeriodEnding(_newPeriod);\\n    _currentPeriodStartAtBlock = block.number + 1;\\n\\n    address[] memory _currentValidators = getValidators();\\n    uint256 _epoch = epochOf(block.number);\\n    uint256 _lastPeriod = currentPeriod();\\n\\n    if (_periodEnding) {\\n      (\\n        uint256 _totalDelegatingReward,\\n        uint256[] memory _delegatingRewards\\n      ) = _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(_lastPeriod, _currentValidators);\\n      _settleAndTransferDelegatingRewards(_lastPeriod, _currentValidators, _totalDelegatingReward, _delegatingRewards);\\n      _slashIndicatorContract.updateCreditScore(_currentValidators, _lastPeriod);\\n      _currentValidators = _syncValidatorSet(_newPeriod);\\n    }\\n\\n    _revampBlockProducers(_newPeriod, _currentValidators);\\n    emit WrappedUpEpoch(_lastPeriod, _epoch, _periodEnding);\\n    _lastUpdatedPeriod = _newPeriod;\\n  }\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                            FUNCTIONS FOR SLASH INDICATOR                          //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external override onlySlashIndicatorContract {\\n    uint256 _period = currentPeriod();\\n    _miningRewardDeprecatedAtPeriod[_validatorAddr][_period] = true;\\n    delete _miningReward[_validatorAddr];\\n    delete _delegatingReward[_validatorAddr];\\n\\n    if (_newJailedUntil > _jailedUntil[_validatorAddr]) {\\n      _jailedUntil[_validatorAddr] = _newJailedUntil;\\n    }\\n\\n    if (_slashAmount > 0) {\\n      _stakingContract.deductStakingAmount(_validatorAddr, _slashAmount);\\n    }\\n\\n    emit ValidatorPunished(_validatorAddr, _period, _jailedUntil[_validatorAddr], _slashAmount, true, false);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external override onlySlashIndicatorContract {\\n    /// Note: Removing rewards of validator in `bailOut` function is not needed, since the rewards have been\\n    /// removed previously in the `slash` function.\\n\\n    _miningRewardBailoutCutOffAtPeriod[_validatorAddr][_period] = true;\\n    _miningRewardDeprecatedAtPeriod[_validatorAddr][_period] = false;\\n    _jailedUntil[_validatorAddr] = block.number - 1;\\n\\n    emit ValidatorUnjailed(_validatorAddr, _period);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function jailed(address _addr) external view override returns (bool) {\\n    return jailedAtBlock(_addr, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function jailedTimeLeft(address _addr)\\n    external\\n    view\\n    override\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    )\\n  {\\n    return jailedTimeLeftAtBlock(_addr, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function jailedAtBlock(address _addr, uint256 _blockNum) public view override returns (bool) {\\n    return _jailedAtBlock(_addr, _blockNum);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function jailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    public\\n    view\\n    override\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    )\\n  {\\n    uint256 _jailedBlock = _jailedUntil[_addr];\\n    if (_jailedBlock < _blockNum) {\\n      return (false, 0, 0);\\n    }\\n\\n    isJailed_ = true;\\n    blockLeft_ = _jailedBlock - _blockNum + 1;\\n    epochLeft_ = epochOf(_jailedBlock) - epochOf(_blockNum) + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function bulkJailed(address[] calldata _addrList) external view override returns (bool[] memory _result) {\\n    _result = new bool[](_addrList.length);\\n    for (uint256 _i; _i < _addrList.length; _i++) {\\n      _result[_i] = _jailed(_addrList[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function miningRewardDeprecated(address[] calldata _blockProducers)\\n    external\\n    view\\n    override\\n    returns (bool[] memory _result)\\n  {\\n    _result = new bool[](_blockProducers.length);\\n    uint256 _period = currentPeriod();\\n    for (uint256 _i; _i < _blockProducers.length; _i++) {\\n      _result[_i] = _miningRewardDeprecated(_blockProducers[_i], _period);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function miningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    override\\n    returns (bool[] memory _result)\\n  {\\n    _result = new bool[](_blockProducers.length);\\n    for (uint256 _i; _i < _blockProducers.length; _i++) {\\n      _result[_i] = _miningRewardDeprecated(_blockProducers[_i], _period);\\n    }\\n  }\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                             FUNCTIONS FOR NORMAL USER                             //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function epochOf(uint256 _block) public view virtual override returns (uint256) {\\n    return _block / _numberOfBlocksInEpoch + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function currentPeriod() public view virtual override(CandidateManager, ICandidateManager) returns (uint256) {\\n    return _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function currentPeriodStartAtBlock() public view virtual override returns (uint256) {\\n    return _currentPeriodStartAtBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function getLastUpdatedBlock() external view override returns (uint256) {\\n    return _lastUpdatedBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function getValidators() public view override returns (address[] memory _validatorList) {\\n    _validatorList = new address[](validatorCount);\\n    for (uint _i = 0; _i < _validatorList.length; _i++) {\\n      _validatorList[_i] = _validators[_i];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function isValidator(address _addr) public view override returns (bool) {\\n    return !_validatorMap[_addr].isNone();\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function getBlockProducers() public view override returns (address[] memory _result) {\\n    _result = new address[](validatorCount);\\n    uint256 _count = 0;\\n    for (uint _i = 0; _i < _result.length; _i++) {\\n      if (isBlockProducer(_validators[_i])) {\\n        _result[_count++] = _validators[_i];\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_result, _count)\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function isBlockProducer(address _addr) public view override returns (bool) {\\n    return _validatorMap[_addr].hasFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function totalBlockProducers() external view returns (uint256 _total) {\\n    for (uint _i = 0; _i < validatorCount; _i++) {\\n      if (isBlockProducer(_validators[_i])) {\\n        _total++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function getBridgeOperators() public view override returns (address[] memory _bridgeOperatorList) {\\n    _bridgeOperatorList = new address[](validatorCount);\\n    for (uint _i = 0; _i < _bridgeOperatorList.length; _i++) {\\n      _bridgeOperatorList[_i] = _candidateInfo[_validators[_i]].bridgeOperatorAddr;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function isBridgeOperator(address _bridgeOperatorAddr) external view override returns (bool _result) {\\n    for (uint _i = 0; _i < validatorCount; _i++) {\\n      if (_candidateInfo[_validators[_i]].bridgeOperatorAddr == _bridgeOperatorAddr) {\\n        _result = true;\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function isPeriodEnding() external view virtual returns (bool) {\\n    return _isPeriodEnding(_computePeriod(block.timestamp));\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function epochEndingAt(uint256 _block) public view virtual returns (bool) {\\n    return _block % _numberOfBlocksInEpoch == _numberOfBlocksInEpoch - 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function numberOfBlocksInEpoch()\\n    public\\n    view\\n    override(CandidateManager, ICandidateManager)\\n    returns (uint256 _numberOfBlocks)\\n  {\\n    return _numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function maxValidatorNumber() external view override returns (uint256 _maximumValidatorNumber) {\\n    return _maxValidatorNumber;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function maxPrioritizedValidatorNumber() external view override returns (uint256 _maximumPrioritizedValidatorNumber) {\\n    return _maxPrioritizedValidatorNumber;\\n  }\\n\\n  /**\\n   * Notice: A validator is always a bride operator\\n   *\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function totalBridgeOperators() public view returns (uint256) {\\n    return validatorCount;\\n  }\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                               FUNCTIONS FOR ADMIN                                 //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function setMaxValidatorNumber(uint256 _max) external override onlyAdmin {\\n    _setMaxValidatorNumber(_max);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninValidatorSet\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _number) external override onlyAdmin {\\n    _setMaxPrioritizedValidatorNumber(_number);\\n  }\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                     PRIVATE HELPER FUNCTIONS OF WRAPPING UP EPOCH                 //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev This loop over the all current validators to:\\n   * - Update delegating reward for and calculate total delegating rewards to be sent to the staking contract,\\n   * - Distribute the reward of block producers and bridge operators to their treasury addresses.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(\\n    uint256 _lastPeriod,\\n    address[] memory _currentValidators\\n  ) private returns (uint256 _totalDelegatingReward, uint256[] memory _delegatingRewards) {\\n    _delegatingRewards = new uint256[](_currentValidators.length);\\n    address _consensusAddr;\\n    address payable _treasury;\\n    IBridgeTracking _bridgeTracking = _bridgeTrackingContract;\\n\\n    uint256 _totalBridgeBallots = _bridgeTracking.totalBallots(_lastPeriod);\\n    uint256 _totalBridgeVotes = _bridgeTracking.totalVotes(_lastPeriod);\\n    uint256[] memory _bridgeBallots = _bridgeTracking.bulkTotalBallotsOf(_lastPeriod, _currentValidators);\\n    (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2\\n    ) = _slashIndicatorContract.getBridgeOperatorSlashingConfigs();\\n\\n    for (uint _i = 0; _i < _currentValidators.length; _i++) {\\n      _consensusAddr = _currentValidators[_i];\\n      _treasury = _candidateInfo[_consensusAddr].treasuryAddr;\\n      _updateValidatorReward(\\n        _lastPeriod,\\n        _consensusAddr,\\n        _bridgeBallots[_i],\\n        _totalBridgeVotes,\\n        _totalBridgeBallots,\\n        _missingVotesRatioTier1,\\n        _missingVotesRatioTier2,\\n        _jailDurationForMissingVotesRatioTier2\\n      );\\n\\n      if (!_bridgeRewardDeprecated(_consensusAddr, _lastPeriod)) {\\n        _distributeBridgeOperatingReward(_consensusAddr, _candidateInfo[_consensusAddr].bridgeOperatorAddr, _treasury);\\n      }\\n\\n      if (!_jailed(_consensusAddr) && !_miningRewardDeprecated(_consensusAddr, _lastPeriod)) {\\n        _totalDelegatingReward += _delegatingReward[_consensusAddr];\\n        _delegatingRewards[_i] = _delegatingReward[_consensusAddr];\\n        _distributeMiningReward(_consensusAddr, _treasury);\\n      }\\n\\n      delete _delegatingReward[_consensusAddr];\\n      delete _miningReward[_consensusAddr];\\n      delete _bridgeOperatingReward[_consensusAddr];\\n    }\\n    delete _totalBridgeReward;\\n  }\\n\\n  /**\\n   * @dev Updates validator reward based on the corresponding bridge operator performance.\\n   */\\n  function _updateValidatorReward(\\n    uint256 _period,\\n    address _validator,\\n    uint256 _validatorBallots,\\n    uint256 _totalVotes,\\n    uint256 _totalBallots,\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2\\n  ) internal {\\n    // Shares equally in case the bridge has nothing to votes\\n    if (_totalBallots == 0 && _totalVotes == 0) {\\n      _bridgeOperatingReward[_validator] = _totalBridgeReward / totalBridgeOperators();\\n      return;\\n    }\\n\\n    uint256 _votedRatio = (_validatorBallots * _MAX_PERCENTAGE) / _totalVotes;\\n    uint256 _missedRatio = _MAX_PERCENTAGE - _votedRatio;\\n    if (_missedRatio > _ratioTier2) {\\n      _bridgeRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      _miningRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      _jailedUntil[_validator] = Math.max(block.number + _jailDurationTier2, _jailedUntil[_validator]);\\n      emit ValidatorPunished(_validator, _period, _jailedUntil[_validator], 0, true, true);\\n    } else if (_missedRatio > _ratioTier1) {\\n      _bridgeRewardDeprecatedAtPeriod[_validator][_period] = true;\\n      emit ValidatorPunished(_validator, _period, _jailedUntil[_validator], 0, false, true);\\n    } else if (_totalBallots > 0) {\\n      _bridgeOperatingReward[_validator] = _totalBridgeReward / _totalBallots;\\n    }\\n  }\\n\\n  /**\\n   * @dev Distributes bonus of staking vesting and mining fee for the block producer.\\n   *\\n   * Emits the `MiningRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `MiningRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeMiningReward(address _consensusAddr, address payable _treasury) private {\\n    uint256 _amount = _miningReward[_consensusAddr];\\n    if (_amount > 0) {\\n      if (_unsafeSendRON(_treasury, _amount)) {\\n        emit MiningRewardDistributed(_consensusAddr, _treasury, _amount);\\n        return;\\n      }\\n\\n      emit MiningRewardDistributionFailed(_consensusAddr, _treasury, _amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Distribute bonus of staking vesting for the bridge operator.\\n   *\\n   * Emits the `BridgeOperatorRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `BridgeOperatorRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeBridgeOperatingReward(\\n    address _consensusAddr,\\n    address _bridgeOperator,\\n    address payable _treasury\\n  ) private {\\n    uint256 _amount = _bridgeOperatingReward[_consensusAddr];\\n    if (_amount > 0) {\\n      if (_unsafeSendRON(_treasury, _amount)) {\\n        emit BridgeOperatorRewardDistributed(_consensusAddr, _bridgeOperator, _treasury, _amount);\\n        return;\\n      }\\n\\n      emit BridgeOperatorRewardDistributionFailed(\\n        _consensusAddr,\\n        _bridgeOperator,\\n        _treasury,\\n        _amount,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper function to settle rewards for delegators of `_currentValidators` at the end of each period,\\n   * then transfer the rewards from this contract to the staking contract, in order to finalize a period.\\n   *\\n   * Emits the `StakingRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `StakingRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _settleAndTransferDelegatingRewards(\\n    uint256 _period,\\n    address[] memory _currentValidators,\\n    uint256 _totalDelegatingReward,\\n    uint256[] memory _delegatingRewards\\n  ) private {\\n    IStaking _staking = _stakingContract;\\n    if (_totalDelegatingReward > 0) {\\n      if (_unsafeSendRON(payable(address(_staking)), _totalDelegatingReward)) {\\n        _staking.recordRewards(_currentValidators, _delegatingRewards, _period);\\n        emit StakingRewardDistributed(_totalDelegatingReward);\\n        return;\\n      }\\n\\n      emit StakingRewardDistributionFailed(_totalDelegatingReward, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the validator set based on the validator candidates from the Staking contract.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   * Emits the `BridgeOperatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncValidatorSet(uint256 _newPeriod) private returns (address[] memory _newValidators) {\\n    // NOTE: This is a temporary approach since the slashing issue is still not finalized.\\n    // Read more about slashing issue at: https://www.notion.so/skymavis/Slashing-Issue-9610ae1452434faca1213ab2e1d7d944\\n    _filterUnsatisfiedCandidates();\\n    uint256[] memory _weights = _stakingContract.bulkStakingTotal(_candidates);\\n    uint256[] memory _trustedWeights = _roninTrustedOrganizationContract.getConsensusWeights(_candidates);\\n    uint256 _newValidatorCount;\\n    (_newValidators, _newValidatorCount) = _pcPickValidatorSet(\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    _setNewValidatorSet(_newValidators, _newValidatorCount, _newPeriod);\\n    emit BridgeOperatorSetUpdated(_newPeriod, getBridgeOperators());\\n  }\\n\\n  /**\\n   * @dev Private helper function helps writing the new validator set into the contract storage.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _setNewValidatorSet(\\n    address[] memory _newValidators,\\n    uint256 _newValidatorCount,\\n    uint256 _newPeriod\\n  ) private {\\n    for (uint256 _i = _newValidatorCount; _i < validatorCount; _i++) {\\n      delete _validatorMap[_validators[_i]];\\n      delete _validators[_i];\\n    }\\n\\n    uint256 _count;\\n    for (uint256 _i = 0; _i < _newValidatorCount; _i++) {\\n      address _newValidator = _newValidators[_i];\\n      if (_newValidator == _validators[_count]) {\\n        _count++;\\n        continue;\\n      }\\n\\n      delete _validatorMap[_validators[_count]];\\n      _validatorMap[_newValidator] = EnumFlags.ValidatorFlag.Both;\\n      _validators[_count] = _newValidator;\\n      _count++;\\n    }\\n\\n    validatorCount = _count;\\n    emit ValidatorSetUpdated(_newPeriod, _newValidators);\\n  }\\n\\n  /**\\n   * @dev Activate/Deactivate the validators from producing blocks, based on their in jail status and maintenance status.\\n   *\\n   * Requirements:\\n   * - This method is called at the end of each epoch\\n   *\\n   * Emits the `BlockProducerSetUpdated` event.\\n   *\\n   */\\n  function _revampBlockProducers(uint256 _newPeriod, address[] memory _currentValidators) private {\\n    bool[] memory _maintainingList = _maintenanceContract.bulkMaintaining(_candidates, block.number + 1);\\n\\n    for (uint _i = 0; _i < _currentValidators.length; _i++) {\\n      address _currentValidator = _currentValidators[_i];\\n      bool _isProducerBefore = isBlockProducer(_currentValidator);\\n      bool _isProducerAfter = !(_jailed(_currentValidator) || _maintainingList[_i]);\\n\\n      if (!_isProducerBefore && _isProducerAfter) {\\n        _validatorMap[_currentValidator] = _validatorMap[_currentValidator].addFlag(\\n          EnumFlags.ValidatorFlag.BlockProducer\\n        );\\n        continue;\\n      }\\n\\n      if (_isProducerBefore && !_isProducerAfter) {\\n        _validatorMap[_currentValidator] = _validatorMap[_currentValidator].removeFlag(\\n          EnumFlags.ValidatorFlag.BlockProducer\\n        );\\n      }\\n    }\\n\\n    emit BlockProducerSetUpdated(_newPeriod, getBlockProducers());\\n  }\\n\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n  //                             OTHER HELPER FUNCTIONS                                //\\n  ///////////////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function _jailed(address _validatorAddr) internal view returns (bool) {\\n    return _jailedAtBlock(_validatorAddr, block.number);\\n  }\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function _jailedAtBlock(address _validatorAddr, uint256 _blockNum) internal view returns (bool) {\\n    return _blockNum <= _jailedUntil[_validatorAddr];\\n  }\\n\\n  /**\\n   * @dev Returns whether the block producer has no pending reward in that period.\\n   */\\n  function _miningRewardDeprecated(address _validatorAddr, uint256 _period) internal view returns (bool) {\\n    return _miningRewardDeprecatedAtPeriod[_validatorAddr][_period];\\n  }\\n\\n  /**\\n   * @dev Returns whether the bridge operator has no pending reward in the period.\\n   */\\n  function _bridgeRewardDeprecated(address _validatorAddr, uint256 _period) internal view returns (bool) {\\n    return _bridgeRewardDeprecatedAtPeriod[_validatorAddr][_period];\\n  }\\n\\n  /**\\n   * @dev See {IRoninValidatorSet-setMaxValidatorNumber}\\n   */\\n  function _setMaxValidatorNumber(uint256 _number) internal {\\n    _maxValidatorNumber = _number;\\n    emit MaxValidatorNumberUpdated(_number);\\n  }\\n\\n  /**\\n   * @dev See {IRoninValidatorSet-setMaxPrioritizedValidatorNumber}\\n   */\\n  function _setMaxPrioritizedValidatorNumber(uint256 _number) internal {\\n    require(\\n      _number <= _maxValidatorNumber,\\n      \\\"RoninValidatorSet: cannot set number of prioritized greater than number of max validators\\\"\\n    );\\n\\n    _maxPrioritizedValidatorNumber = _number;\\n    emit MaxPrioritizedValidatorNumberUpdated(_number);\\n  }\\n\\n  /**\\n   * @dev See {IRoninValidatorSet-isPeriodEnding}\\n   */\\n  function _isPeriodEnding(uint256 _newPeriod) public view virtual returns (bool) {\\n    return _newPeriod > _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @dev Returns the calculated period.\\n   */\\n  function _computePeriod(uint256 _timestamp) internal pure returns (uint256) {\\n    return _timestamp / _periodLength;\\n  }\\n\\n  /**\\n   * @dev Only receives RON from staking vesting contract.\\n   */\\n  function _fallback() internal view {\\n    require(\\n      msg.sender == stakingVestingContract(),\\n      \\\"RoninValidatorSet: only receives RON from staking vesting contract\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x4df84cf446f2d3c29763ebfba8ab8db792b84513f8888918c73fe6fa6d1a4977\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b603c54610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b603c5460ff9081161015620000e257603c805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b614b8c80620000f46000396000f3fe60806040526004361061036f5760003560e01c80637043e5dd116101c65780639e94b9ec116100f7578063ba77b06c11610095578063d2cb215e1161006f578063d2cb215e146109cd578063ee99205c146109eb578063eeb629a814610a09578063facd743b14610a1e5761037e565b8063ba77b06c14610983578063c94aaa0214610998578063d09f1ab4146109b85761037e565b8063ad295783116100d1578063ad2957831461090e578063b405aaf21461092e578063b5e337de1461094e578063b7ab4db51461096e5761037e565b80639e94b9ec146108a1578063a0c3f2d2146108b6578063a3d545f5146108ee5761037e565b806387c891bd116101645780639b19dbfd1161013e5780639b19dbfd1461082a5780639b8c334b1461083f5780639c8d98da146108615780639dd373b9146108815761037e565b806387c891bd146107e15780638d559c38146107f657806392a8c2e81461080a5761037e565b80637593ff71116101a05780637593ff711461074457806381f9535f14610764578063823a7b9c146107a157806385ad5aec146107c15761037e565b80637043e5dd146106fc57806372e468101461071c578063733ec970146107245761037e565b806346fe9311116102a0578063562d53041161023e578063605239a111610218578063605239a11461069257806365244ece146106a75780636aa1c2ef146106c75780636efa12bd146106dc5761037e565b8063562d53041461063f578063570ccb13146106545780635a08482d146106745761037e565b80634f2a693f1161027a5780634f2a693f146105d757806352091f17146105f75780635248184a146105ff5780635511cde1146106215761037e565b806346fe93111461057557806349096d26146105955780634a68f8c6146105b75761037e565b8063297a8fca1161030d5780633986de6a116102e75780633986de6a146104f65780633b3159b614610516578063428483c31461052a5780634493421e146105575761037e565b8063297a8fca1461048f5780632bcf3d15146104a45780633529214b146104c45761037e565b806315b5ebde1161034957806315b5ebde1461040d578063217f35c21461042d5780632607d9191461044257806328bde1e1146104625761037e565b806304d971ab1461038657806306040618146103d85780630f43a677146103f75761037e565b3661037e5761037c610a3e565b005b61037c610a3e565b34801561039257600080fd5b506103c36103a136600461400d565b6001600160a01b03918216600090815260096020526040902054821691161490565b60405190151581526020015b60405180910390f35b3480156103e457600080fd5b506040545b6040519081526020016103cf565b34801561040357600080fd5b506103e960425481565b34801561041957600080fd5b5061037c610428366004614046565b610ad0565b34801561043957600080fd5b506103c3610bbb565b34801561044e57600080fd5b506103c361045d366004614046565b610bce565b34801561046e57600080fd5b5061048261047d366004614072565b610bf2565b6040516103cf9190614137565b34801561049b57600080fd5b506041546103e9565b3480156104b057600080fd5b5061037c6104bf366004614072565b610d35565b3480156104d057600080fd5b506001546001600160a01b03165b6040516001600160a01b0390911681526020016103cf565b34801561050257600080fd5b5061037c61051136600461414a565b610d79565b34801561052257600080fd5b5060686104de565b34801561053657600080fd5b5061054a61054536600461423f565b610ee2565b6040516103cf9190614280565b34801561056357600080fd5b506005546001600160a01b03166104de565b34801561058157600080fd5b5061037c610590366004614072565b610f9d565b3480156105a157600080fd5b506105aa610fde565b6040516103cf919061430a565b3480156105c357600080fd5b5061054a6105d236600461423f565b6110c7565b3480156105e357600080fd5b5061037c6105f236600461431d565b611191565b61037c6111d2565b34801561060b57600080fd5b50610614611559565b6040516103cf9190614336565b34801561062d57600080fd5b506004546001600160a01b03166104de565b34801561064b57600080fd5b506042546103e9565b34801561066057600080fd5b5061037c61066f366004614398565b611715565b34801561068057600080fd5b506002546001600160a01b03166104de565b34801561069e57600080fd5b506006546103e9565b3480156106b357600080fd5b506103c36106c2366004614072565b6118a2565b3480156106d357600080fd5b50603e546103e9565b3480156106e857600080fd5b5061037c6106f7366004614046565b6118e2565b34801561070857600080fd5b506103c3610717366004614072565b611a3a565b61037c611a46565b34801561073057600080fd5b5061037c61073f3660046143cd565b611c91565b34801561075057600080fd5b506103c361075f36600461431d565b611f96565b34801561077057600080fd5b5061078461077f366004614072565b611fbb565b6040805193151584526020840192909252908201526060016103cf565b3480156107ad57600080fd5b5061037c6107bc36600461431d565b611fd7565b3480156107cd57600080fd5b506107846107dc366004614046565b612018565b3480156107ed57600080fd5b50603f546103e9565b34801561080257600080fd5b5060666104de565b34801561081657600080fd5b5061054a610825366004614431565b61209b565b34801561083657600080fd5b506105aa612158565b34801561084b57600080fd5b506103c361085a36600461431d565b6040541090565b34801561086d57600080fd5b5061037c61087c366004614072565b612218565b34801561088d57600080fd5b5061037c61089c366004614072565b612259565b3480156108ad57600080fd5b506103e961229a565b3480156108c257600080fd5b506103c36108d1366004614072565b6001600160a01b0316600090815260086020526040902054151590565b3480156108fa57600080fd5b506103e961090936600461431d565b6122ee565b34801561091a57600080fd5b5061037c610929366004614072565b612309565b34801561093a57600080fd5b506103c3610949366004614072565b61234a565b34801561095a57600080fd5b5061037c610969366004614072565b6123af565b34801561097a57600080fd5b506105aa6123f0565b34801561098f57600080fd5b506105aa61249d565b3480156109a457600080fd5b5061037c6109b336600461431d565b6124ff565b3480156109c457600080fd5b50603d546103e9565b3480156109d957600080fd5b506003546001600160a01b03166104de565b3480156109f757600080fd5b506000546001600160a01b03166104de565b348015610a1557600080fd5b506045546103e9565b348015610a2a57600080fd5b506103c3610a39366004614072565b612540565b6001546001600160a01b03163314610ace5760405162461bcd60e51b815260206004820152604260248201527f526f6e696e56616c696461746f725365743a206f6e6c7920726563656976657360448201527f20524f4e2066726f6d207374616b696e672076657374696e6720636f6e74726160648201526118dd60f21b608482015260a4015b60405180910390fd5b565b33610ae36002546001600160a01b031690565b6001600160a01b031614610b095760405162461bcd60e51b8152600401610ac59061447c565b6001600160a01b038216600081815260476020908152604080832085845282528083208054600160ff199182168117909255948452604683528184208685529092529091208054909216909155610b609043614501565b6001600160a01b038316600081815260496020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e90610baf9084815260200190565b60405180910390a25050565b6000610bc961085a4261257d565b905090565b6001600160a01b0382166000908152604960205260408120548211155b9392505050565b610bfa613ecc565b6001600160a01b038216600090815260086020526040902054610c2f5760405162461bcd60e51b8152600401610ac590614518565b6001600160a01b03808316600090815260096020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a083015260068101805460c084019190610cac9061456a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd89061456a565b8015610d255780601f10610cfa57610100808354040283529160200191610d25565b820191906000526020600020905b815481529060010190602001808311610d0857829003601f168201915b5050505050815250509050919050565b610d3d61258c565b6001600160a01b0316336001600160a01b031614610d6d5760405162461bcd60e51b8152600401610ac59061459f565b610d76816125ba565b50565b603c54610100900460ff1615808015610d995750603c54600160ff909116105b80610db35750303b158015610db35750603c5460ff166001145b610e165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac5565b603c805460ff191660011790558015610e3957603c805461ff0019166101001790555b610e428b6125ba565b610e4b8a61260f565b610e548961265d565b610e5d886126ab565b610e66866126f9565b610e6f87612747565b610e7885612795565b610e81846127ca565b610e8a836127ff565b603e8290558015610ed557603c805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6060816001600160401b03811115610efc57610efc6145e1565b604051908082528060200260200182016040528015610f25578160200160208202803683370190505b50905060005b82811015610f9657610f62848483818110610f4857610f486145f7565b9050602002016020810190610f5d9190614072565b6128d2565b828281518110610f7457610f746145f7565b9115156020928302919091019091015280610f8e8161460d565b915050610f2b565b5092915050565b610fa561258c565b6001600160a01b0316336001600160a01b031614610fd55760405162461bcd60e51b8152600401610ac59061459f565b610d76816126ab565b60606042546001600160401b03811115610ffa57610ffa6145e1565b604051908082528060200260200182016040528015611023578160200160208202803683370190505b5090506000805b82518110156110c157600081815260436020526040902054611054906001600160a01b03166118a2565b156110af576000818152604360205260409020546001600160a01b0316838361107c8161460d565b94508151811061108e5761108e6145f7565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806110b98161460d565b91505061102a565b50815290565b6060816001600160401b038111156110e1576110e16145e1565b60405190808252806020026020018201604052801561110a578160200160208202803683370190505b509050600061111860405490565b905060005b838110156111895761115585858381811061113a5761113a6145f7565b905060200201602081019061114f9190614072565b836128f3565b838281518110611167576111676145f7565b91151560209283029190910190910152806111818161460d565b91505061111d565b505092915050565b61119961258c565b6001600160a01b0316336001600160a01b0316146111c95760405162461bcd60e51b8152600401610ac59061459f565b610d76816127ca565b3341146111f15760405162461bcd60e51b8152600401610ac590614628565b343360006111fe826118a2565b8015611210575061120e826128d2565b155b801561122b57506112298261122460405490565b6128f3565b155b60018054604051630634f5b960e01b8152831515600482015260248101839052929350909160009182916001600160a01b0390911690630634f5b990604401606060405180830381600087803b15801561128457600080fd5b505af1158015611298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bc919061468e565b925092505080604c60008282546112d391906146c3565b9091555084905061132a57846001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e87600160405161131a9291906146f1565b60405180910390a2505050505050565b60408051878152602081018490526001600160a01b038716917f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b1910160405180910390a2600061137960405490565b9050600061138784896146c3565b6001600160a01b03881660009081526047602090815260408083208684529091528120549192509060ff161561149a576002546040805163631c8fd160e11b815290516000926001600160a01b03169163c6391fa2916004808301926080929190829003018186803b1580156113fc57600080fd5b505afa158015611410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114349190614723565b935050505061271081846114489190614759565b611452919061478e565b9150886001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e8360026040516114909291906146f1565b60405180910390a2505b6114a48183614501565b6001600160a01b0389166000908152600960205260408120600401549193506127106114d08584614759565b6114da919061478e565b6001600160a01b038b166000908152604a60205260408120805492935083929091906115079084906146c3565b90915550600090506115198286614501565b6001600160a01b038c166000908152604b60205260408120805492935083929091906115469084906146c3565b9091555050505050505050505050505050565b6007546060906001600160401b03811115611576576115766145e1565b6040519080825280602002602001820160405280156115af57816020015b61159c613ecc565b8152602001906001900390816115945790505b50905060005b81518110156117115760096000600783815481106115d5576115d56145f7565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a083015260068101805460c08401919061165f9061456a565b80601f016020809104026020016040519081016040528092919081815260200182805461168b9061456a565b80156116d85780601f106116ad576101008083540402835291602001916116d8565b820191906000526020600020905b8154815290600101906020018083116116bb57829003601f168201915b5050505050815250508282815181106116f3576116f36145f7565b602002602001018190525080806117099061460d565b9150506115b5565b5090565b336117286002546001600160a01b031690565b6001600160a01b03161461174e5760405162461bcd60e51b8152600401610ac59061447c565b600061175960405490565b6001600160a01b03851660008181526046602090815260408083208584528252808320805460ff19166001179055928252604a8152828220829055604b81528282208290556049905220549091508311156117ca576001600160a01b03841660009081526049602052604090208390555b81156118375760005460405163c905bb3560e01b81526001600160a01b038681166004830152602482018590529091169063c905bb3590604401600060405180830381600087803b15801561181e57600080fd5b505af1158015611832573d6000803e3d6000fd5b505050505b6001600160a01b038416600081815260496020908152604080832054815190815291820186905260019082015260608101919091528291907f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a9060800160405180910390a350505050565b6001600160a01b0381166000908152604460205260408120546118dc9060019060ff1660038111156118d6576118d66146db565b9061291e565b92915050565b336118f56000546001600160a01b031690565b6001600160a01b03161461191b5760405162461bcd60e51b8152600401610ac5906147a2565b6001600160a01b0382166000908152600860205260409020546119505760405162461bcd60e51b8152600401610ac590614518565b600061195c82426146c3565b6001600160a01b03841660009081526009602052604090206005015490915081106119dd5760405162461bcd60e51b815260206004820152602b60248201527f43616e6469646174654d616e616765723a20696e76616c6964207265766f6b6560448201526a0642074696d657374616d760ac1b6064820152608401610ac5565b6001600160a01b03831660008181526009602052604090819020600501839055517fdb451f2c533d44367eeca766bcee562bfc473b8d3f5d34f7b87befe026434aaa90611a2d9084815260200190565b60405180910390a2505050565b60006118dc8243610bce565b334114611a655760405162461bcd60e51b8152600401610ac590614628565b611a6e43611f96565b611ad65760405162461bcd60e51b815260206004820152603360248201527f526f6e696e56616c696461746f725365743a206f6e6c7920616c6c6f776564206044820152720c2e840e8d0ca40cadcc840decc40cae0dec6d606b1b6064820152608401610ac5565b611adf436122ee565b611aea603f546122ee565b10611b555760405162461bcd60e51b815260206004820152603560248201527f526f6e696e56616c696461746f725365743a20717565727920666f7220616c726044820152740cac2c8f240eee4c2e0e0cac840eae040cae0dec6d605b1b6064820152608401610ac5565b43603f556000611b644261257d565b90506000611b73826040541090565b9050611b804360016146c3565b6041556000611b8d6123f0565b90506000611b9a436122ee565b90506000611ba760405490565b90508315611c3e57600080611bbc8386612951565b91509150611bcc83868484612d87565b60025460405163129fccc160e01b81526001600160a01b039091169063129fccc190611bfe90889087906004016147ff565b600060405180830381600087803b158015611c1857600080fd5b505af1158015611c2c573d6000803e3d6000fd5b50505050611c3987612e8a565b945050505b611c48858461306a565b81817f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce786604051611c7d911515815260200190565b60405180910390a350505060409190915550565b33611ca46000546001600160a01b031690565b6001600160a01b031614611cca5760405162461bcd60e51b8152600401610ac5906147a2565b6007546006548110611d3d5760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174654d616e616765723a2065786365656473206d6178696d756044820152756d206e756d626572206f662063616e6469646174657360501b6064820152608401610ac5565b6001600160a01b03851660009081526008602052604090205415611dc25760405162461bcd60e51b815260206004820152603660248201527f43616e6469646174654d616e616765723a20717565727920666f7220616c7265604482015275616479206578697374656e742063616e64696461746560501b6064820152608401610ac5565b612710821115611e255760405162461bcd60e51b815260206004820152602860248201527f43616e6469646174654d616e616765723a20696e76616c696420636f6d697373604482015267696f6e207261746560c01b6064820152608401610ac5565b6001600160a01b038581166000818152600860209081526040808320861990556007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b03199081168717909155825160e0810184528d881681528085018781528c89168286019081528c8a1660608401908152608084018d815260001960a0860190815288518b8152808b018a5260c087019081529b8b5260098a5297909920845181548716908d16178155925195830180548616968c1696909617909555516002820180548516918b169190911790559251600384018054909316981697909717905592516004840155516005830155915180519192611f4292600685019290910190613f2d565b50506040516001600160a01b038581168252808916925086811691908816907fd690f592ed983cfbc05717fbcf06c4e10ae328432c309fe49246cf4a4be69fcd9060200160405180910390a4505050505050565b60006001603e54611fa79190614501565b603e54611fb49084614821565b1492915050565b6000806000611fca8443612018565b9250925092509193909250565b611fdf61258c565b6001600160a01b0316336001600160a01b03161461200f5760405162461bcd60e51b8152600401610ac59061459f565b610d7681612795565b6001600160a01b038216600090815260496020526040812054819081908481101561204e57600080600093509350935050612094565b6001935061205c8582614501565b6120679060016146c3565b9250612072856122ee565b61207b826122ee565b6120859190614501565b6120909060016146c3565b9150505b9250925092565b6060826001600160401b038111156120b5576120b56145e1565b6040519080825280602002602001820160405280156120de578160200160208202803683370190505b50905060005b838110156121505761211c858583818110612101576121016145f7565b90506020020160208101906121169190614072565b846128f3565b82828151811061212e5761212e6145f7565b91151560209283029190910190910152806121488161460d565b9150506120e4565b509392505050565b60606042546001600160401b03811115612174576121746145e1565b60405190808252806020026020018201604052801561219d578160200160208202803683370190505b50905060005b8151811015611711576000818152604360209081526040808320546001600160a01b03908116845260099092529091206003015483519116908390839081106121ee576121ee6145f7565b6001600160a01b0390921660209283029190910190910152806122108161460d565b9150506121a3565b61222061258c565b6001600160a01b0316336001600160a01b0316146122505760405162461bcd60e51b8152600401610ac59061459f565b610d76816126f9565b61226161258c565b6001600160a01b0316336001600160a01b0316146122915760405162461bcd60e51b8152600401610ac59061459f565b610d768161260f565b6000805b604254811015611711576000818152604360205260409020546122c9906001600160a01b03166118a2565b156122dc57816122d88161460d565b9250505b806122e68161460d565b91505061229e565b6000603e54826122fe919061478e565b6118dc9060016146c3565b61231161258c565b6001600160a01b0316336001600160a01b0316146123415760405162461bcd60e51b8152600401610ac59061459f565b610d768161265d565b6000805b6042548110156123a9576000818152604360209081526040808320546001600160a01b0390811684526009909252909120600301548116908416141561239757600191506123a9565b806123a18161460d565b91505061234e565b50919050565b6123b761258c565b6001600160a01b0316336001600160a01b0316146123e75760405162461bcd60e51b8152600401610ac59061459f565b610d7681612747565b60606042546001600160401b0381111561240c5761240c6145e1565b604051908082528060200260200182016040528015612435578160200160208202803683370190505b50905060005b81518110156117115760008181526043602052604090205482516001600160a01b0390911690839083908110612473576124736145f7565b6001600160a01b0390921660209283029190910190910152806124958161460d565b91505061243b565b606060078054806020026020016040519081016040528092919081815260200182805480156124f557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116124d7575b5050505050905090565b61250761258c565b6001600160a01b0316336001600160a01b0316146125375760405162461bcd60e51b8152600401610ac59061459f565b610d76816127ff565b6001600160a01b0381166000908152604460205260408120546125769060ff166003811115612571576125716146db565b6132bd565b1592915050565b60006118dc620151808361478e565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527faa5b07dd43aa44c69b70a6a2b9c3fcfed12b6e5f6323596ba7ac91035ab80a4f906020015b60405180910390a150565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f6397f5b135542bb3f477cb346cfab5abdec1251d08dc8f8d4efb4ffe122ea0bf90602001612604565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fc328090a37d855191ab58469296f98f87a851ca57d5cdfd1e9ac3c83e9e7096d90602001612604565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b90602001612604565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f034c8da497df28467c79ddadbba1cc3cdd41f510ea73faae271e6f16a611162190602001612604565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001612604565b603d8190556040518181527fb5464c05fd0e0f000c535850116cda2742ee1f7b34384cb920ad7b8e802138b590602001612604565b60068190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab490602001612604565b603d5481111561289d5760405162461bcd60e51b815260206004820152605960248201527f526f6e696e56616c696461746f725365743a2063616e6e6f7420736574206e7560448201527f6d626572206f66207072696f726974697a65642067726561746572207468616e60648201527f206e756d626572206f66206d61782076616c696461746f727300000000000000608482015260a401610ac5565b60458190556040518181527fa9588dc77416849bd922605ce4fc806712281ad8a8f32d4238d6c8cca548e15e90602001612604565b6001600160a01b0381166000908152604960205260408120544311156118dc565b6001600160a01b03919091166000908152604660209081526040808320938352929052205460ff1690565b6000816003811115612932576129326146db565b836003811115612944576129446146db565b1660ff1615159392505050565b6000606082516001600160401b0381111561296e5761296e6145e1565b604051908082528060200260200182016040528015612997578160200160208202803683370190505b5060055460405163889998ef60e01b81526004810187905291925060009182916001600160a01b0316908290829063889998ef9060240160206040518083038186803b1580156129e657600080fd5b505afa1580156129fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1e9190614835565b60405163033cdc2b60e31b8152600481018a90529091506000906001600160a01b038416906319e6e1589060240160206040518083038186803b158015612a6457600080fd5b505afa158015612a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9c9190614835565b90506000836001600160a01b03166357daa1708b8b6040518363ffffffff1660e01b8152600401612ace92919061484e565b60006040518083038186803b158015612ae657600080fd5b505afa158015612afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b2291908101906148c2565b90506000806000600260009054906101000a90046001600160a01b03166001600160a01b0316631079402a6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b7757600080fd5b505afa158015612b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612baf9190614957565b92509250925060005b8c51811015612d70578c8181518110612bd357612bd36145f7565b60200260200101519950600960008b6001600160a01b03166001600160a01b0316815260200190815260200160002060020160009054906101000a90046001600160a01b03169850612c448e8b878481518110612c3257612c326145f7565b6020026020010151898b8989896132db565b612c748a8f6001600160a01b03919091166000908152604860209081526040808320938352929052205460ff1690565b612ca2576001600160a01b03808b16600090815260096020526040902060030154612ca2918c91168b6134f7565b612cab8a6128d2565b158015612cbf5750612cbd8a8f6128f3565b155b15612d2e576001600160a01b038a166000908152604b6020526040902054612ce7908d6146c3565b6001600160a01b038b166000908152604b60205260409020548c51919d50908c9083908110612d1857612d186145f7565b602002602001018181525050612d2e8a8a6135da565b6001600160a01b038a166000908152604b60209081526040808320839055604a8252808320839055604d90915281205580612d688161460d565b915050612bb8565b50604c600090555050505050505050509250929050565b6000546001600160a01b03168215612e8257612da381846136a4565b15612e4957604051633b8cb16b60e01b81526001600160a01b03821690633b8cb16b90612dd890879086908a906004016149b5565b600060405180830381600087803b158015612df257600080fd5b505af1158015612e06573d6000803e3d6000fd5b505050507feb09b8cc1cefa77cd4ec30003e6364cf60afcedd20be8c09f26e717788baf13983604051612e3b91815260200190565b60405180910390a150612e84565b604080518481524760208201527f0752cb1e4b6fb7b2beb1cf423d908acaec7acfb7782e67a88d158351b1c0c4a5910160405180910390a15b505b50505050565b6060612e94613700565b600080546040516357e5970160e11b81526001600160a01b039091169063afcb2e0290612ec690600790600401614a29565b60006040518083038186803b158015612ede57600080fd5b505afa158015612ef2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f1a91908101906148c2565b60048054604051632907e73160e11b81529293506000926001600160a01b039091169163520fce6291612f509160079101614a29565b60006040518083038186803b158015612f6857600080fd5b505afa158015612f7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612fa491908101906148c2565b90506000613013600780548060200260200160405190810160405280929190818152602001828054801561300157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fe3575b50505050508484603d54604554613a1c565b9094509050613023848287613b3b565b847f8d7d519e81c2b8dc67b44fd645fd2c8805110d9ab1d643e3dd68b622bde331ff61304d612158565b60405161305a919061430a565b60405180910390a2505050919050565b6003546000906001600160a01b031663f0a46709600761308b4360016146c3565b6040518363ffffffff1660e01b81526004016130a8929190614a3c565b60006040518083038186803b1580156130c057600080fd5b505afa1580156130d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130fc9190810190614a4f565b905060005b825181101561328557600083828151811061311e5761311e6145f7565b602002602001015190506000613133826118a2565b90506000613140836128d2565b806131615750848481518110613158576131586145f7565b60200260200101515b1590508115801561316f5750805b156131ed576001600160a01b0383166000908152604460205260409020546131ae9060019060ff1660038111156131a8576131a86146db565b90613cc1565b6001600160a01b0384166000908152604460205260409020805460ff191660018360038111156131e0576131e06146db565b0217905550505050613273565b8180156131f8575080155b1561326f576001600160a01b0383166000908152604460205260409020546132379060019060ff166003811115613231576132316146db565b90613cfc565b6001600160a01b0384166000908152604460205260409020805460ff19166001836003811115613269576132696146db565b02179055505b5050505b8061327d8161460d565b915050613101565b50827f60324bb9c8b0d077621d76762c52d6cc937043427992a2f6a602b449315922ef6132b0610fde565b604051611a2d919061430a565b60008160038111156132d1576132d16146db565b60ff161592915050565b831580156132e7575084155b1561331a57604254604c546132fc919061478e565b6001600160a01b0388166000908152604d60205260409020556134ed565b60008561332961271089614759565b613333919061478e565b9050600061334382612710614501565b905083811115613431576001600160a01b03891660008181526048602090815260408083208e845282528083208054600160ff199182168117909255948452604683528184208f855290925290912080549092161790556133c56133a784436146c3565b6001600160a01b038b16600090815260496020526040902054613d38565b6001600160a01b038a166000818152604960209081526040808320859055805194855290840191909152600190830181905260608301528b917f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a906080015b60405180910390a36134ea565b848111156134bc576001600160a01b03891660008181526048602090815260408083208e84528252808320805460ff19166001908117909155848452604983528184205482519081529283018490529082019290925260608101919091528b91907f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a90608001613424565b85156134ea5785604c546134d0919061478e565b6001600160a01b038a166000908152604d60205260409020555b50505b5050505050505050565b6001600160a01b0383166000908152604d60205260409020548015612e845761352082826136a4565b1561358257816001600160a01b0316836001600160a01b0316856001600160a01b03167f72a57dc38837a1cba7881b7b1a5594d9e6b65cec6a985b54e2cee3e89369691c8460405161357491815260200190565b60405180910390a450505050565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fd35d76d87d51ed89407fc7ceaaccf32cf72784b94530892ce33546540e141b728447604051613574929190918252602082015260400190565b6001600160a01b0382166000908152604a6020526040902054801561369f5761360382826136a4565b1561365a57816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec8360405161364d91815260200190565b60405180910390a3505050565b604080518281524760208201526001600160a01b0380851692908616917f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e910161364d565b505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146136f1576040519150601f19603f3d011682016040523d82523d6000602084013e6136f6565b606091505b5090949350505050565b600080546040805163909791dd60e01b815290516001600160a01b039092169291839163909791dd916004808301926020929190829003018186803b15801561374857600080fd5b505afa15801561375c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137809190614835565b90506000826001600160a01b031663017dd95060076040518263ffffffff1660e01b81526004016137b19190614a29565b60006040518083038186803b1580156137c957600080fd5b505afa1580156137dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261380591908101906148c2565b600754909150600080826001600160401b03811115613826576138266145e1565b60405190808252806020026020018201604052801561384f578160200160208202803683370190505b5090506000805b848110156139785760078181548110613871576138716145f7565b9060005260206000200160009054906101000a90046001600160a01b03169150868682815181106138a4576138a46145f7565b602002602001015110806138d357506001600160a01b0382166000908152600960205260409020600501544210155b1561396657856138e286614adb565b955085815181106138f5576138f56145f7565b602002602001015186828151811061390f5761390f6145f7565b60209081029190910101528183856139268161460d565b965081518110613938576139386145f7565b60200260200101906001600160a01b031690816001600160a01b03168152505061396182613d4f565b613856565b806139708161460d565b915050613856565b50508115613a14578181527f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c91816040516139b2919061430a565b60405180910390a16040516374d62f0360e11b81526001600160a01b0387169063e9ac5e06906139e690849060040161430a565b600060405180830381600087803b158015613a0057600080fd5b505af11580156134ea573d6000803e3d6000fd5b505050505050565b60606000806068905060008888888888604051602401613a40959493929190614af2565b60408051601f19818403018152919052602080820180516001600160e01b0316633bca0a8960e11b17905281518b519293506001929091600091613a8391614759565b613a8e9060406146c3565b90506020840181888483895afa613aa457600093505b503d613aaf57600092505b60208701965082613b285760405162461bcd60e51b815260206004820152603960248201527f507265636f6d70696c6555736167655069636b56616c696461746f725365743a60448201527f2063616c6c20746f20707265636f6d70696c65206661696c73000000000000006064820152608401610ac5565b8651955050505050509550959350505050565b815b604254811015613b9957600081815260436020818152604080842080546001600160a01b0316855260448352908420805460ff19169055928490525280546001600160a01b031916905580613b918161460d565b915050613b3d565b506000805b83811015613c7b576000858281518110613bba57613bba6145f7565b602090810291909101810151600085815260439092526040909120549091506001600160a01b0380831691161415613bff5782613bf68161460d565b93505050613c69565b600083815260436020818152604080842080546001600160a01b03908116865260448452828620805460ff19908116909155908716808752928620805490911660031790559387905291905281546001600160a01b03191617905582613c648161460d565b935050505b80613c738161460d565b915050613b9e565b5080604281905550817f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e85604051613cb3919061430a565b60405180910390a250505050565b6000816003811115613cd557613cd56146db565b836003811115613ce757613ce76146db565b1760ff166003811115610beb57610beb6146db565b6000816003811115613d1057613d106146db565b19836003811115613d2357613d236146db565b1660ff166003811115610beb57610beb6146db565b600081831015613d485781610beb565b5090919050565b6001600160a01b03811660009081526008602052604090205480613d71575050565b6001600160a01b038216600090815260096020526040812080546001600160a01b0319908116825560018201805482169055600282018054821690556003820180549091169055600481018290556005810182905590613dd46006830182613fad565b50506001600160a01b038216600090815260086020526040812081905560078054613e0190600190614501565b81548110613e1157613e116145f7565b6000918252602090912001546001600160a01b03908116915083168114613e94576001600160a01b0381166000908152600860205260409020829055600780548291908419908110613e6557613e656145f7565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6007805480613ea557613ea5614b40565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081525090565b828054613f399061456a565b90600052602060002090601f016020900481019282613f5b5760008555613fa1565b82601f10613f7457805160ff1916838001178555613fa1565b82800160010185558215613fa1579182015b82811115613fa1578251825591602001919060010190613f86565b50611711929150613fe3565b508054613fb99061456a565b6000825580601f10613fc9575050565b601f016020900490600052602060002090810190610d7691905b5b808211156117115760008155600101613fe4565b6001600160a01b0381168114610d7657600080fd5b6000806040838503121561402057600080fd5b823561402b81613ff8565b9150602083013561403b81613ff8565b809150509250929050565b6000806040838503121561405957600080fd5b823561406481613ff8565b946020939093013593505050565b60006020828403121561408457600080fd5b8135610beb81613ff8565b600060018060a01b038083511684526020818185015116818601528160408501511660408601528160608501511660608601526080840151608086015260a084015160a086015260c0840151915060e060c086015281518060e087015260005b8181101561410c57838101830151878201610100015282016140ef565b8181111561411f57600061010083890101525b50601f01601f19169490940161010001949350505050565b602081526000610beb602083018461408f565b6000806000806000806000806000806101408b8d03121561416a57600080fd5b8a3561417581613ff8565b995060208b013561418581613ff8565b985060408b013561419581613ff8565b975060608b01356141a581613ff8565b965060808b01356141b581613ff8565b955060a08b01356141c581613ff8565b999c989b5096999598949794965050505060c08301359260e08101359261010082013592506101209091013590565b60008083601f84011261420657600080fd5b5081356001600160401b0381111561421d57600080fd5b6020830191508360208260051b850101111561423857600080fd5b9250929050565b6000806020838503121561425257600080fd5b82356001600160401b0381111561426857600080fd5b614274858286016141f4565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156142ba57835115158352928401929184019160010161429c565b50909695505050505050565b600081518084526020808501945080840160005b838110156142ff5781516001600160a01b0316875295820195908201906001016142da565b509495945050505050565b602081526000610beb60208301846142c6565b60006020828403121561432f57600080fd5b5035919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561438b57603f1988860301845261437985835161408f565b9450928501929085019060010161435d565b5092979650505050505050565b6000806000606084860312156143ad57600080fd5b83356143b881613ff8565b95602085013595506040909401359392505050565b600080600080600060a086880312156143e557600080fd5b85356143f081613ff8565b9450602086013561440081613ff8565b9350604086013561441081613ff8565b9250606086013561442081613ff8565b949793965091946080013592915050565b60008060006040848603121561444657600080fd5b83356001600160401b0381111561445c57600080fd5b614468868287016141f4565b909790965060209590950135949350505050565b60208082526049908201527f486173536c617368496e64696361746f72436f6e74726163743a206d6574686f60408201527f642063616c6c6572206d75737420626520736c61736820696e64696361746f726060820152680818dbdb9d1c9858dd60ba1b608082015260a00190565b634e487b7160e01b600052601160045260246000fd5b600082821015614513576145136144eb565b500390565b60208082526032908201527f43616e6469646174654d616e616765723a20717565727920666f72206e6f6e2d6040820152716578697374656e742063616e64696461746560701b606082015260800190565b600181811c9082168061457e57607f821691505b602082108114156123a957634e487b7160e01b600052602260045260246000fd5b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415614621576146216144eb565b5060010190565b60208082526031908201527f526f6e696e56616c696461746f725365743a206d6574686f642063616c6c6572604082015270206d75737420626520636f696e6261736560781b606082015260800190565b8051801515811461468957600080fd5b919050565b6000806000606084860312156146a357600080fd5b6146ac84614679565b925060208401519150604084015190509250925092565b600082198211156146d6576146d66144eb565b500190565b634e487b7160e01b600052602160045260246000fd5b828152604081016003831061471657634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000806000806080858703121561473957600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000816000190483118215151615614773576147736144eb565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261479d5761479d614778565b500490565b60208082526039908201527f4861735374616b696e674d616e616765723a206d6574686f642063616c6c657260408201527f206d757374206265207374616b696e6720636f6e747261637400000000000000606082015260800190565b60408152600061481260408301856142c6565b90508260208301529392505050565b60008261483057614830614778565b500690565b60006020828403121561484757600080fd5b5051919050565b82815260406020820152600061486760408301846142c6565b949350505050565b604051601f8201601f191681016001600160401b0381118282101715614897576148976145e1565b604052919050565b60006001600160401b038211156148b8576148b86145e1565b5060051b60200190565b600060208083850312156148d557600080fd5b82516001600160401b038111156148eb57600080fd5b8301601f810185136148fc57600080fd5b805161490f61490a8261489f565b61486f565b81815260059190911b8201830190838101908783111561492e57600080fd5b928401925b8284101561494c57835182529284019290840190614933565b979650505050505050565b60008060006060848603121561496c57600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b838110156142ff57815187529582019590820190600101614999565b6060815260006149c860608301866142c6565b82810360208401526149da8186614985565b915050826040830152949350505050565b6000815480845260208085019450836000528060002060005b838110156142ff5781546001600160a01b031687529582019560019182019101614a04565b602081526000610beb60208301846149eb565b60408152600061481260408301856149eb565b60006020808385031215614a6257600080fd5b82516001600160401b03811115614a7857600080fd5b8301601f81018513614a8957600080fd5b8051614a9761490a8261489f565b81815260059190911b82018301908381019087831115614ab657600080fd5b928401925b8284101561494c57614acc84614679565b82529284019290840190614abb565b600081614aea57614aea6144eb565b506000190190565b60a081526000614b0560a08301886142c6565b8281036020840152614b178188614985565b90508281036040840152614b2b8187614985565b60608401959095525050608001529392505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220107d3aec95fa9ef67b0f26393d90289be8c579a54c095a1ddbab8117eefcd4da64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_isPeriodEnding(uint256)": {
        "details": "See {IRoninValidatorSet-isPeriodEnding}"
      },
      "bridgeTrackingContract()": {
        "details": "Returns the bridge tracking contract."
      },
      "bulkJailed(address[])": {
        "details": "Returns whether the validators are put in jail (cannot join the set of validators) during the current period."
      },
      "currentPeriod()": {
        "details": "Returns the period index from the current block."
      },
      "currentPeriodStartAtBlock()": {
        "details": "Returns the block number that the current period starts at."
      },
      "epochEndingAt(uint256)": {
        "details": "Returns whether the epoch ending is at the block number `_block`."
      },
      "epochOf(uint256)": {
        "details": "Returns the epoch index from the block number."
      },
      "execBailOut(address,uint256)": {
        "details": "Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`."
      },
      "execSlash(address,uint256,uint256)": {
        "details": "Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`."
      },
      "getBlockProducers()": {
        "details": "Returns the current block producer list."
      },
      "getBridgeOperators()": {
        "details": "Returns the current bridge operator list."
      },
      "getCandidateInfo(address)": {
        "details": "Returns the info of a candidate."
      },
      "getCandidateInfos()": {
        "details": "Returns all candidate info."
      },
      "getLastUpdatedBlock()": {
        "details": "Returns the block that validator set was updated."
      },
      "getValidatorCandidates()": {
        "details": "Returns the validator candidate."
      },
      "getValidators()": {
        "details": "Returns the current validator list."
      },
      "grantValidatorCandidate(address,address,address,address,uint256)": {
        "details": "Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`."
      },
      "initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "isBlockProducer(address)": {
        "details": "Returns whether the address is block producer or not."
      },
      "isBridgeOperator(address)": {
        "details": "Returns whether the address is bridge operator or not."
      },
      "isCandidateAdmin(address,address)": {
        "details": "Returns whether the address is the candidate admin."
      },
      "isPeriodEnding()": {
        "details": "Returns whether the period ending at the current block number."
      },
      "isValidator(address)": {
        "details": "Returns whether the address is either a bridge operator or a block producer."
      },
      "isValidatorCandidate(address)": {
        "details": "Returns whether the address is a validator (candidate)."
      },
      "jailed(address)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) during the current period."
      },
      "jailedAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) at a specific block."
      },
      "jailedTimeLeft(address)": {
        "details": "Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail."
      },
      "jailedTimeLeftAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail."
      },
      "maintenanceContract()": {
        "details": "Returns the maintenance contract."
      },
      "maxPrioritizedValidatorNumber()": {
        "details": "Returns the number of reserved slots for prioritized validators"
      },
      "maxValidatorCandidate()": {
        "details": "Returns the maximum number of validator candidate."
      },
      "maxValidatorNumber()": {
        "details": "Returns the maximum number of validators in the epoch"
      },
      "miningRewardDeprecated(address[])": {
        "details": "Returns whether the incoming reward of the block producers are deprecated during the current period."
      },
      "miningRewardDeprecatedAtPeriod(address[],uint256)": {
        "details": "Returns whether the incoming reward of the block producers are deprecated during a specific period."
      },
      "numberOfBlocksInEpoch()": {
        "details": "Returns the number of blocks in a epoch."
      },
      "precompilePickValidatorSetAddress()": {
        "details": "Gets the address of the precompile of picking validator set"
      },
      "precompileSortValidatorsAddress()": {
        "details": "Gets the address of the precompile of sorting validators"
      },
      "requestRevokeCandidate(address,uint256)": {
        "details": "Requests to revoke a validator candidate in next `_secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokedTimestampUpdated`."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeTrackingContract(address)": {
        "details": "Sets the bridge tracking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeTrackingContractUpdated`."
      },
      "setMaintenanceContract(address)": {
        "details": "Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`."
      },
      "setMaxPrioritizedValidatorNumber(uint256)": {
        "details": "Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`"
      },
      "setMaxValidatorCandidate(uint256)": {
        "details": "Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event."
      },
      "setMaxValidatorNumber(uint256)": {
        "details": "Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`"
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "setSlashIndicatorContract(address)": {
        "details": "Sets the slash indicator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `SlashIndicatorContractUpdated`."
      },
      "setStakingContract(address)": {
        "details": "Sets the staking contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingContractUpdated`."
      },
      "setStakingVestingContract(address)": {
        "details": "Sets the staking vesting contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `StakingVestingContractUpdated`."
      },
      "slashIndicatorContract()": {
        "details": "Returns the slash indicator contract."
      },
      "stakingContract()": {
        "details": "Returns the staking contract."
      },
      "stakingVestingContract()": {
        "details": "Returns the staking vesting contract."
      },
      "submitBlockReward()": {
        "details": "Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call."
      },
      "totalBlockProducers()": {
        "details": "Returns total numbers of the block producers."
      },
      "totalBridgeOperators()": {
        "details": "Returns total numbers of the bridge operators."
      },
      "wrapUpEpoch()": {
        "details": "Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`."
      }
    },
    "stateVariables": {
      "_bridgeOperatingReward": {
        "details": "Mapping from consensus address => pending reward for being bridge operator"
      },
      "_bridgeRewardDeprecatedAtPeriod": {
        "details": "Mapping from consensus address => period number => block operator has no pending reward"
      },
      "_currentPeriodStartAtBlock": {
        "details": "The starting block of the last updated period"
      },
      "_delegatingReward": {
        "details": "Mapping from consensus address => pending reward from delegating"
      },
      "_jailedUntil": {
        "details": "Mapping from consensus address => the last block that the validator is jailed"
      },
      "_lastUpdatedBlock": {
        "details": "The last updated block"
      },
      "_lastUpdatedPeriod": {
        "details": "The last updated period"
      },
      "_maxPrioritizedValidatorNumber": {
        "details": "The number of slot that is reserved for prioritized validators"
      },
      "_maxValidatorNumber": {
        "details": "The maximum number of validator."
      },
      "_miningReward": {
        "details": "Mapping from consensus address => pending reward from producing block"
      },
      "_miningRewardBailoutCutOffAtPeriod": {
        "details": "Mapping from consensus address => period number => whether the block producer get cut off reward, due to bailout"
      },
      "_miningRewardDeprecatedAtPeriod": {
        "details": "Mapping from consensus address => period number => block producer has no pending reward"
      },
      "_numberOfBlocksInEpoch": {
        "details": "The number of blocks in a epoch"
      },
      "_periodLength": {
        "details": "Length of period in seconds"
      },
      "_totalBridgeReward": {
        "details": "The total reward for bridge operators"
      },
      "_validatorMap": {
        "details": "Mapping from address => flag indicating the validator ability: producing block, operating bridge"
      },
      "_validators": {
        "details": "Mapping from validator index => validator address"
      },
      "validatorCount": {
        "details": "The total of validators"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "totalBridgeOperators()": {
        "notice": "Notice: A validator is always a bride operator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6168,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_stakingContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IStaking)10973"
      },
      {
        "astId": 6238,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_stakingVestingContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStakingVesting)9984"
      },
      {
        "astId": 6098,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_slashIndicatorContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISlashIndicator)10468"
      },
      {
        "astId": 5855,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maintenanceContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMaintenance)9100"
      },
      {
        "astId": 6028,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRoninTrustedOrganization)9534"
      },
      {
        "astId": 5785,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeTrackingContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBridgeTracking)8610"
      },
      {
        "astId": 25025,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorCandidate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 25029,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidates",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25034,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25040,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(ValidatorCandidate)8627_storage)"
      },
      {
        "astId": 25045,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initialized",
        "offset": 0,
        "slot": "60",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initializing",
        "offset": 1,
        "slot": "60",
        "type": "t_bool"
      },
      {
        "astId": 25574,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorNumber",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 25577,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_numberOfBlocksInEpoch",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 25580,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedBlock",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 25583,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedPeriod",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      },
      {
        "astId": 25586,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_currentPeriodStartAtBlock",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 25589,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "validatorCount",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 25594,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validators",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 25600,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorMap",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_enum(ValidatorFlag)11047)"
      },
      {
        "astId": 25603,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxPrioritizedValidatorNumber",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 25610,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "70",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 25617,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardBailoutCutOffAtPeriod",
        "offset": 0,
        "slot": "71",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 25624,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "72",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 25629,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_jailedUntil",
        "offset": 0,
        "slot": "73",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25634,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningReward",
        "offset": 0,
        "slot": "74",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25639,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_delegatingReward",
        "offset": 0,
        "slot": "75",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25642,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalBridgeReward",
        "offset": 0,
        "slot": "76",
        "type": "t_uint256"
      },
      {
        "astId": 25647,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_bridgeOperatingReward",
        "offset": 0,
        "slot": "77",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IBridgeTracking)8610": {
        "encoding": "inplace",
        "label": "contract IBridgeTracking",
        "numberOfBytes": "20"
      },
      "t_contract(IMaintenance)9100": {
        "encoding": "inplace",
        "label": "contract IMaintenance",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)9534": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(ISlashIndicator)10468": {
        "encoding": "inplace",
        "label": "contract ISlashIndicator",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)10973": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingVesting)9984": {
        "encoding": "inplace",
        "label": "contract IStakingVesting",
        "numberOfBytes": "20"
      },
      "t_enum(ValidatorFlag)11047": {
        "encoding": "inplace",
        "label": "enum EnumFlags.ValidatorFlag",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(ValidatorFlag)11047)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum EnumFlags.ValidatorFlag)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidatorFlag)11047"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(ValidatorCandidate)8627_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.ValidatorCandidate)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorCandidate)8627_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(ValidatorCandidate)8627_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.ValidatorCandidate",
        "members": [
          {
            "astId": 8614,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8616,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "consensusAddr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8618,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "treasuryAddr",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 8620,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "bridgeOperatorAddr",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8622,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8624,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "revokedTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8626,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "extraData",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}