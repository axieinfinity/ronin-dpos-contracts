{
  "address": "0x7CA05B9246CC6e3053D37219C87653041F72565e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum ContractType",
          "name": "expectedContractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "ErrUnexpectedInternalCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "BridgeTrackingIncorrectlyResponded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        }
      ],
      "name": "RemovalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IBridgeSlashEvents.Tier",
          "name": "tier",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashUntilPeriod",
          "type": "uint256"
        }
      ],
      "name": "Slashed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_VOTE_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMOVE_DURATION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIER_1_PENALTY_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIER_2_PENALTY_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "allBridgeOperators",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ballots",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalBallot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "execSlashBridgeOperators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "slashed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "getAddedPeriodOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "addedPeriods",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenaltyDurations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "penaltyDurations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ballot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVote",
          "type": "uint256"
        }
      ],
      "name": "getSlashTier",
      "outputs": [
        {
          "internalType": "enum IBridgeSlashEvents.Tier",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "getSlashUntilPeriodOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "untilPeriods",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validatorContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeManagerContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeTrackingContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currentBridgeOperator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newBridgeOperator",
          "type": "address"
        }
      ],
      "name": "onBridgeOperatorUpdated",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "bridgeOperators",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "addeds",
          "type": "bool[]"
        }
      ],
      "name": "onBridgeOperatorsAdded",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "name": "onBridgeOperatorsRemoved",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2b67dcef68fefa08a8d696089607fc96689bc9d7d7581b0b87ee22332bb6cec",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x7CA05B9246CC6e3053D37219C87653041F72565e",
    "transactionIndex": 0,
    "gasUsed": "1232191",
    "logsBloom": "0x
    "blockHash": "0x13f79dc6339d216cbfcaf0737bb016f1941f9a6759d1c0e4928e0f725e301737",
    "transactionHash": "0xf2b67dcef68fefa08a8d696089607fc96689bc9d7d7581b0b87ee22332bb6cec",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19042846,
        "transactionHash": "0xf2b67dcef68fefa08a8d696089607fc96689bc9d7d7581b0b87ee22332bb6cec",
        "address": "0x7CA05B9246CC6e3053D37219C87653041F72565e",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x13f79dc6339d216cbfcaf0737bb016f1941f9a6759d1c0e4928e0f725e301737"
      }
    ],
    "blockNumber": 19042846,
    "cumulativeGasUsed": "1232191",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "04a9bbd243a024f931581fbb384106a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BridgeTrackingIncorrectlyResponded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"}],\"name\":\"RemovalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IBridgeSlashEvents.Tier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashUntilPeriod\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_VOTE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_DURATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIER_1_PENALTY_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIER_2_PENALTY_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allBridgeOperators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ballots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalBallot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"execSlashBridgeOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"slashed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"getAddedPeriodOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"addedPeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenaltyDurations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"penaltyDurations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ballot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVote\",\"type\":\"uint256\"}],\"name\":\"getSlashTier\",\"outputs\":[{\"internalType\":\"enum IBridgeSlashEvents.Tier\",\"name\":\"tier\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"getSlashUntilPeriodOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"untilPeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeManagerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeTrackingContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentBridgeOperator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBridgeOperator\",\"type\":\"address\"}],\"name\":\"onBridgeOperatorUpdated\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"addeds\",\"type\":\"bool[]\"}],\"name\":\"onBridgeOperatorsAdded\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"name\":\"onBridgeOperatorsRemoved\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that implements slashing functionality for bridge operators based on their availability.\",\"errors\":{\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"execSlashBridgeOperators(address[],uint256[],uint256,uint256,uint256)\":{\"details\":\"Slashes the unavailability of bridge operators during a specific period.\",\"params\":{\"period\":\"The period to slash the bridge operators for.\"}},\"getAddedPeriodOf(address[])\":{\"details\":\"Retrieves the added periods of the specified bridge operators.\",\"params\":{\"bridgeOperators\":\"An array of bridge operator addresses.\"},\"returns\":{\"addedPeriods\":\"An array of uint256 values representing the added periods for each bridge operator.\"}},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getPenaltyDurations()\":{\"details\":\"Retrieve the penalty durations for different slash tiers.\",\"returns\":{\"penaltyDurations\":\"The array of penalty durations for each slash tier.\"}},\"getSlashTier(uint256,uint256)\":{\"details\":\"Gets the slash tier based on the given ballot and total ballots.\",\"params\":{\"ballot\":\"The ballot count for a bridge operator.\",\"totalVote\":\"The total vote count for the period.\"},\"returns\":{\"tier\":\"The slash tier.\"}},\"getSlashUntilPeriodOf(address[])\":{\"details\":\"Returns the penalize durations for the specified bridge operators.\",\"params\":{\"bridgeOperators\":\"The addresses of the bridge operators.\"},\"returns\":{\"untilPeriods\":\"The penalized periods for the bridge operators.\"}},\"onBridgeOperatorUpdated(address,address)\":{\"details\":\"Handles the event when a bridge operator is updated.\",\"params\":{\"currentBridgeOperator\":\"The address of the current bridge operator.\",\"newbridgeOperator\":\"The new address of the bridge operator.\"},\"returns\":{\"_0\":\"The selector of the function being called.\"}},\"onBridgeOperatorsAdded(address[],bool[])\":{\"details\":\"Handles the event when bridge operators are added.\",\"params\":{\"addeds\":\"The corresponding boolean values indicating whether the operators were added or not.\",\"bridgeOperators\":\"The addresses of the bridge operators.\"},\"returns\":{\"_0\":\"The selector of the function being called.\"}},\"onBridgeOperatorsRemoved(address[],bool[])\":{\"details\":\"Handles the event when bridge operators are removed.\",\"params\":{\"bridgeOperators\":\"The addresses of the bridge operators.\",\"removeds\":\"The corresponding boolean values indicating whether the operators were removed or not.\"},\"returns\":{\"_0\":\"The selector of the function being called.\"}},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"stateVariables\":{\"BRIDGE_SLASH_INFOS_SLOT\":{\"details\":\"value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeSlash.bridgeSlashInfos.slot\\\") - 1\"},\"MINIMUM_VOTE_THRESHOLD\":{\"details\":\"External function to retrieve the value of the minimum vote threshold to execute slashing rule.\",\"return\":\"minimumVoteThreshold The minimum vote threshold value.\",\"returns\":{\"_0\":\"minimumVoteThreshold The minimum vote threshold value.\"}},\"PERCENTAGE_FRACTION\":{\"details\":\"Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\"},\"REMOVE_DURATION_THRESHOLD\":{\"details\":\"Returns the threshold duration for removing bridge operators.\",\"return\":\"The duration in period number that exceeds which a bridge operator will be removed.\",\"returns\":{\"_0\":\"The duration in period number that exceeds which a bridge operator will be removed.\"}},\"SLASH_PERMANENT_DURATION\":{\"details\":\"This value is set to the maximum value of uint128 to indicate a permanent slash duration.\"},\"TIER_1_PENALTY_DURATION\":{\"details\":\"Returns the penalty duration for Tier 1 slashing.\",\"return\":\"The duration in period number for Tier 1 slashing.\",\"returns\":{\"_0\":\"The duration in period number for Tier 1 slashing.\"}},\"TIER_1_THRESHOLD\":{\"details\":\"Tier 1 slashing threshold ratio is 10%\"},\"TIER_2_PENALTY_DURATION\":{\"details\":\"Returns the penalty duration for Tier 2 slashing.\",\"return\":\"The duration in period number for Tier 2 slashing.\",\"returns\":{\"_0\":\"The duration in period number for Tier 2 slashing.\"}},\"TIER_2_THRESHOLD\":{\"details\":\"Tier 2 slashing threshold ratio is 30%\"}},\"title\":\"BridgeSlash\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/gateway/BridgeSlash.sol\":\"BridgeSlash\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/extensions/bridge-operator-governance/BridgeTrackingHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract BridgeTrackingHelper {\\n  /// @dev Event emited when the bridge tracking contract tracks the invalid data, cause malform in sharing bridge reward.\\n  event BridgeTrackingIncorrectlyResponded();\\n\\n  /**\\n   * @dev Internal function to validate the bridge tracking response for a given set of ballots.\\n   * @param totalBallot The total number of ballots available for the tracking response.\\n   * @param totalVote The total number of votes recorded in the tracking response.\\n   * @param ballots An array containing the individual ballot counts in the tracking response.\\n   * @return valid A boolean indicating whether the bridge tracking response is valid or not.\\n   * @notice The function checks if each individual ballot count is not greater than the total votes recorded.\\n   * @notice It also verifies that the sum of all individual ballot counts does not exceed the total available ballots.\\n   */\\n  function _isValidBridgeTrackingResponse(\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256[] memory ballots\\n  ) internal pure returns (bool valid) {\\n    valid = true;\\n    uint256 sumBallot;\\n    uint256 length = ballots.length;\\n\\n    unchecked {\\n      for (uint256 i; i < length; ++i) {\\n        if (ballots[i] > totalVote) {\\n          valid = false;\\n          break;\\n        }\\n\\n        sumBallot += ballots[i];\\n      }\\n    }\\n\\n    valid = valid && (sumBallot <= totalBallot);\\n  }\\n}\\n\",\"keccak256\":\"0x2da3d7c4b8d48228761b48c79beb04a55065d24a3469a16043b00c45873844e5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IBridgeManagerCallback\\n * @dev Interface for the callback functions to be implemented by the Bridge Manager contract.\\n */\\ninterface IBridgeManagerCallback is IERC165 {\\n  /**\\n   * @dev Handles the event when bridge operators are added.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @param addeds The corresponding boolean values indicating whether the operators were added or not.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorsAdded(\\n    address[] memory bridgeOperators,\\n    bool[] memory addeds\\n  ) external returns (bytes4 selector);\\n\\n  /**\\n   * @dev Handles the event when bridge operators are removed.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @param removeds The corresponding boolean values indicating whether the operators were removed or not.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorsRemoved(\\n    address[] memory bridgeOperators,\\n    bool[] memory removeds\\n  ) external returns (bytes4 selector);\\n\\n  /**\\n   * @dev Handles the event when a bridge operator is updated.\\n   * @param currentBridgeOperator The address of the current bridge operator.\\n   * @param newbridgeOperator The new address of the bridge operator.\\n   * @return selector The selector of the function being called.\\n   */\\n  function onBridgeOperatorUpdated(\\n    address currentBridgeOperator,\\n    address newbridgeOperator\\n  ) external returns (bytes4 selector);\\n}\\n\",\"keccak256\":\"0xfd6868a1041577a463b6c96713edcb18063dc817154d09710abfd5783e4629ee\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeSlashEvents } from \\\"./events/IBridgeSlashEvents.sol\\\";\\n\\n/**\\n * @title IBridgeSlash\\n * @dev Interface for the BridgeSlash contract to manage slashing functionality for bridge operators.\\n */\\ninterface IBridgeSlash is IBridgeSlashEvents {\\n  /**\\n   * @dev Slashes the unavailability of bridge operators during a specific period.\\n   * @param period The period to slash the bridge operators for.\\n   */\\n  function execSlashBridgeOperators(\\n    address[] calldata operators,\\n    uint256[] calldata ballots,\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256 period\\n  ) external returns (bool slashed);\\n\\n  /**\\n   * @dev Returns the penalize durations for the specified bridge operators.\\n   * @param bridgeOperators The addresses of the bridge operators.\\n   * @return untilPeriods The penalized periods for the bridge operators.\\n   */\\n  function getSlashUntilPeriodOf(address[] calldata bridgeOperators) external returns (uint256[] memory untilPeriods);\\n\\n  /**\\n   * @dev Retrieves the added periods of the specified bridge operators.\\n   * @param bridgeOperators An array of bridge operator addresses.\\n   * @return addedPeriods An array of uint256 values representing the added periods for each bridge operator.\\n   */\\n  function getAddedPeriodOf(address[] calldata bridgeOperators) external view returns (uint256[] memory addedPeriods);\\n\\n  /**\\n   * @dev Gets the slash tier based on the given ballot and total ballots.\\n   * @param ballot The ballot count for a bridge operator.\\n   * @param totalVote The total vote count for the period.\\n   * @return tier The slash tier.\\n   */\\n  function getSlashTier(uint256 ballot, uint256 totalVote) external pure returns (Tier tier);\\n\\n  /**\\n   * @dev Retrieve the penalty durations for different slash tiers.\\n   * @return penaltyDurations The array of penalty durations for each slash tier.\\n   */\\n  function getPenaltyDurations() external pure returns (uint256[] memory penaltyDurations);\\n\\n  /**\\n   * @dev Returns the penalty duration for Tier 1 slashing.\\n   * @return The duration in period number for Tier 1 slashing.\\n   */\\n  function TIER_1_PENALTY_DURATION() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the penalty duration for Tier 2 slashing.\\n   * @return The duration in period number for Tier 2 slashing.\\n   */\\n  function TIER_2_PENALTY_DURATION() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the threshold duration for removing bridge operators.\\n   * @return The duration in period number that exceeds which a bridge operator will be removed.\\n   */\\n  function REMOVE_DURATION_THRESHOLD() external view returns (uint256);\\n\\n  /**\\n   * @dev External function to retrieve the value of the minimum vote threshold to execute slashing rule.\\n   * @return minimumVoteThreshold The minimum vote threshold value.\\n   */\\n  function MINIMUM_VOTE_THRESHOLD() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x45f7a50e6f2e25d9d1ac8abf0eafd1b7579d625245b9269840d42a476745e735\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  struct Request {\\n    VoteKind kind;\\n    uint256 id;\\n  }\\n\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  event ExternalCallFailed(address indexed to, bytes4 indexed msgSig, bytes reason);\\n\\n  /**\\n   * @dev Returns the block that allow incomming mutable call.\\n   */\\n  function startedAtBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVote(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallot(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(\\n    uint256 _period,\\n    address[] calldata _bridgeOperators\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(VoteKind _kind, uint256 _requestId, address _operator) external;\\n}\\n\",\"keccak256\":\"0x092841025351341cf7ff9cbf0eb6ef78752ffd2b1af329cb6048996d20c789a9\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/events/IBridgeSlashEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeSlashEvents {\\n  /**\\n   * @dev Enumeration representing the slashing tiers for bridge operators.\\n   */\\n  enum Tier {\\n    Tier0,\\n    Tier1,\\n    Tier2\\n  }\\n\\n  /**\\n   * @dev Struct representing the status of a bridge operator.\\n   */\\n  struct BridgeSlashInfo {\\n    uint128 slashUntilPeriod;\\n    uint128 newlyAddedAtPeriod;\\n  }\\n\\n  /**\\n   * @dev Event emitted when a bridge operator is slashed.\\n   * @param tier The slash tier of the operator.\\n   * @param bridgeOperator The address of the slashed bridge operator.\\n   * @param period The period in which the operator is slashed.\\n   * @param slashUntilPeriod The period until which the operator is penalized.\\n   */\\n  event Slashed(Tier indexed tier, address indexed bridgeOperator, uint256 indexed period, uint256 slashUntilPeriod);\\n\\n  /**\\n   * @dev Emitted when a removal request is made for a bridge operator.\\n   * @param period The period for which the removal request is made.\\n   * @param bridgeOperator The address of the bridge operator being requested for removal.\\n   */\\n  event RemovalRequested(uint256 indexed period, address indexed bridgeOperator);\\n}\\n\",\"keccak256\":\"0x9611e0d8b85b50bdd8ba9e8148564af526e78ccce5d202e7c84043d2d2ccb75f\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address ______deprecatedbridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed consensusAddr, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address _consensusAddr, uint256 _effectiveTimestamp, uint256 _rate) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x9ab205c736f1bcc9a3debe06e08d829f4857141d940e6f608236f136193a7f49\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xe4060b7e3b04a0043bd334011fe4ba67c990b0484dad52d7f14b35040989b6ab\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0x3fdfa86da33b889e5153075ffc028d6b0c607480a96b532fbbbc48ac7bbf27c9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    address _addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    address _addr,\\n    uint256 _blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2b1846b05ca1d636299fb929c1bd7b392b236f5e3f7aa3e7eea2c6d57b8836fb\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /**\\n   * @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n   */\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory _validatorList);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x6213c188a1323b242a098394b91caf9481e257bd57a0804cb2aa890377a993ed\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/ronin/gateway/BridgeSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { BridgeTrackingHelper } from \\\"../../extensions/bridge-operator-governance/BridgeTrackingHelper.sol\\\";\\nimport { IHasContracts, HasContracts } from \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { IBridgeSlash } from \\\"../../interfaces/bridge/IBridgeSlash.sol\\\";\\nimport { IERC165, IBridgeManagerCallback } from \\\"../../interfaces/bridge/IBridgeManagerCallback.sol\\\";\\nimport { IBridgeTracking } from \\\"../../interfaces/bridge/IBridgeTracking.sol\\\";\\nimport { IRoninValidatorSet } from \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport { Math } from \\\"../../libraries/Math.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrLengthMismatch } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title BridgeSlash\\n * @dev A contract that implements slashing functionality for bridge operators based on their availability.\\n */\\ncontract BridgeSlash is\\n  IBridgeSlash,\\n  IBridgeManagerCallback,\\n  BridgeTrackingHelper,\\n  IdentityGuard,\\n  Initializable,\\n  HasContracts\\n{\\n  /// @inheritdoc IBridgeSlash\\n  uint256 public constant TIER_1_PENALTY_DURATION = 1;\\n  /// @inheritdoc IBridgeSlash\\n  uint256 public constant TIER_2_PENALTY_DURATION = 5;\\n  /// @inheritdoc IBridgeSlash\\n  uint256 public constant MINIMUM_VOTE_THRESHOLD = 50;\\n  /// @inheritdoc IBridgeSlash\\n  uint256 public constant REMOVE_DURATION_THRESHOLD = 30;\\n\\n  /// @dev Tier 1 slashing threshold ratio is 10%\\n  uint256 private constant TIER_1_THRESHOLD = 10_00;\\n  /// @dev Tier 2 slashing threshold ratio is 30%\\n  uint256 private constant TIER_2_THRESHOLD = 30_00;\\n  /// @dev Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]\\n  uint256 private constant PERCENTAGE_FRACTION = 100_00;\\n  /// @dev This value is set to the maximum value of uint128 to indicate a permanent slash duration.\\n  uint256 private constant SLASH_PERMANENT_DURATION = type(uint128).max;\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.gateway.BridgeSlash.bridgeSlashInfos.slot\\\") - 1\\n  bytes32 private constant BRIDGE_SLASH_INFOS_SLOT = 0xd08d185790a07c7b9b721e2713c8580010a57f31c72c16f6e80b831d0ee45bfe;\\n\\n  /**\\n   * @dev The modifier verifies if the `totalVote` is non-zero, indicating the presence of ballots for the period.\\n   * @param totalVote The total number of ballots for the period.\\n   */\\n  modifier onlyPeriodHasEnoughVotes(uint256 totalVote) {\\n    if (totalVote <= MINIMUM_VOTE_THRESHOLD) return;\\n    _;\\n  }\\n\\n  constructor() payable {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(\\n    address validatorContract,\\n    address bridgeManagerContract,\\n    address bridgeTrackingContract\\n  ) external initializer {\\n    _setContract(ContractType.VALIDATOR, validatorContract);\\n    _setContract(ContractType.BRIDGE_MANAGER, bridgeManagerContract);\\n    _setContract(ContractType.BRIDGE_TRACKING, bridgeTrackingContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallback\\n   */\\n  function onBridgeOperatorsAdded(\\n    address[] calldata bridgeOperators,\\n    bool[] memory addeds\\n  ) external onlyContract(ContractType.BRIDGE_MANAGER) returns (bytes4) {\\n    uint256 length = bridgeOperators.length;\\n    if (length != addeds.length) revert ErrLengthMismatch(msg.sig);\\n    if (length == 0) {\\n      return IBridgeManagerCallback.onBridgeOperatorsAdded.selector;\\n    }\\n\\n    mapping(address => BridgeSlashInfo) storage _bridgeSlashInfos = _getBridgeSlashInfos();\\n    uint256 currentPeriod = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n\\n    for (uint256 i; i < length; ) {\\n      unchecked {\\n        if (addeds[i]) {\\n          _bridgeSlashInfos[bridgeOperators[i]].newlyAddedAtPeriod = uint128(currentPeriod);\\n        }\\n\\n        ++i;\\n      }\\n    }\\n\\n    return IBridgeManagerCallback.onBridgeOperatorsAdded.selector;\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallback\\n   */\\n  function onBridgeOperatorUpdated(\\n    address currentBridgeOperator,\\n    address newBridgeOperator\\n  ) external onlyContract(ContractType.BRIDGE_MANAGER) returns (bytes4) {\\n    mapping(address => BridgeSlashInfo) storage _bridgeSlashInfos = _getBridgeSlashInfos();\\n\\n    _bridgeSlashInfos[newBridgeOperator] = _bridgeSlashInfos[currentBridgeOperator];\\n    delete _bridgeSlashInfos[currentBridgeOperator];\\n\\n    return IBridgeManagerCallback.onBridgeOperatorUpdated.selector;\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeSlash\\n   */\\n  function execSlashBridgeOperators(\\n    address[] memory allBridgeOperators,\\n    uint256[] memory ballots,\\n    uint256 totalBallot,\\n    uint256 totalVote,\\n    uint256 period\\n  ) external onlyContract(ContractType.BRIDGE_TRACKING) onlyPeriodHasEnoughVotes(totalVote) returns (bool slashed) {\\n    uint256 length = allBridgeOperators.length;\\n    if (length != ballots.length) revert ErrLengthMismatch(msg.sig);\\n    if (length == 0) return false;\\n    if (!_isValidBridgeTrackingResponse(totalBallot, totalVote, ballots)) {\\n      emit BridgeTrackingIncorrectlyResponded();\\n      return false;\\n    }\\n\\n    // Get penalty durations for each slash tier.\\n    uint256[] memory penaltyDurations = _getPenaltyDurations();\\n    // Get the storage mapping for bridge slash information.\\n    mapping(address => BridgeSlashInfo) storage _bridgeSlashInfos = _getBridgeSlashInfos();\\n\\n    // Declare variables for iteration.\\n    BridgeSlashInfo memory status;\\n    uint256 slashUntilPeriod;\\n    address bridgeOperator;\\n    Tier tier;\\n\\n    for (uint256 i; i < length; ) {\\n      bridgeOperator = allBridgeOperators[i];\\n      status = _bridgeSlashInfos[bridgeOperator];\\n\\n      // Check if the bridge operator was added before the current period.\\n      // Bridge operators added in current period will not be slashed.\\n      if (status.newlyAddedAtPeriod < period) {\\n        // Determine the slash tier for the bridge operator based on their ballots.\\n        tier = _getSlashTier(ballots[i], totalVote);\\n\\n        slashUntilPeriod = _calcSlashUntilPeriod(tier, period, status.slashUntilPeriod, penaltyDurations);\\n\\n        // Check if the slash duration exceeds the threshold for removal.\\n        if (_isSlashDurationMetRemovalThreshold(slashUntilPeriod, period)) {\\n          slashUntilPeriod = SLASH_PERMANENT_DURATION;\\n          emit RemovalRequested(period, bridgeOperator);\\n        }\\n\\n        // Emit the Slashed event if the tier is not Tier 0 and bridge operator will not be removed.\\n        // Update the slash until period number for the bridge operator if the tier is not Tier 0.\\n        if (tier != Tier.Tier0) {\\n          slashed = true;\\n\\n          if (slashUntilPeriod != SLASH_PERMANENT_DURATION) {\\n            emit Slashed(tier, bridgeOperator, period, slashUntilPeriod);\\n          }\\n\\n          // Store updated slash until period\\n          _bridgeSlashInfos[bridgeOperator].slashUntilPeriod = uint128(slashUntilPeriod);\\n        }\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeManagerCallback\\n   */\\n  function onBridgeOperatorsRemoved(\\n    address[] calldata,\\n    bool[] calldata\\n  ) external view onlyContract(ContractType.BRIDGE_MANAGER) returns (bytes4) {\\n    return IBridgeManagerCallback.onBridgeOperatorsAdded.selector;\\n  }\\n\\n  /**\\n   * @inheritdoc IERC165\\n   */\\n  function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n    return interfaceId == type(IBridgeManagerCallback).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeSlash\\n   */\\n  function getSlashUntilPeriodOf(\\n    address[] calldata bridgeOperators\\n  ) external view returns (uint256[] memory untilPeriods) {\\n    uint256 length = bridgeOperators.length;\\n    untilPeriods = new uint256[](length);\\n    mapping(address => BridgeSlashInfo) storage _bridgeSlashInfos = _getBridgeSlashInfos();\\n\\n    for (uint256 i; i < length; ) {\\n      untilPeriods[i] = _bridgeSlashInfos[bridgeOperators[i]].slashUntilPeriod;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeSlash\\n   */\\n  function getAddedPeriodOf(address[] calldata bridgeOperators) external view returns (uint256[] memory addedPeriods) {\\n    uint256 length = bridgeOperators.length;\\n    addedPeriods = new uint256[](length);\\n    mapping(address => BridgeSlashInfo) storage _bridgeSlashInfos = _getBridgeSlashInfos();\\n\\n    for (uint256 i; i < length; ) {\\n      addedPeriods[i] = _bridgeSlashInfos[bridgeOperators[i]].newlyAddedAtPeriod;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeSlash\\n   */\\n  function getPenaltyDurations() external pure returns (uint256[] memory penaltyDurations) {\\n    penaltyDurations = _getPenaltyDurations();\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeSlash\\n   */\\n  function getSlashTier(uint256 ballot, uint256 totalVote) external pure returns (Tier tier) {\\n    tier = _getSlashTier(ballot, totalVote);\\n  }\\n\\n  /**\\n   * @dev Checks if the slash duration exceeds the threshold for removal and handles it accordingly.\\n   * @param slashUntilPeriod The slash until period number.\\n   * @param period The current period.\\n   * @return met A boolean indicates that the threshold for removal is met.\\n   */\\n  function _isSlashDurationMetRemovalThreshold(\\n    uint256 slashUntilPeriod,\\n    uint256 period\\n  ) internal pure returns (bool met) {\\n    met = slashUntilPeriod - (period - 1) >= REMOVE_DURATION_THRESHOLD;\\n  }\\n\\n  /**\\n   * @dev Calculates the slash until period based on the specified tier, current period, and slash until period.\\n   * @param tier The slash tier representing the severity of the slash.\\n   * @param period The current period in which the calculation is performed.\\n   * @param slashUntilPeriod The existing slash until period.\\n   * @param penaltyDurations An array of penalty durations for each slash tier.\\n   * @return newSlashUntilPeriod The newly calculated slash until period.\\n   */\\n  function _calcSlashUntilPeriod(\\n    Tier tier,\\n    uint256 period,\\n    uint256 slashUntilPeriod,\\n    uint256[] memory penaltyDurations\\n  ) internal pure returns (uint256 newSlashUntilPeriod) {\\n    // Calculate the slash until period number.\\n    newSlashUntilPeriod = penaltyDurations[uint8(tier)] + Math.max(period - 1, slashUntilPeriod);\\n  }\\n\\n  /**\\n   * @dev Internal function to determine the slashing tier based on the given ballot count and total votes.\\n   * @param ballot The individual ballot count of a bridge operator.\\n   * @param totalVote The total number of votes recorded for the bridge operator.\\n   * @return tier The calculated slashing tier for the bridge operator.\\n   * @notice The `ratio` is calculated as the percentage of uncast votes (totalVote - ballot) relative to the total votes.\\n   */\\n  function _getSlashTier(uint256 ballot, uint256 totalVote) internal pure virtual returns (Tier tier) {\\n    uint256 ratio = ((totalVote - ballot) * PERCENTAGE_FRACTION) / totalVote;\\n    tier = ratio > TIER_2_THRESHOLD ? Tier.Tier2 : ratio > TIER_1_THRESHOLD ? Tier.Tier1 : Tier.Tier0;\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping from bridge operator => BridgeSlashInfo.\\n   * @return bridgeSlashInfos the mapping from bridge operator => BridgeSlashInfo.\\n   */\\n  function _getBridgeSlashInfos() internal pure returns (mapping(address => BridgeSlashInfo) storage bridgeSlashInfos) {\\n    assembly (\\\"memory-safe\\\") {\\n      bridgeSlashInfos.slot := BRIDGE_SLASH_INFOS_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to retrieve the penalty durations for each slashing tier.\\n   * @return penaltyDurations An array containing the penalty durations for Tier0, Tier1, and Tier2 in that order.\\n   */\\n  function _getPenaltyDurations() internal pure virtual returns (uint256[] memory penaltyDurations) {\\n    // reserve index 0\\n    penaltyDurations = new uint256[](3);\\n    penaltyDurations[uint8(Tier.Tier1)] = TIER_1_PENALTY_DURATION;\\n    penaltyDurations[uint8(Tier.Tier2)] = TIER_2_PENALTY_DURATION;\\n  }\\n}\\n\",\"keccak256\":\"0x27b4863ec0d3398afa83dd8228acd5579f04061234e1a2e869950cb0ae2e9820\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\",\"keccak256\":\"0x951a466bb76f385554960531e63e64a5bd314df341bb6c95e6e81448d6984ac0\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD\\n}\\n\",\"keccak256\":\"0xf72feff9afafcb5cadc1b05c6e0b998ea5d66c7ece57c3e482e560d0a1bb4079\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface.\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   * @notice If the contract does not support the interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    if (!IERC165(contractAddr).supportsInterface(interfaceId)) {\\n      revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2e1aef91018590d52fa9ca9e63708c8ef3e9ee7061e8947d4bb30b07d721a229\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xa98cec38c640c4e37f475debbcd366226f1188c3f5ea6e29de768bd33e021873\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405261000c610011565b6100d1565b600054610100900460ff161561007d5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100cf576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6114d9806100e06000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063c0c53b8b11610097578063ddc3f7f611610066578063ddc3f7f614610213578063de981f1b1461021b578063f9f6087314610246578063fbb2f1941461024e57600080fd5b8063c0c53b8b146101d2578063c48549de146101e5578063c9631a12146101f8578063d1e1f2f81461020b57600080fd5b80635ebae8a0116100d35780635ebae8a0146101735780636dda44081461019f578063865e6fd3146101b55780639c2f4459146101ca57600080fd5b806301ffc9a7146101055780631288810a1461012d5780634dca59251461014d5780635311153b14610160575b600080fd5b610118610113366004610e59565b61026e565b60405190151581526020015b60405180910390f35b61014061013b366004610ecf565b6102a5565b6040516101249190610f11565b61011861015b366004611042565b61038d565b61014061016e366004610ecf565b61062d565b61018661018136600461111d565b610706565b6040516001600160e01b03199091168152602001610124565b6101a7600181565b604051908152602001610124565b6101c86101c33660046111fb565b610883565b005b6101a7603281565b6101c86101e036600461122e565b6108a2565b6101866101f3366004611271565b6109cf565b6101866102063660046112dd565b6109ee565b6101a7600581565b6101a7601e81565b61022e6102293660046112f9565b610a6d565b6040516001600160a01b039091168152602001610124565b610140610ae8565b61026161025c366004611314565b610af7565b604051610124919061134c565b60006001600160e01b031982166314d72edb60e21b148061029f57506001600160e01b031982166301ffc9a760e01b145b92915050565b6060818067ffffffffffffffff8111156102c1576102c1610f55565b6040519080825280602002602001820160405280156102ea578160200160208202803683370190505b5091506000805160206114ad83398151915260005b828110156103845781600087878481811061031c5761031c611366565b9050602002016020810190610331919061137c565b6001600160a01b031681526020810191909152604001600020548451600160801b9091046001600160801b03169085908390811061037157610371611366565b60209081029190910101526001016102ff565b50505092915050565b6000600361039a81610b0a565b836032811115610622578751875181146103da576040516306b5667560e21b81526001600160e01b03196000351660048201526024015b60405180910390fd5b806000036103ec576000935050610622565b6103f787878a610b59565b61042e576040517f64ba7143ea5a17abea37667aa9ae137e3afba5033c5f504770c02829c128189c90600090a16000935050610622565b6000610438610bd6565b604080518082019091526000808252602082018190529192506000805160206114ad833981519152918080805b87811015610619578f818151811061047f5761047f611366565b6020908102919091018101516001600160a01b03811660009081528883526040908190208151808301909252546001600160801b038082168352600160801b90910416928101839052965093508c1115610611576104f68f82815181106104e8576104e8611366565b60200260200101518e610c41565b9150610511828d87600001516001600160801b03168a610c93565b935061051d848d610cea565b15610563576040516001600160801b0394506001600160a01b038416908d907fb32a150b9737190a456d8b2b81dd7d592a799ab2933ea494e44351acd41f835d90600090a35b600082600281111561057757610577611336565b146106115760019a506001600160801b0384146105df578b836001600160a01b03168360028111156105ab576105ab611336565b6040518781527f14441e950b7f9ed959e16b2405dd1a9d163efd5d85027b222dcf78b902a00d759060200160405180910390a45b6001600160a01b038316600090815260208790526040902080546001600160801b0319166001600160801b0386161790555b600101610465565b50505050505050505b505095945050505050565b6060818067ffffffffffffffff81111561064957610649610f55565b604051908082528060200260200182016040528015610672578160200160208202803683370190505b5091506000805160206114ad83398151915260005b82811015610384578160008787848181106106a4576106a4611366565b90506020020160208101906106b9919061137c565b6001600160a01b0316815260208101919091526040016000205484516001600160801b03909116908590839081106106f3576106f3611366565b6020908102919091010152600101610687565b6000600b61071381610b0a565b825184908114610744576040516306b5667560e21b81526001600160e01b03196000351660048201526024016103d1565b8060000361075c57506302f5d74560e51b915061087b565b6000805160206114ad83398151915260006107776008610a6d565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d89190611397565b905060005b8381101561086c578681815181106107f7576107f7611366565b60200260200101511561086457818360008b8b8581811061081a5761081a611366565b905060200201602081019061082f919061137c565b6001600160a01b03168152602081019190915260400160002080546001600160801b03928316600160801b0292169190911790555b6001016107dd565b506302f5d74560e51b94505050505b509392505050565b61088b610d0c565b61089481610d68565b61089e8282610d9e565b5050565b600054610100900460ff16158080156108c25750600054600160ff909116105b806108dc5750303b1580156108dc575060005460ff166001145b61093f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d1565b6000805460ff191660011790558015610962576000805461ff0019166101001790555b61096d600885610d9e565b610978600b84610d9e565b610983600383610d9e565b80156109c9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000600b6109dc81610b0a565b506302f5d74560e51b95945050505050565b6000600b6109fb81610b0a565b50506001600160a01b0391821660008181526000805160206114ad8339815191526020526040808220939094168152928320825481546001600160801b0319166001600160801b0391821690811783558454600160801b908190049092169091021790558252556364b18d0960e11b90565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600d811115610aa457610aa4611336565b60ff1681526020810191909152604001600020546001600160a01b0316905080610ae3578160405163409140df60e11b81526004016103d191906113c4565b919050565b6060610af2610bd6565b905090565b6000610b038383610c41565b9392505050565b610b1381610a6d565b6001600160a01b0316336001600160a01b031614610b56576000356001600160e01b03191681336040516320e0f98d60e21b81526004016103d1939291906113d2565b50565b8051600190600090815b81811015610bbe5785858281518110610b7e57610b7e611366565b60200260200101511115610b955760009350610bbe565b848181518110610ba757610ba7611366565b602002602001015183019250806001019050610b63565b50828015610bcc5750858211155b9695505050505050565b604080516003808252608082019092526060916020820183803683370190505090506001818160ff1681518110610c0f57610c0f611366565b6020908102919091010152600581600260ff1681518110610c3257610c32611366565b60200260200101818152505090565b60008082612710610c52868361141f565b610c5c9190611432565b610c669190611449565b9050610bb88111610c88576103e88111610c81576000610c8b565b6001610c8b565b60025b949350505050565b6000610ca9610ca360018661141f565b84610e42565b82866002811115610cbc57610cbc611336565b60ff1681518110610ccf57610ccf611366565b6020026020010151610ce1919061146b565b95945050505050565b6000601e610cf960018461141f565b610d03908561141f565b10159392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610d66576000356001600160e01b0319166001604051620f948f60ea1b81526004016103d192919061147e565b565b806001600160a01b03163b600003610b5657604051630bfc64a360e21b81526001600160a01b03821660048201526024016103d1565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600d811115610dd457610dd4611336565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600d811115610e1557610e15611336565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b600081831015610e525781610b03565b5090919050565b600060208284031215610e6b57600080fd5b81356001600160e01b031981168114610b0357600080fd5b60008083601f840112610e9557600080fd5b50813567ffffffffffffffff811115610ead57600080fd5b6020830191508360208260051b8501011115610ec857600080fd5b9250929050565b60008060208385031215610ee257600080fd5b823567ffffffffffffffff811115610ef957600080fd5b610f0585828601610e83565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015610f4957835183529284019291840191600101610f2d565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f9457610f94610f55565b604052919050565b600067ffffffffffffffff821115610fb657610fb6610f55565b5060051b60200190565b80356001600160a01b0381168114610ae357600080fd5b600082601f830112610fe857600080fd5b81356020610ffd610ff883610f9c565b610f6b565b82815260059290921b8401810191818101908684111561101c57600080fd5b8286015b848110156110375780358352918301918301611020565b509695505050505050565b600080600080600060a0868803121561105a57600080fd5b853567ffffffffffffffff8082111561107257600080fd5b818801915088601f83011261108657600080fd5b81356020611096610ff883610f9c565b82815260059290921b8401810191818101908c8411156110b557600080fd5b948201945b838610156110da576110cb86610fc0565b825294820194908201906110ba565b995050890135925050808211156110f057600080fd5b506110fd88828901610fd7565b959895975050505060408401359360608101359360809091013592509050565b60008060006040848603121561113257600080fd5b833567ffffffffffffffff8082111561114a57600080fd5b61115687838801610e83565b909550935060209150858201358181111561117057600080fd5b86019050601f8101871361118357600080fd5b8035611191610ff882610f9c565b81815260059190911b820183019083810190898311156111b057600080fd5b928401925b828410156111dd57833580151581146111ce5760008081fd5b825292840192908401906111b5565b80955050505050509250925092565b8035600e8110610ae357600080fd5b6000806040838503121561120e57600080fd5b611217836111ec565b915061122560208401610fc0565b90509250929050565b60008060006060848603121561124357600080fd5b61124c84610fc0565b925061125a60208501610fc0565b915061126860408501610fc0565b90509250925092565b6000806000806040858703121561128757600080fd5b843567ffffffffffffffff8082111561129f57600080fd5b6112ab88838901610e83565b909650945060208701359150808211156112c457600080fd5b506112d187828801610e83565b95989497509550505050565b600080604083850312156112f057600080fd5b61121783610fc0565b60006020828403121561130b57600080fd5b610b03826111ec565b6000806040838503121561132757600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b602081016003831061136057611360611336565b91905290565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561138e57600080fd5b610b0382610fc0565b6000602082840312156113a957600080fd5b5051919050565b600e81106113c0576113c0611336565b9052565b6020810161029f82846113b0565b6001600160e01b031984168152606081016113f060208301856113b0565b6001600160a01b03929092166040919091015292915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561029f5761029f611409565b808202811582820484141761029f5761029f611409565b60008261146657634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561029f5761029f611409565b6001600160e01b031983168152604081016009831061149f5761149f611336565b826020830152939250505056fed08d185790a07c7b9b721e2713c8580010a57f31c72c16f6e80b831d0ee45bfea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063c0c53b8b11610097578063ddc3f7f611610066578063ddc3f7f614610213578063de981f1b1461021b578063f9f6087314610246578063fbb2f1941461024e57600080fd5b8063c0c53b8b146101d2578063c48549de146101e5578063c9631a12146101f8578063d1e1f2f81461020b57600080fd5b80635ebae8a0116100d35780635ebae8a0146101735780636dda44081461019f578063865e6fd3146101b55780639c2f4459146101ca57600080fd5b806301ffc9a7146101055780631288810a1461012d5780634dca59251461014d5780635311153b14610160575b600080fd5b610118610113366004610e59565b61026e565b60405190151581526020015b60405180910390f35b61014061013b366004610ecf565b6102a5565b6040516101249190610f11565b61011861015b366004611042565b61038d565b61014061016e366004610ecf565b61062d565b61018661018136600461111d565b610706565b6040516001600160e01b03199091168152602001610124565b6101a7600181565b604051908152602001610124565b6101c86101c33660046111fb565b610883565b005b6101a7603281565b6101c86101e036600461122e565b6108a2565b6101866101f3366004611271565b6109cf565b6101866102063660046112dd565b6109ee565b6101a7600581565b6101a7601e81565b61022e6102293660046112f9565b610a6d565b6040516001600160a01b039091168152602001610124565b610140610ae8565b61026161025c366004611314565b610af7565b604051610124919061134c565b60006001600160e01b031982166314d72edb60e21b148061029f57506001600160e01b031982166301ffc9a760e01b145b92915050565b6060818067ffffffffffffffff8111156102c1576102c1610f55565b6040519080825280602002602001820160405280156102ea578160200160208202803683370190505b5091506000805160206114ad83398151915260005b828110156103845781600087878481811061031c5761031c611366565b9050602002016020810190610331919061137c565b6001600160a01b031681526020810191909152604001600020548451600160801b9091046001600160801b03169085908390811061037157610371611366565b60209081029190910101526001016102ff565b50505092915050565b6000600361039a81610b0a565b836032811115610622578751875181146103da576040516306b5667560e21b81526001600160e01b03196000351660048201526024015b60405180910390fd5b806000036103ec576000935050610622565b6103f787878a610b59565b61042e576040517f64ba7143ea5a17abea37667aa9ae137e3afba5033c5f504770c02829c128189c90600090a16000935050610622565b6000610438610bd6565b604080518082019091526000808252602082018190529192506000805160206114ad833981519152918080805b87811015610619578f818151811061047f5761047f611366565b6020908102919091018101516001600160a01b03811660009081528883526040908190208151808301909252546001600160801b038082168352600160801b90910416928101839052965093508c1115610611576104f68f82815181106104e8576104e8611366565b60200260200101518e610c41565b9150610511828d87600001516001600160801b03168a610c93565b935061051d848d610cea565b15610563576040516001600160801b0394506001600160a01b038416908d907fb32a150b9737190a456d8b2b81dd7d592a799ab2933ea494e44351acd41f835d90600090a35b600082600281111561057757610577611336565b146106115760019a506001600160801b0384146105df578b836001600160a01b03168360028111156105ab576105ab611336565b6040518781527f14441e950b7f9ed959e16b2405dd1a9d163efd5d85027b222dcf78b902a00d759060200160405180910390a45b6001600160a01b038316600090815260208790526040902080546001600160801b0319166001600160801b0386161790555b600101610465565b50505050505050505b505095945050505050565b6060818067ffffffffffffffff81111561064957610649610f55565b604051908082528060200260200182016040528015610672578160200160208202803683370190505b5091506000805160206114ad83398151915260005b82811015610384578160008787848181106106a4576106a4611366565b90506020020160208101906106b9919061137c565b6001600160a01b0316815260208101919091526040016000205484516001600160801b03909116908590839081106106f3576106f3611366565b6020908102919091010152600101610687565b6000600b61071381610b0a565b825184908114610744576040516306b5667560e21b81526001600160e01b03196000351660048201526024016103d1565b8060000361075c57506302f5d74560e51b915061087b565b6000805160206114ad83398151915260006107776008610a6d565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d89190611397565b905060005b8381101561086c578681815181106107f7576107f7611366565b60200260200101511561086457818360008b8b8581811061081a5761081a611366565b905060200201602081019061082f919061137c565b6001600160a01b03168152602081019190915260400160002080546001600160801b03928316600160801b0292169190911790555b6001016107dd565b506302f5d74560e51b94505050505b509392505050565b61088b610d0c565b61089481610d68565b61089e8282610d9e565b5050565b600054610100900460ff16158080156108c25750600054600160ff909116105b806108dc5750303b1580156108dc575060005460ff166001145b61093f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d1565b6000805460ff191660011790558015610962576000805461ff0019166101001790555b61096d600885610d9e565b610978600b84610d9e565b610983600383610d9e565b80156109c9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000600b6109dc81610b0a565b506302f5d74560e51b95945050505050565b6000600b6109fb81610b0a565b50506001600160a01b0391821660008181526000805160206114ad8339815191526020526040808220939094168152928320825481546001600160801b0319166001600160801b0391821690811783558454600160801b908190049092169091021790558252556364b18d0960e11b90565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600d811115610aa457610aa4611336565b60ff1681526020810191909152604001600020546001600160a01b0316905080610ae3578160405163409140df60e11b81526004016103d191906113c4565b919050565b6060610af2610bd6565b905090565b6000610b038383610c41565b9392505050565b610b1381610a6d565b6001600160a01b0316336001600160a01b031614610b56576000356001600160e01b03191681336040516320e0f98d60e21b81526004016103d1939291906113d2565b50565b8051600190600090815b81811015610bbe5785858281518110610b7e57610b7e611366565b60200260200101511115610b955760009350610bbe565b848181518110610ba757610ba7611366565b602002602001015183019250806001019050610b63565b50828015610bcc5750858211155b9695505050505050565b604080516003808252608082019092526060916020820183803683370190505090506001818160ff1681518110610c0f57610c0f611366565b6020908102919091010152600581600260ff1681518110610c3257610c32611366565b60200260200101818152505090565b60008082612710610c52868361141f565b610c5c9190611432565b610c669190611449565b9050610bb88111610c88576103e88111610c81576000610c8b565b6001610c8b565b60025b949350505050565b6000610ca9610ca360018661141f565b84610e42565b82866002811115610cbc57610cbc611336565b60ff1681518110610ccf57610ccf611366565b6020026020010151610ce1919061146b565b95945050505050565b6000601e610cf960018461141f565b610d03908561141f565b10159392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610d66576000356001600160e01b0319166001604051620f948f60ea1b81526004016103d192919061147e565b565b806001600160a01b03163b600003610b5657604051630bfc64a360e21b81526001600160a01b03821660048201526024016103d1565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600d811115610dd457610dd4611336565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600d811115610e1557610e15611336565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b600081831015610e525781610b03565b5090919050565b600060208284031215610e6b57600080fd5b81356001600160e01b031981168114610b0357600080fd5b60008083601f840112610e9557600080fd5b50813567ffffffffffffffff811115610ead57600080fd5b6020830191508360208260051b8501011115610ec857600080fd5b9250929050565b60008060208385031215610ee257600080fd5b823567ffffffffffffffff811115610ef957600080fd5b610f0585828601610e83565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015610f4957835183529284019291840191600101610f2d565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f9457610f94610f55565b604052919050565b600067ffffffffffffffff821115610fb657610fb6610f55565b5060051b60200190565b80356001600160a01b0381168114610ae357600080fd5b600082601f830112610fe857600080fd5b81356020610ffd610ff883610f9c565b610f6b565b82815260059290921b8401810191818101908684111561101c57600080fd5b8286015b848110156110375780358352918301918301611020565b509695505050505050565b600080600080600060a0868803121561105a57600080fd5b853567ffffffffffffffff8082111561107257600080fd5b818801915088601f83011261108657600080fd5b81356020611096610ff883610f9c565b82815260059290921b8401810191818101908c8411156110b557600080fd5b948201945b838610156110da576110cb86610fc0565b825294820194908201906110ba565b995050890135925050808211156110f057600080fd5b506110fd88828901610fd7565b959895975050505060408401359360608101359360809091013592509050565b60008060006040848603121561113257600080fd5b833567ffffffffffffffff8082111561114a57600080fd5b61115687838801610e83565b909550935060209150858201358181111561117057600080fd5b86019050601f8101871361118357600080fd5b8035611191610ff882610f9c565b81815260059190911b820183019083810190898311156111b057600080fd5b928401925b828410156111dd57833580151581146111ce5760008081fd5b825292840192908401906111b5565b80955050505050509250925092565b8035600e8110610ae357600080fd5b6000806040838503121561120e57600080fd5b611217836111ec565b915061122560208401610fc0565b90509250929050565b60008060006060848603121561124357600080fd5b61124c84610fc0565b925061125a60208501610fc0565b915061126860408501610fc0565b90509250925092565b6000806000806040858703121561128757600080fd5b843567ffffffffffffffff8082111561129f57600080fd5b6112ab88838901610e83565b909650945060208701359150808211156112c457600080fd5b506112d187828801610e83565b95989497509550505050565b600080604083850312156112f057600080fd5b61121783610fc0565b60006020828403121561130b57600080fd5b610b03826111ec565b6000806040838503121561132757600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b602081016003831061136057611360611336565b91905290565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561138e57600080fd5b610b0382610fc0565b6000602082840312156113a957600080fd5b5051919050565b600e81106113c0576113c0611336565b9052565b6020810161029f82846113b0565b6001600160e01b031984168152606081016113f060208301856113b0565b6001600160a01b03929092166040919091015292915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561029f5761029f611409565b808202811582820484141761029f5761029f611409565b60008261146657634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561029f5761029f611409565b6001600160e01b031983168152604081016009831061149f5761149f611336565b826020830152939250505056fed08d185790a07c7b9b721e2713c8580010a57f31c72c16f6e80b831d0ee45bfea164736f6c6343000811000a",
  "devdoc": {
    "details": "A contract that implements slashing functionality for bridge operators based on their availability.",
    "errors": {
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "execSlashBridgeOperators(address[],uint256[],uint256,uint256,uint256)": {
        "details": "Slashes the unavailability of bridge operators during a specific period.",
        "params": {
          "period": "The period to slash the bridge operators for."
        }
      },
      "getAddedPeriodOf(address[])": {
        "details": "Retrieves the added periods of the specified bridge operators.",
        "params": {
          "bridgeOperators": "An array of bridge operator addresses."
        },
        "returns": {
          "addedPeriods": "An array of uint256 values representing the added periods for each bridge operator."
        }
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getPenaltyDurations()": {
        "details": "Retrieve the penalty durations for different slash tiers.",
        "returns": {
          "penaltyDurations": "The array of penalty durations for each slash tier."
        }
      },
      "getSlashTier(uint256,uint256)": {
        "details": "Gets the slash tier based on the given ballot and total ballots.",
        "params": {
          "ballot": "The ballot count for a bridge operator.",
          "totalVote": "The total vote count for the period."
        },
        "returns": {
          "tier": "The slash tier."
        }
      },
      "getSlashUntilPeriodOf(address[])": {
        "details": "Returns the penalize durations for the specified bridge operators.",
        "params": {
          "bridgeOperators": "The addresses of the bridge operators."
        },
        "returns": {
          "untilPeriods": "The penalized periods for the bridge operators."
        }
      },
      "onBridgeOperatorUpdated(address,address)": {
        "details": "Handles the event when a bridge operator is updated.",
        "params": {
          "currentBridgeOperator": "The address of the current bridge operator.",
          "newbridgeOperator": "The new address of the bridge operator."
        },
        "returns": {
          "_0": "The selector of the function being called."
        }
      },
      "onBridgeOperatorsAdded(address[],bool[])": {
        "details": "Handles the event when bridge operators are added.",
        "params": {
          "addeds": "The corresponding boolean values indicating whether the operators were added or not.",
          "bridgeOperators": "The addresses of the bridge operators."
        },
        "returns": {
          "_0": "The selector of the function being called."
        }
      },
      "onBridgeOperatorsRemoved(address[],bool[])": {
        "details": "Handles the event when bridge operators are removed.",
        "params": {
          "bridgeOperators": "The addresses of the bridge operators.",
          "removeds": "The corresponding boolean values indicating whether the operators were removed or not."
        },
        "returns": {
          "_0": "The selector of the function being called."
        }
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "stateVariables": {
      "BRIDGE_SLASH_INFOS_SLOT": {
        "details": "value is equal to keccak256(\"@ronin.dpos.gateway.BridgeSlash.bridgeSlashInfos.slot\") - 1"
      },
      "MINIMUM_VOTE_THRESHOLD": {
        "details": "External function to retrieve the value of the minimum vote threshold to execute slashing rule.",
        "return": "minimumVoteThreshold The minimum vote threshold value.",
        "returns": {
          "_0": "minimumVoteThreshold The minimum vote threshold value."
        }
      },
      "PERCENTAGE_FRACTION": {
        "details": "Max percentage 100%. Values [0; 100_00] reflexes [0; 100%]"
      },
      "REMOVE_DURATION_THRESHOLD": {
        "details": "Returns the threshold duration for removing bridge operators.",
        "return": "The duration in period number that exceeds which a bridge operator will be removed.",
        "returns": {
          "_0": "The duration in period number that exceeds which a bridge operator will be removed."
        }
      },
      "SLASH_PERMANENT_DURATION": {
        "details": "This value is set to the maximum value of uint128 to indicate a permanent slash duration."
      },
      "TIER_1_PENALTY_DURATION": {
        "details": "Returns the penalty duration for Tier 1 slashing.",
        "return": "The duration in period number for Tier 1 slashing.",
        "returns": {
          "_0": "The duration in period number for Tier 1 slashing."
        }
      },
      "TIER_1_THRESHOLD": {
        "details": "Tier 1 slashing threshold ratio is 10%"
      },
      "TIER_2_PENALTY_DURATION": {
        "details": "Returns the penalty duration for Tier 2 slashing.",
        "return": "The duration in period number for Tier 2 slashing.",
        "returns": {
          "_0": "The duration in period number for Tier 2 slashing."
        }
      },
      "TIER_2_THRESHOLD": {
        "details": "Tier 2 slashing threshold ratio is 30%"
      }
    },
    "title": "BridgeSlash",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1373,
        "contract": "contracts/ronin/gateway/BridgeSlash.sol:BridgeSlash",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/gateway/BridgeSlash.sol:BridgeSlash",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}