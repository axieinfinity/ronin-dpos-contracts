{
  "address": "0x06F4A12C7FF5a4db1b7f7847425Ff0FEE22a0E11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "ErrAlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrERC20MintingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrERC721MintingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrEmptyArray",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ErrInvalidChainId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidInfo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidReceipt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidReceiptKind",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrInvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidTokenStandard",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidTrustedThreshold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        }
      ],
      "name": "ErrLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrQueryForTooSmallQuantity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Token.Standard",
              "name": "erc",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Token.Info",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ErrTokenCouldNotTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Token.Standard",
              "name": "erc",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Token.Info",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ErrTokenCouldNotTransferFrom",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnsupportedStandard",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrUnsupportedToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawalsMigrated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawnOnMainchainAlready",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        }
      ],
      "name": "DepositVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "MainchainWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "threshold",
          "type": "uint256[]"
        }
      ],
      "name": "MinimumThresholdsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "roninTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "mainchainTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "chainIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "enum Token.Standard[]",
          "name": "standards",
          "type": "uint8[]"
        }
      ],
      "name": "TokenMapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDenominator",
          "type": "uint256"
        }
      ],
      "name": "TrustedThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "WithdrawalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiptHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Transfer.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "WithdrawalSignaturesRequested",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_MIGRATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Request[]",
          "name": "_requests",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "bulkRequestWithdrawalFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_withdrawals",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_signatures",
          "type": "bytes[]"
        }
      ],
      "name": "bulkSubmitWithdrawalSignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteWeight",
          "type": "uint256"
        }
      ],
      "name": "checkThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Receipt",
          "name": "_receipt",
          "type": "tuple"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositVote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "finalHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiredAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "depositVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roninToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getMainchainToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Token.Standard",
              "name": "erc",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct MappedTokenConsumer.MappedToken",
          "name": "_token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "num_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denom_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trustedNum_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trustedDenom_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        }
      ],
      "name": "getWithdrawalSignatures",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "_signatures",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleSetter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_trustedNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_trustedDenominator",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_withdrawalMigrators",
          "type": "address[]"
        },
        {
          "internalType": "address[][2]",
          "name": "_packedAddresses",
          "type": "address[][2]"
        },
        {
          "internalType": "uint256[][2]",
          "name": "_packedNumbers",
          "type": "uint256[][2]"
        },
        {
          "internalType": "enum Token.Standard[]",
          "name": "_standards",
          "type": "uint8[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeAdmin",
          "type": "address"
        }
      ],
      "name": "initializeV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalId",
          "type": "uint256"
        }
      ],
      "name": "mainchainWithdrew",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainchainWithdrewVote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "finalHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiredAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "mainchainWithdrewVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_roninTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_mainchainTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Token.Standard[]",
          "name": "_standards",
          "type": "uint8[]"
        }
      ],
      "name": "mapTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "markWithdrawalMigrated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Request[]",
          "name": "_requests",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "_requesters",
          "type": "address[]"
        }
      ],
      "name": "migrateWithdrawals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minimumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVoteWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipientAddr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Request",
          "name": "_request",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawalFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalId",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawalSignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setEmergencyPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setMinimumThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_trustedNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_trustedDenominator",
          "type": "uint256"
        }
      ],
      "name": "setTrustedThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_withdrawalIds",
          "type": "uint256[]"
        }
      ],
      "name": "tryBulkAcknowledgeMainchainWithdrew",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_executedReceipts",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum Transfer.Kind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "mainchain",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Owner",
              "name": "ronin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Token.Standard",
                  "name": "erc",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Token.Info",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct Transfer.Receipt[]",
          "name": "_receipts",
          "type": "tuple[]"
        }
      ],
      "name": "tryBulkDepositFor",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_executedReceipts",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum Transfer.Kind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Token.Owner",
          "name": "mainchain",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Token.Owner",
          "name": "ronin",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum Token.Standard",
              "name": "erc",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct Token.Info",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalMigrated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawalStatVote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "finalHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiredAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd877bc2a7fbbb773f97d71d3c68d8906f0ad9a9131baf4d8e41317618001572a",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x06F4A12C7FF5a4db1b7f7847425Ff0FEE22a0E11",
    "transactionIndex": 0,
    "gasUsed": "4497522",
    "logsBloom": "0x
    "blockHash": "0x8dad9a8cf93b08d88c118014e7375bc440a30df78c73b34e3e422986d49cf131",
    "transactionHash": "0xd877bc2a7fbbb773f97d71d3c68d8906f0ad9a9131baf4d8e41317618001572a",
    "logs": [],
    "blockNumber": 19042853,
    "cumulativeGasUsed": "4497522",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "04a9bbd243a024f931581fbb384106a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"ErrAlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrERC20MintingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrERC721MintingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEmptyArray\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidReceipt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidReceiptKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidTokenStandard\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidTrustedThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForTooSmallQuantity\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ErrTokenCouldNotTransfer\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ErrTokenCouldNotTransferFrom\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnsupportedStandard\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnsupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawalsMigrated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawnOnMainchainAlready\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"}],\"name\":\"DepositVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"MainchainWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"threshold\",\"type\":\"uint256[]\"}],\"name\":\"MinimumThresholdsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"roninTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"enum Token.Standard[]\",\"name\":\"standards\",\"type\":\"uint8[]\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDenominator\",\"type\":\"uint256\"}],\"name\":\"TrustedThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Transfer.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"WithdrawalSignaturesRequested\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_MIGRATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Request[]\",\"name\":\"_requests\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"bulkRequestWithdrawalFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_withdrawals\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"bulkSubmitWithdrawalSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"}],\"name\":\"checkThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Receipt\",\"name\":\"_receipt\",\"type\":\"tuple\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositVote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"finalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"depositVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roninToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getMainchainToken\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct MappedTokenConsumer.MappedToken\",\"name\":\"_token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trustedNum_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trustedDenom_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"getWithdrawalSignatures\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleSetter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trustedNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trustedDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_withdrawalMigrators\",\"type\":\"address[]\"},{\"internalType\":\"address[][2]\",\"name\":\"_packedAddresses\",\"type\":\"address[][2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"_packedNumbers\",\"type\":\"uint256[][2]\"},{\"internalType\":\"enum Token.Standard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAdmin\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalId\",\"type\":\"uint256\"}],\"name\":\"mainchainWithdrew\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainchainWithdrewVote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"finalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"mainchainWithdrewVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_roninTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Token.Standard[]\",\"name\":\"_standards\",\"type\":\"uint8[]\"}],\"name\":\"mapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markWithdrawalMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Request[]\",\"name\":\"_requests\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"_requesters\",\"type\":\"address[]\"}],\"name\":\"migrateWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minimumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Request\",\"name\":\"_request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawalFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalId\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawalSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEmergencyPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setMinimumThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trustedNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trustedDenominator\",\"type\":\"uint256\"}],\"name\":\"setTrustedThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_withdrawalIds\",\"type\":\"uint256[]\"}],\"name\":\"tryBulkAcknowledgeMainchainWithdrew\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_executedReceipts\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct Transfer.Receipt[]\",\"name\":\"_receipts\",\"type\":\"tuple[]\"}],\"name\":\"tryBulkDepositFor\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_executedReceipts\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum Transfer.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"mainchain\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Owner\",\"name\":\"ronin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Token.Standard\",\"name\":\"erc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct Token.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalStatVote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"finalHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyVoted(address)\":[{\"details\":\"Error indicating that a voter has already voted.\",\"params\":{\"voter\":\"The address of the voter who has already voted.\"}}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrERC20MintingFailed()\":[{\"details\":\"Error indicating that the minting of ERC20 tokens has failed.\"}],\"ErrERC721MintingFailed()\":[{\"details\":\"Error indicating that the minting of ERC721 tokens has failed.\"}],\"ErrEmptyArray()\":[{\"details\":\"Error indicating that an array is empty when it should contain elements.\"}],\"ErrInvalidChainId(bytes4,uint256,uint256)\":[{\"details\":\"Error indicating that the chain ID is invalid.\",\"params\":{\"actual\":\"Current chain ID that executing function.\",\"expected\":\"Expected chain ID required for the tx to success.\",\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid chain ID.\"}}],\"ErrInvalidInfo()\":[{\"details\":\"Error indicating that the provided information is invalid.\"}],\"ErrInvalidReceipt()\":[{\"details\":\"Error indicating that a receipt is invalid.\"}],\"ErrInvalidReceiptKind()\":[{\"details\":\"Error indicating that a receipt kind is invalid.\"}],\"ErrInvalidRequest()\":[{\"details\":\"Error indicating that a request is invalid.\"}],\"ErrInvalidThreshold(bytes4)\":[{\"details\":\"Error indicating that the provided threshold is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the invalid threshold applies to.\"}}],\"ErrInvalidTokenStandard()\":[{\"details\":\"Error indicating that a token standard is invalid.\"}],\"ErrInvalidTrustedThreshold()\":[{\"details\":\"Error thrown when an invalid trusted threshold is specified.\"}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrQueryForTooSmallQuantity()\":[{\"details\":\"Throwed when the ERC20 withdrawal quantity is less than the minimum threshold.\"}],\"ErrTokenCouldNotTransfer((uint8,uint256,uint256),address,address)\":[{\"details\":\"Error indicating that the `transfer` has failed.\",\"params\":{\"to\":\"Receiver of the token value.\",\"token\":\"Address of the token.\",\"tokenInfo\":\"Info of the token including ERC standard, id or quantity.\"}}],\"ErrTokenCouldNotTransferFrom((uint8,uint256,uint256),address,address,address)\":[{\"details\":\"Error indicating that the `transferFrom` has failed.\",\"params\":{\"from\":\"Owner of the token value.\",\"to\":\"Receiver of the token value.\",\"token\":\"Address of the token.\",\"tokenInfo\":\"Info of the token including ERC standard, id or quantity.\"}}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnsupportedStandard()\":[{\"details\":\"Error indicating that an unsupported standard is encountered.\"}],\"ErrUnsupportedToken()\":[{\"details\":\"Error indicating that a token is not supported.\"}],\"ErrWithdrawalsMigrated()\":[{\"details\":\"Error thrown when attempting to withdraw funds that have already been migrated.\"}],\"ErrWithdrawnOnMainchainAlready()\":[{\"details\":\"Error thrown when attempting to withdraw funds that have already been withdrawn on the mainchain.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"bulkRequestWithdrawalFor((address,address,(uint8,uint256,uint256))[],uint256)\":{\"details\":\"Bulk requests withdrawals. Emits the `WithdrawalRequested` events.\"},\"bulkSubmitWithdrawalSignatures(uint256[],bytes[])\":{\"details\":\"Submits withdrawal signatures. Requirements: - The method caller is a validator.\"},\"checkThreshold(uint256)\":{\"details\":\"Checks whether the `_voteWeight` passes the threshold.\"},\"depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"details\":\"Deposits based on the receipt. Requirements: - The method caller is a validator. Emits the `Deposited` once the assets are released.\"},\"depositVoted(uint256,uint256,address)\":{\"details\":\"Returns whether the deposit is casted by the voter.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getMainchainToken(address,uint256)\":{\"details\":\"Returns mainchain token address. Reverts for unsupported token.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getThreshold()\":{\"details\":\"Returns the threshold.\"},\"getTrustedThreshold()\":{\"details\":\"Returns the threshold about trusted org.\"},\"getWithdrawalSignatures(uint256,address[])\":{\"details\":\"Returns withdrawal signatures.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,uint256,uint256,uint256,uint256,address[],address[][2],uint256[][2],uint8[])\":{\"details\":\"Initializes contract storage.\"},\"mainchainWithdrew(uint256)\":{\"details\":\"Returns whether the withdrawal is done on mainchain.\"},\"mainchainWithdrewVoted(uint256,address)\":{\"details\":\"Returns whether the mainchain withdrew is casted by the voter.\"},\"mapTokens(address[],address[],uint256[],uint8[])\":{\"details\":\"Maps Ronin tokens to mainchain networks. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event.\"},\"markWithdrawalMigrated()\":{\"details\":\"Mark the migration as done.\"},\"migrateWithdrawals((address,address,(uint8,uint256,uint256))[],address[])\":{\"details\":\"Migrates withdrawals. Requirements: - The method caller is the migrator. - The arrays have the same length and its length larger than 0.\"},\"minimumVoteWeight()\":{\"details\":\"Returns the minimum vote weight to pass the threshold.\"},\"pause()\":{\"details\":\"Triggers paused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"requestWithdrawalFor((address,address,(uint8,uint256,uint256)),uint256)\":{\"details\":\"Locks the assets and request withdrawal. Emits the `WithdrawalRequested` event.\"},\"requestWithdrawalSignatures(uint256)\":{\"details\":\"Requests withdrawal signatures for a specific withdrawal. Emits the `WithdrawalSignaturesRequested` event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setEmergencyPauser(address)\":{\"details\":\"Grant emergency pauser role for `_addr`.\"},\"setMinimumThresholds(address[],uint256[])\":{\"details\":\"Sets the minimum thresholds to withdraw. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `MinimumThresholdsUpdated` event.\"},\"setThreshold(uint256,uint256)\":{\"details\":\"Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tryBulkAcknowledgeMainchainWithdrew(uint256[])\":{\"details\":\"Marks the withdrawals are done on mainchain and returns the boolean array indicating whether the withdrawal vote is already done before. Requirements: - The method caller is a validator. Emits the `MainchainWithdrew` once the valid call passes the quorum threshold.\"},\"tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])\":{\"details\":\"Tries bulk deposits based on the receipts and returns the boolean array indicating whether the deposit vote is already done before. Reverts if the deposit is invalid or is voted by the validator again. Requirements: - The method caller is a validator. Emits the `Deposited` once the assets are released.\"},\"unpause()\":{\"details\":\"Triggers unpaused state.\"}},\"stateVariables\":{\"WITHDRAWAL_MIGRATOR\":{\"details\":\"Withdrawal unlocker role hash\"},\"____deprecated0\":{\"custom:deprecated\":\"Previously `_validatorContract` (non-zero value)\"},\"____deprecated1\":{\"custom:deprecated\":\"Previously `_bridgeTrackingContract` (non-zero value)\"},\"____deprecated2\":{\"custom:deprecated\":\"Previously `_trustedOrgContract` (non-zero value)\"},\"_mainchainToken\":{\"details\":\"Mapping from token address => chain id => mainchain token address\"},\"_withdrawalSig\":{\"details\":\"Mapping from withdrawal id => validator address => signatures\"},\"depositVote\":{\"details\":\"Mapping from chain id => deposit id => deposit vote\"},\"mainchainWithdrewVote\":{\"details\":\"Mapping from withdrawal id => mainchain withdrew vote\"},\"withdrawal\":{\"details\":\"Mapping from withdrawal id => withdrawal receipt\"},\"withdrawalCount\":{\"details\":\"Total withdrawal\"},\"withdrawalMigrated\":{\"details\":\"Flag indicating whether the withdrawal migrate progress is done\"},\"withdrawalStatVote\":{\"details\":\"Mapping from withdrawal id => vote for recording withdrawal stats\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))\":{\"notice\":\"The assets will be transferred whenever the valid call passes the quorum threshold.\"},\"tryBulkAcknowledgeMainchainWithdrew(uint256[])\":{\"notice\":\"Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time.\"},\"tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])\":{\"notice\":\"The assets will be transferred whenever the valid call for the receipt passes the quorum threshold. Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/gateway/RoninGatewayV2.sol\":\"RoninGatewayV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/extensions/GatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../interfaces/IQuorum.sol\\\";\\nimport \\\"./collections/HasProxyAdmin.sol\\\";\\n\\nabstract contract GatewayV2 is HasProxyAdmin, Pausable, IQuorum {\\n  uint256 internal _num;\\n  uint256 internal _denom;\\n\\n  address private ______deprecated;\\n  uint256 public nonce;\\n\\n  address public emergencyPauser;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  /**\\n   * @dev Grant emergency pauser role for `_addr`.\\n   */\\n  function setEmergencyPauser(address _addr) external onlyAdmin {\\n    emergencyPauser = _addr;\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function getThreshold() external view virtual returns (uint256 num_, uint256 denom_) {\\n    return (_num, _denom);\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view virtual returns (bool) {\\n    return _voteWeight * _denom >= _num * _getTotalWeight();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external virtual onlyAdmin returns (uint256, uint256) {\\n    return _setThreshold(_numerator, _denominator);\\n  }\\n\\n  /**\\n   * @dev Triggers paused state.\\n   */\\n  function pause() external {\\n    _requireAuth();\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Triggers unpaused state.\\n   */\\n  function unpause() external {\\n    _requireAuth();\\n    _unpause();\\n  }\\n\\n  /**\\n   * @inheritdoc IQuorum\\n   */\\n  function minimumVoteWeight() public view virtual returns (uint256) {\\n    return _minimumVoteWeight(_getTotalWeight());\\n  }\\n\\n  /**\\n   * @dev Sets threshold and returns the old one.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function _setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) internal virtual returns (uint256 _previousNum, uint256 _previousDenom) {\\n    if (_numerator > _denominator) revert ErrInvalidThreshold(msg.sig);\\n    _previousNum = _num;\\n    _previousDenom = _denom;\\n    _num = _numerator;\\n    _denom = _denominator;\\n    unchecked {\\n      emit ThresholdUpdated(nonce++, _numerator, _denominator, _previousNum, _previousDenom);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns minimum vote weight.\\n   */\\n  function _minimumVoteWeight(uint256 _totalWeight) internal view virtual returns (uint256) {\\n    return (_num * _totalWeight + _denom - 1) / _denom;\\n  }\\n\\n  /**\\n   * @dev Internal method to check method caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The method caller must be admin or pauser.\\n   *\\n   */\\n  function _requireAuth() private view {\\n    if (!(msg.sender == _getAdmin() || msg.sender == emergencyPauser)) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total weight.\\n   */\\n  function _getTotalWeight() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe1a266c579dfaf71786765c210e4998285ec9034dc4193c460844da0b8e5fc87\",\"license\":\"MIT\"},\"contracts/extensions/MinimumWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./collections/HasProxyAdmin.sol\\\";\\nimport \\\"../libraries/Transfer.sol\\\";\\n\\nabstract contract MinimumWithdrawal is HasProxyAdmin {\\n  /// @dev Throwed when the ERC20 withdrawal quantity is less than the minimum threshold.\\n  error ErrQueryForTooSmallQuantity();\\n\\n  /// @dev Emitted when the minimum thresholds are updated\\n  event MinimumThresholdsUpdated(address[] tokens, uint256[] threshold);\\n\\n  /// @dev Mapping from token address => minimum thresholds\\n  mapping(address => uint256) public minimumThreshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @dev Sets the minimum thresholds to withdraw.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `MinimumThresholdsUpdated` event.\\n   *\\n   */\\n  function setMinimumThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external virtual onlyAdmin {\\n    if (_tokens.length == 0) revert ErrEmptyArray();\\n    _setMinimumThresholds(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Sets minimum thresholds.\\n   *\\n   * Requirements:\\n   * - The array lengths are equal.\\n   *\\n   * Emits the `MinimumThresholdsUpdated` event.\\n   *\\n   */\\n  function _setMinimumThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) internal virtual {\\n    if (_tokens.length != _thresholds.length) revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _tokens.length; ) {\\n      minimumThreshold[_tokens[_i]] = _thresholds[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit MinimumThresholdsUpdated(_tokens, _thresholds);\\n  }\\n\\n  /**\\n   * @dev Checks whether the request is larger than or equal to the minimum threshold.\\n   */\\n  function _checkWithdrawal(Transfer.Request calldata _request) internal view {\\n    if (_request.info.erc == Token.Standard.ERC20 && _request.info.quantity < minimumThreshold[_request.tokenAddr]) {\\n      revert ErrQueryForTooSmallQuantity();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbbb1db4bcefff2b7cac574410f7716e6d61d461ab40ca453d5f988e971c480dc\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IERC20Mintable {\\n  function mint(address _to, uint256 _value) external returns (bool _success);\\n}\\n\",\"keccak256\":\"0x6632cb3345e581a0b7868d6ce9a883f55d107576f9557f500a042c8285e51005\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Mintable {\\n  function mint(address _to, uint256 _tokenId) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4f001516a2596c79c205a9e28de092aa866eb440040e78b8be9027451028f169\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/Transfer.sol\\\";\\nimport \\\"./consumers/MappedTokenConsumer.sol\\\";\\n\\ninterface IRoninGatewayV2 is MappedTokenConsumer {\\n  /**\\n   * @dev Error thrown when attempting to withdraw funds that have already been migrated.\\n   */\\n  error ErrWithdrawalsMigrated();\\n\\n  /**\\n   * @dev Error thrown when an invalid trusted threshold is specified.\\n   */\\n  error ErrInvalidTrustedThreshold();\\n\\n  /**\\n   * @dev Error thrown when attempting to withdraw funds that have already been withdrawn on the mainchain.\\n   */\\n  error ErrWithdrawnOnMainchainAlready();\\n\\n  /// @dev Emitted when the assets are depositted\\n  event Deposited(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the withdrawal is requested\\n  event WithdrawalRequested(bytes32 receiptHash, Transfer.Receipt);\\n  /// @dev Emitted when the assets are withdrawn on mainchain\\n  event MainchainWithdrew(bytes32 receiptHash, Transfer.Receipt receipt);\\n  /// @dev Emitted when the withdrawal signatures is requested\\n  event WithdrawalSignaturesRequested(bytes32 receiptHash, Transfer.Receipt);\\n  /// @dev Emitted when the tokens are mapped\\n  event TokenMapped(address[] roninTokens, address[] mainchainTokens, uint256[] chainIds, Token.Standard[] standards);\\n  /// @dev Emitted when the threshold is updated\\n  event TrustedThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n  /// @dev Emitted when a deposit is voted\\n  event DepositVoted(address indexed bridgeOperator, uint256 indexed id, uint256 indexed chainId, bytes32 receiptHash);\\n\\n  /**\\n   * @dev Returns withdrawal count.\\n   */\\n  function withdrawalCount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns withdrawal signatures.\\n   */\\n  function getWithdrawalSignatures(\\n    uint256 _withdrawalId,\\n    address[] calldata _validators\\n  ) external view returns (bytes[] memory);\\n\\n  /**\\n   * @dev Deposits based on the receipt.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   * Emits the `Deposited` once the assets are released.\\n   *\\n   * @notice The assets will be transferred whenever the valid call passes the quorum threshold.\\n   *\\n   */\\n  function depositFor(Transfer.Receipt calldata _receipt) external;\\n\\n  /**\\n   * @dev Marks the withdrawals are done on mainchain and returns the boolean array indicating whether the withdrawal\\n   * vote is already done before.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   * Emits the `MainchainWithdrew` once the valid call passes the quorum threshold.\\n   *\\n   * @notice Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the\\n   * same time.\\n   *\\n   */\\n  function tryBulkAcknowledgeMainchainWithdrew(uint256[] calldata _withdrawalIds) external returns (bool[] memory);\\n\\n  /**\\n   * @dev Tries bulk deposits based on the receipts and returns the boolean array indicating whether the deposit vote\\n   * is already done before. Reverts if the deposit is invalid or is voted by the validator again.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   * Emits the `Deposited` once the assets are released.\\n   *\\n   * @notice The assets will be transferred whenever the valid call for the receipt passes the quorum threshold. Not\\n   * reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time.\\n   *\\n   */\\n  function tryBulkDepositFor(Transfer.Receipt[] calldata _receipts) external returns (bool[] memory);\\n\\n  /**\\n   * @dev Locks the assets and request withdrawal.\\n   *\\n   * Emits the `WithdrawalRequested` event.\\n   *\\n   */\\n  function requestWithdrawalFor(Transfer.Request calldata _request, uint256 _chainId) external;\\n\\n  /**\\n   * @dev Bulk requests withdrawals.\\n   *\\n   * Emits the `WithdrawalRequested` events.\\n   *\\n   */\\n  function bulkRequestWithdrawalFor(Transfer.Request[] calldata _requests, uint256 _chainId) external;\\n\\n  /**\\n   * @dev Requests withdrawal signatures for a specific withdrawal.\\n   *\\n   * Emits the `WithdrawalSignaturesRequested` event.\\n   *\\n   */\\n  function requestWithdrawalSignatures(uint256 _withdrawalId) external;\\n\\n  /**\\n   * @dev Submits withdrawal signatures.\\n   *\\n   * Requirements:\\n   * - The method caller is a validator.\\n   *\\n   */\\n  function bulkSubmitWithdrawalSignatures(uint256[] calldata _withdrawals, bytes[] calldata _signatures) external;\\n\\n  /**\\n   * @dev Maps Ronin tokens to mainchain networks.\\n   *\\n   * Requirement:\\n   * - The method caller is admin.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function mapTokens(\\n    address[] calldata _roninTokens,\\n    address[] calldata _mainchainTokens,\\n    uint256[] calldata chainIds,\\n    Token.Standard[] calldata _standards\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the deposit is casted by the voter.\\n   */\\n  function depositVoted(uint256 _chainId, uint256 _depositId, address _voter) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the mainchain withdrew is casted by the voter.\\n   */\\n  function mainchainWithdrewVoted(uint256 _withdrawalId, address _voter) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the withdrawal is done on mainchain.\\n   */\\n  function mainchainWithdrew(uint256 _withdrawalId) external view returns (bool);\\n\\n  /**\\n   * @dev Returns mainchain token address.\\n   * Reverts for unsupported token.\\n   */\\n  function getMainchainToken(address _roninToken, uint256 _chainId) external view returns (MappedToken memory _token);\\n}\\n\",\"keccak256\":\"0x91956865e8d5e2e1e224df72a44b8415f07edf6dc8204c64540f575509bbc923\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a bridge voter has already been added.\\n   * @param voter The address of the bridge voter that is already added.\\n   */\\n  error ErrBridgeVoterIsAlreadyAdded(address voter);\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(address addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x28b0407cf740164f3ddf4a44952423604439cda580f286c6ed1edcdb59b219d0\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 _wad) external;\\n\\n  function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8acead2ae4364dee80c9bc76d52cc04d3763105e1743728e67d237f816155142\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBridgeManagerEvents } from \\\"./events/IBridgeManagerEvents.sol\\\";\\n\\n/**\\n * @title IBridgeManager\\n * @dev The interface for managing bridge operators.\\n */\\ninterface IBridgeManager is IBridgeManagerEvents {\\n  /**\\n   * @dev The domain separator used for computing hash digests in the contract.\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @dev Returns the total number of bridge operators.\\n   * @return The total number of bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Checks if the given address is a bridge operator.\\n   * @param addr The address to check.\\n   * @return A boolean indicating whether the address is a bridge operator.\\n   */\\n  function isBridgeOperator(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Retrieves the full information of all registered bridge operators.\\n   *\\n   * This external function allows external callers to obtain the full information of all the registered bridge operators.\\n   * The returned arrays include the addresses of governors, bridge operators, and their corresponding vote weights.\\n   *\\n   * @return governors An array of addresses representing the governors of each bridge operator.\\n   * @return bridgeOperators An array of addresses representing the registered bridge operators.\\n   * @return weights An array of uint256 values representing the vote weights of each bridge operator.\\n   *\\n   * Note: The length of each array will be the same, and the order of elements corresponds to the same bridge operator.\\n   *\\n   * Example Usage:\\n   * ```\\n   * (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights) = getFullBridgeOperatorInfos();\\n   * for (uint256 i = 0; i < bridgeOperators.length; i++) {\\n   *     // Access individual information for each bridge operator.\\n   *     address governor = governors[i];\\n   *     address bridgeOperator = bridgeOperators[i];\\n   *     uint256 weight = weights[i];\\n   *     // ... (Process or use the information as required) ...\\n   * }\\n   * ```\\n   *\\n   */\\n  function getFullBridgeOperatorInfos()\\n    external\\n    view\\n    returns (address[] memory governors, address[] memory bridgeOperators, uint256[] memory weights);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorsWeight(address[] calldata governors) external view returns (uint256 sum);\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function getTotalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns an array of all bridge operators.\\n   * @return An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns an array of bridge operators correspoding to governor addresses.\\n   * @return bridgeOperators_ An array containing the addresses of all bridge operators.\\n   */\\n  function getBridgeOperatorOf(address[] calldata gorvernors) external view returns (address[] memory bridgeOperators_);\\n\\n  /**\\n   * @dev Retrieves the governors corresponding to a given array of bridge operators.\\n   * This external function allows external callers to obtain the governors associated with a given array of bridge operators.\\n   * The function takes an input array `bridgeOperators` containing bridge operator addresses and returns an array of corresponding governors.\\n   * @param bridgeOperators An array of bridge operator addresses for which governors are to be retrieved.\\n   * @return governors An array of addresses representing the governors corresponding to the provided bridge operators.\\n   */\\n  function getGovernorsOf(address[] calldata bridgeOperators) external view returns (address[] memory governors);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific governor.\\n   * @param governor The address of the governor to get the vote weight for.\\n   * @return voteWeight The vote weight of the specified governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev External function to retrieve the vote weights of multiple bridge operators.\\n   * @param bridgeOperators An array containing the addresses of bridge operators to get the vote weights for.\\n   * @return weights An array of vote weights corresponding to the provided bridge operators.\\n   */\\n  function getBridgeOperatorWeights(\\n    address[] calldata bridgeOperators\\n  ) external view returns (uint256[] memory weights);\\n\\n  /**\\n   * @dev External function to retrieve the vote weight of a specific bridge operator.\\n   * @param bridgeOperator The address of the bridge operator to get the vote weight for.\\n   * @return weight The vote weight of the specified bridge operator.\\n   */\\n  function getBridgeOperatorWeight(address bridgeOperator) external view returns (uint256 weight);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata governors) external view returns (uint256[] memory weights);\\n\\n  /**\\n   * @dev Returns an array of all governors.\\n   * @return An array containing the addresses of all governors.\\n   */\\n  function getGovernors() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Adds multiple bridge operators.\\n   * @param governors An array of addresses of hot/cold wallets for bridge operator to update their node address.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to add.\\n   * @return addeds An array of booleans indicating whether each bridge operator was added successfully.\\n   *\\n   * Note: return boolean array `addeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {addeds} = await bridgeManagerContract.callStatic.addBridgeOperators(\\n   *  voteWeights,\\n   *  governors,\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => addeds[index]);\\n   * const filteredWeights = weights.filter((_, index) => addeds[index]);\\n   * const filteredGovernors = governors.filter((_, index) => addeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function addBridgeOperators(\\n    uint96[] calldata voteWeights,\\n    address[] calldata governors,\\n    address[] calldata bridgeOperators\\n  ) external returns (bool[] memory addeds);\\n\\n  /**\\n   * @dev Removes multiple bridge operators.\\n   * @param bridgeOperators An array of addresses representing the bridge operators to remove.\\n   * @return removeds An array of booleans indicating whether each bridge operator was removed successfully.\\n   *\\n   * * Note: return boolean array `removeds` indicates whether a group (voteWeight, governor, operator) are recorded.\\n   * It is expected that FE/BE staticcall to the function first to get the return values and handle it correctly.\\n   * Governors are expected to see the outcome of this function and decide if they want to vote for the proposal or not.\\n   *\\n   * Example Usage:\\n   * Making an `eth_call` in ethers.js\\n   * ```\\n   * const {removeds} = await bridgeManagerContract.callStatic.removeBridgeOperators(\\n   *  bridgeOperators,\\n   *  // overriding the caller to the contract itself since we use `onlySelfCall` guard\\n   *  {from: bridgeManagerContract.address}\\n   * )\\n   * const filteredOperators = bridgeOperators.filter((_, index) => removeds[index]);\\n   * // ... (Process or use the information as required) ...\\n   * ```\\n   */\\n  function removeBridgeOperators(address[] calldata bridgeOperators) external returns (bool[] memory removeds);\\n\\n  /**\\n   * @dev Governor updates their corresponding governor and/or operator address.\\n   * Requirements:\\n   * - The caller must the governor of the operator that is requested changes.\\n   * @param bridgeOperator The address of the bridge operator to update.\\n   */\\n  function updateBridgeOperator(address bridgeOperator) external;\\n}\\n\",\"keccak256\":\"0xf3d02d806105015a62ddccd43fb46ba2ebd760cdc70839fa0a9c870f6abca5c0\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  struct Request {\\n    VoteKind kind;\\n    uint256 id;\\n  }\\n\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  event ExternalCallFailed(address indexed to, bytes4 indexed msgSig, bytes reason);\\n\\n  /**\\n   * @dev Returns the block that allow incomming mutable call.\\n   */\\n  function startedAtBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVote(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallot(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(\\n    uint256 _period,\\n    address[] calldata _bridgeOperators\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(VoteKind _kind, uint256 _requestId, address _operator) external;\\n}\\n\",\"keccak256\":\"0x092841025351341cf7ff9cbf0eb6ef78752ffd2b1af329cb6048996d20c789a9\",\"license\":\"MIT\"},\"contracts/interfaces/bridge/events/IBridgeManagerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeManagerEvents {\\n  /**\\n   * @dev The structure representing information about a bridge operator.\\n   * @param addr The address of the bridge operator.\\n   * @param voteWeight The vote weight assigned to the bridge operator.\\n   */\\n  struct BridgeOperatorInfo {\\n    address addr;\\n    uint96 voteWeight;\\n  }\\n\\n  /**\\n   * @dev Emitted when new bridge operators are added.\\n   * @param statuses The array of boolean values represents whether the corresponding bridge operator is added successfully.\\n   * @param voteWeights The array of vote weights assigned to the added bridge operators.\\n   * @param governors The array of addresses representing the governors associated with the added bridge operators.\\n   * @param bridgeOperators The array of addresses representing the added bridge operators.\\n   */\\n  event BridgeOperatorsAdded(bool[] statuses, uint96[] voteWeights, address[] governors, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when bridge operators are removed.\\n   * @param statuses The array of boolean values representing the statuses of the removed bridge operators.\\n   * @param bridgeOperators The array of addresses representing the removed bridge operators.\\n   */\\n  event BridgeOperatorsRemoved(bool[] statuses, address[] bridgeOperators);\\n\\n  /**\\n   * @dev Emitted when a bridge operator is updated.\\n   * @param governor The address of the governor initiating the update.\\n   * @param fromBridgeOperator The address of the bridge operator being updated.\\n   * @param toBridgeOperator The updated address of the bridge operator.\\n   */\\n  event BridgeOperatorUpdated(\\n    address indexed governor,\\n    address indexed fromBridgeOperator,\\n    address indexed toBridgeOperator\\n  );\\n}\\n\",\"keccak256\":\"0x217fff41c4a9ca72d142c5a2120bb1b5e67bf5bf5aa0f6128450116aebc07b8d\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/MappedTokenConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/Token.sol\\\";\\n\\ninterface MappedTokenConsumer {\\n  struct MappedToken {\\n    Token.Standard erc;\\n    address tokenAddr;\\n  }\\n}\\n\",\"keccak256\":\"0xfa220e968221af9b789e6c1dc4133631e90600c4a2bd63b7f01e96cb01f13e9b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected,\\n    Expired\\n  }\\n}\\n\",\"keccak256\":\"0xa5045232c0c053fcf31fb3fe71942344444159c48d5f1b2063dbb06b6a1c9752\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address ______deprecatedbridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed consensusAddr, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address _consensusAddr, uint256 _effectiveTimestamp, uint256 _rate) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x9ab205c736f1bcc9a3debe06e08d829f4857141d940e6f608236f136193a7f49\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xe4060b7e3b04a0043bd334011fe4ba67c990b0484dad52d7f14b35040989b6ab\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0x3fdfa86da33b889e5153075ffc028d6b0c607480a96b532fbbbc48ac7bbf27c9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    address _addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    address _addr,\\n    uint256 _blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2b1846b05ca1d636299fb929c1bd7b392b236f5e3f7aa3e7eea2c6d57b8836fb\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /**\\n   * @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n   */\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory _validatorList);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x6213c188a1323b242a098394b91caf9481e257bd57a0804cb2aa890377a993ed\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/consumers/VoteStatusConsumer.sol\\\";\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary IsolatedGovernance {\\n  struct Vote {\\n    VoteStatusConsumer.VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev The timestamp that voting is expired (no expiration=0)\\n    uint256 expiredAt;\\n    /// @dev The timestamp that voting is created\\n    uint256 createdAt;\\n    /// @dev The list of voters\\n    address[] voters;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function castVote(Vote storage _v, address _voter, bytes32 _hash) internal {\\n    if (_v.expiredAt > 0 && _v.expiredAt <= block.timestamp) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Expired;\\n    }\\n\\n    if (voted(_v, _voter)) revert ErrAlreadyVoted(_voter);\\n\\n    _v.voteHashOf[_voter] = _hash;\\n    _v.voters.push(_voter);\\n  }\\n\\n  /**\\n   * @dev Updates vote with the requirement of minimum vote weight.\\n   */\\n  function syncVoteStatus(\\n    Vote storage _v,\\n    uint256 _minimumVoteWeight,\\n    uint256 _votedWeightForHash,\\n    bytes32 _hash\\n  ) internal returns (VoteStatusConsumer.VoteStatus _status) {\\n    if (_votedWeightForHash >= _minimumVoteWeight && _v.status == VoteStatusConsumer.VoteStatus.Pending) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Approved;\\n      _v.finalHash = _hash;\\n    }\\n\\n    return _v.status;\\n  }\\n\\n  /**\\n   * @dev Returns the list of vote's addresses that voted for the hash `_hash`.\\n   */\\n  function filterByHash(Vote storage _v, bytes32 _hash) internal view returns (address[] memory _voters) {\\n    uint256 _count;\\n    _voters = new address[](_v.voters.length);\\n\\n    unchecked {\\n      for (uint _i; _i < _voters.length; ++_i) {\\n        address _voter = _v.voters[_i];\\n        if (_v.voteHashOf[_voter] == _hash) {\\n          _voters[_count++] = _voter;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_voters, _count)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function voted(Vote storage _v, address _voter) internal view returns (bool) {\\n    return _v.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0xa6a1e04b914580c099ac87f65ec24c35445eee34809e3decf1c57b6c52942d36\",\"license\":\"MIT\"},\"contracts/libraries/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nlibrary Token {\\n  /// @dev Error indicating that the provided information is invalid.\\n  error ErrInvalidInfo();\\n\\n  /// @dev Error indicating that the minting of ERC20 tokens has failed.\\n  error ErrERC20MintingFailed();\\n\\n  /// @dev Error indicating that the minting of ERC721 tokens has failed.\\n  error ErrERC721MintingFailed();\\n\\n  /// @dev Error indicating that an unsupported standard is encountered.\\n  error ErrUnsupportedStandard();\\n\\n  /**\\n   * @dev Error indicating that the `transfer` has failed.\\n   * @param tokenInfo Info of the token including ERC standard, id or quantity.\\n   * @param to Receiver of the token value.\\n   * @param token Address of the token.\\n   */\\n  error ErrTokenCouldNotTransfer(Info tokenInfo, address to, address token);\\n\\n  /**\\n   * @dev Error indicating that the `transferFrom` has failed.\\n   * @param tokenInfo Info of the token including ERC standard, id or quantity.\\n   * @param from Owner of the token value.\\n   * @param to Receiver of the token value.\\n   * @param token Address of the token.\\n   */\\n  error ErrTokenCouldNotTransferFrom(Info tokenInfo, address from, address to, address token);\\n\\n  enum Standard {\\n    ERC20,\\n    ERC721\\n  }\\n\\n  struct Info {\\n    Standard erc;\\n    // For ERC20:  the id must be 0 and the quantity is larger than 0.\\n    // For ERC721: the quantity must be 0.\\n    uint256 id;\\n    uint256 quantity;\\n  }\\n\\n  // keccak256(\\\"TokenInfo(uint8 erc,uint256 id,uint256 quantity)\\\");\\n  bytes32 public constant INFO_TYPE_HASH = 0x1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d;\\n\\n  /**\\n   * @dev Returns token info struct hash.\\n   */\\n  function hash(Info memory _info) internal pure returns (bytes32 digest) {\\n    // keccak256(abi.encode(INFO_TYPE_HASH, _info.erc, _info.id, _info.quantity))\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, INFO_TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_info)) // _info.erc\\n      mstore(add(ptr, 0x40), mload(add(_info, 0x20))) // _info.id\\n      mstore(add(ptr, 0x60), mload(add(_info, 0x40))) // _info.quantity\\n      digest := keccak256(ptr, 0x80)\\n    }\\n  }\\n\\n  /**\\n   * @dev Validates the token info.\\n   */\\n  function validate(Info memory _info) internal pure {\\n    if (\\n      !((_info.erc == Standard.ERC20 && _info.quantity > 0 && _info.id == 0) ||\\n        (_info.erc == Standard.ERC721 && _info.quantity == 0))\\n    ) revert ErrInvalidInfo();\\n  }\\n\\n  /**\\n   * @dev Transfer asset from.\\n   *\\n   * Requirements:\\n   * - The `_from` address must approve for the contract using this library.\\n   *\\n   */\\n  function transferFrom(Info memory _info, address _from, address _to, address _token) internal {\\n    bool _success;\\n    bytes memory _data;\\n    if (_info.erc == Standard.ERC20) {\\n      (_success, _data) = _token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, _from, _to, _info.quantity));\\n      _success = _success && (_data.length == 0 || abi.decode(_data, (bool)));\\n    } else if (_info.erc == Standard.ERC721) {\\n      // bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n      (_success, ) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _info.id));\\n    } else revert ErrUnsupportedStandard();\\n\\n    if (!_success) revert ErrTokenCouldNotTransferFrom(_info, _from, _to, _token);\\n  }\\n\\n  /**\\n   * @dev Transfers ERC721 token and returns the result.\\n   */\\n  function tryTransferERC721(address _token, address _to, uint256 _id) internal returns (bool _success) {\\n    (_success, ) = _token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, address(this), _to, _id));\\n  }\\n\\n  /**\\n   * @dev Transfers ERC20 token and returns the result.\\n   */\\n  function tryTransferERC20(address _token, address _to, uint256 _quantity) internal returns (bool _success) {\\n    bytes memory _data;\\n    (_success, _data) = _token.call(abi.encodeWithSelector(IERC20.transfer.selector, _to, _quantity));\\n    _success = _success && (_data.length == 0 || abi.decode(_data, (bool)));\\n  }\\n\\n  /**\\n   * @dev Transfer assets from current address to `_to` address.\\n   */\\n  function transfer(Info memory _info, address _to, address _token) internal {\\n    bool _success;\\n    if (_info.erc == Standard.ERC20) {\\n      _success = tryTransferERC20(_token, _to, _info.quantity);\\n    } else if (_info.erc == Standard.ERC721) {\\n      _success = tryTransferERC721(_token, _to, _info.id);\\n    } else revert ErrUnsupportedStandard();\\n\\n    if (!_success) revert ErrTokenCouldNotTransfer(_info, _to, _token);\\n  }\\n\\n  /**\\n   * @dev Tries minting and transfering assets.\\n   *\\n   * @notice Prioritizes transfer native token if the token is wrapped.\\n   *\\n   */\\n  function handleAssetTransfer(\\n    Info memory _info,\\n    address payable _to,\\n    address _token,\\n    IWETH _wrappedNativeToken\\n  ) internal {\\n    bool _success;\\n    if (_token == address(_wrappedNativeToken)) {\\n      // Try sending the native token before transferring the wrapped token\\n      if (!_to.send(_info.quantity)) {\\n        _wrappedNativeToken.deposit{ value: _info.quantity }();\\n        transfer(_info, _to, _token);\\n      }\\n    } else if (_info.erc == Token.Standard.ERC20) {\\n      uint256 _balance = IERC20(_token).balanceOf(address(this));\\n\\n      if (_balance < _info.quantity) {\\n        // bytes4(keccak256(\\\"mint(address,uint256)\\\"))\\n        (_success, ) = _token.call(abi.encodeWithSelector(0x40c10f19, address(this), _info.quantity - _balance));\\n        if (!_success) revert ErrERC20MintingFailed();\\n      }\\n\\n      transfer(_info, _to, _token);\\n    } else if (_info.erc == Token.Standard.ERC721) {\\n      if (!tryTransferERC721(_token, _to, _info.id)) {\\n        // bytes4(keccak256(\\\"mint(address,uint256)\\\"))\\n        (_success, ) = _token.call(abi.encodeWithSelector(0x40c10f19, _to, _info.id));\\n        if (!_success) revert ErrERC721MintingFailed();\\n      }\\n    } else revert ErrUnsupportedStandard();\\n  }\\n\\n  struct Owner {\\n    address addr;\\n    address tokenAddr;\\n    uint256 chainId;\\n  }\\n\\n  // keccak256(\\\"TokenOwner(address addr,address tokenAddr,uint256 chainId)\\\");\\n  bytes32 public constant OWNER_TYPE_HASH = 0x353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e8764;\\n\\n  /**\\n   * @dev Returns ownership struct hash.\\n   */\\n  function hash(Owner memory _owner) internal pure returns (bytes32 digest) {\\n    // keccak256(abi.encode(OWNER_TYPE_HASH, _owner.addr, _owner.tokenAddr, _owner.chainId))\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, OWNER_TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_owner)) // _owner.addr\\n      mstore(add(ptr, 0x40), mload(add(_owner, 0x20))) // _owner.tokenAddr\\n      mstore(add(ptr, 0x60), mload(add(_owner, 0x40))) // _owner.chainId\\n      digest := keccak256(ptr, 0x80)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8d11e48d878ba37ea2ca7395dceaa5591bb9ba2d4e5fdac1565760456e104991\",\"license\":\"MIT\"},\"contracts/libraries/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\n\\nlibrary Transfer {\\n  using ECDSA for bytes32;\\n\\n  enum Kind {\\n    Deposit,\\n    Withdrawal\\n  }\\n\\n  struct Request {\\n    // For deposit request: Recipient address on Ronin network\\n    // For withdrawal request: Recipient address on mainchain network\\n    address recipientAddr;\\n    // Token address to deposit/withdraw\\n    // Value 0: native token\\n    address tokenAddr;\\n    Token.Info info;\\n  }\\n\\n  /**\\n   * @dev Converts the transfer request into the deposit receipt.\\n   */\\n  function into_deposit_receipt(\\n    Request memory _request,\\n    address _requester,\\n    uint256 _id,\\n    address _roninTokenAddr,\\n    uint256 _roninChainId\\n  ) internal view returns (Receipt memory _receipt) {\\n    _receipt.id = _id;\\n    _receipt.kind = Kind.Deposit;\\n    _receipt.mainchain.addr = _requester;\\n    _receipt.mainchain.tokenAddr = _request.tokenAddr;\\n    _receipt.mainchain.chainId = block.chainid;\\n    _receipt.ronin.addr = _request.recipientAddr;\\n    _receipt.ronin.tokenAddr = _roninTokenAddr;\\n    _receipt.ronin.chainId = _roninChainId;\\n    _receipt.info = _request.info;\\n  }\\n\\n  /**\\n   * @dev Converts the transfer request into the withdrawal receipt.\\n   */\\n  function into_withdrawal_receipt(\\n    Request memory _request,\\n    address _requester,\\n    uint256 _id,\\n    address _mainchainTokenAddr,\\n    uint256 _mainchainId\\n  ) internal view returns (Receipt memory _receipt) {\\n    _receipt.id = _id;\\n    _receipt.kind = Kind.Withdrawal;\\n    _receipt.ronin.addr = _requester;\\n    _receipt.ronin.tokenAddr = _request.tokenAddr;\\n    _receipt.ronin.chainId = block.chainid;\\n    _receipt.mainchain.addr = _request.recipientAddr;\\n    _receipt.mainchain.tokenAddr = _mainchainTokenAddr;\\n    _receipt.mainchain.chainId = _mainchainId;\\n    _receipt.info = _request.info;\\n  }\\n\\n  struct Receipt {\\n    uint256 id;\\n    Kind kind;\\n    Token.Owner mainchain;\\n    Token.Owner ronin;\\n    Token.Info info;\\n  }\\n\\n  // keccak256(\\\"Receipt(uint256 id,uint8 kind,TokenOwner mainchain,TokenOwner ronin,TokenInfo info)TokenInfo(uint8 erc,uint256 id,uint256 quantity)TokenOwner(address addr,address tokenAddr,uint256 chainId)\\\");\\n  bytes32 public constant TYPE_HASH = 0xb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea;\\n\\n  /**\\n   * @dev Returns token info struct hash.\\n   */\\n  function hash(Receipt memory _receipt) internal pure returns (bytes32 digest) {\\n    bytes32 hashedReceiptMainchain = Token.hash(_receipt.mainchain);\\n    bytes32 hashedReceiptRonin = Token.hash(_receipt.ronin);\\n    bytes32 hashedReceiptInfo = Token.hash(_receipt.info);\\n\\n    /*\\n     * return\\n     *   keccak256(\\n     *     abi.encode(\\n     *       TYPE_HASH,\\n     *       _receipt.id,\\n     *       _receipt.kind,\\n     *       Token.hash(_receipt.mainchain),\\n     *       Token.hash(_receipt.ronin),\\n     *       Token.hash(_receipt.info)\\n     *     )\\n     *   );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_receipt)) // _receipt.id\\n      mstore(add(ptr, 0x40), mload(add(_receipt, 0x20))) // _receipt.kind\\n      mstore(add(ptr, 0x60), hashedReceiptMainchain)\\n      mstore(add(ptr, 0x80), hashedReceiptRonin)\\n      mstore(add(ptr, 0xa0), hashedReceiptInfo)\\n      digest := keccak256(ptr, 0xc0)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the receipt digest.\\n   */\\n  function receiptDigest(bytes32 _domainSeparator, bytes32 _receiptHash) internal pure returns (bytes32) {\\n    return _domainSeparator.toTypedDataHash(_receiptHash);\\n  }\\n}\\n\",\"keccak256\":\"0xe73e11942bcae9034abc2058e9976a583e3518bdfeefa863e97cb6e51edf4522\",\"license\":\"MIT\"},\"contracts/ronin/gateway/RoninGatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../extensions/GatewayV2.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../extensions/MinimumWithdrawal.sol\\\";\\nimport \\\"../../interfaces/IERC20Mintable.sol\\\";\\nimport \\\"../../interfaces/IERC721Mintable.sol\\\";\\nimport \\\"../../interfaces/bridge/IBridgeTracking.sol\\\";\\nimport \\\"../../interfaces/IRoninGatewayV2.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../libraries/IsolatedGovernance.sol\\\";\\nimport \\\"../../interfaces/bridge/IBridgeManager.sol\\\";\\n\\ncontract RoninGatewayV2 is\\n  GatewayV2,\\n  Initializable,\\n  MinimumWithdrawal,\\n  AccessControlEnumerable,\\n  VoteStatusConsumer,\\n  IRoninGatewayV2,\\n  HasContracts\\n{\\n  using Token for Token.Info;\\n  using Transfer for Transfer.Request;\\n  using Transfer for Transfer.Receipt;\\n  using IsolatedGovernance for IsolatedGovernance.Vote;\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  /// @dev Withdrawal unlocker role hash\\n  bytes32 public constant WITHDRAWAL_MIGRATOR = keccak256(\\\"WITHDRAWAL_MIGRATOR\\\");\\n\\n  /// @dev Flag indicating whether the withdrawal migrate progress is done\\n  bool public withdrawalMigrated;\\n  /// @dev Total withdrawal\\n  uint256 public withdrawalCount;\\n  /// @dev Mapping from chain id => deposit id => deposit vote\\n  mapping(uint256 => mapping(uint256 => IsolatedGovernance.Vote)) public depositVote;\\n  /// @dev Mapping from withdrawal id => mainchain withdrew vote\\n  mapping(uint256 => IsolatedGovernance.Vote) public mainchainWithdrewVote;\\n  /// @dev Mapping from withdrawal id => withdrawal receipt\\n  mapping(uint256 => Transfer.Receipt) public withdrawal;\\n  /// @dev Mapping from withdrawal id => validator address => signatures\\n  mapping(uint256 => mapping(address => bytes)) internal _withdrawalSig;\\n  /// @dev Mapping from token address => chain id => mainchain token address\\n  mapping(address => mapping(uint256 => MappedToken)) internal _mainchainToken;\\n\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address private ____deprecated0;\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address private ____deprecated1;\\n\\n  /// @dev Mapping from withdrawal id => vote for recording withdrawal stats\\n  mapping(uint256 => IsolatedGovernance.Vote) public withdrawalStatVote;\\n\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address private ____deprecated2;\\n\\n  uint256 internal _trustedNum;\\n  uint256 internal _trustedDenom;\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  modifier onlyBridgeOperator() {\\n    _requireBridgeOperator();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the method caller is not bridge operator.\\n   */\\n  function _requireBridgeOperator() internal view {\\n    if (!IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).isBridgeOperator(msg.sender))\\n      revert ErrUnauthorized(msg.sig, RoleAccess.__DEPRECATED_BRIDGE_OPERATOR);\\n  }\\n\\n  /**\\n   * @dev Initializes contract storage.\\n   */\\n  function initialize(\\n    address _roleSetter,\\n    uint256 _numerator,\\n    uint256 _denominator,\\n    uint256 _trustedNumerator,\\n    uint256 _trustedDenominator,\\n    address[] calldata _withdrawalMigrators,\\n    // _packedAddresses[0]: roninTokens\\n    // _packedAddresses[1]: mainchainTokens\\n    address[][2] calldata _packedAddresses,\\n    // _packedNumbers[0]: chainIds\\n    // _packedNumbers[1]: minimumThresholds\\n    uint256[][2] calldata _packedNumbers,\\n    Token.Standard[] calldata _standards\\n  ) external virtual initializer {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _roleSetter);\\n    _setThreshold(_numerator, _denominator);\\n    _setTrustedThreshold(_trustedNumerator, _trustedDenominator);\\n    if (_packedAddresses[0].length > 0) {\\n      _mapTokens(_packedAddresses[0], _packedAddresses[1], _packedNumbers[0], _standards);\\n      _setMinimumThresholds(_packedAddresses[0], _packedNumbers[1]);\\n    }\\n\\n    for (uint256 _i; _i < _withdrawalMigrators.length; ) {\\n      _grantRole(WITHDRAWAL_MIGRATOR, _withdrawalMigrators[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ____deprecated0);\\n    _setContract(ContractType.BRIDGE_TRACKING, ____deprecated1);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, ____deprecated2);\\n    delete ____deprecated0;\\n    delete ____deprecated1;\\n    delete ____deprecated2;\\n  }\\n\\n  function initializeV3(address bridgeAdmin) external reinitializer(3) {\\n    _setContract(ContractType.BRIDGE_MANAGER, bridgeAdmin);\\n  }\\n\\n  /**\\n   * @dev Migrates withdrawals.\\n   *\\n   * Requirements:\\n   * - The method caller is the migrator.\\n   * - The arrays have the same length and its length larger than 0.\\n   *\\n   */\\n  function migrateWithdrawals(\\n    Transfer.Request[] calldata _requests,\\n    address[] calldata _requesters\\n  ) external onlyRole(WITHDRAWAL_MIGRATOR) {\\n    if (withdrawalMigrated) revert ErrWithdrawalsMigrated();\\n    if (!(_requesters.length == _requests.length && _requests.length > 0)) revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _requests.length; ) {\\n      MappedToken memory _token = getMainchainToken(_requests[_i].tokenAddr, 1);\\n      if (_requests[_i].info.erc != _token.erc) revert ErrInvalidTokenStandard();\\n\\n      _storeAsReceipt(_requests[_i], 1, _requesters[_i], _token.tokenAddr);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Mark the migration as done.\\n   */\\n  function markWithdrawalMigrated() external {\\n    if (!(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(WITHDRAWAL_MIGRATOR, msg.sender))) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.WITHDRAWAL_MIGRATOR);\\n    }\\n    if (withdrawalMigrated) revert ErrWithdrawalsMigrated();\\n\\n    withdrawalMigrated = true;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function getWithdrawalSignatures(\\n    uint256 _withdrawalId,\\n    address[] calldata _validators\\n  ) external view returns (bytes[] memory _signatures) {\\n    _signatures = new bytes[](_validators.length);\\n    for (uint256 _i = 0; _i < _validators.length; ) {\\n      _signatures[_i] = _withdrawalSig[_withdrawalId][_validators[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function depositFor(Transfer.Receipt calldata _receipt) external whenNotPaused onlyBridgeOperator {\\n    address _sender = msg.sender;\\n    _depositFor(_receipt, _sender, minimumVoteWeight());\\n    IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING)).recordVote(\\n      IBridgeTracking.VoteKind.Deposit,\\n      _receipt.id,\\n      _sender\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function tryBulkAcknowledgeMainchainWithdrew(\\n    uint256[] calldata _withdrawalIds\\n  ) external onlyBridgeOperator returns (bool[] memory _executedReceipts) {\\n    address _governor = msg.sender;\\n    uint256 _minVoteWeight = minimumVoteWeight();\\n\\n    uint256 _withdrawalId;\\n    _executedReceipts = new bool[](_withdrawalIds.length);\\n    IBridgeTracking _bridgeTrackingContract = IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING));\\n    for (uint256 _i; _i < _withdrawalIds.length; ) {\\n      _withdrawalId = _withdrawalIds[_i];\\n      _bridgeTrackingContract.recordVote(IBridgeTracking.VoteKind.MainchainWithdrawal, _withdrawalId, _governor);\\n      if (mainchainWithdrew(_withdrawalId)) {\\n        _executedReceipts[_i] = true;\\n      } else {\\n        IsolatedGovernance.Vote storage _vote = mainchainWithdrewVote[_withdrawalId];\\n        Transfer.Receipt memory _withdrawal = withdrawal[_withdrawalId];\\n        bytes32 _hash = _withdrawal.hash();\\n        VoteStatus _status = _castIsolatedVote(_vote, _governor, _minVoteWeight, _hash);\\n        if (_status == VoteStatus.Approved) {\\n          _vote.status = VoteStatus.Executed;\\n          _bridgeTrackingContract.handleVoteApproved(IBridgeTracking.VoteKind.MainchainWithdrawal, _withdrawalId);\\n          emit MainchainWithdrew(_hash, _withdrawal);\\n        }\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function tryBulkDepositFor(\\n    Transfer.Receipt[] calldata _receipts\\n  ) external whenNotPaused onlyBridgeOperator returns (bool[] memory _executedReceipts) {\\n    address _sender = msg.sender;\\n\\n    Transfer.Receipt memory _receipt;\\n    _executedReceipts = new bool[](_receipts.length);\\n    uint256 _minVoteWeight = minimumVoteWeight();\\n    IBridgeTracking _bridgeTrackingContract = IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING));\\n    for (uint256 _i; _i < _receipts.length; ) {\\n      _receipt = _receipts[_i];\\n      _bridgeTrackingContract.recordVote(IBridgeTracking.VoteKind.Deposit, _receipt.id, _sender);\\n      if (depositVote[_receipt.mainchain.chainId][_receipt.id].status == VoteStatus.Executed) {\\n        _executedReceipts[_i] = true;\\n      } else {\\n        _depositFor(_receipt, _sender, _minVoteWeight);\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function requestWithdrawalFor(Transfer.Request calldata _request, uint256 _chainId) external whenNotPaused {\\n    _requestWithdrawalFor(_request, msg.sender, _chainId);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function bulkRequestWithdrawalFor(Transfer.Request[] calldata _requests, uint256 _chainId) external whenNotPaused {\\n    if (_requests.length == 0) revert ErrEmptyArray();\\n\\n    for (uint256 _i; _i < _requests.length; ) {\\n      _requestWithdrawalFor(_requests[_i], msg.sender, _chainId);\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function requestWithdrawalSignatures(uint256 _withdrawalId) external whenNotPaused {\\n    if (mainchainWithdrew(_withdrawalId)) revert ErrWithdrawnOnMainchainAlready();\\n\\n    Transfer.Receipt memory _receipt = withdrawal[_withdrawalId];\\n    if (_receipt.ronin.chainId != block.chainid) {\\n      revert ErrInvalidChainId(msg.sig, _receipt.ronin.chainId, block.chainid);\\n    }\\n\\n    emit WithdrawalSignaturesRequested(_receipt.hash(), _receipt);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function bulkSubmitWithdrawalSignatures(\\n    uint256[] calldata _withdrawals,\\n    bytes[] calldata _signatures\\n  ) external whenNotPaused onlyBridgeOperator {\\n    address _validator = msg.sender;\\n\\n    if (!(_withdrawals.length > 0 && _withdrawals.length == _signatures.length)) {\\n      revert ErrLengthMismatch(msg.sig);\\n    }\\n\\n    uint256 _minVoteWeight = minimumVoteWeight();\\n\\n    uint256 _id;\\n    IBridgeTracking _bridgeTrackingContract = IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING));\\n    for (uint256 _i; _i < _withdrawals.length; ) {\\n      _id = _withdrawals[_i];\\n      _withdrawalSig[_id][_validator] = _signatures[_i];\\n      _bridgeTrackingContract.recordVote(IBridgeTracking.VoteKind.Withdrawal, _id, _validator);\\n\\n      IsolatedGovernance.Vote storage _proposal = withdrawalStatVote[_id];\\n      VoteStatus _status = _castIsolatedVote(_proposal, _validator, _minVoteWeight, bytes32(_id));\\n      if (_status == VoteStatus.Approved) {\\n        _proposal.status = VoteStatus.Executed;\\n        _bridgeTrackingContract.handleVoteApproved(IBridgeTracking.VoteKind.Withdrawal, _id);\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function mapTokens(\\n    address[] calldata _roninTokens,\\n    address[] calldata _mainchainTokens,\\n    uint256[] calldata _chainIds,\\n    Token.Standard[] calldata _standards\\n  ) external onlyAdmin {\\n    if (_roninTokens.length == 0) revert ErrLengthMismatch(msg.sig);\\n    _mapTokens(_roninTokens, _mainchainTokens, _chainIds, _standards);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function depositVoted(uint256 _chainId, uint256 _depositId, address _voter) external view returns (bool) {\\n    return depositVote[_chainId][_depositId].voted(_voter);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function mainchainWithdrewVoted(uint256 _withdrawalId, address _voter) external view returns (bool) {\\n    return mainchainWithdrewVote[_withdrawalId].voted(_voter);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function mainchainWithdrew(uint256 _withdrawalId) public view returns (bool) {\\n    return mainchainWithdrewVote[_withdrawalId].status == VoteStatus.Executed;\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGatewayV2\\n   */\\n  function getMainchainToken(address _roninToken, uint256 _chainId) public view returns (MappedToken memory _token) {\\n    _token = _mainchainToken[_roninToken][_chainId];\\n    if (_token.tokenAddr == address(0)) revert ErrUnsupportedToken();\\n  }\\n\\n  /**\\n   * @dev Maps Ronin tokens to mainchain networks.\\n   *\\n   * Requirement:\\n   * - The arrays have the same length.\\n   *\\n   * Emits the `TokenMapped` event.\\n   *\\n   */\\n  function _mapTokens(\\n    address[] calldata _roninTokens,\\n    address[] calldata _mainchainTokens,\\n    uint256[] calldata _chainIds,\\n    Token.Standard[] calldata _standards\\n  ) internal {\\n    if (!(_roninTokens.length == _mainchainTokens.length && _roninTokens.length == _chainIds.length))\\n      revert ErrLengthMismatch(msg.sig);\\n\\n    for (uint256 _i; _i < _roninTokens.length; ) {\\n      _mainchainToken[_roninTokens[_i]][_chainIds[_i]].tokenAddr = _mainchainTokens[_i];\\n      _mainchainToken[_roninTokens[_i]][_chainIds[_i]].erc = _standards[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    emit TokenMapped(_roninTokens, _mainchainTokens, _chainIds, _standards);\\n  }\\n\\n  /**\\n   * @dev Deposits based on the receipt.\\n   *\\n   * Emits the `Deposited` once the assets are released.\\n   *\\n   */\\n  function _depositFor(Transfer.Receipt memory _receipt, address _validator, uint256 _minVoteWeight) internal {\\n    uint256 _id = _receipt.id;\\n    _receipt.info.validate();\\n    if (_receipt.kind != Transfer.Kind.Deposit) revert ErrInvalidReceiptKind();\\n\\n    if (_receipt.ronin.chainId != block.chainid)\\n      revert ErrInvalidChainId(msg.sig, _receipt.ronin.chainId, block.chainid);\\n\\n    MappedToken memory _token = getMainchainToken(_receipt.ronin.tokenAddr, _receipt.mainchain.chainId);\\n\\n    if (!(_token.erc == _receipt.info.erc && _token.tokenAddr == _receipt.mainchain.tokenAddr))\\n      revert ErrInvalidReceipt();\\n\\n    IsolatedGovernance.Vote storage _proposal = depositVote[_receipt.mainchain.chainId][_id];\\n    bytes32 _receiptHash = _receipt.hash();\\n    VoteStatus _status = _castIsolatedVote(_proposal, _validator, _minVoteWeight, _receiptHash);\\n    emit DepositVoted(_validator, _id, _receipt.mainchain.chainId, _receiptHash);\\n    if (_status == VoteStatus.Approved) {\\n      _proposal.status = VoteStatus.Executed;\\n      _receipt.info.handleAssetTransfer(payable(_receipt.ronin.addr), _receipt.ronin.tokenAddr, IWETH(address(0)));\\n      IBridgeTracking(getContract(ContractType.BRIDGE_TRACKING)).handleVoteApproved(\\n        IBridgeTracking.VoteKind.Deposit,\\n        _receipt.id\\n      );\\n      emit Deposited(_receiptHash, _receipt);\\n    }\\n  }\\n\\n  /**\\n   * @dev Locks the assets and request withdrawal.\\n   *\\n   * Requirements:\\n   * - The token info is valid.\\n   *\\n   * Emits the `WithdrawalRequested` event.\\n   *\\n   */\\n  function _requestWithdrawalFor(Transfer.Request calldata _request, address _requester, uint256 _chainId) internal {\\n    _request.info.validate();\\n    _checkWithdrawal(_request);\\n    MappedToken memory _token = getMainchainToken(_request.tokenAddr, _chainId);\\n    if (_request.info.erc != _token.erc) revert ErrInvalidTokenStandard();\\n\\n    _request.info.transferFrom(_requester, address(this), _request.tokenAddr);\\n    _storeAsReceipt(_request, _chainId, _requester, _token.tokenAddr);\\n  }\\n\\n  /**\\n   * @dev Stores the withdrawal request as a receipt.\\n   *\\n   * Emits the `WithdrawalRequested` event.\\n   *\\n   */\\n  function _storeAsReceipt(\\n    Transfer.Request calldata _request,\\n    uint256 _chainId,\\n    address _requester,\\n    address _mainchainTokenAddr\\n  ) internal returns (uint256 _withdrawalId) {\\n    _withdrawalId = withdrawalCount++;\\n    Transfer.Receipt memory _receipt = _request.into_withdrawal_receipt(\\n      _requester,\\n      _withdrawalId,\\n      _mainchainTokenAddr,\\n      _chainId\\n    );\\n    withdrawal[_withdrawalId] = _receipt;\\n    emit WithdrawalRequested(_receipt.hash(), _receipt);\\n  }\\n\\n  /**\\n   * @dev Don't send me RON.\\n   */\\n  function _fallback() internal virtual {\\n    revert ErrInvalidRequest();\\n  }\\n\\n  /**\\n   * @inheritdoc GatewayV2\\n   */\\n  function _getTotalWeight() internal view virtual override returns (uint256) {\\n    return IBridgeManager(getContract(ContractType.BRIDGE_MANAGER)).getTotalWeights();\\n  }\\n\\n  /**\\n   * @dev Casts and updates the vote result.\\n   *\\n   * Requirements:\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function _castIsolatedVote(\\n    IsolatedGovernance.Vote storage _v,\\n    address _voter,\\n    uint256 _minVoteWeight,\\n    bytes32 _hash\\n  ) internal virtual returns (VoteStatus _status) {\\n    _v.castVote(_voter, _hash);\\n    uint256 _totalWeight = _getVoteWeight(_v, _hash);\\n    return _v.syncVoteStatus(_minVoteWeight, _totalWeight, _hash);\\n  }\\n\\n  /**\\n   * @dev Returns the vote weight for a specified hash.\\n   */\\n  function _getVoteWeight(\\n    IsolatedGovernance.Vote storage _v,\\n    bytes32 _hash\\n  ) internal view returns (uint256 _totalWeight) {\\n    (, address[] memory bridgeOperators, uint256[] memory weights) = IBridgeManager(\\n      getContract(ContractType.BRIDGE_MANAGER)\\n    ).getFullBridgeOperatorInfos();\\n    uint256 length = bridgeOperators.length;\\n    unchecked {\\n      for (uint _i; _i < length; ++_i) {\\n        if (_v.voteHashOf[bridgeOperators[_i]] == _hash) {\\n          _totalWeight += weights[_i];\\n        }\\n      }\\n    }\\n  }\\n\\n  function setTrustedThreshold(\\n    uint256 _trustedNumerator,\\n    uint256 _trustedDenominator\\n  ) external virtual onlyAdmin returns (uint256, uint256) {\\n    return _setTrustedThreshold(_trustedNumerator, _trustedDenominator);\\n  }\\n\\n  /**\\n   * @dev Returns the threshold about trusted org.\\n   */\\n  function getTrustedThreshold() external view virtual returns (uint256 trustedNum_, uint256 trustedDenom_) {\\n    return (_trustedNum, _trustedDenom);\\n  }\\n\\n  /**\\n   * @dev Sets trusted threshold and returns the old one.\\n   *\\n   * Emits the `TrustedThresholdUpdated` event.\\n   *\\n   */\\n  function _setTrustedThreshold(\\n    uint256 _trustedNumerator,\\n    uint256 _trustedDenominator\\n  ) internal virtual returns (uint256 _previousTrustedNum, uint256 _previousTrustedDenom) {\\n    if (_trustedNumerator > _trustedDenominator) revert ErrInvalidTrustedThreshold();\\n\\n    _previousTrustedNum = _num;\\n    _previousTrustedDenom = _denom;\\n    _trustedNum = _trustedNumerator;\\n    _trustedDenom = _trustedDenominator;\\n    unchecked {\\n      emit TrustedThresholdUpdated(\\n        nonce++,\\n        _trustedNumerator,\\n        _trustedDenominator,\\n        _previousTrustedNum,\\n        _previousTrustedDenom\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns minimum trusted vote weight.\\n   */\\n  function _minimumTrustedVoteWeight(uint256 _totalTrustedWeight) internal view virtual returns (uint256) {\\n    return (_trustedNum * _totalTrustedWeight + _trustedDenom - 1) / _trustedDenom;\\n  }\\n}\\n\",\"keccak256\":\"0x78edac8812c3420751c0657568c6764805cb0498883e2b7424035f55edc718d2\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\",\"keccak256\":\"0x951a466bb76f385554960531e63e64a5bd314df341bb6c95e6e81448d6984ac0\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD\\n}\\n\",\"keccak256\":\"0xf72feff9afafcb5cadc1b05c6e0b998ea5d66c7ece57c3e482e560d0a1bb4079\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface.\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   * @notice If the contract does not support the interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    if (!IERC165(contractAddr).supportsInterface(interfaceId)) {\\n      revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2e1aef91018590d52fa9ca9e63708c8ef3e9ee7061e8947d4bb30b07d721a229\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xa98cec38c640c4e37f475debbcd366226f1188c3f5ea6e29de768bd33e021873\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff1916905561505c8061002a6000396000f3fe6080604052600436106102cd5760003560e01c8063835fc6ca11610175578063c28f7894116100dc578063e75235b811610095578063f668214a1161006f578063f668214a1461095e578063fa3896591461097e578063fc6574bc1461099e578063fe90d9c2146109f0576102dc565b8063e75235b8146108d3578063ecc83649146108eb578063f0ce418e14610918576102dc565b8063c28f7894146107ed578063ca15c87314610833578063d547741f14610853578063dafae40814610873578063dbd2ef6c14610893578063de981f1b146108b3576102dc565b80639584a5921161012e5780639584a59214610735578063a217fddf14610755578063affed0e01461076a578063b9afa17714610780578063b9c36209146107a0578063bc7f0386146107c0576102dc565b8063835fc6ca1461066f5780638456cb59146106a0578063865e6fd3146106b55780639010d07c146106d557806391d14854146106f5578063931ec98714610715576102dc565b80633e70838b116102345780635c975abb116101ed57806364363f78116101c757806364363f781461060457806371706cbe1461062457806375535f861461063a5780637de5dedd1461065a576102dc565b80635c975abb146105aa5780635cd8a76b146105c25780635d6a9a90146105d7576102dc565b80633e70838b146104ba5780633f4ba83a146104da57806347b56b2c146104ef5780634d92c4f01461050f5780634f2717c7146105705780635a7dd06a1461058a576102dc565b8063248a9ca311610286578063248a9ca3146103e75780632f2ff15d146104255780633101cfcb1461044557806336568abe146104655780633b5afc22146104855780633e4574ec1461049a576102dc565b806301ffc9a7146102e4578063065b3adf146103195780630b1ff17f14610351578063109679ef1461037157806317892f961461039157806317fa2ea1146103ba576102dc565b366102dc576102da610a12565b005b6102da610a12565b3480156102f057600080fd5b506103046102ff366004613e01565b610a2b565b60405190151581526020015b60405180910390f35b34801561032557600080fd5b50600554610339906001600160a01b031681565b6040516001600160a01b039091168152602001610310565b34801561035d57600080fd5b506102da61036c366004613e2b565b610a56565b34801561037d57600080fd5b506102da61038c366004613e5c565b610a6d565b34801561039d57600080fd5b506078546079545b60408051928352602083019190915201610310565b3480156103c657600080fd5b506103da6103d5366004613eb9565b610b12565b6040516103109190613efa565b3480156103f357600080fd5b50610417610402366004613f40565b6000908152606b602052604090206001015490565b604051908152602001610310565b34801561043157600080fd5b506102da610440366004613f79565b610e4f565b34801561045157600080fd5b506102da610460366004613fa9565b610e79565b34801561047157600080fd5b506102da610480366004613f79565b610f25565b34801561049157600080fd5b506102da610f9f565b3480156104a657600080fd5b506103046104b5366004613f79565b611028565b3480156104c657600080fd5b506102da6104d5366004613fa9565b611058565b3480156104e657600080fd5b506102da611082565b3480156104fb57600080fd5b506102da61050a366004613f40565b611094565b34801561051b57600080fd5b5061056061052a366004613fc6565b606f602090815260009283526040808420909152908252902080546001820154600383015460049093015460ff90921692909184565b6040516103109493929190613ffe565b34801561057c57600080fd5b50606d546103049060ff1681565b34801561059657600080fd5b506102da6105a5366004614072565b61125f565b3480156105b657600080fd5b5060005460ff16610304565b3480156105ce57600080fd5b506102da6112c4565b3480156105e357600080fd5b506105f76105f23660046140bd565b6113c6565b60405161031091906140f9565b34801561061057600080fd5b506102da61061f366004614125565b61146a565b34801561063057600080fd5b50610417606e5481565b34801561064657600080fd5b506103a5610655366004613fc6565b6114a0565b34801561066657600080fd5b506104176114c1565b34801561067b57600080fd5b5061068f61068a366004613f40565b6114d8565b6040516103109594939291906141d9565b3480156106ac57600080fd5b506102da6115aa565b3480156106c157600080fd5b506102da6106d0366004614227565b6115ba565b3480156106e157600080fd5b506103396106f0366004613fc6565b6115d5565b34801561070157600080fd5b50610304610710366004613f79565b6115ed565b34801561072157600080fd5b506102da610730366004614253565b611618565b34801561074157600080fd5b506102da61075036600461429d565b611795565b34801561076157600080fd5b50610417600081565b34801561077657600080fd5b5061041760045481565b34801561078c57600080fd5b506103da61079b366004614396565b611936565b3480156107ac57600080fd5b506103a56107bb366004613fc6565b611ac8565b3480156107cc57600080fd5b506104176107db366004613fa9565b60386020526000908152604090205481565b3480156107f957600080fd5b50610560610808366004613f40565b607660205260009081526040902080546001820154600383015460049093015460ff90921692909184565b34801561083f57600080fd5b5061041761084e366004613f40565b611add565b34801561085f57600080fd5b506102da61086e366004613f79565b611af4565b34801561087f57600080fd5b5061030461088e366004613f40565b611b19565b34801561089f57600080fd5b506102da6108ae36600461440b565b611b45565b3480156108bf57600080fd5b506103396108ce3660046144ce565b611b97565b3480156108df57600080fd5b506001546002546103a5565b3480156108f757600080fd5b5061090b6109063660046144e9565b611c12565b6040516103109190614584565b34801561092457600080fd5b50610560610933366004613f40565b607060205260009081526040902080546001820154600383015460049093015460ff90921692909184565b34801561096a57600080fd5b50610304610979366004613f40565b611d79565b34801561098a57600080fd5b506102da610999366004614125565b611da7565b3480156109aa57600080fd5b506103046109b93660046145e6565b6000928352606f602090815260408085209385529281528284206001600160a01b0392909216845260029091019052902054151590565b3480156109fc57600080fd5b5061041760008051602061503083398151915281565b60405163129c2ce160e31b815260040160405180910390fd5b60006001600160e01b03198216635a05180f60e01b1480610a505750610a5082611fa0565b92915050565b610a5e611fd5565b610a6982338361201b565b5050565b610a75611fd5565b610a7d6120f3565b33610a9e610a903684900384018461472d565b82610a996114c1565b612194565b610aa86003611b97565b60405163c7c4fea960e01b81526001600160a01b03919091169063c7c4fea990610adc9060009086359086906004016147ce565b600060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050505050565b6060610b1c6120f3565b336000610b276114c1565b90506000846001600160401b03811115610b4357610b4361461f565b604051908082528060200260200182016040528015610b6c578160200160208202803683370190505b5093506000610b7b6003611b97565b905060005b86811015610e4457878782818110610b9a57610b9a6147fb565b905060200201359250816001600160a01b031663c7c4fea9600285886040518463ffffffff1660e01b8152600401610bd4939291906147ce565b600060405180830381600087803b158015610bee57600080fd5b505af1158015610c02573d6000803e3d6000fd5b50505050610c0f83611d79565b15610c3d576001868281518110610c2857610c286147fb565b91151560209283029190910190910152610e3c565b600083815260706020908152604080832060718352818420825160a081019093528054835260018082015492959491929184019160ff1690811115610c8457610c84613fe8565b6001811115610c9557610c95613fe8565b8152604080516060808201835260028501546001600160a01b039081168352600386015481166020848101919091526004870154848601528086019390935283518083018552600587015482168152600687015490911692810192909252600785015482840152828401919091528151808201909252600884018054919093019290829060ff166001811115610d2d57610d2d613fe8565b6001811115610d3e57610d3e613fe8565b81526001820154602082015260029091015460409091015290525090506000610d6682612435565b90506000610d76848a8a856124ff565b90506001816004811115610d8c57610d8c613fe8565b03610e3757835460ff19166002908117855560405163114fc47560e11b81526001600160a01b0388169163229f88ea91610dcb91908b90600401614811565b600060405180830381600087803b158015610de557600080fd5b505af1158015610df9573d6000803e3d6000fd5b505050507f62520d049932cdee872e9b3c59c0f6073637147e5e9bc8b050b062430eaf5c9f8284604051610e2e92919061482c565b60405180910390a15b505050505b600101610b80565b505050505092915050565b6000828152606b6020526040902060010154610e6a81612530565b610e74838361253d565b505050565b603754600390610100900460ff16158015610e9b575060375460ff8083169116105b610ec05760405162461bcd60e51b8152600401610eb79061488d565b60405180910390fd5b6037805461ffff191660ff831617610100179055610edf600b8361255f565b6037805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6001600160a01b0381163314610f955760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610eb7565b610a698282612603565b610faa6000336115ed565b80610fc85750610fc8600080516020615030833981519152336115ed565b610ff5576000356001600160e01b0319166005604051620f948f60ea1b8152600401610eb79291906148db565b606d5460ff16156110195760405163173492af60e31b815260040160405180910390fd5b606d805460ff19166001179055565b60008281526070602090815260408083206001600160a01b038516845260020190915281205415155b9392505050565b611060612625565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b61108a61267f565b6110926126ee565b565b61109c611fd5565b6110a581611d79565b156110c3576040516327ddf84960e11b815260040160405180910390fd5b6000818152607160209081526040808320815160a0810190925280548252600180820154929391929184019160ff169081111561110257611102613fe8565b600181111561111357611113613fe8565b8152604080516060808201835260028501546001600160a01b039081168352600386015481166020848101919091526004870154848601528086019390935283518083018552600587015482168152600687015490911692810192909252600785015482840152828401919091528151808201909252600884018054919093019290829060ff1660018111156111ab576111ab613fe8565b60018111156111bc576111bc613fe8565b815260018201546020820152600290910154604091820152915260608301510151919250504614611226576060810151604090810151905163092048d160e11b81526001600160e01b03196000351660048201526024810191909152466044820152606401610eb7565b7f04e8cbd836dea43a2dc7eb19de345cca3a8e6978a2ef5225d924775500f67c7c61125082612435565b82604051610f1992919061482c565b611267611fd5565b6000829003611289576040516316ee9d3b60e11b815260040160405180910390fd5b60005b828110156112be576112b68484838181106112a9576112a96147fb565b905060a00201338461201b565b60010161128c565b50505050565b603754600290610100900460ff161580156112e6575060375460ff8083169116105b6113025760405162461bcd60e51b8152600401610eb79061488d565b6037805461ffff191660ff83161761010017905560745461132e906008906001600160a01b031661255f565b607554611346906003906001600160a01b031661255f565b60775461135e90600a906001600160a01b031661255f565b607480546001600160a01b031990811690915560758054821690556077805490911690556037805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b604080518082018252600080825260208083018290526001600160a01b038616825260738152838220858352905282902082518084019093528054919291829060ff16600181111561141a5761141a613fe8565b600181111561142b5761142b613fe8565b815290546001600160a01b0361010090910481166020928301529082015191925016610a5057604051631b79f53b60e21b815260040160405180910390fd5b611472612625565b6000839003611494576040516316ee9d3b60e11b815260040160405180910390fd5b6112be84848484612740565b6000806114ab612625565b6114b58484612823565b915091505b9250929050565b60006114d36114ce6128ae565b61291b565b905090565b607160209081526000918252604091829020805460018083015485516060808201885260028601546001600160a01b03908116835260038701548116838901526004870154838a015288518083018a526005880154821681526006880154909116978101979097526007860154878901528751908101909752600885018054949760ff93841697929692959294909391928492169081111561157c5761157c613fe8565b600181111561158d5761158d613fe8565b815260200160018201548152602001600282015481525050905085565b6115b261267f565b611092612951565b6115c2612625565b6115cb8161298e565b610a69828261255f565b6000828152606c6020526040812061105190836129c4565b6000918252606b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008051602061503083398151915261163081612530565b606d5460ff16156116545760405163173492af60e31b815260040160405180910390fd5b818414801561166257508315155b61168d576000356001600160e01b0319166040516306b5667560e21b8152600401610eb791906148fc565b60005b84811015610b0a5760006116ce8787848181106116af576116af6147fb565b905060a0020160200160208101906116c79190613fa9565b60016113c6565b805190915060018111156116e4576116e4613fe8565b8787848181106116f6576116f66147fb565b61170f92606060a0909202019081019150604001614911565b600181111561172057611720613fe8565b1461173d5760405162035e2b60ea1b815260040160405180910390fd5b61178b878784818110611752576117526147fb565b905060a00201600187878681811061176c5761176c6147fb565b90506020020160208101906117819190613fa9565b84602001516129d0565b5050600101611690565b603754610100900460ff16158080156117b55750603754600160ff909116105b806117cf5750303b1580156117cf575060375460ff166001145b6117eb5760405162461bcd60e51b8152600401610eb79061488d565b6037805460ff19166001179055801561180e576037805461ff0019166101001790555b61181960008d612b5a565b6118238b8b612b64565b505061182f8989612823565b506000905061183e868061492e565b9050111561189057611871611853868061492e565b611860602089018961492e565b61186a898061492e565b8989612bf0565b61189061187e868061492e565b61188b602088018861492e565b612740565b60005b868110156118e1576118d96000805160206150308339815191528989848181106118bf576118bf6147fb565b90506020020160208101906118d49190613fa9565b61253d565b600101611893565b508015611928576037805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b6060611940611fd5565b6119486120f3565b33611951613d94565b836001600160401b038111156119695761196961461f565b604051908082528060200260200182016040528015611992578160200160208202803683370190505b509250600061199f6114c1565b905060006119ad6003611b97565b905060005b86811015610e44578787828181106119cc576119cc6147fb565b905061016002018036038101906119e3919061472d565b805160405163c7c4fea960e01b81529195506001600160a01b0384169163c7c4fea991611a1891600091908a906004016147ce565b600060405180830381600087803b158015611a3257600080fd5b505af1158015611a46573d6000803e3d6000fd5b5060029250611a53915050565b6040808601518101516000908152606f6020908152828220885183529052205460ff166004811115611a8757611a87613fe8565b03611ab5576001868281518110611aa057611aa06147fb565b91151560209283029190910190910152611ac0565b611ac0848685612194565b6001016119b2565b600080611ad3612625565b6114b58484612b64565b6000818152606c60205260408120610a5090612df9565b6000828152606b6020526040902060010154611b0f81612530565b610e748383612603565b6000611b236128ae565b600154611b30919061498d565b600254611b3d908461498d565b101592915050565b611b4d612625565b6000879003611b7d576000356001600160e01b0319166040516306b5667560e21b8152600401610eb791906148fc565b611b8d8888888888888888612bf0565b5050505050505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600d811115611bce57611bce613fe8565b60ff1681526020810191909152604001600020546001600160a01b0316905080611c0d578160405163409140df60e11b8152600401610eb791906149a4565b919050565b6060816001600160401b03811115611c2c57611c2c61461f565b604051908082528060200260200182016040528015611c5f57816020015b6060815260200190600190039081611c4a5790505b50905060005b82811015611d7157600085815260726020526040812090858584818110611c8e57611c8e6147fb565b9050602002016020810190611ca39190613fa9565b6001600160a01b03166001600160a01b031681526020019081526020016000208054611cce906149be565b80601f0160208091040260200160405190810160405280929190818152602001828054611cfa906149be565b8015611d475780601f10611d1c57610100808354040283529160200191611d47565b820191906000526020600020905b815481529060010190602001808311611d2a57829003601f168201915b5050505050828281518110611d5e57611d5e6147fb565b6020908102919091010152600101611c65565b509392505050565b6000600260008381526070602052604090205460ff166004811115611da057611da0613fe8565b1492915050565b611daf611fd5565b611db76120f3565b338315801590611dc657508382145b611df1576000356001600160e01b0319166040516306b5667560e21b8152600401610eb791906148fc565b6000611dfb6114c1565b9050600080611e0a6003611b97565b905060005b87811015611f9557888882818110611e2957611e296147fb565b905060200201359250868682818110611e4457611e446147fb565b9050602002810190611e5691906149f2565b60008581526072602090815260408083206001600160a01b038b168452909152902091611e84919083614a7e565b5060405163c7c4fea960e01b81526001600160a01b0383169063c7c4fea990611eb69060019087908a906004016147ce565b600060405180830381600087803b158015611ed057600080fd5b505af1158015611ee4573d6000803e3d6000fd5b50505060008481526076602052604081209150611f03828888886124ff565b90506001816004811115611f1957611f19613fe8565b03611f8b57815460ff1916600217825560405163114fc47560e11b81526001600160a01b0385169063229f88ea90611f58906001908990600401614811565b600060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b505050505b5050600101611e0f565b505050505050505050565b60006001600160e01b03198216637965db0b60e01b1480610a5057506301ffc9a760e01b6001600160e01b0319831614610a50565b60005460ff16156110925760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610eb7565b61203561203036859003850160408601614b3d565b612e03565b61203e83612e7e565b60006120596120536040860160208701613fa9565b836113c6565b8051909150600181111561206f5761206f613fe8565b61207f6060860160408701614911565b600181111561209057612090613fe8565b146120ad5760405162035e2b60ea1b815260040160405180910390fd5b6120dc83306120c26040880160208901613fa9565b6120d436899003890160408a01614b3d565b929190612efc565b6120ec84838584602001516129d0565b5050505050565b6120fd600b611b97565b604051635a02d57960e11b81523360048201526001600160a01b03919091169063b405aaf290602401602060405180830381865afa158015612143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121679190614b59565b611092576000356001600160e01b0319166006604051620f948f60ea1b8152600401610eb79291906148db565b825160808401516121a490612e03565b6000846020015160018111156121bc576121bc613fe8565b146121da5760405163182f3d8760e11b815260040160405180910390fd5b4684606001516040015114612228576060840151604090810151905163092048d160e11b81526001600160e01b03196000351660048201526024810191909152466044820152606401610eb7565b60006122448560600151602001518660400151604001516113c6565b608086015151909150600181111561225e5761225e613fe8565b8151600181111561227157612271613fe8565b14801561229b57508460400151602001516001600160a01b031681602001516001600160a01b0316145b6122b85760405163f4b8742f60e01b815260040160405180910390fd5b6040808601518101516000908152606f60209081528282208583529052908120906122e287612435565b905060006122f2838888856124ff565b905087604001516040015185886001600160a01b03167f48c4262ed68beb92fe5d7d48d70772e49cd50c317937dea60a99f15f794b64598560405161233991815260200190565b60405180910390a4600181600481111561235557612355613fe8565b03611b8d57825460ff191660021783556060880151805160209091015160808a015161238492909160006130fb565b61238e6003611b97565b885160405163114fc47560e11b81526001600160a01b03929092169163229f88ea916123c09160009190600401614811565b600060405180830381600087803b1580156123da57600080fd5b505af11580156123ee573d6000803e3d6000fd5b505050507f8d20d8121a34dded9035ff5b43e901c142824f7a22126392992c353c37890524828960405161242392919061482c565b60405180910390a15050505050505050565b6000806124458360400151613417565b905060006124568460600151613417565b905060006124aa8560800151604080517f1e2b74b2a792d5c0f0b6e59b037fa9d43d84fbb759337f0112fcc15ca414fc8d815282516020808301919091528301518183015291015160608201526080902090565b604080517fb9d1fe7c9deeec5dc90a2f47ff1684239519f2545b2228d3d91fb27df3189eea815287516020808301919091529097015190870152606086019390935250608084015260a08301525060c0902090565b600061250c85858461345f565b60006125188684613515565b905061252686858386613615565b9695505050505050565b61253a8133613661565b50565b61254782826136c5565b6000828152606c60205260409020610e74908261374b565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600d81111561259557612595613fe8565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600d8111156125d6576125d6613fe8565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b61260d8282613760565b6000828152606c60205260409020610e7490826137c7565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314611092576000356001600160e01b0319166001604051620f948f60ea1b8152600401610eb79291906148db565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314806126c157506005546001600160a01b031633145b611092576000356001600160e01b0319166001604051620f948f60ea1b8152600401610eb79291906148db565b6126f66137dc565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b82811461276e576000356001600160e01b0319166040516306b5667560e21b8152600401610eb791906148fc565b60005b838110156127df5782828281811061278b5761278b6147fb565b90506020020135603860008787858181106127a8576127a86147fb565b90506020020160208101906127bd9190613fa9565b6001600160a01b03168152602081019190915260400160002055600101612771565b507f6f52f53a938df83439fa4c6055c7df0a6906d621aa6dfa4708187037fdfc41da848484846040516128159493929190614bf6565b60405180910390a150505050565b600080828411156128475760405163964a4d2760e01b815260040160405180910390fd5b505060018054600254607885905560798490556004805493840190556040805183815260208101839052929391928592879290917feac82d4d949d2d4f77f96aa68ab6b1bb750da73f14e55d41a1b93f387471ecba91015b60405180910390a49250929050565b60006128ba600b611b97565b6001600160a01b031663ada86b246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d39190614c28565b6000600254600160025484600154612933919061498d565b61293d9190614c41565b6129479190614c54565b610a509190614c67565b612959611fd5565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127233390565b806001600160a01b03163b60000361253a57604051630bfc64a360e21b81526001600160a01b0382166004820152602401610eb7565b60006110518383613825565b606e8054600091826129e183614c89565b9091555090506000612a08848385886129ff368c90038c018c614ca2565b9392919061384f565b60008381526071602090815260409091208251815590820151600180830180549495508594909160ff19909116908381811115612a4757612a47613fe8565b021790555060408281015180516002840180546001600160a01b039283166001600160a01b03199182161790915560208084015160038701805491851691841691909117905592840151600486015560608601518051600587018054918516918416919091179055928301516006860180549190931691161790550151600782015560808201518051600883018054909190829060ff191660018381811115612af257612af2613fe8565b0217905550602082015181600101556040820151816002015550509050507ff313c253a5be72c29d0deb2c8768a9543744ac03d6b3cafd50cc976f1c2632fc612b3a82612435565b82604051612b4992919061482c565b60405180910390a150949350505050565b610a69828261253d565b60008082841115612b96576000356001600160e01b0319166040516387f6f09560e01b8152600401610eb791906148fc565b50506001805460028054858455908490556004805493840190556040805183815260208101839052929391928592879290917f976f8a9c5bdf8248dec172376d6e2b80a8e3df2f0328e381c6db8e1cf138c0f8910161289f565b8685148015612bfe57508683145b612c29576000356001600160e01b0319166040516306b5667560e21b8152600401610eb791906148fc565b60005b87811015612dbb57868682818110612c4657612c466147fb565b9050602002016020810190612c5b9190613fa9565b607360008b8b85818110612c7157612c716147fb565b9050602002016020810190612c869190613fa9565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110612cba57612cba6147fb565b90506020020135815260200190815260200160002060000160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550828282818110612d0857612d086147fb565b9050602002016020810190612d1d9190614911565b607360008b8b85818110612d3357612d336147fb565b9050602002016020810190612d489190613fa9565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110612d7c57612d7c6147fb565b60209081029290920135835250810191909152604001600020805460ff191660018381811115612dae57612dae613fe8565b0217905550600101612c2c565b507f2544bff60c6d5b84946e06804af9f84e150bbee85238dbdee79efca4e0adf4018888888888888888604051612423989796959493929190614cf5565b6000610a50825490565b600081516001811115612e1857612e18613fe8565b148015612e29575060008160400151115b8015612e3757506020810151155b80612e615750600181516001811115612e5257612e52613fe8565b148015612e6157506040810151155b61253a5760405163034992a760e51b815260040160405180910390fd5b6000612e906060830160408401614911565b6001811115612ea157612ea1613fe8565b148015612ede575060386000612ebd6040840160208501613fa9565b6001600160a01b031681526020810191909152604001600020546080820135105b1561253a57604051636eff4a8560e11b815260040160405180910390fd5b600060608186516001811115612f1457612f14613fe8565b03612ff15760408681015181516001600160a01b038881166024830152878116604483015260648083019390935283518083039093018352608490910183526020820180516001600160e01b03166323b872dd60e01b179052915191851691612f7d9190614d84565b6000604051808303816000865af19150503d8060008114612fba576040519150601f19603f3d011682016040523d82523d6000602084013e612fbf565b606091505b509092509050818015612fea575080511580612fea575080806020019051810190612fea9190614b59565b91506130d5565b60018651600181111561300657613006613fe8565b036130bc57602086810151604080516001600160a01b0389811660248301528881166044830152606480830194909452825180830390940184526084909101825292820180516001600160e01b03166323b872dd60e01b179052519185169161306f9190614d84565b6000604051808303816000865af19150503d80600081146130ac576040519150601f19603f3d011682016040523d82523d6000602084013e6130b1565b606091505b5050809250506130d5565b6040516361e411a760e11b815260040160405180910390fd5b81610b0a5785858585604051639d2e4c6760e01b8152600401610eb79493929190614da0565b6000816001600160a01b0316836001600160a01b0316036131aa5760408086015190516001600160a01b0386169180156108fc02916000818181858888f193505050506131a557816001600160a01b031663d0e30db086604001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561318157600080fd5b505af1158015613195573d6000803e3d6000fd5b50505050506131a58585856138bb565b6120ec565b6000855160018111156131bf576131bf613fe8565b03613328576040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561320b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322f9190614c28565b9050856040015181101561331757836001600160a01b03166340c10f193083896040015161325d9190614c54565b6040516001600160a01b03909216602483015260448201526064016040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516132b19190614d84565b6000604051808303816000865af19150503d80600081146132ee576040519150601f19603f3d011682016040523d82523d6000602084013e6132f3565b606091505b5050809250508161331757604051632f739fff60e11b815260040160405180910390fd5b6133228686866138bb565b506120ec565b60018551600181111561333d5761333d613fe8565b036130bc5761335183858760200151613939565b6131a557602085810151604080516001600160a01b038881166024830152604480830194909452825180830390940184526064909101825292820180516001600160e01b03166340c10f1960e01b17905251918516916133b19190614d84565b6000604051808303816000865af19150503d80600081146133ee576040519150601f19603f3d011682016040523d82523d6000602084013e6133f3565b606091505b505080915050806131a55760405163c8e3a09f60e01b815260040160405180910390fd5b604080517f353bdd8d69b9e3185b3972e08b03845c0c14a21a390215302776a7a34b0e8764815282516020808301919091528301518183015291015160608201526080902090565b60008360030154118015613477575042836003015411155b1561348857825460ff191660041783555b6001600160a01b0382166000908152600284016020526040902054156134cc5760405163025fd59560e41b81526001600160a01b0383166004820152602401610eb7565b6001600160a01b039091166000818152600284016020908152604082209390935560059093018054600181018255908452919092200180546001600160a01b0319169091179055565b6000806000613524600b611b97565b6001600160a01b031663c441c4a86040518163ffffffff1660e01b8152600401600060405180830381865afa158015613561573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135899190810190614e6d565b81519194509250905060005b8181101561360b57858760020160008684815181106135b6576135b66147fb565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205403613603578281815181106135f6576135f66147fb565b6020026020010151850194505b600101613595565b5050505092915050565b600083831015801561363c57506000855460ff16600481111561363a5761363a613fe8565b145b1561365457845460ff19166001908117865585018290555b5050915460ff1692915050565b61366b82826115ed565b610a6957613683816001600160a01b031660146139e4565b61368e8360206139e4565b60405160200161369f929190614f4a565b60408051601f198184030181529082905262461bcd60e51b8252610eb791600401614fbf565b6136cf82826115ed565b610a69576000828152606b602090815260408083206001600160a01b03851684529091529020805460ff191660011790556137073390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611051836001600160a01b038416613b7f565b61376a82826115ed565b15610a69576000828152606b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611051836001600160a01b038416613bce565b60005460ff166110925760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610eb7565b600082600001828154811061383c5761383c6147fb565b9060005260206000200154905092915050565b613857613d94565b92835260016020808501919091526060840180516001600160a01b0396871690528682015181519087169083015251466040918201528651818601805191881690915280519490961693909101929092529251810192909252910151608082015290565b600080845160018111156138d1576138d1613fe8565b036138ec576138e582848660400151613cc1565b9050613915565b60018451600181111561390157613901613fe8565b036130bc576138e582848660200151613939565b806112be578383836040516341bd7d9160e11b8152600401610eb793929190614fd2565b604080513060248201526001600160a01b038481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009286169161399791614d84565b6000604051808303816000865af19150503d80600081146139d4576040519150601f19603f3d011682016040523d82523d6000602084013e6139d9565b606091505b509095945050505050565b606060006139f383600261498d565b6139fe906002614c41565b6001600160401b03811115613a1557613a1561461f565b6040519080825280601f01601f191660200182016040528015613a3f576020820181803683370190505b509050600360fc1b81600081518110613a5a57613a5a6147fb565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613a8957613a896147fb565b60200101906001600160f81b031916908160001a9053506000613aad84600261498d565b613ab8906001614c41565b90505b6001811115613b30576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613aec57613aec6147fb565b1a60f81b828281518110613b0257613b026147fb565b60200101906001600160f81b031916908160001a90535060049490941c93613b2981615002565b9050613abb565b5083156110515760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610eb7565b6000818152600183016020526040812054613bc657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a50565b506000610a50565b60008181526001830160205260408120548015613cb7576000613bf2600183614c54565b8554909150600090613c0690600190614c54565b9050818114613c6b576000866000018281548110613c2657613c266147fb565b9060005260206000200154905080876000018481548110613c4957613c496147fb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613c7c57613c7c615019565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a50565b6000915050610a50565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009260609290871691613d1e9190614d84565b6000604051808303816000865af19150503d8060008114613d5b576040519150601f19603f3d011682016040523d82523d6000602084013e613d60565b606091505b509092509050818015613d8b575080511580613d8b575080806020019051810190613d8b9190614b59565b95945050505050565b6040805160a08101825260008082526020808301829052835160608082018652838252818301849052818601849052848601919091528451808201865283815280830184905280860184905281850152845190810185528281529081018290529283015290608082015290565b600060208284031215613e1357600080fd5b81356001600160e01b03198116811461105157600080fd5b60008082840360c0811215613e3f57600080fd5b60a0811215613e4d57600080fd5b50919360a08501359350915050565b60006101608284031215613e6f57600080fd5b50919050565b60008083601f840112613e8757600080fd5b5081356001600160401b03811115613e9e57600080fd5b6020830191508360208260051b85010111156114ba57600080fd5b60008060208385031215613ecc57600080fd5b82356001600160401b03811115613ee257600080fd5b613eee85828601613e75565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015613f34578351151583529284019291840191600101613f16565b50909695505050505050565b600060208284031215613f5257600080fd5b5035919050565b6001600160a01b038116811461253a57600080fd5b8035611c0d81613f59565b60008060408385031215613f8c57600080fd5b823591506020830135613f9e81613f59565b809150509250929050565b600060208284031215613fbb57600080fd5b813561105181613f59565b60008060408385031215613fd957600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b608081016005861061401257614012613fe8565b9481526020810193909352604083019190915260609091015290565b60008083601f84011261404057600080fd5b5081356001600160401b0381111561405757600080fd5b60208301915083602060a0830285010111156114ba57600080fd5b60008060006040848603121561408757600080fd5b83356001600160401b0381111561409d57600080fd5b6140a98682870161402e565b909790965060209590950135949350505050565b600080604083850312156140d057600080fd5b82356140db81613f59565b946020939093013593505050565b6002811061253a5761253a613fe8565b81516040820190614109816140e9565b82526020928301516001600160a01b0316929091019190915290565b6000806000806040858703121561413b57600080fd5b84356001600160401b038082111561415257600080fd5b61415e88838901613e75565b9096509450602087013591508082111561417757600080fd5b5061418487828801613e75565b95989497509550505050565b80516001600160a01b03908116835260208083015190911690830152604090810151910152565b80516141c2816140e9565b825260208181015190830152604090810151910152565b85815261016081016141ea866140e9565b8560208301526141fd6040830186614190565b61420a60a0830185614190565b6125266101008301846141b7565b8035600e8110611c0d57600080fd5b6000806040838503121561423a57600080fd5b61424383614218565b91506020830135613f9e81613f59565b6000806000806040858703121561426957600080fd5b84356001600160401b038082111561428057600080fd5b61415e8883890161402e565b8060408101831015610a5057600080fd5b60008060008060008060008060008060006101208c8e0312156142bf57600080fd5b6142c88c613f6e565b9a5060208c0135995060408c0135985060608c0135975060808c013596506001600160401b038060a08e013511156142ff57600080fd5b61430f8e60a08f01358f01613e75565b909750955060c08d013581101561432557600080fd5b6143358e60c08f01358f0161428c565b94508060e08e0135111561434857600080fd5b6143588e60e08f01358f0161428c565b9350806101008e0135111561436c57600080fd5b5061437e8d6101008e01358e01613e75565b81935080925050509295989b509295989b9093969950565b600080602083850312156143a957600080fd5b82356001600160401b03808211156143c057600080fd5b818501915085601f8301126143d457600080fd5b8135818111156143e357600080fd5b866020610160830285010111156143f957600080fd5b60209290920196919550909350505050565b6000806000806000806000806080898b03121561442757600080fd5b88356001600160401b038082111561443e57600080fd5b61444a8c838d01613e75565b909a50985060208b013591508082111561446357600080fd5b61446f8c838d01613e75565b909850965060408b013591508082111561448857600080fd5b6144948c838d01613e75565b909650945060608b01359150808211156144ad57600080fd5b506144ba8b828c01613e75565b999c989b5096995094979396929594505050565b6000602082840312156144e057600080fd5b61105182614218565b6000806000604084860312156144fe57600080fd5b8335925060208401356001600160401b0381111561451b57600080fd5b61452786828701613e75565b9497909650939450505050565b60005b8381101561454f578181015183820152602001614537565b50506000910152565b60008151808452614570816020860160208601614534565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156145d957603f198886030184526145c7858351614558565b945092850192908501906001016145ab565b5092979650505050505050565b6000806000606084860312156145fb57600080fd5b8335925060208401359150604084013561461481613f59565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156146575761465761461f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156146855761468561461f565b604052919050565b6002811061253a57600080fd5b6000606082840312156146ac57600080fd5b6146b4614635565b905081356146c181613f59565b815260208201356146d181613f59565b806020830152506040820135604082015292915050565b6000606082840312156146fa57600080fd5b614702614635565b9050813561470f8161468d565b80825250602082013560208201526040820135604082015292915050565b6000610160828403121561474057600080fd5b60405160a081018181106001600160401b03821117156147625761476261461f565b6040528235815260208301356147778161468d565b6020820152614789846040850161469a565b604082015261479b8460a0850161469a565b60608201526147ae8461010085016146e8565b60808201529392505050565b600381106147ca576147ca613fe8565b9052565b606081016147dc82866147ba565b60208201939093526001600160a01b0391909116604090910152919050565b634e487b7160e01b600052603260045260246000fd5b6040810161481f82856147ba565b8260208301529392505050565b60006101808201905083825282516020830152602083015161484d816140e9565b8060408401525060408301516148666060840182614190565b50606083015161487960c0840182614190565b506080830151611d716101208401826141b7565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6001600160e01b031983168152604081016009831061481f5761481f613fe8565b6001600160e01b031991909116815260200190565b60006020828403121561492357600080fd5b81356110518161468d565b6000808335601e1984360301811261494557600080fd5b8301803591506001600160401b0382111561495f57600080fd5b6020019150600581901b36038213156114ba57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a5057610a50614977565b60208101600e83106149b8576149b8613fe8565b91905290565b600181811c908216806149d257607f821691505b602082108103613e6f57634e487b7160e01b600052602260045260246000fd5b6000808335601e19843603018112614a0957600080fd5b8301803591506001600160401b03821115614a2357600080fd5b6020019150368190038213156114ba57600080fd5b601f821115610e7457600081815260208120601f850160051c81016020861015614a5f5750805b601f850160051c820191505b81811015610b0a57828155600101614a6b565b6001600160401b03831115614a9557614a9561461f565b614aa983614aa383546149be565b83614a38565b6000601f841160018114614add5760008515614ac55750838201355b600019600387901b1c1916600186901b1783556120ec565b600083815260209020601f19861690835b82811015614b0e5786850135825560209485019460019092019101614aee565b5086821015614b2b5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600060608284031215614b4f57600080fd5b61105183836146e8565b600060208284031215614b6b57600080fd5b8151801515811461105157600080fd5b8183526000602080850194508260005b85811015614bb9578135614b9e81613f59565b6001600160a01b031687529582019590820190600101614b8b565b509495945050505050565b81835260006001600160fb1b03831115614bdd57600080fd5b8260051b80836020870137939093016020019392505050565b604081526000614c0a604083018688614b7b565b8281036020840152614c1d818587614bc4565b979650505050505050565b600060208284031215614c3a57600080fd5b5051919050565b80820180821115610a5057610a50614977565b81810381811115610a5057610a50614977565b600082614c8457634e487b7160e01b600052601260045260246000fd5b500490565b600060018201614c9b57614c9b614977565b5060010190565b600060a08284031215614cb457600080fd5b614cbc614635565b8235614cc781613f59565b81526020830135614cd781613f59565b6020820152614ce984604085016146e8565b60408201529392505050565b608081526000614d09608083018a8c614b7b565b602083820381850152614d1d828a8c614b7b565b91508382036040850152614d3282888a614bc4565b8481036060860152858152869250810160005b86811015614d73578335614d588161468d565b614d61816140e9565b82529282019290820190600101614d45565b509c9b505050505050505050505050565b60008251614d96818460208701614534565b9190910192915050565b60c08101614dae82876141b7565b6001600160a01b0394851660608301529284166080820152921660a090920191909152919050565b60006001600160401b03821115614def57614def61461f565b5060051b60200190565b600082601f830112614e0a57600080fd5b81516020614e1f614e1a83614dd6565b61465d565b82815260059290921b84018101918181019086841115614e3e57600080fd5b8286015b84811015614e62578051614e5581613f59565b8352918301918301614e42565b509695505050505050565b600080600060608486031215614e8257600080fd5b83516001600160401b0380821115614e9957600080fd5b614ea587838801614df9565b9450602091508186015181811115614ebc57600080fd5b614ec888828901614df9565b945050604086015181811115614edd57600080fd5b86019050601f81018713614ef057600080fd5b8051614efe614e1a82614dd6565b81815260059190911b82018301908381019089831115614f1d57600080fd5b928401925b82841015614f3b57835182529284019290840190614f22565b80955050505050509250925092565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614f82816017850160208801614534565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614fb3816028840160208801614534565b01602801949350505050565b6020815260006110516020830184614558565b60a08101614fe082866141b7565b6001600160a01b03938416606083015291909216608090920191909152919050565b60008161501157615011614977565b506000190190565b634e487b7160e01b600052603160045260246000fdfe384495a48d92b97cd9b9d199c73ed783dd1aa0076a6ebcf9156ca7fef7d2cc40a164736f6c6343000811000a",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ErrAlreadyVoted(address)": [
        {
          "details": "Error indicating that a voter has already voted.",
          "params": {
            "voter": "The address of the voter who has already voted."
          }
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrERC20MintingFailed()": [
        {
          "details": "Error indicating that the minting of ERC20 tokens has failed."
        }
      ],
      "ErrERC721MintingFailed()": [
        {
          "details": "Error indicating that the minting of ERC721 tokens has failed."
        }
      ],
      "ErrEmptyArray()": [
        {
          "details": "Error indicating that an array is empty when it should contain elements."
        }
      ],
      "ErrInvalidChainId(bytes4,uint256,uint256)": [
        {
          "details": "Error indicating that the chain ID is invalid.",
          "params": {
            "actual": "Current chain ID that executing function.",
            "expected": "Expected chain ID required for the tx to success.",
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid chain ID."
          }
        }
      ],
      "ErrInvalidInfo()": [
        {
          "details": "Error indicating that the provided information is invalid."
        }
      ],
      "ErrInvalidReceipt()": [
        {
          "details": "Error indicating that a receipt is invalid."
        }
      ],
      "ErrInvalidReceiptKind()": [
        {
          "details": "Error indicating that a receipt kind is invalid."
        }
      ],
      "ErrInvalidRequest()": [
        {
          "details": "Error indicating that a request is invalid."
        }
      ],
      "ErrInvalidThreshold(bytes4)": [
        {
          "details": "Error indicating that the provided threshold is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that the invalid threshold applies to."
          }
        }
      ],
      "ErrInvalidTokenStandard()": [
        {
          "details": "Error indicating that a token standard is invalid."
        }
      ],
      "ErrInvalidTrustedThreshold()": [
        {
          "details": "Error thrown when an invalid trusted threshold is specified."
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrQueryForTooSmallQuantity()": [
        {
          "details": "Throwed when the ERC20 withdrawal quantity is less than the minimum threshold."
        }
      ],
      "ErrTokenCouldNotTransfer((uint8,uint256,uint256),address,address)": [
        {
          "details": "Error indicating that the `transfer` has failed.",
          "params": {
            "to": "Receiver of the token value.",
            "token": "Address of the token.",
            "tokenInfo": "Info of the token including ERC standard, id or quantity."
          }
        }
      ],
      "ErrTokenCouldNotTransferFrom((uint8,uint256,uint256),address,address,address)": [
        {
          "details": "Error indicating that the `transferFrom` has failed.",
          "params": {
            "from": "Owner of the token value.",
            "to": "Receiver of the token value.",
            "token": "Address of the token.",
            "tokenInfo": "Info of the token including ERC standard, id or quantity."
          }
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnsupportedStandard()": [
        {
          "details": "Error indicating that an unsupported standard is encountered."
        }
      ],
      "ErrUnsupportedToken()": [
        {
          "details": "Error indicating that a token is not supported."
        }
      ],
      "ErrWithdrawalsMigrated()": [
        {
          "details": "Error thrown when attempting to withdraw funds that have already been migrated."
        }
      ],
      "ErrWithdrawnOnMainchainAlready()": [
        {
          "details": "Error thrown when attempting to withdraw funds that have already been withdrawn on the mainchain."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bulkRequestWithdrawalFor((address,address,(uint8,uint256,uint256))[],uint256)": {
        "details": "Bulk requests withdrawals. Emits the `WithdrawalRequested` events."
      },
      "bulkSubmitWithdrawalSignatures(uint256[],bytes[])": {
        "details": "Submits withdrawal signatures. Requirements: - The method caller is a validator."
      },
      "checkThreshold(uint256)": {
        "details": "Checks whether the `_voteWeight` passes the threshold."
      },
      "depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "details": "Deposits based on the receipt. Requirements: - The method caller is a validator. Emits the `Deposited` once the assets are released."
      },
      "depositVoted(uint256,uint256,address)": {
        "details": "Returns whether the deposit is casted by the voter."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getMainchainToken(address,uint256)": {
        "details": "Returns mainchain token address. Reverts for unsupported token."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getThreshold()": {
        "details": "Returns the threshold."
      },
      "getTrustedThreshold()": {
        "details": "Returns the threshold about trusted org."
      },
      "getWithdrawalSignatures(uint256,address[])": {
        "details": "Returns withdrawal signatures."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,uint256,uint256,uint256,uint256,address[],address[][2],uint256[][2],uint8[])": {
        "details": "Initializes contract storage."
      },
      "mainchainWithdrew(uint256)": {
        "details": "Returns whether the withdrawal is done on mainchain."
      },
      "mainchainWithdrewVoted(uint256,address)": {
        "details": "Returns whether the mainchain withdrew is casted by the voter."
      },
      "mapTokens(address[],address[],uint256[],uint8[])": {
        "details": "Maps Ronin tokens to mainchain networks. Requirement: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `TokenMapped` event."
      },
      "markWithdrawalMigrated()": {
        "details": "Mark the migration as done."
      },
      "migrateWithdrawals((address,address,(uint8,uint256,uint256))[],address[])": {
        "details": "Migrates withdrawals. Requirements: - The method caller is the migrator. - The arrays have the same length and its length larger than 0."
      },
      "minimumVoteWeight()": {
        "details": "Returns the minimum vote weight to pass the threshold."
      },
      "pause()": {
        "details": "Triggers paused state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "requestWithdrawalFor((address,address,(uint8,uint256,uint256)),uint256)": {
        "details": "Locks the assets and request withdrawal. Emits the `WithdrawalRequested` event."
      },
      "requestWithdrawalSignatures(uint256)": {
        "details": "Requests withdrawal signatures for a specific withdrawal. Emits the `WithdrawalSignaturesRequested` event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setEmergencyPauser(address)": {
        "details": "Grant emergency pauser role for `_addr`."
      },
      "setMinimumThresholds(address[],uint256[])": {
        "details": "Sets the minimum thresholds to withdraw. Requirements: - The method caller is admin. - The arrays have the same length and its length larger than 0. Emits the `MinimumThresholdsUpdated` event."
      },
      "setThreshold(uint256,uint256)": {
        "details": "Sets the threshold. Requirements: - The method caller is admin. Emits the `ThresholdUpdated` event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tryBulkAcknowledgeMainchainWithdrew(uint256[])": {
        "details": "Marks the withdrawals are done on mainchain and returns the boolean array indicating whether the withdrawal vote is already done before. Requirements: - The method caller is a validator. Emits the `MainchainWithdrew` once the valid call passes the quorum threshold."
      },
      "tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])": {
        "details": "Tries bulk deposits based on the receipts and returns the boolean array indicating whether the deposit vote is already done before. Reverts if the deposit is invalid or is voted by the validator again. Requirements: - The method caller is a validator. Emits the `Deposited` once the assets are released."
      },
      "unpause()": {
        "details": "Triggers unpaused state."
      }
    },
    "stateVariables": {
      "WITHDRAWAL_MIGRATOR": {
        "details": "Withdrawal unlocker role hash"
      },
      "____deprecated0": {
        "custom:deprecated": "Previously `_validatorContract` (non-zero value)"
      },
      "____deprecated1": {
        "custom:deprecated": "Previously `_bridgeTrackingContract` (non-zero value)"
      },
      "____deprecated2": {
        "custom:deprecated": "Previously `_trustedOrgContract` (non-zero value)"
      },
      "_mainchainToken": {
        "details": "Mapping from token address => chain id => mainchain token address"
      },
      "_withdrawalSig": {
        "details": "Mapping from withdrawal id => validator address => signatures"
      },
      "depositVote": {
        "details": "Mapping from chain id => deposit id => deposit vote"
      },
      "mainchainWithdrewVote": {
        "details": "Mapping from withdrawal id => mainchain withdrew vote"
      },
      "withdrawal": {
        "details": "Mapping from withdrawal id => withdrawal receipt"
      },
      "withdrawalCount": {
        "details": "Total withdrawal"
      },
      "withdrawalMigrated": {
        "details": "Flag indicating whether the withdrawal migrate progress is done"
      },
      "withdrawalStatVote": {
        "details": "Mapping from withdrawal id => vote for recording withdrawal stats"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256)))": {
        "notice": "The assets will be transferred whenever the valid call passes the quorum threshold."
      },
      "tryBulkAcknowledgeMainchainWithdrew(uint256[])": {
        "notice": "Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time."
      },
      "tryBulkDepositFor((uint256,uint8,(address,address,uint256),(address,address,uint256),(uint8,uint256,uint256))[])": {
        "notice": "The assets will be transferred whenever the valid call for the receipt passes the quorum threshold. Not reverting to avoid unnecessary failed transactions because the validators can send transactions at the same time."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1535,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4326,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_num",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4328,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_denom",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4330,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "______deprecated",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4332,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4334,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "emergencyPauser",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4339,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "______gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "55",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 4868,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "minimumThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4873,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "______gap",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_roles",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4026_storage)"
      },
      {
        "astId": 28601,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "withdrawalMigrated",
        "offset": 0,
        "slot": "109",
        "type": "t_bool"
      },
      {
        "astId": 28604,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "withdrawalCount",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 28612,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "depositVote",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)15176_storage))"
      },
      {
        "astId": 28618,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "mainchainWithdrewVote",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint256,t_struct(Vote)15176_storage)"
      },
      {
        "astId": 28624,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "withdrawal",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint256,t_struct(Receipt)16527_storage)"
      },
      {
        "astId": 28631,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_withdrawalSig",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))"
      },
      {
        "astId": 28639,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_mainchainToken",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(MappedToken)12596_storage))"
      },
      {
        "astId": 28642,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "____deprecated0",
        "offset": 0,
        "slot": "116",
        "type": "t_address"
      },
      {
        "astId": 28645,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "____deprecated1",
        "offset": 0,
        "slot": "117",
        "type": "t_address"
      },
      {
        "astId": 28651,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "withdrawalStatVote",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_uint256,t_struct(Vote)15176_storage)"
      },
      {
        "astId": 28654,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "____deprecated2",
        "offset": 0,
        "slot": "119",
        "type": "t_address"
      },
      {
        "astId": 28656,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_trustedNum",
        "offset": 0,
        "slot": "120",
        "type": "t_uint256"
      },
      {
        "astId": 28658,
        "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
        "label": "_trustedDenom",
        "offset": 0,
        "slot": "121",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Kind)16324": {
        "encoding": "inplace",
        "label": "enum Transfer.Kind",
        "numberOfBytes": "1"
      },
      "t_enum(Standard)15843": {
        "encoding": "inplace",
        "label": "enum Token.Standard",
        "numberOfBytes": "1"
      },
      "t_enum(VoteStatus)12623": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(MappedToken)12596_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct MappedTokenConsumer.MappedToken))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(MappedToken)12596_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4026_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4026_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)15176_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct IsolatedGovernance.Vote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vote)15176_storage)"
      },
      "t_mapping(t_uint256,t_struct(MappedToken)12596_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MappedTokenConsumer.MappedToken)",
        "numberOfBytes": "32",
        "value": "t_struct(MappedToken)12596_storage"
      },
      "t_mapping(t_uint256,t_struct(Receipt)16527_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Transfer.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)16527_storage"
      },
      "t_mapping(t_uint256,t_struct(Vote)15176_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IsolatedGovernance.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)15176_storage"
      },
      "t_struct(AddressSet)4026_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4025,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3725_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Info)15851_storage": {
        "encoding": "inplace",
        "label": "struct Token.Info",
        "members": [
          {
            "astId": 15846,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "erc",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Standard)15843"
          },
          {
            "astId": 15848,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15850,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "quantity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MappedToken)12596_storage": {
        "encoding": "inplace",
        "label": "struct MappedTokenConsumer.MappedToken",
        "members": [
          {
            "astId": 12593,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "erc",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Standard)15843"
          },
          {
            "astId": 12595,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "tokenAddr",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Owner)16298_storage": {
        "encoding": "inplace",
        "label": "struct Token.Owner",
        "members": [
          {
            "astId": 16293,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16295,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "tokenAddr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16297,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Receipt)16527_storage": {
        "encoding": "inplace",
        "label": "struct Transfer.Receipt",
        "members": [
          {
            "astId": 16514,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16517,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "kind",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Kind)16324"
          },
          {
            "astId": 16520,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "mainchain",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Owner)16298_storage"
          },
          {
            "astId": 16523,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "ronin",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Owner)16298_storage"
          },
          {
            "astId": 16526,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "info",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Info)15851_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3725_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3720,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3724,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vote)15176_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.Vote",
        "members": [
          {
            "astId": 15158,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)12623"
          },
          {
            "astId": 15160,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 15165,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 15168,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "expiredAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15171,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15175,
            "contract": "contracts/ronin/gateway/RoninGatewayV2.sol:RoninGatewayV2",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}