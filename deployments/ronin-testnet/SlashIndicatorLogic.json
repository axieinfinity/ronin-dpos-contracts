{
  "address": "0x82D8666b6017a88dd5Bd3F6cb2d40752366cFA5B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "BailedOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "missingVotesRatioTier1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "missingVotesRatioTier2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jailDurationForMissingVotesRatioTier2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "skipBridgeOperatorSlashingThreshold",
          "type": "uint256"
        }
      ],
      "name": "BridgeOperatorSlashingConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeVotingThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeVotingSlashAmount",
          "type": "uint256"
        }
      ],
      "name": "BridgeVotingSlashingConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gainCreditScore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCreditScore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bailOutCostMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cutOffPercentageAfterBailout",
          "type": "uint256"
        }
      ],
      "name": "CreditScoreConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "validators",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "creditScores",
          "type": "uint256[]"
        }
      ],
      "name": "CreditScoresUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashDoubleSignAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "doubleSigningJailUntilBlock",
          "type": "uint256"
        }
      ],
      "name": "DoubleSignSlashingConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "MaintenanceContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninGovernanceAdminContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseSlash.SlashType",
          "name": "slashType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "Slashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unavailabilityTier1Threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unavailabilityTier2Threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashAmountForUnavailabilityTier2Threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jailDurationForUnavailabilityTier2Threshold",
          "type": "uint256"
        }
      ],
      "name": "UnavailabilitySlashingConfigsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "bailOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "checkBailedOutAtPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "currentUnavailabilityIndicator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeOperatorSlashingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridgeVotingSlashingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "getCreditScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreditScoreConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDoubleSignSlashingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        }
      ],
      "name": "getManyCreditScores",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_resultList",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "getUnavailabilityIndicator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnavailabilitySlashingConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__validatorContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__maintenanceContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__roninGovernanceAdminContract",
          "type": "address"
        },
        {
          "internalType": "uint256[4]",
          "name": "_bridgeOperatorSlashingConfigs",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_bridgeVotingSlashingConfigs",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_doubleSignSlashingConfigs",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_unavailabilitySlashingConfigs",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_creditScoreConfigs",
          "type": "uint256[4]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUnavailabilitySlashedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precompileValidateDoubleSignAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninGovernanceAdminContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratioTier1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ratioTier2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jailDurationTier2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_skipSlashingThreshold",
          "type": "uint256"
        }
      ],
      "name": "setBridgeOperatorSlashingConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashAmount",
          "type": "uint256"
        }
      ],
      "name": "setBridgeVotingSlashingConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gainScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bailOutMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cutOffPercentage",
          "type": "uint256"
        }
      ],
      "name": "setCreditScoreConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slashAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jailUntilBlock",
          "type": "uint256"
        }
      ],
      "name": "setDoubleSignSlashingConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setMaintenanceContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninGovernanceAdminContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier1Threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier2Threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashAmountForTier2Threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jailDurationForTier2Threshold",
          "type": "uint256"
        }
      ],
      "name": "setUnavailabilitySlashingConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        }
      ],
      "name": "slashBridgeVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensuAddr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_header1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_header2",
          "type": "bytes"
        }
      ],
      "name": "slashDoubleSign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorAddr",
          "type": "address"
        }
      ],
      "name": "slashUnavailability",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "updateCreditScores",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea09cbed88cd3c8d39418f8ced4b9404874a505cbde501846d11e1af4062c02b",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x82D8666b6017a88dd5Bd3F6cb2d40752366cFA5B",
    "transactionIndex": 0,
    "gasUsed": "2467184",
    "logsBloom": "0x
    "blockHash": "0x32081e429454c21fb829691cfb3dde04d476e9d9b4eb1c6269c8b9ab746ed2ef",
    "transactionHash": "0xea09cbed88cd3c8d39418f8ced4b9404874a505cbde501846d11e1af4062c02b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12250701,
        "transactionHash": "0xea09cbed88cd3c8d39418f8ced4b9404874a505cbde501846d11e1af4062c02b",
        "address": "0x82D8666b6017a88dd5Bd3F6cb2d40752366cFA5B",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x32081e429454c21fb829691cfb3dde04d476e9d9b4eb1c6269c8b9ab746ed2ef"
      }
    ],
    "blockNumber": 12250701,
    "cumulativeGasUsed": "2467184",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7ee7c0f941167beb3dcb34451beb8d74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"BailedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"missingVotesRatioTier1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"missingVotesRatioTier2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailDurationForMissingVotesRatioTier2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skipBridgeOperatorSlashingThreshold\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeVotingThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeVotingSlashAmount\",\"type\":\"uint256\"}],\"name\":\"BridgeVotingSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gainCreditScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCreditScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailOutCostMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cutOffPercentageAfterBailout\",\"type\":\"uint256\"}],\"name\":\"CreditScoreConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"creditScores\",\"type\":\"uint256[]\"}],\"name\":\"CreditScoresUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashDoubleSignAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doubleSigningJailUntilBlock\",\"type\":\"uint256\"}],\"name\":\"DoubleSignSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MaintenanceContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninGovernanceAdminContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseSlash.SlashType\",\"name\":\"slashType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unavailabilityTier1Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unavailabilityTier2Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashAmountForUnavailabilityTier2Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailDurationForUnavailabilityTier2Threshold\",\"type\":\"uint256\"}],\"name\":\"UnavailabilitySlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"bailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"checkBailedOutAtPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"currentUnavailabilityIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeOperatorSlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeVotingSlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getCreditScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditScoreConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDoubleSignSlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"getManyCreditScores\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_resultList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getUnavailabilityIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnavailabilitySlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninGovernanceAdminContract\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"_bridgeOperatorSlashingConfigs\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_bridgeVotingSlashingConfigs\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_doubleSignSlashingConfigs\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_unavailabilitySlashingConfigs\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_creditScoreConfigs\",\"type\":\"uint256[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnavailabilitySlashedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileValidateDoubleSignAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninGovernanceAdminContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratioTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailDurationTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_skipSlashingThreshold\",\"type\":\"uint256\"}],\"name\":\"setBridgeOperatorSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"}],\"name\":\"setBridgeVotingSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gainScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bailOutMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cutOffPercentage\",\"type\":\"uint256\"}],\"name\":\"setCreditScoreConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailUntilBlock\",\"type\":\"uint256\"}],\"name\":\"setDoubleSignSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaintenanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninGovernanceAdminContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier1Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmountForTier2Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailDurationForTier2Threshold\",\"type\":\"uint256\"}],\"name\":\"setUnavailabilitySlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"}],\"name\":\"slashBridgeVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensuAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_header1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_header2\",\"type\":\"bytes\"}],\"name\":\"slashDoubleSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorAddr\",\"type\":\"address\"}],\"name\":\"slashUnavailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"updateCreditScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bailOut(address)\":{\"details\":\"A slashed validator use this method to get out of jail. Requirements: - The `_consensusAddr` must be a validator. - Only validator's admin can call this method. Emits the event `BailedOut`.\"},\"checkBailedOutAtPeriod(address,uint256)\":{\"details\":\"Returns the whether the `_validator` has been bailed out at the `_period`.\"},\"currentUnavailabilityIndicator(address)\":{\"details\":\"Returns the current unavailability indicator of a block producer.\"},\"getBridgeOperatorSlashingConfigs()\":{\"details\":\"Returns the configs related to bridge operator slashing.\",\"returns\":{\"_0\":\"The bridge reward will be deprecated if (s)he missed more than this ratio.\",\"_1\":\"The bridge reward and mining reward will be deprecated and the corresponding block producer will be put in jail if (s)he misses more than this ratio.\",\"_2\":\"The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.\",\"_3\":\"The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small.\"}},\"getBridgeVotingSlashingConfigs()\":{\"details\":\"Returns the configs related to bridge voting slashing.\",\"returns\":{\"_0\":\"The threshold to slash when a trusted organization does not vote for bridge operators.\",\"_1\":\"The amount of RON to slash bridge voting.\"}},\"getCreditScore(address)\":{\"details\":\"Returns the current credit score of the validator.\"},\"getCreditScoreConfigs()\":{\"details\":\"Returns the configs related to credit score.\",\"returns\":{\"_0\":\"The score to gain per period.\",\"_1\":\"The max number of credit score that a validator can hold.\",\"_2\":\"The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\",\"_3\":\"The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\"}},\"getDoubleSignSlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"returns\":{\"_0\":\"The amount of RON to slash double sign.\",\"_1\":\"The block number that the punished validator will be jailed until, due to double signing.\"}},\"getManyCreditScores(address[])\":{\"details\":\"Returns the current credit score of a list of validators.\"},\"getUnavailabilityIndicator(address,uint256)\":{\"details\":\"Helper for CreditScore contract to query indicator of the validator.\"},\"getUnavailabilitySlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"returns\":{\"_0\":\"The mining reward will be deprecated, if (s)he missed more than this threshold.\",\"_1\":\" The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold.\",\"_2\":\"The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.\",\"_3\":\"The number of blocks to jail a block producer when (s)he is slashed tier-2.\"}},\"initialize(address,address,address,address,uint256[4],uint256[2],uint256[2],uint256[4],uint256[4])\":{\"details\":\"Initializes the contract storage.\"},\"maintenanceContract()\":{\"details\":\"Returns the maintenance contract.\"},\"precompileValidateDoubleSignAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"roninGovernanceAdminContract()\":{\"details\":\"Returns the ronin governance admin contract.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeOperatorSlashingConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash bridge operators. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.\",\"params\":{\"_jailDurationTier2\":\"The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.\",\"_ratioTier1\":\"The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map to 0%-100%.\",\"_ratioTier2\":\"The bridge reward and mining reward will be deprecated and the corresponding block producer will be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.\",\"_skipSlashingThreshold\":\"The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small.\"}},\"setBridgeVotingSlashingConfigs(uint256,uint256)\":{\"details\":\"Sets the configs to slash bridge voting. Requirements: - The method caller is admin. Emits the event `BridgeVotingSlashingConfigsUpdated`.\",\"params\":{\"_slashAmount\":\"The amount of RON to slash bridge voting.\",\"_threshold\":\"The threshold to slash when a trusted organization does not vote for bridge operators.\"}},\"setCreditScoreConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to credit score. Requirements: - The method caller is admin. Emits the event `CreditScoreConfigsUpdated`.\",\"params\":{\"_bailOutMultiplier\":\"The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\",\"_cutOffPercentage\":\"The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\",\"_gainScore\":\"The score to gain per period.\",\"_maxScore\":\"The max number of credit score that a validator can hold.\"}},\"setDoubleSignSlashingConfigs(uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `DoubleSignSlashingConfigsUpdated`.\",\"params\":{\"_jailUntilBlock\":\"The block number that the punished validator will be jailed until, due to double signing.\",\"_slashAmount\":\"The amount of RON to slash double sign.\"}},\"setMaintenanceContract(address)\":{\"details\":\"Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`.\"},\"setRoninGovernanceAdminContract(address)\":{\"details\":\"Sets the ronin governance admin contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninGovernanceAdminContractUpdated`.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.\",\"params\":{\"_jailDurationForTier2Threshold\":\"The number of blocks to jail a block producer when (s)he is slashed tier-2.\",\"_slashAmountForTier2Threshold\":\"The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.\",\"_tier1Threshold\":\"The mining reward will be deprecated, if (s)he missed more than this threshold.\",\"_tier2Threshold\":\"The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold.\"}},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"slashBridgeVoting(address)\":{\"details\":\"Slashes for bridge voter governance. Emits the event `Slashed`.\"},\"slashDoubleSign(address,bytes,bytes)\":{\"details\":\"Slashes for double signing. Requirements: - The method caller is coinbase. Emits the event `Slashed` if the double signing evidence of the two headers valid.\"},\"slashUnavailability(address)\":{\"details\":\"Slashes for unavailability by increasing the counter of block producer `_consensusAddr`. Requirements: - The method caller is coinbase. Emits the event `Slashed` when the threshold is reached.\"},\"updateCreditScores(address[],uint256)\":{\"details\":\"Updates the credit score for the validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/slash-indicator/SlashIndicator.sol\":\"SlashIndicator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasMaintenanceContract.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\n\\ncontract HasMaintenanceContract is IHasMaintenanceContract, HasProxyAdmin {\\n  IMaintenance internal _maintenanceContract;\\n\\n  modifier onlyMaintenanceContract() {\\n    require(\\n      maintenanceContract() == msg.sender,\\n      \\\"HasMaintenanceContract: method caller must be scheduled maintenance contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function maintenanceContract() public view override returns (address) {\\n    return address(_maintenanceContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasMaintenanceContract\\n   */\\n  function setMaintenanceContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasMaintenanceContract: set to non-contract\\\");\\n    _setMaintenanceContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the scheduled maintenance contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function _setMaintenanceContract(address _addr) internal {\\n    _maintenanceContract = IMaintenance(_addr);\\n    emit MaintenanceContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x89970cf13d486897699cfd03d29163bd2f50689844448d5c4906b9f81bdebf0f\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninGovernanceAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninGovernanceAdminContract.sol\\\";\\nimport \\\"../../interfaces/IRoninGovernanceAdmin.sol\\\";\\n\\ncontract HasRoninGovernanceAdminContract is IHasRoninGovernanceAdminContract, HasProxyAdmin {\\n  IRoninGovernanceAdmin internal _roninGovernanceAdminContract;\\n\\n  modifier onlyRoninGovernanceAdminContract() {\\n    require(\\n      roninGovernanceAdminContract() == msg.sender,\\n      \\\"HasRoninGovernanceAdminContract: method caller must be ronin governance admin contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninGovernanceAdminContract\\n   */\\n  function roninGovernanceAdminContract() public view override returns (address) {\\n    return address(_roninGovernanceAdminContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninGovernanceAdminContract\\n   */\\n  function setRoninGovernanceAdminContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasRoninGovernanceAdminContract: set to non-contract\\\");\\n    _setRoninGovernanceAdminContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin governance admin contract.\\n   *\\n   * Emits the event `RoninGovernanceAdminContractUpdated`.\\n   *\\n   */\\n  function _setRoninGovernanceAdminContract(address _addr) internal {\\n    _roninGovernanceAdminContract = IRoninGovernanceAdmin(_addr);\\n    emit RoninGovernanceAdminContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x95eb0b77ba677db1973488501bcf95c6dd016ceb48ee145789dbe5ca3d907b22\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    require(\\n      roninTrustedOrganizationContract() == msg.sender,\\n      \\\"HasRoninTrustedOrganizationContract: method caller must be ronin trusted organization contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasRoninTrustedOrganizationContract: set to non-contract\\\");\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xbdfbd30aa984f10f191b21e4b790ff1872445c7387cf359aadd863aac6635507\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    require(validatorContract() == msg.sender, \\\"HasValidatorContract: method caller must be validator contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasValidatorContract: set to non-contract\\\");\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xfc2ef0f8358960702307626dc4ccbab066c5e0763e04e8a794f0dc4711789bdd\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMaintenance {\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed consensusAddr, Schedule);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(address _consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    address _consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `_block` or not.\\n   */\\n  function checkManyMaintained(address[] calldata _addrList, uint256 _block) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    address[] calldata _addrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `_consensusAddr` has scheduled.\\n   */\\n  function checkScheduled(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `_consensusAddr`.\\n   */\\n  function getSchedule(address _consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedules() external view returns (uint256 _count);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 _minMaintenanceDurationInBlock,\\n    uint256 _maxMaintenanceDurationInBlock,\\n    uint256 _minOffsetToStartSchedule,\\n    uint256 _maxOffsetToStartSchedule,\\n    uint256 _maxSchedules\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedules() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `_startedAtBlock` to `_startedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `_consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `_consensusAddr`.\\n   * - The candidate `_consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(\\n    address _consensusAddr,\\n    uint256 _startedAtBlock,\\n    uint256 _endedAtBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0d063efabb136cf4e8533da1d56439e1a5d254930235f7136cfae14295139a05\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoninGovernanceAdmin {\\n  /**\\n   * @dev Returns the last voted block of the bridge voter.\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf8bbda9f65a09444b3ebbcd19a62e39bf8711047224744f86439db6f42551b2\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasMaintenanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasMaintenanceContract {\\n  /// @dev Emitted when the maintenance contract is updated.\\n  event MaintenanceContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the maintenance contract.\\n   */\\n  function maintenanceContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the maintenance contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `MaintenanceContractUpdated`.\\n   *\\n   */\\n  function setMaintenanceContract(address) external;\\n}\\n\",\"keccak256\":\"0xb4497d521ee5da55cfdd349e814f763ba88b9e91d8bdc50ba12f4e5d161b65e3\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninGovernanceAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasRoninGovernanceAdminContract {\\n  /// @dev Emitted when the ronin governance admin contract is updated.\\n  event RoninGovernanceAdminContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the ronin governance admin contract.\\n   */\\n  function roninGovernanceAdminContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin governance admin contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninGovernanceAdminContractUpdated`.\\n   *\\n   */\\n  function setRoninGovernanceAdminContract(address) external;\\n}\\n\",\"keccak256\":\"0x86a1dd09731dbf37c8e905b032bef920b3accbbe8f382248f9807f33720a3dea\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasRoninTrustedOrganizationContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x8ec2782f28a2c41d8feee0c5f213ac66e327c3757eab8d85a09104f21587ff10\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasValidatorContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0xb6e39a02969091decbb50633286855c157502a7d15a988e436644b8d419e13d3\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2\\n  }\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed validator, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0xedbd63e46b316156c9bfc4a88bc0d0ff016f14a031810bfc2b972b084b0e0fdd\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICreditScore {\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore,\\n    uint256 maxCreditScore,\\n    uint256 bailOutCostMultiplier,\\n    uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated\\n  event CreditScoresUpdated(address[] validators, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail\\n  event BailedOut(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function updateCreditScores(address[] calldata _validators, uint256 _period) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(address[] calldata _validators) external view returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `_validator` has been bailed out at the `_period`.\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6d5bcdcc1347812f47bd6ee2050e0a103210a55030ba943ea889b0478192352a\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashBridgeOperator {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method\\n   * `getBridgeOperatorSlashingConfigs` for param details.\\n   */\\n  event BridgeOperatorSlashingConfigsUpdated(\\n    uint256 missingVotesRatioTier1,\\n    uint256 missingVotesRatioTier2,\\n    uint256 jailDurationForMissingVotesRatioTier2,\\n    uint256 skipBridgeOperatorSlashingThreshold\\n  );\\n\\n  /**\\n   * @dev Returns the configs related to bridge operator slashing.\\n   *\\n   * @return _missingVotesRatioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio.\\n   * @return _missingVotesRatioTier2 The bridge reward and mining reward will be deprecated and the corresponding\\n   * block producer will be put in jail if (s)he misses more than this ratio.\\n   * @return _jailDurationForMissingVotesRatioTier2 The number of blocks to jail the corresponding block producer when\\n   * its bridge operator is slashed tier-2.\\n   * @return _skipBridgeOperatorSlashingThreshold The threshold to skip slashing the bridge operator in case the total\\n   * number of votes in the bridge is too small.\\n   *\\n   */\\n  function getBridgeOperatorSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _missingVotesRatioTier1,\\n      uint256 _missingVotesRatioTier2,\\n      uint256 _jailDurationForMissingVotesRatioTier2,\\n      uint256 _skipBridgeOperatorSlashingThreshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash bridge operators.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _ratioTier1 The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map\\n   * to 0%-100%.\\n   * @param _ratioTier2 The bridge reward and mining reward will be deprecated and the corresponding block producer will\\n   * be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.\\n   * @param _jailDurationTier2 The number of blocks to jail the corresponding block producer when its bridge operator is\\n   * slashed tier-2.\\n   * @param _skipSlashingThreshold The threshold to skip slashing the bridge operator in case the total number of votes\\n   * in the bridge is too small.\\n   *\\n   */\\n  function setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x986ec80f07935318901fc52492d04ace26124e88f0252582543a244818344b52\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashBridgeVoting is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge voting is updated. See the method `getBridgeVotingSlashingConfigs` for param\\n   * details.\\n   */\\n  event BridgeVotingSlashingConfigsUpdated(uint256 bridgeVotingThreshold, uint256 bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Slashes for bridge voter governance.\\n   *\\n   * Emits the event `Slashed`.\\n   */\\n  function slashBridgeVoting(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the configs related to bridge voting slashing.\\n   *\\n   * @return _bridgeVotingThreshold The threshold to slash when a trusted organization does not vote for bridge\\n   * operators.\\n   * @return _bridgeVotingSlashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function getBridgeVotingSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _bridgeVotingThreshold, uint256 _bridgeVotingSlashAmount);\\n\\n  /**\\n   * @dev Sets the configs to slash bridge voting.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeVotingSlashingConfigsUpdated`.\\n   *\\n   * @param _threshold The threshold to slash when a trusted organization does not vote for bridge operators.\\n   * @param _slashAmount The amount of RON to slash bridge voting.\\n   *\\n   */\\n  function setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) external;\\n}\\n\",\"keccak256\":\"0x72c3bcfe3c49f946651caa3066bd5296d007871c9a56fa113e2d3c0f3db7eb99\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(uint256 slashDoubleSignAmount, uint256 doubleSigningJailUntilBlock);\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(\\n    address _validatorAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (uint256 _slashDoubleSignAmount, uint256 _doubleSigningJailUntilBlock);\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(uint256 _slashAmount, uint256 _jailUntilBlock) external;\\n}\\n\",\"keccak256\":\"0x5639b0203facbf4769bb26e994c8491ac22c13ae0363c3c062ac375225121463\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashBridgeVoting.sol\\\";\\nimport \\\"./ISlashBridgeOperator.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is\\n  ISlashDoubleSign,\\n  ISlashBridgeVoting,\\n  ISlashBridgeOperator,\\n  ISlashUnavailability,\\n  ICreditScore\\n{}\\n\",\"keccak256\":\"0xe8b8fde3af614735cb304bc1eb82b05d65ede4df804b5d555787e5d5ecb95ec0\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(address _consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(address _validator) external view returns (uint256);\\n\\n  /**\\n   * @dev Retursn the unavailability indicator in the period `_period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold.\\n   * @return _unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold.\\n   * @return _slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed tier-2.\\n   * @return _jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed tier-2.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _unavailabilityTier1Threshold,\\n      uint256 _unavailabilityTier2Threshold,\\n      uint256 _slashAmountForUnavailabilityTier2Threshold,\\n      uint256 _jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param _tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param _tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param _slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param _jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb0bc405c7c1bdcf0fa975afc5d9c6cba8fc85e118dd3febe0b4fa00e3c6bf5c6\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function grantValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function requestRevokeCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x440a846c4cb5d268f54592976e60015f7559d2c6e394f83de3041c04ffab6458\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 amount);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(uint256 amount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xd0aef1d05e99c82fd733c97a45f3a999898c4ded0cace2cb901864e2ddc3904a\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface IRoninValidatorSet is ICandidateManager, ICommonInfo, ISlashingExecution, ICoinbaseExecution {}\\n\",\"keccak256\":\"0x2475cf9c7007277ddfeade823196d0913a6d5c3e3fc9a1a10800734c0fdef062\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0xdeb929875d06c5dfb8562029ccc2922e1c5238f2dc67c8c61acad614f5fe1e28\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x33a52025305948a8e71d32317e4cdb2cf779afc3bcdb5bcbd72df5e1513f449f\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x310f321625fac8b7dbabfdad36e82b960b0b1f7bf0e5b70b763e45438b8a8d30\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbaf184267f8a587b6c2a79868f7acde00d9372e8283baf5baab34ad19ab4abd2\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xf7f30bacc63b2e4e9548c83e45eac727eeafa46e60312f936bf189480e413323\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(\\n    uint256 c,\\n    uint256 a,\\n    uint256 b\\n  ) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(\\n    uint256 x1,\\n    uint256 x2,\\n    uint256 y1,\\n    uint256 y2\\n  ) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(\\n    uint256 a,\\n    uint256 b,\\n    uint256 upperbound\\n  ) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - min(a, b);\\n  }\\n}\\n\",\"keccak256\":\"0xa9e2a3ad43d7999a3cdbfb040b0f2dec282eae91ff8fe6ad26fdd19087121ce7\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PrecompileUsageValidateDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract PrecompileUsageValidateDoubleSign {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileValidateDoubleSignAddress() public view virtual returns (address) {\\n    return address(0x67);\\n  }\\n\\n  /**\\n   * @dev Validates the two submitted block header if they are produced by the same address\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcValidateEvidence(bytes calldata _header1, bytes calldata _header2)\\n    internal\\n    view\\n    virtual\\n    returns (bool _validEvidence)\\n  {\\n    address _smc = precompileValidateDoubleSignAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload = abi.encodeWithSignature(\\\"validatingDoubleSignProof(bytes,bytes)\\\", _header1, _header2);\\n    uint _payloadLength = _payload.length;\\n    uint[1] memory _output;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _output, 0x20)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n    }\\n\\n    require(_success, \\\"PrecompileUsageValidateDoubleSign: call to precompile fails\\\");\\n    return (_output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x6bd2fe65e85f500dc93fc25d877cb5d231639801f9a4e68ddb5558e1aa94aaaa\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/CreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/slash-indicator/ICreditScore.sol\\\";\\nimport \\\"../../extensions/collections/HasMaintenanceContract.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\n\\nabstract contract CreditScore is ICreditScore, HasValidatorContract, HasMaintenanceContract, PercentageConsumer {\\n  /// @dev Mapping from validator address => period index => whether bailed out before\\n  mapping(address => mapping(uint256 => bool)) internal _checkBailedOutAtPeriod;\\n  /// @dev Mapping from validator address => credit score\\n  mapping(address => uint256) internal _creditScore;\\n\\n  /// @dev The max gained number of credit score per period.\\n  uint256 internal _gainCreditScore;\\n  /// @dev The max number of credit score that a validator can hold.\\n  uint256 internal _maxCreditScore;\\n  /// @dev The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n  uint256 internal _bailOutCostMultiplier;\\n  /// @dev The percentage of reward to be cut off from the validator in the rest of the period after bailed out.\\n  uint256 internal _cutOffPercentageAfterBailout;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function updateCreditScores(address[] calldata _validators, uint256 _period) external override onlyValidatorContract {\\n    uint256 _periodStartAtBlock = _validatorContract.currentPeriodStartAtBlock();\\n\\n    bool[] memory _jaileds = _validatorContract.checkManyJailed(_validators);\\n    bool[] memory _maintaineds = _maintenanceContract.checkManyMaintainedInBlockRange(\\n      _validators,\\n      _periodStartAtBlock,\\n      block.number\\n    );\\n    uint256[] memory _updatedCreditScores = new uint256[](_validators.length);\\n\\n    for (uint _i = 0; _i < _validators.length; _i++) {\\n      address _validator = _validators[_i];\\n\\n      uint256 _indicator = getUnavailabilityIndicator(_validator, _period);\\n      bool _isJailedInPeriod = _jaileds[_i];\\n      bool _isMaintainingInPeriod = _maintaineds[_i];\\n\\n      uint256 _actualGain = (_isJailedInPeriod || _isMaintainingInPeriod)\\n        ? 0\\n        : Math.subNonNegative(_gainCreditScore, _indicator);\\n      uint256 _scoreBeforeGain = _creditScore[_validator];\\n      uint256 _scoreAfterGain = Math.addWithUpperbound(_creditScore[_validator], _actualGain, _maxCreditScore);\\n\\n      if (_scoreBeforeGain != _scoreAfterGain) {\\n        _creditScore[_validator] = _scoreAfterGain;\\n      }\\n\\n      _updatedCreditScores[_i] = _creditScore[_validator];\\n    }\\n\\n    emit CreditScoresUpdated(_validators, _updatedCreditScores);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function bailOut(address _consensusAddr) external override {\\n    require(\\n      _validatorContract.isValidatorCandidate(_consensusAddr),\\n      \\\"SlashIndicator: consensus address must be a validator candidate\\\"\\n    );\\n    require(\\n      _validatorContract.isCandidateAdmin(_consensusAddr, msg.sender),\\n      \\\"SlashIndicator: method caller must be a candidate admin\\\"\\n    );\\n\\n    (bool _isJailed, , uint256 _jailedEpochLeft) = _validatorContract.getJailedTimeLeft(_consensusAddr);\\n    require(_isJailed, \\\"SlashIndicator: caller must be jailed in the current period\\\");\\n\\n    uint256 _period = _validatorContract.currentPeriod();\\n    require(!_checkBailedOutAtPeriod[_consensusAddr][_period], \\\"SlashIndicator: validator has bailed out previously\\\");\\n\\n    uint256 _score = _creditScore[_consensusAddr];\\n    uint256 _cost = _jailedEpochLeft * _bailOutCostMultiplier;\\n    require(_score >= _cost, \\\"SlashIndicator: insufficient credit score to bail out\\\");\\n\\n    _validatorContract.execBailOut(_consensusAddr, _period);\\n\\n    _creditScore[_consensusAddr] -= _cost;\\n    _setUnavailabilityIndicator(_consensusAddr, _period, 0);\\n    _checkBailedOutAtPeriod[_consensusAddr][_period] = true;\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external override onlyAdmin {\\n    _setCreditScoreConfigs(_gainScore, _maxScore, _bailOutMultiplier, _cutOffPercentage);\\n  }\\n\\n  /**\\n   * @dev See `ISlashUnavailability`\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period) public view virtual returns (uint256);\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (_gainCreditScore, _maxCreditScore, _bailOutCostMultiplier, _cutOffPercentageAfterBailout);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getCreditScore(address _validator) external view override returns (uint256) {\\n    return _creditScore[_validator];\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getManyCreditScores(address[] calldata _validators)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory _resultList)\\n  {\\n    _resultList = new uint256[](_validators.length);\\n\\n    for (uint _i = 0; _i < _resultList.length; _i++) {\\n      _resultList[_i] = _creditScore[_validators[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function checkBailedOutAtPeriod(address _validator, uint256 _period) external view override returns (bool) {\\n    return _checkBailedOutAtPeriod[_validator][_period];\\n  }\\n\\n  /**\\n   * @dev See `SlashUnavailability`.\\n   */\\n  function _setUnavailabilityIndicator(\\n    address _validator,\\n    uint256 _period,\\n    uint256 _indicator\\n  ) internal virtual;\\n\\n  /**\\n   * @dev See `ICreditScore-setCreditScoreConfigs`.\\n   */\\n  function _setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) internal {\\n    require(_gainScore <= _maxScore, \\\"CreditScore: invalid credit score config\\\");\\n    require(_cutOffPercentage <= _MAX_PERCENTAGE, \\\"CreditScore: invalid cut off percentage config\\\");\\n\\n    _gainCreditScore = _gainScore;\\n    _maxCreditScore = _maxScore;\\n    _bailOutCostMultiplier = _bailOutMultiplier;\\n    _cutOffPercentageAfterBailout = _cutOffPercentage;\\n    emit CreditScoreConfigsUpdated(_gainScore, _maxScore, _bailOutMultiplier, _cutOffPercentage);\\n  }\\n}\\n\",\"keccak256\":\"0x68eaddb2ce9134fed3a94cb7d3b39cad5aeacc05349130b56ebe86579810a05b\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../extensions/collections/HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashBridgeOperator.sol\\\";\\n\\nabstract contract SlashBridgeOperator is ISlashBridgeOperator, HasProxyAdmin, PercentageConsumer {\\n  /**\\n   * @dev The bridge operators will be deprecated reward if (s)he missed more than the ratio.\\n   * Values 0-10,000 map to 0%-100%.\\n   */\\n  uint256 internal _missingVotesRatioTier1;\\n  /**\\n   * @dev The bridge operators will be deprecated all rewards including bridge reward and mining reward if (s)he missed\\n   * more than the ratio. Values 0-10,000 map to 0%-100%.\\n   */\\n  uint256 internal _missingVotesRatioTier2;\\n  /// @dev The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.\\n  uint256 internal _jailDurationForMissingVotesRatioTier2;\\n  /// @dev The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small.\\n  uint256 internal _skipBridgeOperatorSlashingThreshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ISlashBridgeOperator\\n   */\\n  function getBridgeOperatorSlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      _missingVotesRatioTier1,\\n      _missingVotesRatioTier2,\\n      _jailDurationForMissingVotesRatioTier2,\\n      _skipBridgeOperatorSlashingThreshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashBridgeOperator\\n   */\\n  function setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) external override onlyAdmin {\\n    _setBridgeOperatorSlashingConfigs(_ratioTier1, _ratioTier2, _jailDurationTier2, _skipSlashingThreshold);\\n  }\\n\\n  /**\\n   * @dev See `ISlashBridgeOperator-setBridgeOperatorSlashingConfigs`.\\n   */\\n  function _setBridgeOperatorSlashingConfigs(\\n    uint256 _ratioTier1,\\n    uint256 _ratioTier2,\\n    uint256 _jailDurationTier2,\\n    uint256 _skipSlashingThreshold\\n  ) internal {\\n    require(\\n      _ratioTier1 <= _ratioTier2 && _ratioTier1 <= _MAX_PERCENTAGE && _ratioTier2 <= _MAX_PERCENTAGE,\\n      \\\"SlashIndicator: invalid ratios\\\"\\n    );\\n    _missingVotesRatioTier1 = _ratioTier1;\\n    _missingVotesRatioTier2 = _ratioTier2;\\n    _jailDurationForMissingVotesRatioTier2 = _jailDurationTier2;\\n    _skipBridgeOperatorSlashingThreshold = _skipSlashingThreshold;\\n    emit BridgeOperatorSlashingConfigsUpdated(_ratioTier1, _ratioTier2, _jailDurationTier2, _skipSlashingThreshold);\\n  }\\n}\\n\",\"keccak256\":\"0x37a051c01e43b3fcb3e625d13d0b7f99e1d7776f8237cd1f81712a638c20c30c\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashBridgeVoting.sol\\\";\\nimport \\\"../../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../extensions/collections/HasRoninGovernanceAdminContract.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\n\\nabstract contract SlashBridgeVoting is\\n  ISlashBridgeVoting,\\n  HasValidatorContract,\\n  HasRoninTrustedOrganizationContract,\\n  HasRoninGovernanceAdminContract\\n{\\n  /// @dev Mapping from validator address => period index => bridge voting slashed\\n  mapping(address => mapping(uint256 => bool)) internal _bridgeVotingSlashed;\\n  /// @dev The threshold to slash when a trusted organization does not vote for bridge operators.\\n  uint256 internal _bridgeVotingThreshold;\\n  /// @dev The amount of RON to slash bridge voting.\\n  uint256 internal _bridgeVotingSlashAmount;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ISlashBridgeVoting\\n   */\\n  function slashBridgeVoting(address _consensusAddr) external {\\n    IRoninTrustedOrganization.TrustedOrganization memory _org = _roninTrustedOrganizationContract\\n      .getTrustedOrganization(_consensusAddr);\\n    uint256 _lastVotedBlock = Math.max(_roninGovernanceAdminContract.lastVotedBlock(_org.bridgeVoter), _org.addedBlock);\\n    uint256 _period = _validatorContract.currentPeriod();\\n    if (block.number - _lastVotedBlock > _bridgeVotingThreshold && !_bridgeVotingSlashed[_consensusAddr][_period]) {\\n      _bridgeVotingSlashed[_consensusAddr][_period] = true;\\n      emit Slashed(_consensusAddr, SlashType.BRIDGE_VOTING, _period);\\n      _validatorContract.execSlash(_consensusAddr, 0, _bridgeVotingSlashAmount);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashBridgeVoting\\n   */\\n  function getBridgeVotingSlashingConfigs() external view override returns (uint256, uint256) {\\n    return (_bridgeVotingThreshold, _bridgeVotingSlashAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashBridgeVoting\\n   */\\n  function setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) external override onlyAdmin {\\n    _setBridgeVotingSlashingConfigs(_threshold, _slashAmount);\\n  }\\n\\n  /**\\n   * @dev See `ISlashBridgeVoting-setBridgeVotingSlashingConfigs`.\\n   */\\n  function _setBridgeVotingSlashingConfigs(uint256 _threshold, uint256 _slashAmount) internal {\\n    _bridgeVotingThreshold = _threshold;\\n    _slashAmount = _bridgeVotingSlashAmount;\\n    emit BridgeVotingSlashingConfigsUpdated(_threshold, _slashAmount);\\n  }\\n}\\n\",\"keccak256\":\"0xa17976a9b1e1e4e5f18838a2e05af3faeb804cb1eff657eeae0969fe72e38bd1\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/slash-indicator/ISlashDoubleSign.sol\\\";\\nimport \\\"../../precompile-usages/PrecompileUsageValidateDoubleSign.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\n\\nabstract contract SlashDoubleSign is ISlashDoubleSign, HasValidatorContract, PrecompileUsageValidateDoubleSign {\\n  /// @dev The amount of RON to slash double sign.\\n  uint256 internal _slashDoubleSignAmount;\\n  /// @dev The block number that the punished validator will be jailed until, due to double signing.\\n  uint256 internal _doubleSigningJailUntilBlock;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function slashDoubleSign(\\n    address _consensuAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) external override {\\n    require(msg.sender == block.coinbase, \\\"SlashIndicator: method caller must be coinbase\\\");\\n    if (!_shouldSlash(_consensuAddr)) {\\n      return;\\n    }\\n\\n    if (_pcValidateEvidence(_header1, _header2)) {\\n      uint256 _period = _validatorContract.currentPeriod();\\n      emit Slashed(_consensuAddr, SlashType.DOUBLE_SIGNING, _period);\\n      _validatorContract.execSlash(_consensuAddr, _doubleSigningJailUntilBlock, _slashDoubleSignAmount);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function getDoubleSignSlashingConfigs() external view override returns (uint256, uint256) {\\n    return (_slashDoubleSignAmount, _doubleSigningJailUntilBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function setDoubleSignSlashingConfigs(uint256 _slashAmount, uint256 _jailUntilBlock) external override onlyAdmin {\\n    _setDoubleSignSlashingConfigs(_slashAmount, _jailUntilBlock);\\n  }\\n\\n  /**\\n   * @dev See `ISlashDoubleSign-setDoubleSignSlashingConfigs`.\\n   */\\n  function _setDoubleSignSlashingConfigs(uint256 _slashAmount, uint256 _jailUntilBlock) internal {\\n    _slashDoubleSignAmount = _slashAmount;\\n    _doubleSigningJailUntilBlock = _jailUntilBlock;\\n    emit DoubleSignSlashingConfigsUpdated(_slashAmount, _jailUntilBlock);\\n  }\\n\\n  /**\\n   * @dev Returns whether the account `_addr` should be slashed or not.\\n   */\\n  function _shouldSlash(address _addr) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x43c771d6c3df6052a4d83c958e4197721b257561dfe9c2615f5000b6947937ff\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\nimport \\\"./SlashDoubleSign.sol\\\";\\nimport \\\"./SlashBridgeVoting.sol\\\";\\nimport \\\"./SlashBridgeOperator.sol\\\";\\nimport \\\"./SlashUnavailability.sol\\\";\\nimport \\\"./CreditScore.sol\\\";\\n\\ncontract SlashIndicator is\\n  ISlashIndicator,\\n  SlashDoubleSign,\\n  SlashBridgeVoting,\\n  SlashBridgeOperator,\\n  SlashUnavailability,\\n  CreditScore,\\n  Initializable\\n{\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address __roninGovernanceAdminContract,\\n    // _bridgeOperatorSlashingConfigs[0]: _missingVotesRatioTier1\\n    // _bridgeOperatorSlashingConfigs[1]: _missingVotesRatioTier2\\n    // _bridgeOperatorSlashingConfigs[2]: _jailDurationForMissingVotesRatioTier2\\n    // _bridgeOperatorSlashingConfigs[3]: _skipBridgeOperatorSlashingThreshold\\n    uint256[4] calldata _bridgeOperatorSlashingConfigs,\\n    // _bridgeVotingSlashingConfigs[0]: _bridgeVotingThreshold\\n    // _bridgeVotingSlashingConfigs[1]: _bridgeVotingSlashAmount\\n    uint256[2] calldata _bridgeVotingSlashingConfigs,\\n    // _doubleSignSlashingConfigs[0]: _slashDoubleSignAmount\\n    // _doubleSignSlashingConfigs[1]: _doubleSigningJailUntilBlock\\n    uint256[2] calldata _doubleSignSlashingConfigs,\\n    // _unavailabilitySlashingConfigs[0]: _unavailabilityTier1Threshold\\n    // _unavailabilitySlashingConfigs[1]: _unavailabilityTier2Threshold\\n    // _unavailabilitySlashingConfigs[2]: _slashAmountForUnavailabilityTier2Threshold\\n    // _unavailabilitySlashingConfigs[3]: _jailDurationForUnavailabilityTier2Threshold\\n    uint256[4] calldata _unavailabilitySlashingConfigs,\\n    // _creditScoreConfigs[0]: _gainCreditScore\\n    // _creditScoreConfigs[1]: _maxCreditScore\\n    // _creditScoreConfigs[2]: _bailOutCostMultiplier\\n    // _creditScoreConfigs[3]: _cutOffPercentageAfterBailout\\n    uint256[4] calldata _creditScoreConfigs\\n  ) external initializer {\\n    _setValidatorContract(__validatorContract);\\n    _setMaintenanceContract(__maintenanceContract);\\n    _setRoninTrustedOrganizationContract(__roninTrustedOrganizationContract);\\n    _setRoninGovernanceAdminContract(__roninGovernanceAdminContract);\\n    _setBridgeOperatorSlashingConfigs(\\n      _bridgeOperatorSlashingConfigs[0],\\n      _bridgeOperatorSlashingConfigs[1],\\n      _bridgeOperatorSlashingConfigs[2],\\n      _bridgeOperatorSlashingConfigs[3]\\n    );\\n    _setBridgeVotingSlashingConfigs(_bridgeVotingSlashingConfigs[0], _bridgeVotingSlashingConfigs[1]);\\n    _setDoubleSignSlashingConfigs(_doubleSignSlashingConfigs[0], _doubleSignSlashingConfigs[1]);\\n    _setUnavailabilitySlashingConfigs(\\n      _unavailabilitySlashingConfigs[0],\\n      _unavailabilitySlashingConfigs[1],\\n      _unavailabilitySlashingConfigs[2],\\n      _unavailabilitySlashingConfigs[3]\\n    );\\n    _setCreditScoreConfigs(\\n      _creditScoreConfigs[0],\\n      _creditScoreConfigs[1],\\n      _creditScoreConfigs[2],\\n      _creditScoreConfigs[3]\\n    );\\n  }\\n\\n  /**\\n   * @dev Helper for CreditScore contract to reset the indicator of the validator after bailing out.\\n   */\\n  function _setUnavailabilityIndicator(\\n    address _validator,\\n    uint256 _period,\\n    uint256 _indicator\\n  ) internal override(CreditScore, SlashUnavailability) {\\n    SlashUnavailability._setUnavailabilityIndicator(_validator, _period, _indicator);\\n  }\\n\\n  /**\\n   * @dev Helper for CreditScore contract to query indicator of the validator.\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period)\\n    public\\n    view\\n    override(CreditScore, ISlashUnavailability, SlashUnavailability)\\n    returns (uint256)\\n  {\\n    return SlashUnavailability.getUnavailabilityIndicator(_validator, _period);\\n  }\\n\\n  /**\\n   * @dev Sanity check the address to be slashed\\n   */\\n  function _shouldSlash(address _addr) internal view override(SlashDoubleSign, SlashUnavailability) returns (bool) {\\n    return\\n      (msg.sender != _addr) &&\\n      _validatorContract.isBlockProducer(_addr) &&\\n      !_maintenanceContract.checkMaintained(_addr, block.number);\\n  }\\n}\\n\",\"keccak256\":\"0x70b2b429303c566ce553e97304db2e9d62fc817a8c6b5a9dab00ec934443cde5\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./CreditScore.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashUnavailability.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\n\\nabstract contract SlashUnavailability is ISlashUnavailability, HasValidatorContract {\\n  /// @dev The last block that a validator is slashed for unavailability.\\n  uint256 public lastUnavailabilitySlashedBlock;\\n  /// @dev Mapping from validator address => period index => unavailability indicator.\\n  mapping(address => mapping(uint256 => uint256)) internal _unavailabilityIndicator;\\n\\n  /// @dev The mining reward will be deprecated, if (s)he missed more than this threshold.\\n  uint256 internal _unavailabilityTier1Threshold;\\n  /**\\n   * @dev The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   */\\n  uint256 internal _unavailabilityTier2Threshold;\\n  /// @dev The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.\\n  uint256 internal _slashAmountForUnavailabilityTier2Threshold;\\n  /// @dev The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n  uint256 internal _jailDurationForUnavailabilityTier2Threshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  modifier oncePerBlock() {\\n    require(\\n      block.number > lastUnavailabilitySlashedBlock,\\n      \\\"SlashIndicator: cannot slash a validator twice or slash more than one validator in one block\\\"\\n    );\\n    lastUnavailabilitySlashedBlock = block.number;\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function slashUnavailability(address _validatorAddr) external override oncePerBlock {\\n    require(msg.sender == block.coinbase, \\\"SlashUnavailability: method caller must be coinbase\\\");\\n    if (!_shouldSlash(_validatorAddr)) {\\n      return;\\n    }\\n\\n    uint256 _period = _validatorContract.currentPeriod();\\n    uint256 _count = ++_unavailabilityIndicator[_validatorAddr][_period];\\n\\n    if (_count == _unavailabilityTier2Threshold) {\\n      emit Slashed(_validatorAddr, SlashType.UNAVAILABILITY_TIER_2, _period);\\n      _validatorContract.execSlash(\\n        _validatorAddr,\\n        block.number + _jailDurationForUnavailabilityTier2Threshold,\\n        _slashAmountForUnavailabilityTier2Threshold\\n      );\\n    } else if (_count == _unavailabilityTier1Threshold) {\\n      emit Slashed(_validatorAddr, SlashType.UNAVAILABILITY_TIER_1, _period);\\n      _validatorContract.execSlash(_validatorAddr, 0, 0);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external override onlyAdmin {\\n    _setUnavailabilitySlashingConfigs(\\n      _tier1Threshold,\\n      _tier2Threshold,\\n      _slashAmountForTier2Threshold,\\n      _jailDurationForTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      _unavailabilityTier1Threshold,\\n      _unavailabilityTier2Threshold,\\n      _slashAmountForUnavailabilityTier2Threshold,\\n      _jailDurationForUnavailabilityTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function currentUnavailabilityIndicator(address _validator) external view override returns (uint256) {\\n    return getUnavailabilityIndicator(_validator, _validatorContract.currentPeriod());\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function getUnavailabilityIndicator(address _validator, uint256 _period)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _unavailabilityIndicator[_validator][_period];\\n  }\\n\\n  /**\\n   * @dev Sets the unavailability indicator of the `_validator` at `_period`.\\n   */\\n  function _setUnavailabilityIndicator(\\n    address _validator,\\n    uint256 _period,\\n    uint256 _indicator\\n  ) internal virtual {\\n    _unavailabilityIndicator[_validator][_period] = _indicator;\\n  }\\n\\n  /**\\n   * @dev See `ISlashUnavailability-setUnavailabilitySlashingConfigs`.\\n   */\\n  function _setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) internal {\\n    require(_unavailabilityTier1Threshold <= _unavailabilityTier2Threshold, \\\"SlashUnavailability: invalid threshold\\\");\\n    _unavailabilityTier1Threshold = _tier1Threshold;\\n    _unavailabilityTier2Threshold = _tier2Threshold;\\n    _slashAmountForUnavailabilityTier2Threshold = _slashAmountForTier2Threshold;\\n    _jailDurationForUnavailabilityTier2Threshold = _jailDurationForTier2Threshold;\\n    emit UnavailabilitySlashingConfigsUpdated(\\n      _tier1Threshold,\\n      _tier2Threshold,\\n      _slashAmountForTier2Threshold,\\n      _jailDurationForTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether the account `_addr` should be slashed or not.\\n   */\\n  function _shouldSlash(address _addr) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x512b95b24190aa961443451de19f78557093f3d44ca4d347188e4546c0e9ca10\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e7565b61011354610100900460ff1615620000905760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b6101135460ff9081161015620000e557610113805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612b2e80620000f76000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063994390891161010f578063d2cb215e116100a2578063e79b3f6711610071578063e79b3f6714610463578063f1001e7814610476578063f562b3c414610496578063fd422cd01461049f57600080fd5b8063d2cb215e1461040b578063d3dd2bdf1461041c578063d73e81b814610445578063df4b6ee01461045857600080fd5b8063ccbb72ed116100de578063ccbb72ed146103bf578063cdf64a76146103d2578063d1737e27146103e5578063d1f992f7146103f857600080fd5b8063994390891461036e578063b5e337de1461037f578063c2e524dc14610392578063c6391fa2146103ae57600080fd5b80633d48fd7d1161018757806362ffe6cb1161015657806362ffe6cb1461032e5780637680850c146103415780637c2b55a014610354578063853af1b71461035b57600080fd5b80633d48fd7d146102e657806346fe9311146102f75780635511cde11461030a57806361d3b60b1461031b57600080fd5b80631a697341116101c35780631a697341146102525780631e90b2a01461026557806323368e471461027857806329ddc3c01461029d57600080fd5b8063082e7420146101ea5780630e1512ac146102105780631079402a14610225575b600080fd5b6101fd6101f8366004612365565b6104b2565b6040519081526020015b60405180910390f35b61022361021e366004612382565b610533565b005b606d54606e54606f546070545b604080519485526020850193909352918301526060820152608001610207565b610223610260366004612365565b610586565b6102236102733660046123fd565b610801565b6036546001600160a01b03165b6040516001600160a01b039091168152602001610207565b6102d66102ab366004612480565b6001600160a01b0391909116600090815260db60209081526040808320938352929052205460ff1690565b6040519015158152602001610207565b60a55460a65460a75460a854610232565b610223610305366004612365565b6109a3565b6035546001600160a01b0316610285565b6102236103293660046124ac565b610a55565b6101fd61033c366004612480565b610a9b565b61022361034f366004612513565b610ac7565b6067610285565b6102236103693660046124ac565b610ea2565b6000546001600160a01b0316610285565b61022361038d366004612365565b610ee4565b6038546039545b60408051928352602083019190915201610207565b60dd5460de5460df5460e054610232565b6102236103cd366004612382565b610fa5565b6102236103e0366004612365565b610fe9565b6102236103f3366004612382565b611096565b610223610406366004612365565b6110da565b606c546001600160a01b0316610285565b6101fd61042a366004612365565b6001600160a01b0316600090815260dc602052604090205490565b610223610453366004612365565b61160b565b600154600254610399565b610223610471366004612581565b6116c3565b610489610484366004612639565b611867565b60405161020791906126b6565b6101fd60a35481565b6102236104ad366004612365565b61193c565b600061052d8260008054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c91906126c9565b92915050565b61053b611c35565b6001600160a01b0316336001600160a01b0316146105745760405162461bcd60e51b815260040161056b906126e2565b60405180910390fd5b61058084848484611c63565b50505050565b603554604051636db349d160e11b81526001600160a01b038381166004830152600092169063db6693a29060240160a060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f5919061276b565b6036546040828101519051632623bd4f60e21b81526001600160a01b03918216600482015292935060009261067d92919091169063988ef53c90602401602060405180830381865afa15801561064f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067391906126c9565b8360800151611d32565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f791906126c9565b6038549091506107078343612809565b11801561073857506001600160a01b038416600090815260376020908152604080832084845290915290205460ff16155b15610580576001600160a01b038416600081815260376020908152604080832085845290915290819020805460ff1916600117905551600080516020612ad98339815191529061078c90600490859061281c565b60405180910390a26000805460395460405163570ccb1360e01b81526001600160a01b039092169263570ccb13926107c992899291600401612848565b600060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b5050505050505050565b3341146108675760405162461bcd60e51b815260206004820152602e60248201527f536c617368496e64696361746f723a206d6574686f642063616c6c6572206d7560448201526d737420626520636f696e6261736560901b606482015260840161056b565b61087085611d49565b1561099c5761088184848484611e4f565b1561099c5760008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe91906126c9565b9050856001600160a01b0316600080516020612ad983398151915260038360405161092a92919061281c565b60405180910390a260005460025460015460405163570ccb1360e01b81526001600160a01b039093169263570ccb1392610968928b92600401612848565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b50505050505b5050505050565b6109ab611c35565b6001600160a01b0316336001600160a01b0316146109db5760405162461bcd60e51b815260040161056b906126e2565b6000816001600160a01b03163b11610a495760405162461bcd60e51b815260206004820152602b60248201527f4861734d61696e74656e616e6365436f6e74726163743a2073657420746f206e60448201526a1bdb8b58dbdb9d1c9858dd60aa1b606482015260840161056b565b610a5281611f4b565b50565b610a5d611c35565b6001600160a01b0316336001600160a01b031614610a8d5760405162461bcd60e51b815260040161056b906126e2565b610a978282611fa0565b5050565b6001600160a01b038216600090815260a4602090815260408083208484529091528120545b9392505050565b33610ada6000546001600160a01b031690565b6001600160a01b031614610b565760405162461bcd60e51b815260206004820152603e60248201527f48617356616c696461746f72436f6e74726163743a206d6574686f642063616c60448201527f6c6572206d7573742062652076616c696461746f7220636f6e74726163740000606482015260840161056b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663297a8fca6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bce91906126c9565b60008054604051634de2b73560e01b815292935090916001600160a01b0390911690634de2b73590610c0690889088906004016128a7565b600060405180830381865afa158015610c23573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4b91908101906128d0565b606c5460405163ba30375560e01b81529192506000916001600160a01b039091169063ba30375590610c8790899089908890439060040161297d565b600060405180830381865afa158015610ca4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ccc91908101906128d0565b905060008567ffffffffffffffff811115610ce957610ce9612724565b604051908082528060200260200182016040528015610d12578160200160208202803683370190505b50905060005b86811015610e5d576000888883818110610d3457610d346129a4565b9050602002016020810190610d499190612365565b90506000610d578289610a9b565b90506000868481518110610d6d57610d6d6129a4565b602002602001015190506000868581518110610d8b57610d8b6129a4565b6020026020010151905060008280610da05750815b610db557610db060dd5485611fe8565b610db8565b60005b6001600160a01b038616600090815260dc602052604081205460de5492935091610de59083908590611ffe565b9050808214610e0a576001600160a01b038716600090815260dc602052604090208190555b6001600160a01b038716600090815260dc602052604090205489518a908a908110610e3757610e376129a4565b602002602001018181525050505050505050508080610e55906129ba565b915050610d18565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c23480878783604051610e91939291906129d3565b60405180910390a150505050505050565b610eaa611c35565b6001600160a01b0316336001600160a01b031614610eda5760405162461bcd60e51b815260040161056b906126e2565b610a97828261201b565b610eec611c35565b6001600160a01b0316336001600160a01b031614610f1c5760405162461bcd60e51b815260040161056b906126e2565b6000816001600160a01b03163b11610f9c5760405162461bcd60e51b815260206004820152603860248201527f486173526f6e696e547275737465644f7267616e697a6174696f6e436f6e747260448201527f6163743a2073657420746f206e6f6e2d636f6e74726163740000000000000000606482015260840161056b565b610a528161205a565b610fad611c35565b6001600160a01b0316336001600160a01b031614610fdd5760405162461bcd60e51b815260040161056b906126e2565b610580848484846120a8565b610ff1611c35565b6001600160a01b0316336001600160a01b0316146110215760405162461bcd60e51b815260040161056b906126e2565b6000816001600160a01b03163b1161108d5760405162461bcd60e51b815260206004820152602960248201527f48617356616c696461746f72436f6e74726163743a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b606482015260840161056b565b610a52816121cb565b61109e611c35565b6001600160a01b0316336001600160a01b0316146110ce5760405162461bcd60e51b815260040161056b906126e2565b61058084848484612219565b600054604051635061f96960e11b81526001600160a01b0383811660048301529091169063a0c3f2d290602401602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190612a03565b6111ba5760405162461bcd60e51b815260206004820152603f60248201527f536c617368496e64696361746f723a20636f6e73656e7375732061646472657360448201527f73206d75737420626520612076616c696461746f722063616e64696461746500606482015260840161056b565b6000546040516304d971ab60e01b81526001600160a01b038381166004830152336024830152909116906304d971ab90604401602060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190612a03565b6112a05760405162461bcd60e51b815260206004820152603760248201527f536c617368496e64696361746f723a206d6574686f642063616c6c6572206d7560448201527f737420626520612063616e6469646174652061646d696e000000000000000000606482015260840161056b565b60008054604051634b2c2fe160e11b81526001600160a01b038481166004830152839216906396585fc290602401606060405180830381865afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130f9190612a1e565b9250509150816113875760405162461bcd60e51b815260206004820152603b60248201527f536c617368496e64696361746f723a2063616c6c6572206d757374206265206a60448201527f61696c656420696e207468652063757272656e7420706572696f640000000000606482015260840161056b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ff91906126c9565b6001600160a01b038516600090815260db6020908152604080832084845290915290205490915060ff16156114925760405162461bcd60e51b815260206004820152603360248201527f536c617368496e64696361746f723a2076616c696461746f7220686173206261604482015272696c6564206f75742070726576696f75736c7960681b606482015260840161056b565b6001600160a01b038416600090815260dc602052604081205460df549091906114bb9085612a53565b90508082101561152b5760405162461bcd60e51b815260206004820152603560248201527f536c617368496e64696361746f723a20696e73756666696369656e7420637265604482015274191a5d081cd8dbdc99481d1bc818985a5b081bdd5d605a1b606482015260840161056b565b600054604051630adaf5ef60e11b81526001600160a01b03888116600483015260248201869052909116906315b5ebde90604401600060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b505050506001600160a01b038616600090815260dc6020526040812080548392906115b9908490612809565b909155505050506001600160a01b0393909316600081815260a460209081526040808320878452825280832083905592825260db815282822095825294909452909220805460ff191660011790555050565b611613611c35565b6001600160a01b0316336001600160a01b0316146116435760405162461bcd60e51b815260040161056b906126e2565b6000816001600160a01b03163b116116ba5760405162461bcd60e51b815260206004820152603460248201527f486173526f6e696e476f7665726e616e636541646d696e436f6e74726163743a604482015273081cd95d081d1bc81b9bdb8b58dbdb9d1c9858dd60621b606482015260840161056b565b610a52816122d5565b61011354610100900460ff16158080156116e5575061011354600160ff909116105b806117005750303b15801561170057506101135460ff166001145b6117635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161056b565b610113805460ff19166001179055801561178857610113805461ff0019166101001790555b6117918a6121cb565b61179a89611f4b565b6117a38861205a565b6117ac876122d5565b6117c586356020880135604089013560608a0135611c63565b6117d48535602087013561201b565b6117e384356020860135611fa0565b6117fc8335602085013560408601356060870135612219565b61181582356020840135604085013560608601356120a8565b801561099657610113805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050505050505050565b60608167ffffffffffffffff81111561188257611882612724565b6040519080825280602002602001820160405280156118ab578160200160208202803683370190505b50905060005b81518110156119355760dc60008585848181106118d0576118d06129a4565b90506020020160208101906118e59190612365565b6001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110611918576119186129a4565b60209081029190910101528061192d816129ba565b9150506118b1565b5092915050565b60a35443116119d95760405162461bcd60e51b815260206004820152605c60248201527f536c617368496e64696361746f723a2063616e6e6f7420736c6173682061207660448201527f616c696461746f72207477696365206f7220736c617368206d6f72652074686160648201527f6e206f6e652076616c696461746f7220696e206f6e6520626c6f636b00000000608482015260a40161056b565b4360a355334114611a485760405162461bcd60e51b815260206004820152603360248201527f536c617368556e617661696c6162696c6974793a206d6574686f642063616c6c6044820152726572206d75737420626520636f696e6261736560681b606482015260840161056b565b611a5181611d49565b15610a525760008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ace91906126c9565b6001600160a01b038316600090815260a4602090815260408083208484529091528120805492935090918290611b03906129ba565b919050819055905060a6548103611bc257826001600160a01b0316600080516020612ad9833981519152600284604051611b3e92919061281c565b60405180910390a260005460a8546001600160a01b039091169063570ccb13908590611b6a9043612a6a565b60a7546040518463ffffffff1660e01b8152600401611b8b93929190612848565b600060405180830381600087803b158015611ba557600080fd5b505af1158015611bb9573d6000803e3d6000fd5b50505050505050565b60a5548103611c3057826001600160a01b0316600080516020612ad9833981519152600184604051611bf592919061281c565b60405180910390a26000805460405163570ccb1360e01b81526001600160a01b039091169163570ccb1391611b8b9187918190600401612848565b505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b828411158015611c7557506127108411155b8015611c8357506127108311155b611ccf5760405162461bcd60e51b815260206004820152601e60248201527f536c617368496e64696361746f723a20696e76616c696420726174696f730000604482015260640161056b565b606d849055606e839055606f82905560708190556040805185815260208101859052908101839052606081018290527fd24c671da2227c139fe1a5b34de15e5a67bef9b46e912916b9e0d025d51b3e3b906080015b60405180910390a150505050565b600081831015611d425781610ac0565b5090919050565b6000336001600160a01b03831614801590611dcd5750600054604051633292276760e11b81526001600160a01b038481166004830152909116906365244ece90602401602060405180830381865afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190612a03565b801561052d5750606c54604051630fbeb37f60e01b81526001600160a01b03848116600483015243602483015290911690630fbeb37f90604401602060405180830381865afa158015611e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e489190612a03565b1592915050565b6040516000906067906001908390611e71908990899089908990602401612aa6565b60408051601f198184030181529190526020810180516001600160e01b031663580a316360e01b1790528051909150611ea8612332565b602083016020828483895afa611ebd57600094505b503d611ec857600093505b83611f3b5760405162461bcd60e51b815260206004820152603b60248201527f507265636f6d70696c65557361676556616c6964617465446f75626c6553696760448201527f6e3a2063616c6c20746f20707265636f6d70696c65206661696c730000000000606482015260840161056b565b5115159998505050505050505050565b606c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b906020015b60405180910390a150565b6001829055600281905560408051838152602081018390527f2f551c9d5c16e8a5444109ee232c78ed055e4e5cefe25e162b3bae190af0dedc91015b60405180910390a15050565b6000611ff48383612323565b610ac09084612809565b600061201361200d8486612a6a565b83612323565b949350505050565b50603881905560395460408051838152602081018390527fbda9ec2980d7468ba6a9f363696315affca9f9770016396bdea2ac39c3e5d61a9101611fdc565b603580546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001611f95565b828411156121095760405162461bcd60e51b815260206004820152602860248201527f43726564697453636f72653a20696e76616c6964206372656469742073636f726044820152676520636f6e66696760c01b606482015260840161056b565b6127108111156121725760405162461bcd60e51b815260206004820152602e60248201527f43726564697453636f72653a20696e76616c696420637574206f66662070657260448201526d63656e7461676520636f6e66696760901b606482015260840161056b565b60dd84905560de83905560df82905560e08190556040805185815260208101859052908101839052606081018290527fe1f9c6c73554b5fa140eead3cfd4ec3e6d4824f3ed26fb25e38376f65b95470b90608001611d24565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b683616990602001611f95565b60a65460a554111561227c5760405162461bcd60e51b815260206004820152602660248201527f536c617368556e617661696c6162696c6974793a20696e76616c696420746872604482015265195cda1bdb1960d21b606482015260840161056b565b60a584905560a683905560a782905560a88190556040805185815260208101859052908101839052606081018290527f442862e6143ad95854e7c13ff4947ec6e43bc87160e3b193e7c1abaf6e3aaa9890608001611d24565b603680546001600160a01b0319166001600160a01b0383169081179091556040519081527f9125df97e014f5cc4f107fd784acd35e8e2188ca7c2a0f7caa478365747c1c8390602001611f95565b6000818310611d425781610ac0565b60405180602001604052806001906020820280368337509192915050565b6001600160a01b0381168114610a5257600080fd5b60006020828403121561237757600080fd5b8135610ac081612350565b6000806000806080858703121561239857600080fd5b5050823594602084013594506040840135936060013592509050565b60008083601f8401126123c657600080fd5b50813567ffffffffffffffff8111156123de57600080fd5b6020830191508360208285010111156123f657600080fd5b9250929050565b60008060008060006060868803121561241557600080fd5b853561242081612350565b9450602086013567ffffffffffffffff8082111561243d57600080fd5b61244989838a016123b4565b9096509450604088013591508082111561246257600080fd5b5061246f888289016123b4565b969995985093965092949392505050565b6000806040838503121561249357600080fd5b823561249e81612350565b946020939093013593505050565b600080604083850312156124bf57600080fd5b50508035926020909101359150565b60008083601f8401126124e057600080fd5b50813567ffffffffffffffff8111156124f857600080fd5b6020830191508360208260051b85010111156123f657600080fd5b60008060006040848603121561252857600080fd5b833567ffffffffffffffff81111561253f57600080fd5b61254b868287016124ce565b909790965060209590950135949350505050565b806080810183101561052d57600080fd5b806040810183101561052d57600080fd5b60008060008060008060008060006102808a8c0312156125a057600080fd5b89356125ab81612350565b985060208a01356125bb81612350565b975060408a01356125cb81612350565b965060608a01356125db81612350565b95506125ea8b60808c0161255f565b94506125fa8b6101008c01612570565b935061260a8b6101408c01612570565b925061261a8b6101808c0161255f565b915061262a8b6102008c0161255f565b90509295985092959850929598565b6000806020838503121561264c57600080fd5b823567ffffffffffffffff81111561266357600080fd5b61266f858286016124ce565b90969095509350505050565b600081518084526020808501945080840160005b838110156126ab5781518752958201959082019060010161268f565b509495945050505050565b602081526000610ac0602083018461267b565b6000602082840312156126db57600080fd5b5051919050565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561276357612763612724565b604052919050565b600060a0828403121561277d57600080fd5b60405160a0810181811067ffffffffffffffff821117156127a0576127a0612724565b60405282516127ae81612350565b815260208301516127be81612350565b602082015260408301516127d181612350565b6040820152606083810151908201526080928301519281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561052d5761052d6127f3565b604081016007841061283e57634e487b7160e01b600052602160045260246000fd5b9281526020015290565b6001600160a01b039390931683526020830191909152604082015260600190565b8183526000602080850194508260005b858110156126ab57813561288c81612350565b6001600160a01b031687529582019590820190600101612879565b602081526000612013602083018486612869565b805180151581146128cb57600080fd5b919050565b600060208083850312156128e357600080fd5b825167ffffffffffffffff808211156128fb57600080fd5b818501915085601f83011261290f57600080fd5b81518181111561292157612921612724565b8060051b915061293284830161273a565b818152918301840191848101908884111561294c57600080fd5b938501935b8385101561297157612962856128bb565b82529385019390850190612951565b98975050505050505050565b606081526000612991606083018688612869565b6020830194909452506040015292915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016129cc576129cc6127f3565b5060010190565b6040815260006129e7604083018587612869565b82810360208401526129f9818561267b565b9695505050505050565b600060208284031215612a1557600080fd5b610ac0826128bb565b600080600060608486031215612a3357600080fd5b612a3c846128bb565b925060208401519150604084015190509250925092565b808202811582820484141761052d5761052d6127f3565b8082018082111561052d5761052d6127f3565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612aba604083018688612a7d565b8281036020840152612acd818587612a7d565b97965050505050505056fe607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9a26469706673582212205631baffdebea1aedc5688ba57a42ffc445b6b40218942faf0f96372f4c9bdda64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063994390891161010f578063d2cb215e116100a2578063e79b3f6711610071578063e79b3f6714610463578063f1001e7814610476578063f562b3c414610496578063fd422cd01461049f57600080fd5b8063d2cb215e1461040b578063d3dd2bdf1461041c578063d73e81b814610445578063df4b6ee01461045857600080fd5b8063ccbb72ed116100de578063ccbb72ed146103bf578063cdf64a76146103d2578063d1737e27146103e5578063d1f992f7146103f857600080fd5b8063994390891461036e578063b5e337de1461037f578063c2e524dc14610392578063c6391fa2146103ae57600080fd5b80633d48fd7d1161018757806362ffe6cb1161015657806362ffe6cb1461032e5780637680850c146103415780637c2b55a014610354578063853af1b71461035b57600080fd5b80633d48fd7d146102e657806346fe9311146102f75780635511cde11461030a57806361d3b60b1461031b57600080fd5b80631a697341116101c35780631a697341146102525780631e90b2a01461026557806323368e471461027857806329ddc3c01461029d57600080fd5b8063082e7420146101ea5780630e1512ac146102105780631079402a14610225575b600080fd5b6101fd6101f8366004612365565b6104b2565b6040519081526020015b60405180910390f35b61022361021e366004612382565b610533565b005b606d54606e54606f546070545b604080519485526020850193909352918301526060820152608001610207565b610223610260366004612365565b610586565b6102236102733660046123fd565b610801565b6036546001600160a01b03165b6040516001600160a01b039091168152602001610207565b6102d66102ab366004612480565b6001600160a01b0391909116600090815260db60209081526040808320938352929052205460ff1690565b6040519015158152602001610207565b60a55460a65460a75460a854610232565b610223610305366004612365565b6109a3565b6035546001600160a01b0316610285565b6102236103293660046124ac565b610a55565b6101fd61033c366004612480565b610a9b565b61022361034f366004612513565b610ac7565b6067610285565b6102236103693660046124ac565b610ea2565b6000546001600160a01b0316610285565b61022361038d366004612365565b610ee4565b6038546039545b60408051928352602083019190915201610207565b60dd5460de5460df5460e054610232565b6102236103cd366004612382565b610fa5565b6102236103e0366004612365565b610fe9565b6102236103f3366004612382565b611096565b610223610406366004612365565b6110da565b606c546001600160a01b0316610285565b6101fd61042a366004612365565b6001600160a01b0316600090815260dc602052604090205490565b610223610453366004612365565b61160b565b600154600254610399565b610223610471366004612581565b6116c3565b610489610484366004612639565b611867565b60405161020791906126b6565b6101fd60a35481565b6102236104ad366004612365565b61193c565b600061052d8260008054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c91906126c9565b92915050565b61053b611c35565b6001600160a01b0316336001600160a01b0316146105745760405162461bcd60e51b815260040161056b906126e2565b60405180910390fd5b61058084848484611c63565b50505050565b603554604051636db349d160e11b81526001600160a01b038381166004830152600092169063db6693a29060240160a060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f5919061276b565b6036546040828101519051632623bd4f60e21b81526001600160a01b03918216600482015292935060009261067d92919091169063988ef53c90602401602060405180830381865afa15801561064f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067391906126c9565b8360800151611d32565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f791906126c9565b6038549091506107078343612809565b11801561073857506001600160a01b038416600090815260376020908152604080832084845290915290205460ff16155b15610580576001600160a01b038416600081815260376020908152604080832085845290915290819020805460ff1916600117905551600080516020612ad98339815191529061078c90600490859061281c565b60405180910390a26000805460395460405163570ccb1360e01b81526001600160a01b039092169263570ccb13926107c992899291600401612848565b600060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b5050505050505050565b3341146108675760405162461bcd60e51b815260206004820152602e60248201527f536c617368496e64696361746f723a206d6574686f642063616c6c6572206d7560448201526d737420626520636f696e6261736560901b606482015260840161056b565b61087085611d49565b1561099c5761088184848484611e4f565b1561099c5760008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe91906126c9565b9050856001600160a01b0316600080516020612ad983398151915260038360405161092a92919061281c565b60405180910390a260005460025460015460405163570ccb1360e01b81526001600160a01b039093169263570ccb1392610968928b92600401612848565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b50505050505b5050505050565b6109ab611c35565b6001600160a01b0316336001600160a01b0316146109db5760405162461bcd60e51b815260040161056b906126e2565b6000816001600160a01b03163b11610a495760405162461bcd60e51b815260206004820152602b60248201527f4861734d61696e74656e616e6365436f6e74726163743a2073657420746f206e60448201526a1bdb8b58dbdb9d1c9858dd60aa1b606482015260840161056b565b610a5281611f4b565b50565b610a5d611c35565b6001600160a01b0316336001600160a01b031614610a8d5760405162461bcd60e51b815260040161056b906126e2565b610a978282611fa0565b5050565b6001600160a01b038216600090815260a4602090815260408083208484529091528120545b9392505050565b33610ada6000546001600160a01b031690565b6001600160a01b031614610b565760405162461bcd60e51b815260206004820152603e60248201527f48617356616c696461746f72436f6e74726163743a206d6574686f642063616c60448201527f6c6572206d7573742062652076616c696461746f7220636f6e74726163740000606482015260840161056b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663297a8fca6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bce91906126c9565b60008054604051634de2b73560e01b815292935090916001600160a01b0390911690634de2b73590610c0690889088906004016128a7565b600060405180830381865afa158015610c23573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4b91908101906128d0565b606c5460405163ba30375560e01b81529192506000916001600160a01b039091169063ba30375590610c8790899089908890439060040161297d565b600060405180830381865afa158015610ca4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ccc91908101906128d0565b905060008567ffffffffffffffff811115610ce957610ce9612724565b604051908082528060200260200182016040528015610d12578160200160208202803683370190505b50905060005b86811015610e5d576000888883818110610d3457610d346129a4565b9050602002016020810190610d499190612365565b90506000610d578289610a9b565b90506000868481518110610d6d57610d6d6129a4565b602002602001015190506000868581518110610d8b57610d8b6129a4565b6020026020010151905060008280610da05750815b610db557610db060dd5485611fe8565b610db8565b60005b6001600160a01b038616600090815260dc602052604081205460de5492935091610de59083908590611ffe565b9050808214610e0a576001600160a01b038716600090815260dc602052604090208190555b6001600160a01b038716600090815260dc602052604090205489518a908a908110610e3757610e376129a4565b602002602001018181525050505050505050508080610e55906129ba565b915050610d18565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c23480878783604051610e91939291906129d3565b60405180910390a150505050505050565b610eaa611c35565b6001600160a01b0316336001600160a01b031614610eda5760405162461bcd60e51b815260040161056b906126e2565b610a97828261201b565b610eec611c35565b6001600160a01b0316336001600160a01b031614610f1c5760405162461bcd60e51b815260040161056b906126e2565b6000816001600160a01b03163b11610f9c5760405162461bcd60e51b815260206004820152603860248201527f486173526f6e696e547275737465644f7267616e697a6174696f6e436f6e747260448201527f6163743a2073657420746f206e6f6e2d636f6e74726163740000000000000000606482015260840161056b565b610a528161205a565b610fad611c35565b6001600160a01b0316336001600160a01b031614610fdd5760405162461bcd60e51b815260040161056b906126e2565b610580848484846120a8565b610ff1611c35565b6001600160a01b0316336001600160a01b0316146110215760405162461bcd60e51b815260040161056b906126e2565b6000816001600160a01b03163b1161108d5760405162461bcd60e51b815260206004820152602960248201527f48617356616c696461746f72436f6e74726163743a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b606482015260840161056b565b610a52816121cb565b61109e611c35565b6001600160a01b0316336001600160a01b0316146110ce5760405162461bcd60e51b815260040161056b906126e2565b61058084848484612219565b600054604051635061f96960e11b81526001600160a01b0383811660048301529091169063a0c3f2d290602401602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190612a03565b6111ba5760405162461bcd60e51b815260206004820152603f60248201527f536c617368496e64696361746f723a20636f6e73656e7375732061646472657360448201527f73206d75737420626520612076616c696461746f722063616e64696461746500606482015260840161056b565b6000546040516304d971ab60e01b81526001600160a01b038381166004830152336024830152909116906304d971ab90604401602060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190612a03565b6112a05760405162461bcd60e51b815260206004820152603760248201527f536c617368496e64696361746f723a206d6574686f642063616c6c6572206d7560448201527f737420626520612063616e6469646174652061646d696e000000000000000000606482015260840161056b565b60008054604051634b2c2fe160e11b81526001600160a01b038481166004830152839216906396585fc290602401606060405180830381865afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130f9190612a1e565b9250509150816113875760405162461bcd60e51b815260206004820152603b60248201527f536c617368496e64696361746f723a2063616c6c6572206d757374206265206a60448201527f61696c656420696e207468652063757272656e7420706572696f640000000000606482015260840161056b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ff91906126c9565b6001600160a01b038516600090815260db6020908152604080832084845290915290205490915060ff16156114925760405162461bcd60e51b815260206004820152603360248201527f536c617368496e64696361746f723a2076616c696461746f7220686173206261604482015272696c6564206f75742070726576696f75736c7960681b606482015260840161056b565b6001600160a01b038416600090815260dc602052604081205460df549091906114bb9085612a53565b90508082101561152b5760405162461bcd60e51b815260206004820152603560248201527f536c617368496e64696361746f723a20696e73756666696369656e7420637265604482015274191a5d081cd8dbdc99481d1bc818985a5b081bdd5d605a1b606482015260840161056b565b600054604051630adaf5ef60e11b81526001600160a01b03888116600483015260248201869052909116906315b5ebde90604401600060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b505050506001600160a01b038616600090815260dc6020526040812080548392906115b9908490612809565b909155505050506001600160a01b0393909316600081815260a460209081526040808320878452825280832083905592825260db815282822095825294909452909220805460ff191660011790555050565b611613611c35565b6001600160a01b0316336001600160a01b0316146116435760405162461bcd60e51b815260040161056b906126e2565b6000816001600160a01b03163b116116ba5760405162461bcd60e51b815260206004820152603460248201527f486173526f6e696e476f7665726e616e636541646d696e436f6e74726163743a604482015273081cd95d081d1bc81b9bdb8b58dbdb9d1c9858dd60621b606482015260840161056b565b610a52816122d5565b61011354610100900460ff16158080156116e5575061011354600160ff909116105b806117005750303b15801561170057506101135460ff166001145b6117635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161056b565b610113805460ff19166001179055801561178857610113805461ff0019166101001790555b6117918a6121cb565b61179a89611f4b565b6117a38861205a565b6117ac876122d5565b6117c586356020880135604089013560608a0135611c63565b6117d48535602087013561201b565b6117e384356020860135611fa0565b6117fc8335602085013560408601356060870135612219565b61181582356020840135604085013560608601356120a8565b801561099657610113805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050505050505050565b60608167ffffffffffffffff81111561188257611882612724565b6040519080825280602002602001820160405280156118ab578160200160208202803683370190505b50905060005b81518110156119355760dc60008585848181106118d0576118d06129a4565b90506020020160208101906118e59190612365565b6001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110611918576119186129a4565b60209081029190910101528061192d816129ba565b9150506118b1565b5092915050565b60a35443116119d95760405162461bcd60e51b815260206004820152605c60248201527f536c617368496e64696361746f723a2063616e6e6f7420736c6173682061207660448201527f616c696461746f72207477696365206f7220736c617368206d6f72652074686160648201527f6e206f6e652076616c696461746f7220696e206f6e6520626c6f636b00000000608482015260a40161056b565b4360a355334114611a485760405162461bcd60e51b815260206004820152603360248201527f536c617368556e617661696c6162696c6974793a206d6574686f642063616c6c6044820152726572206d75737420626520636f696e6261736560681b606482015260840161056b565b611a5181611d49565b15610a525760008060009054906101000a90046001600160a01b03166001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ace91906126c9565b6001600160a01b038316600090815260a4602090815260408083208484529091528120805492935090918290611b03906129ba565b919050819055905060a6548103611bc257826001600160a01b0316600080516020612ad9833981519152600284604051611b3e92919061281c565b60405180910390a260005460a8546001600160a01b039091169063570ccb13908590611b6a9043612a6a565b60a7546040518463ffffffff1660e01b8152600401611b8b93929190612848565b600060405180830381600087803b158015611ba557600080fd5b505af1158015611bb9573d6000803e3d6000fd5b50505050505050565b60a5548103611c3057826001600160a01b0316600080516020612ad9833981519152600184604051611bf592919061281c565b60405180910390a26000805460405163570ccb1360e01b81526001600160a01b039091169163570ccb1391611b8b9187918190600401612848565b505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b828411158015611c7557506127108411155b8015611c8357506127108311155b611ccf5760405162461bcd60e51b815260206004820152601e60248201527f536c617368496e64696361746f723a20696e76616c696420726174696f730000604482015260640161056b565b606d849055606e839055606f82905560708190556040805185815260208101859052908101839052606081018290527fd24c671da2227c139fe1a5b34de15e5a67bef9b46e912916b9e0d025d51b3e3b906080015b60405180910390a150505050565b600081831015611d425781610ac0565b5090919050565b6000336001600160a01b03831614801590611dcd5750600054604051633292276760e11b81526001600160a01b038481166004830152909116906365244ece90602401602060405180830381865afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190612a03565b801561052d5750606c54604051630fbeb37f60e01b81526001600160a01b03848116600483015243602483015290911690630fbeb37f90604401602060405180830381865afa158015611e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e489190612a03565b1592915050565b6040516000906067906001908390611e71908990899089908990602401612aa6565b60408051601f198184030181529190526020810180516001600160e01b031663580a316360e01b1790528051909150611ea8612332565b602083016020828483895afa611ebd57600094505b503d611ec857600093505b83611f3b5760405162461bcd60e51b815260206004820152603b60248201527f507265636f6d70696c65557361676556616c6964617465446f75626c6553696760448201527f6e3a2063616c6c20746f20707265636f6d70696c65206661696c730000000000606482015260840161056b565b5115159998505050505050505050565b606c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f31a33f126a5bae3c5bdf6cfc2cd6dcfffe2fe9634bdb09e21c44762993889e3b906020015b60405180910390a150565b6001829055600281905560408051838152602081018390527f2f551c9d5c16e8a5444109ee232c78ed055e4e5cefe25e162b3bae190af0dedc91015b60405180910390a15050565b6000611ff48383612323565b610ac09084612809565b600061201361200d8486612a6a565b83612323565b949350505050565b50603881905560395460408051838152602081018390527fbda9ec2980d7468ba6a9f363696315affca9f9770016396bdea2ac39c3e5d61a9101611fdc565b603580546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001611f95565b828411156121095760405162461bcd60e51b815260206004820152602860248201527f43726564697453636f72653a20696e76616c6964206372656469742073636f726044820152676520636f6e66696760c01b606482015260840161056b565b6127108111156121725760405162461bcd60e51b815260206004820152602e60248201527f43726564697453636f72653a20696e76616c696420637574206f66662070657260448201526d63656e7461676520636f6e66696760901b606482015260840161056b565b60dd84905560de83905560df82905560e08190556040805185815260208101859052908101839052606081018290527fe1f9c6c73554b5fa140eead3cfd4ec3e6d4824f3ed26fb25e38376f65b95470b90608001611d24565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b683616990602001611f95565b60a65460a554111561227c5760405162461bcd60e51b815260206004820152602660248201527f536c617368556e617661696c6162696c6974793a20696e76616c696420746872604482015265195cda1bdb1960d21b606482015260840161056b565b60a584905560a683905560a782905560a88190556040805185815260208101859052908101839052606081018290527f442862e6143ad95854e7c13ff4947ec6e43bc87160e3b193e7c1abaf6e3aaa9890608001611d24565b603680546001600160a01b0319166001600160a01b0383169081179091556040519081527f9125df97e014f5cc4f107fd784acd35e8e2188ca7c2a0f7caa478365747c1c8390602001611f95565b6000818310611d425781610ac0565b60405180602001604052806001906020820280368337509192915050565b6001600160a01b0381168114610a5257600080fd5b60006020828403121561237757600080fd5b8135610ac081612350565b6000806000806080858703121561239857600080fd5b5050823594602084013594506040840135936060013592509050565b60008083601f8401126123c657600080fd5b50813567ffffffffffffffff8111156123de57600080fd5b6020830191508360208285010111156123f657600080fd5b9250929050565b60008060008060006060868803121561241557600080fd5b853561242081612350565b9450602086013567ffffffffffffffff8082111561243d57600080fd5b61244989838a016123b4565b9096509450604088013591508082111561246257600080fd5b5061246f888289016123b4565b969995985093965092949392505050565b6000806040838503121561249357600080fd5b823561249e81612350565b946020939093013593505050565b600080604083850312156124bf57600080fd5b50508035926020909101359150565b60008083601f8401126124e057600080fd5b50813567ffffffffffffffff8111156124f857600080fd5b6020830191508360208260051b85010111156123f657600080fd5b60008060006040848603121561252857600080fd5b833567ffffffffffffffff81111561253f57600080fd5b61254b868287016124ce565b909790965060209590950135949350505050565b806080810183101561052d57600080fd5b806040810183101561052d57600080fd5b60008060008060008060008060006102808a8c0312156125a057600080fd5b89356125ab81612350565b985060208a01356125bb81612350565b975060408a01356125cb81612350565b965060608a01356125db81612350565b95506125ea8b60808c0161255f565b94506125fa8b6101008c01612570565b935061260a8b6101408c01612570565b925061261a8b6101808c0161255f565b915061262a8b6102008c0161255f565b90509295985092959850929598565b6000806020838503121561264c57600080fd5b823567ffffffffffffffff81111561266357600080fd5b61266f858286016124ce565b90969095509350505050565b600081518084526020808501945080840160005b838110156126ab5781518752958201959082019060010161268f565b509495945050505050565b602081526000610ac0602083018461267b565b6000602082840312156126db57600080fd5b5051919050565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561276357612763612724565b604052919050565b600060a0828403121561277d57600080fd5b60405160a0810181811067ffffffffffffffff821117156127a0576127a0612724565b60405282516127ae81612350565b815260208301516127be81612350565b602082015260408301516127d181612350565b6040820152606083810151908201526080928301519281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561052d5761052d6127f3565b604081016007841061283e57634e487b7160e01b600052602160045260246000fd5b9281526020015290565b6001600160a01b039390931683526020830191909152604082015260600190565b8183526000602080850194508260005b858110156126ab57813561288c81612350565b6001600160a01b031687529582019590820190600101612879565b602081526000612013602083018486612869565b805180151581146128cb57600080fd5b919050565b600060208083850312156128e357600080fd5b825167ffffffffffffffff808211156128fb57600080fd5b818501915085601f83011261290f57600080fd5b81518181111561292157612921612724565b8060051b915061293284830161273a565b818152918301840191848101908884111561294c57600080fd5b938501935b8385101561297157612962856128bb565b82529385019390850190612951565b98975050505050505050565b606081526000612991606083018688612869565b6020830194909452506040015292915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016129cc576129cc6127f3565b5060010190565b6040815260006129e7604083018587612869565b82810360208401526129f9818561267b565b9695505050505050565b600060208284031215612a1557600080fd5b610ac0826128bb565b600080600060608486031215612a3357600080fd5b612a3c846128bb565b925060208401519150604084015190509250925092565b808202811582820484141761052d5761052d6127f3565b8082018082111561052d5761052d6127f3565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612aba604083018688612a7d565b8281036020840152612acd818587612a7d565b97965050505050505056fe607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9a26469706673582212205631baffdebea1aedc5688ba57a42ffc445b6b40218942faf0f96372f4c9bdda64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bailOut(address)": {
        "details": "A slashed validator use this method to get out of jail. Requirements: - The `_consensusAddr` must be a validator. - Only validator's admin can call this method. Emits the event `BailedOut`."
      },
      "checkBailedOutAtPeriod(address,uint256)": {
        "details": "Returns the whether the `_validator` has been bailed out at the `_period`."
      },
      "currentUnavailabilityIndicator(address)": {
        "details": "Returns the current unavailability indicator of a block producer."
      },
      "getBridgeOperatorSlashingConfigs()": {
        "details": "Returns the configs related to bridge operator slashing.",
        "returns": {
          "_0": "The bridge reward will be deprecated if (s)he missed more than this ratio.",
          "_1": "The bridge reward and mining reward will be deprecated and the corresponding block producer will be put in jail if (s)he misses more than this ratio.",
          "_2": "The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.",
          "_3": "The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small."
        }
      },
      "getBridgeVotingSlashingConfigs()": {
        "details": "Returns the configs related to bridge voting slashing.",
        "returns": {
          "_0": "The threshold to slash when a trusted organization does not vote for bridge operators.",
          "_1": "The amount of RON to slash bridge voting."
        }
      },
      "getCreditScore(address)": {
        "details": "Returns the current credit score of the validator."
      },
      "getCreditScoreConfigs()": {
        "details": "Returns the configs related to credit score.",
        "returns": {
          "_0": "The score to gain per period.",
          "_1": "The max number of credit score that a validator can hold.",
          "_2": "The number that will be multiplied with the remaining jailed time to get the cost of bailing out.",
          "_3": "The percentage of reward that the block producer will be cut off from until the end of the period after bailing out."
        }
      },
      "getDoubleSignSlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "returns": {
          "_0": "The amount of RON to slash double sign.",
          "_1": "The block number that the punished validator will be jailed until, due to double signing."
        }
      },
      "getManyCreditScores(address[])": {
        "details": "Returns the current credit score of a list of validators."
      },
      "getUnavailabilityIndicator(address,uint256)": {
        "details": "Helper for CreditScore contract to query indicator of the validator."
      },
      "getUnavailabilitySlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "returns": {
          "_0": "The mining reward will be deprecated, if (s)he missed more than this threshold.",
          "_1": " The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold.",
          "_2": "The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.",
          "_3": "The number of blocks to jail a block producer when (s)he is slashed tier-2."
        }
      },
      "initialize(address,address,address,address,uint256[4],uint256[2],uint256[2],uint256[4],uint256[4])": {
        "details": "Initializes the contract storage."
      },
      "maintenanceContract()": {
        "details": "Returns the maintenance contract."
      },
      "precompileValidateDoubleSignAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "roninGovernanceAdminContract()": {
        "details": "Returns the ronin governance admin contract."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeOperatorSlashingConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to slash bridge operators. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.",
        "params": {
          "_jailDurationTier2": "The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.",
          "_ratioTier1": "The bridge reward will be deprecated if (s)he missed more than this ratio. Values 0-10,000 map to 0%-100%.",
          "_ratioTier2": "The bridge reward and mining reward will be deprecated and the corresponding block producer will be put in jail if (s)he misses more than this ratio. Values 0-10,000 map to 0%-100%.",
          "_skipSlashingThreshold": "The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small."
        }
      },
      "setBridgeVotingSlashingConfigs(uint256,uint256)": {
        "details": "Sets the configs to slash bridge voting. Requirements: - The method caller is admin. Emits the event `BridgeVotingSlashingConfigsUpdated`.",
        "params": {
          "_slashAmount": "The amount of RON to slash bridge voting.",
          "_threshold": "The threshold to slash when a trusted organization does not vote for bridge operators."
        }
      },
      "setCreditScoreConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to credit score. Requirements: - The method caller is admin. Emits the event `CreditScoreConfigsUpdated`.",
        "params": {
          "_bailOutMultiplier": "The number that will be multiplied with the remaining jailed time to get the cost of bailing out.",
          "_cutOffPercentage": "The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.",
          "_gainScore": "The score to gain per period.",
          "_maxScore": "The max number of credit score that a validator can hold."
        }
      },
      "setDoubleSignSlashingConfigs(uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `DoubleSignSlashingConfigsUpdated`.",
        "params": {
          "_jailUntilBlock": "The block number that the punished validator will be jailed until, due to double signing.",
          "_slashAmount": "The amount of RON to slash double sign."
        }
      },
      "setMaintenanceContract(address)": {
        "details": "Sets the maintenance contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `MaintenanceContractUpdated`."
      },
      "setRoninGovernanceAdminContract(address)": {
        "details": "Sets the ronin governance admin contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninGovernanceAdminContractUpdated`."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.",
        "params": {
          "_jailDurationForTier2Threshold": "The number of blocks to jail a block producer when (s)he is slashed tier-2.",
          "_slashAmountForTier2Threshold": "The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.",
          "_tier1Threshold": "The mining reward will be deprecated, if (s)he missed more than this threshold.",
          "_tier2Threshold": "The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold."
        }
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "slashBridgeVoting(address)": {
        "details": "Slashes for bridge voter governance. Emits the event `Slashed`."
      },
      "slashDoubleSign(address,bytes,bytes)": {
        "details": "Slashes for double signing. Requirements: - The method caller is coinbase. Emits the event `Slashed` if the double signing evidence of the two headers valid."
      },
      "slashUnavailability(address)": {
        "details": "Slashes for unavailability by increasing the counter of block producer `_consensusAddr`. Requirements: - The method caller is coinbase. Emits the event `Slashed` when the threshold is reached."
      },
      "updateCreditScores(address[],uint256)": {
        "details": "Updates the credit score for the validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6398,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRoninValidatorSet)10935"
      },
      {
        "astId": 22625,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashDoubleSignAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 22628,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_doubleSigningJailUntilBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22633,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6082,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IRoninTrustedOrganization)9509"
      },
      {
        "astId": 6003,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_roninGovernanceAdminContract",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IRoninGovernanceAdmin)9330"
      },
      {
        "astId": 22472,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bridgeVotingSlashed",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 22475,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bridgeVotingThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 22478,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bridgeVotingSlashAmount",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 22483,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5891,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_maintenanceContract",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IMaintenance)9075"
      },
      {
        "astId": 22341,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_missingVotesRatioTier1",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 22344,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_missingVotesRatioTier2",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 22347,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_jailDurationForMissingVotesRatioTier2",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 22350,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_skipBridgeOperatorSlashingThreshold",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 22355,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "113",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22981,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "lastUnavailabilitySlashedBlock",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 22988,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityIndicator",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 22991,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityTier1Threshold",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 22994,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityTier2Threshold",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 22997,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashAmountForUnavailabilityTier2Threshold",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 23000,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_jailDurationForUnavailabilityTier2Threshold",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 23005,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "169",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 21866,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_checkBailedOutAtPeriod",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 21871,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_creditScore",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21874,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_gainCreditScore",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 21877,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_maxCreditScore",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 21880,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bailOutCostMultiplier",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 21883,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_cutOffPercentageAfterBailout",
        "offset": 0,
        "slot": "224",
        "type": "t_uint256"
      },
      {
        "astId": 21888,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "225",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_initialized",
        "offset": 0,
        "slot": "275",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_initializing",
        "offset": 1,
        "slot": "275",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMaintenance)9075": {
        "encoding": "inplace",
        "label": "contract IMaintenance",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninGovernanceAdmin)9330": {
        "encoding": "inplace",
        "label": "contract IRoninGovernanceAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)9509": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninValidatorSet)10935": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}