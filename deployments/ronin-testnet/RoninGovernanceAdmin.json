{
  "address": "0x53Ea388CB72081A3a397114a43741e7987815896",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roninChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_proposalExpiryDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeBridgeContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeRoninTrustedOrgContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeValidatorContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        }
      ],
      "name": "ErrProxyCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorsApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        }
      ],
      "name": "EmergencyExitPollApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipientAfterUnlockedFund",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_expiredAt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitPollCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        }
      ],
      "name": "EmergencyExitPollExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "EmergencyExitPollVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "globalProposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "globalProposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GlobalProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "successCalls",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "returnDatas",
          "type": "bytes[]"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Ballot.VoteType",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "bridgeOperatorsVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "castGlobalProposalBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "castProposalBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType",
          "name": "_support",
          "type": "uint8"
        }
      ],
      "name": "castProposalVoteForCurrentNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "changeProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipientAfterUnlockedFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiredAt",
          "type": "uint256"
        }
      ],
      "name": "createEmergencyExitPoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "deleteExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "emergencyPollVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "getBridgeOperatorVotingSignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalExpiryDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getProposalSignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSyncedBridgeOperatorSetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct BridgeOperatorsBallot.BridgeOperatorSet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeVoter",
          "type": "address"
        }
      ],
      "name": "lastVotedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "proposalVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum GlobalProposal.TargetOption[]",
          "name": "_targetOptions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "proposeGlobal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "proposeGlobalProposalStructAndCastVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Ballot.VoteType",
          "name": "_support",
          "type": "uint8"
        }
      ],
      "name": "proposeProposalForCurrentNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "proposeProposalStructAndCastVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryDuration",
          "type": "uint256"
        }
      ],
      "name": "setProposalExpiryDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "againstVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct BridgeOperatorsBallot.BridgeOperatorSet",
          "name": "_ballot",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "voteBridgeOperatorsBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipientAfterUnlockedFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiredAt",
          "type": "uint256"
        }
      ],
      "name": "voteEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc9d5995332d137e99fe372f54c7f48001fffc20129ba9b663671081d3142d28",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x53Ea388CB72081A3a397114a43741e7987815896",
    "transactionIndex": 0,
    "gasUsed": "5170795",
    "logsBloom": "0x
    "blockHash": "0xaa9e2ce5319092b9eb2a0c506c4b7f42e5671ec79dad8ac2ef9992a7f59d7827",
    "transactionHash": "0xfc9d5995332d137e99fe372f54c7f48001fffc20129ba9b663671081d3142d28",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16905989,
        "transactionHash": "0xfc9d5995332d137e99fe372f54c7f48001fffc20129ba9b663671081d3142d28",
        "address": "0x53Ea388CB72081A3a397114a43741e7987815896",
        "topics": [
          "0xfd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7"
        ],
        "data": "0x0000000000000000000000007507dc433a98e1fe105d69f19f3b40e4315a4f32",
        "logIndex": 0,
        "blockHash": "0xaa9e2ce5319092b9eb2a0c506c4b7f42e5671ec79dad8ac2ef9992a7f59d7827"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16905989,
        "transactionHash": "0xfc9d5995332d137e99fe372f54c7f48001fffc20129ba9b663671081d3142d28",
        "address": "0x53Ea388CB72081A3a397114a43741e7987815896",
        "topics": [
          "0x5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048"
        ],
        "data": "0x000000000000000000000000cee681c9108c42c710c6a8a949307d5f13c9f3ca",
        "logIndex": 1,
        "blockHash": "0xaa9e2ce5319092b9eb2a0c506c4b7f42e5671ec79dad8ac2ef9992a7f59d7827"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16905989,
        "transactionHash": "0xfc9d5995332d137e99fe372f54c7f48001fffc20129ba9b663671081d3142d28",
        "address": "0x53Ea388CB72081A3a397114a43741e7987815896",
        "topics": [
          "0xef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b6836169"
        ],
        "data": "0x00000000000000000000000054b3ac74a90e64e8dde60671b6fe8f8ddf18ec9d",
        "logIndex": 2,
        "blockHash": "0xaa9e2ce5319092b9eb2a0c506c4b7f42e5671ec79dad8ac2ef9992a7f59d7827"
      }
    ],
    "blockNumber": 16905989,
    "cumulativeGasUsed": "5170795",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2021,
    "0x7507dc433a98E1fE105d69f19f3B40E4315A4F32",
    "0xCee681C9108c42C710c6A8A949307D5F13C9F3ca",
    "0x54B3AC74a90E64E8dDE60671b6fE8F8DDf18eC9d",
    1209600
  ],
  "numDeployments": 8,
  "solcInputHash": "c822a4eaf18578f72a5b51dc23e569e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roninChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalExpiryDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeBridgeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeRoninTrustedOrgContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeValidatorContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"}],\"name\":\"ErrProxyCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"}],\"name\":\"EmergencyExitPollApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipientAfterUnlockedFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiredAt\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitPollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"}],\"name\":\"EmergencyExitPollExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"EmergencyExitPollVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"globalProposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GlobalProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"bridgeOperatorsVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castGlobalProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType\",\"name\":\"_support\",\"type\":\"uint8\"}],\"name\":\"castProposalVoteForCurrentNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipientAfterUnlockedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiredAt\",\"type\":\"uint256\"}],\"name\":\"createEmergencyExitPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"deleteExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"emergencyPollVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getBridgeOperatorVotingSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getProposalSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSyncedBridgeOperatorSetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct BridgeOperatorsBallot.BridgeOperatorSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeVoter\",\"type\":\"address\"}],\"name\":\"lastVotedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"proposalVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"_targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"proposeGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeGlobalProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Ballot.VoteType\",\"name\":\"_support\",\"type\":\"uint8\"}],\"name\":\"proposeProposalForCurrentNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryDuration\",\"type\":\"uint256\"}],\"name\":\"setProposalExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct BridgeOperatorsBallot.BridgeOperatorSet\",\"name\":\"_ballot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"voteBridgeOperatorsBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipientAfterUnlockedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiredAt\",\"type\":\"uint256\"}],\"name\":\"voteEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallerMustBeBridgeContract()\":[{\"details\":\"Error of method caller must be bridge contract.\"}],\"ErrCallerMustBeRoninTrustedOrgContract()\":[{\"details\":\"Error of method caller must be Ronin trusted org contract.\"}],\"ErrCallerMustBeValidatorContract()\":[{\"details\":\"Error of method caller must be validator contract.\"}],\"ErrZeroCodeContract()\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"bridgeContract()\":{\"details\":\"Returns the bridge contract.\"},\"bridgeOperatorsVoted(uint256,uint256,address)\":{\"details\":\"Returns whether the voter `_voter` casted vote for bridge operators at a specific period.\"},\"castGlobalProposalBySignatures((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_castGlobalProposalBySignatures`.\"},\"castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_castProposalBySignatures`.\"},\"castProposalVoteForCurrentNetwork((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8)\":{\"details\":\"Casts vote for a proposal on the current network. Requirements: - The method caller is governor.\"},\"changeProxyAdmin(address,address)\":{\"details\":\"Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`.\"},\"createEmergencyExitPoll(address,address,uint256,uint256)\":{\"details\":\"Create a vote to agree that an emergency exit is valid and should return the locked funds back.a Requirements: - The method caller is validator contract.\"},\"deleteExpired(uint256,uint256)\":{\"details\":\"Deletes the expired proposal by its chainId and nonce, without creating a new proposal. Requirements: - The proposal is already created.\"},\"emergencyPollVoted(bytes32,address)\":{\"details\":\"Returns whether the voter casted vote for emergency exit poll.\"},\"getBridgeOperatorVotingSignatures(uint256,uint256)\":{\"details\":\"Returns the voted signatures for bridge operators at a specific period.\"},\"getProposalExpiryDuration()\":{\"details\":\"Returns the proposal expiry duration.\"},\"getProposalSignatures(uint256,uint256)\":{\"details\":\"Returns the voted signatures for the proposals. Note: The signatures can be empty in case the proposal is voted on the current network.\"},\"getProxyAdmin(address)\":{\"details\":\"Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getProxyImplementation(address)\":{\"details\":\"Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"lastSyncedBridgeOperatorSetInfo()\":{\"details\":\"Returns the synced bridge operator set info.\"},\"lastVotedBlock(address)\":{\"details\":\"Returns the last voted block of the bridge voter.\"},\"proposalVoted(uint256,uint256,address)\":{\"details\":\"Returns whether the voter `_voter` casted vote for the proposal.\"},\"propose(uint256,uint256,address[],uint256[],bytes[],uint256[])\":{\"details\":\"See `CoreGovernance-_proposeProposal`. Requirements: - The method caller is governor.\"},\"proposeGlobal(uint256,uint8[],uint256[],bytes[],uint256[])\":{\"details\":\"See `CoreGovernance-_proposeGlobal`. Requirements: - The method caller is governor.\"},\"proposeGlobalProposalStructAndCastVotes((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`. Requirements: - The method caller is governor.\"},\"proposeProposalForCurrentNetwork(uint256,address[],uint256[],bytes[],uint256[],uint8)\":{\"details\":\"Proposes and casts vote for a proposal on the current network. Requirements: - The method caller is governor. - The proposal is for the current network.\"},\"proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_proposeProposalStructAndCastVotes`. Requirements: - The method caller is governor. - The proposal is for the current network.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeContract(address)\":{\"details\":\"Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`.\"},\"setProposalExpiryDuration(uint256)\":{\"details\":\"Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"},\"voteBridgeOperatorsBySignatures((uint256,uint256,address[]),(uint8,bytes32,bytes32)[])\":{\"details\":\"See `BOsGovernanceProposal-_castVotesBySignatures`.\"},\"voteEmergencyExit(bytes32,address,address,uint256,uint256)\":{\"details\":\"Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester. Requirements: - The voter is governor. - The voting is existent. - The voting is not expired yet.\"}},\"stateVariables\":{\"_emergencyExitPoll\":{\"details\":\"Mapping from request hash => emergency poll\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"round(uint256)\":{\"notice\":\"chain id = 0 for global proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/RoninGovernanceAdmin.sol\":\"RoninGovernanceAdmin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/extensions/GovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport \\\"../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../extensions/collections/HasBridgeContract.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\nabstract contract GovernanceAdmin is CoreGovernance, HasRoninTrustedOrganizationContract, HasBridgeContract {\\n  uint256 public roninChainId;\\n  /// @dev Domain separator\\n  bytes32 public DOMAIN_SEPARATOR;\\n\\n  error ErrProxyCallFailed(bytes4 methodSignature);\\n\\n  modifier onlySelfCall() {\\n    require(msg.sender == address(this), \\\"GovernanceAdmin: only allowed self-call\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 _roninChainId,\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    uint256 _proposalExpiryDuration\\n  ) CoreGovernance(_proposalExpiryDuration) {\\n    roninChainId = _roninChainId;\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n        keccak256(\\\"GovernanceAdmin\\\"), // name hash\\n        keccak256(\\\"2\\\"), // version hash\\n        keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", _roninChainId)) // salt\\n      )\\n    );\\n    _setRoninTrustedOrganizationContract(_roninTrustedOrganizationContract);\\n    _setBridgeContract(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external override onlySelfCall {\\n    require(_addr.code.length > 0, \\\"GovernanceAdmin: set to non-contract\\\");\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external override onlySelfCall {\\n    require(_addr.code.length > 0, \\\"GovernanceAdmin: set to non-contract\\\");\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   *\\n   * Requirements:\\n   * - Only allowing self-call to this method, since this contract does not have admin.\\n   *\\n   */\\n  function setProposalExpiryDuration(uint256 _expiryDuration) external onlySelfCall {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyImplementation(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    bytes4 _selector = 0x5c60da1b;\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(abi.encodeWithSelector(_selector));\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the proposal expiry duration.\\n   */\\n  function getProposalExpiryDuration() external view returns (uint256) {\\n    return super._getProposalExpiryDuration();\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyAdmin(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    bytes4 _selector = 0xf851a440;\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(abi.encodeWithSelector(_selector));\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `_proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - This contract must be the current admin of `_proxy`.\\n   *\\n   */\\n  function changeProxyAdmin(address _proxy, address _newAdmin) external onlySelfCall {\\n    // bytes4(keccak256(\\\"changeAdmin(address)\\\"))\\n    bytes4 _selector = 0x8f283970;\\n    (bool _success, ) = _proxy.call(abi.encodeWithSelector(_selector, _newAdmin));\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getMinimumVoteWeight`.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual override returns (uint256) {\\n    bytes4 _selector = IQuorum.minimumVoteWeight.selector;\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector)\\n      )\\n    );\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getTotalWeights`.\\n   */\\n  function _getTotalWeights() internal view virtual override returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.totalWeights.selector;\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector)\\n      )\\n    );\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0xbff249fe2d4abc0be822b6ec1f33d1575e0813c58c017d12aef028c253171eb6\",\"license\":\"MIT\"},\"contracts/extensions/bridge-operator-governance/BOsGovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../libraries/BridgeOperatorsBallot.sol\\\";\\nimport \\\"../../interfaces/IRoninGovernanceAdmin.sol\\\";\\nimport \\\"../../libraries/IsolatedGovernance.sol\\\";\\n\\nabstract contract BOsGovernanceProposal is SignatureConsumer, IRoninGovernanceAdmin {\\n  using IsolatedGovernance for IsolatedGovernance.Vote;\\n\\n  /// @dev The last the brige operator set info.\\n  BridgeOperatorsBallot.BridgeOperatorSet internal _lastSyncedBridgeOperatorSetInfo;\\n  /// @dev Mapping from period index => epoch index => bridge operators vote\\n  mapping(uint256 => mapping(uint256 => IsolatedGovernance.Vote)) internal _bridgeOperatorVote;\\n  /// @dev Mapping from bridge voter address => last block that the address voted\\n  mapping(address => uint256) internal _lastVotedBlock;\\n  /// @dev Mapping from period index => epoch index => voter => bridge voter signatures\\n  mapping(uint256 => mapping(uint256 => mapping(address => Signature))) internal _bridgeVoterSig;\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256) {\\n    return _lastVotedBlock[_bridgeVoter];\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function lastSyncedBridgeOperatorSetInfo() external view returns (BridgeOperatorsBallot.BridgeOperatorSet memory) {\\n    return _lastSyncedBridgeOperatorSetInfo;\\n  }\\n\\n  /**\\n   * @dev Votes for a set of bridge operators by signatures.\\n   *\\n   * Requirements:\\n   * - The period of voting is larger than the last synced period.\\n   * - The arrays are not empty.\\n   * - The signature signers are in order.\\n   *\\n   */\\n  function _castBOVotesBySignatures(\\n    BridgeOperatorsBallot.BridgeOperatorSet calldata _ballot,\\n    Signature[] calldata _signatures,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _domainSeperator\\n  ) internal {\\n    require(\\n      _ballot.period >= _lastSyncedBridgeOperatorSetInfo.period &&\\n        _ballot.epoch >= _lastSyncedBridgeOperatorSetInfo.epoch,\\n      \\\"BOsGovernanceProposal: query for outdated bridge operator set\\\"\\n    );\\n    BridgeOperatorsBallot.verifyBallot(_ballot);\\n    require(_signatures.length > 0, \\\"BOsGovernanceProposal: invalid array length\\\");\\n\\n    address _signer;\\n    address _lastSigner;\\n    bytes32 _hash = BridgeOperatorsBallot.hash(_ballot);\\n    bytes32 _digest = ECDSA.toTypedDataHash(_domainSeperator, _hash);\\n    IsolatedGovernance.Vote storage _v = _bridgeOperatorVote[_ballot.period][_ballot.epoch];\\n    mapping(address => Signature) storage _sigMap = _bridgeVoterSig[_ballot.period][_ballot.epoch];\\n    bool _hasValidVotes;\\n\\n    for (uint256 _i; _i < _signatures.length; _i++) {\\n      // Avoids stack too deeps\\n      {\\n        Signature calldata _sig = _signatures[_i];\\n        _signer = ECDSA.recover(_digest, _sig.v, _sig.r, _sig.s);\\n        require(_lastSigner < _signer, \\\"BOsGovernanceProposal: invalid signer order\\\");\\n        _lastSigner = _signer;\\n      }\\n\\n      if (_isBridgeVoter(_signer)) {\\n        _hasValidVotes = true;\\n        _lastVotedBlock[_signer] = block.number;\\n        _sigMap[_signer] = _signatures[_i];\\n        _v.castVote(_signer, _hash);\\n      }\\n    }\\n\\n    require(_hasValidVotes, \\\"BOsGovernanceProposal: invalid signatures\\\");\\n    address[] memory _filteredVoters = _v.filterByHash(_hash);\\n    _v.syncVoteStatus(_minimumVoteWeight, _sumBridgeVoterWeights(_filteredVoters), 0, 0, _hash);\\n  }\\n\\n  /**\\n   * @dev Returns whether the address is the bridge voter.\\n   */\\n  function _isBridgeVoter(address) internal view virtual returns (bool);\\n\\n  /**\\n   * @dev Returns the weight of many bridge voters.\\n   */\\n  function _sumBridgeVoterWeights(address[] memory _bridgeVoters) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x05e0ac44abb0504f79842e2a31ddbf6ad196bfe364d49ca813f4669e5d8a241a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeContract.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\n\\ncontract HasBridgeContract is IHasBridgeContract, HasProxyAdmin {\\n  IBridge internal _bridgeContract;\\n\\n  modifier onlyBridgeContract() {\\n    if (bridgeContract() != msg.sender) revert ErrCallerMustBeBridgeContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function bridgeContract() public view override returns (address) {\\n    return address(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length <= 0) revert ErrZeroCodeContract();\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function _setBridgeContract(address _addr) internal {\\n    _bridgeContract = IBridge(_addr);\\n    emit BridgeContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x6fabd1a69eb4391793a28f0d5449f4662b7e7eaf3d9ca87554ccbc77e2b099f9\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    if (roninTrustedOrganizationContract() != msg.sender) revert ErrCallerMustBeRoninTrustedOrgContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x951fd730f4853d8c932da5484ea093f3094c8186735b603d31fb53035c395751\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    if (validatorContract() != msg.sender) revert ErrCallerMustBeValidatorContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xf0a7c4c2165ede118c6ba219ee1a20d293d94049b18aa6fc86a2c48661eb654d\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/CoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/ChainTypeConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer, ChainTypeConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    address[] forVoteds; // Array of addresses voting for\\n    address[] againstVoteds; // Array of addresses voting against\\n    uint256 expiryTimestamp;\\n    mapping(address => Signature) sig;\\n    mapping(address => bool) voted;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when a proposal is created\\n  event GlobalProposalCreated(\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    bytes32 globalProposalHash,\\n    GlobalProposal.GlobalProposalDetail globalProposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is expired\\n  event ProposalExpired(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  uint256 private _proposalExpiryDuration;\\n\\n  constructor(uint256 _expiryDuration) {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Creates new voting round by calculating the `_round` number of chain `_chainId`.\\n   * Increases the `_round` number if the previous one is not expired. Delete the previous proposal\\n   * if it is expired and not increase the `_round`.\\n   */\\n  function _createVotingRound(uint256 _chainId) internal returns (uint256 _round) {\\n    _round = round[_chainId];\\n    // Skip checking for the first ever round\\n    if (_round == 0) {\\n      _round = round[_chainId] = 1;\\n    } else {\\n      ProposalVote storage _latestProposalVote = vote[_chainId][_round];\\n      bool _isExpired = _tryDeleteExpiredVotingRound(_latestProposalVote);\\n      // Skip increasing round number if the latest round is expired, allow the vote to be overridden\\n      if (!_isExpired) {\\n        require(_latestProposalVote.status != VoteStatus.Pending, \\\"CoreGovernance: current proposal is not completed\\\");\\n        _round = ++round[_chainId];\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Saves new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _saveVotingRound(\\n    ProposalVote storage _vote,\\n    bytes32 _proposalHash,\\n    uint256 _expiryTimestamp\\n  ) internal {\\n    _vote.hash = _proposalHash;\\n    _vote.expiryTimestamp = _expiryTimestamp;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 _chainId,\\n    uint256 _expiryTimestamp,\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal) {\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n    uint256 _round = _createVotingRound(_chainId);\\n\\n    _proposal = Proposal.ProposalDetail(_round, _chainId, _expiryTimestamp, _targets, _values, _calldatas, _gasAmounts);\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _saveVotingRound(vote[_chainId][_round], _proposalHash, _expiryTimestamp);\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(Proposal.ProposalDetail memory _proposal, address _creator)\\n    internal\\n    virtual\\n    returns (uint256 _round)\\n  {\\n    uint256 _chainId = _proposal.chainId;\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId);\\n    _saveVotingRound(vote[_chainId][_round], _proposalHash, _proposal.expiryTimestamp);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes for a global proposal.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobal(\\n    uint256 _expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual {\\n    uint256 _round = _createVotingRound(0);\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal = GlobalProposal.GlobalProposalDetail(\\n      _round,\\n      _expiryTimestamp,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _saveVotingRound(vote[0][_round], _proposalHash, _expiryTimestamp);\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes global proposal struct.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobalStruct(\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal) {\\n    _proposal = _globalProposal.into_proposal_detail(_roninTrustedOrganizationContract, _gatewayContract);\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    uint256 _round = _createVotingRound(0);\\n    _saveVotingRound(vote[0][_round], _proposalHash, _globalProposal.expiryTimestamp);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support,\\n    uint256 _minimumForVoteWeight,\\n    uint256 _minimumAgainstVoteWeight,\\n    address _voter,\\n    Signature memory _signature,\\n    uint256 _voterWeight\\n  ) internal virtual returns (bool _done) {\\n    uint256 _chainId = _proposal.chainId;\\n    uint256 _round = _proposal.nonce;\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    if (_tryDeleteExpiredVotingRound(_vote)) {\\n      return true;\\n    }\\n\\n    require(round[_proposal.chainId] == _round, \\\"CoreGovernance: query for invalid proposal nonce\\\");\\n    require(_vote.status == VoteStatus.Pending, \\\"CoreGovernance: the vote is finalized\\\");\\n    if (_voted(_vote, _voter)) {\\n      revert(string(abi.encodePacked(\\\"CoreGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\")));\\n    }\\n\\n    _vote.voted[_voter] = true;\\n    // Stores the signature if it is not empty\\n    if (_signature.r > 0 || _signature.s > 0 || _signature.v > 0) {\\n      _vote.sig[_voter] = _signature;\\n    }\\n    emit ProposalVoted(_vote.hash, _voter, _support, _voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (_support == Ballot.VoteType.For) {\\n      _vote.forVoteds.push(_voter);\\n      _forVoteWeight = _vote.forVoteWeight += _voterWeight;\\n    } else if (_support == Ballot.VoteType.Against) {\\n      _vote.againstVoteds.push(_voter);\\n      _againstVoteWeight = _vote.againstVoteWeight += _voterWeight;\\n    } else {\\n      revert(\\\"CoreGovernance: unsupported vote type\\\");\\n    }\\n\\n    if (_forVoteWeight >= _minimumForVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n    } else if (_againstVoteWeight >= _minimumAgainstVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev When the contract is on Ronin chain, checks whether the proposal is expired and delete it if is expired.\\n   *\\n   * Emits the event `ProposalExpired` if the vote is expired.\\n   *\\n   * Note: This function assumes the vote `_proposalVote` is already created, consider verifying the vote's existence\\n   * before or it will emit an unexpected event of `ProposalExpired`.\\n   */\\n  function _tryDeleteExpiredVotingRound(ProposalVote storage _proposalVote) internal returns (bool _isExpired) {\\n    _isExpired =\\n      _getChainType() == ChainType.RoninChain &&\\n      _proposalVote.status == VoteStatus.Pending &&\\n      _proposalVote.expiryTimestamp <= block.timestamp;\\n\\n    if (_isExpired) {\\n      emit ProposalExpired(_proposalVote.hash);\\n\\n      for (uint256 _i; _i < _proposalVote.forVoteds.length; _i++) {\\n        delete _proposalVote.voted[_proposalVote.forVoteds[_i]];\\n        delete _proposalVote.sig[_proposalVote.forVoteds[_i]];\\n      }\\n      for (uint256 _i; _i < _proposalVote.againstVoteds.length; _i++) {\\n        delete _proposalVote.voted[_proposalVote.againstVoteds[_i]];\\n        delete _proposalVote.sig[_proposalVote.againstVoteds[_i]];\\n      }\\n      delete _proposalVote.status;\\n      delete _proposalVote.hash;\\n      delete _proposalVote.againstVoteWeight;\\n      delete _proposalVote.forVoteWeight;\\n      delete _proposalVote.forVoteds;\\n      delete _proposalVote.againstVoteds;\\n      delete _proposalVote.expiryTimestamp;\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage _vote, Proposal.ProposalDetail memory _proposal) internal {\\n    if (_proposal.executable()) {\\n      _vote.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = _proposal.execute();\\n      emit ProposalExecuted(_vote.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   */\\n  function _setProposalExpiryDuration(uint256 _expiryDuration) internal {\\n    _proposalExpiryDuration = _expiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(ProposalVote storage _vote, address _voter) internal view returns (bool) {\\n    return _vote.voted[_voter];\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function _getProposalExpiryDuration() internal view returns (uint256) {\\n    return _proposalExpiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeights() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns current context is running on whether Ronin chain or on mainchain.\\n   */\\n  function _getChainType() internal view virtual returns (ChainType);\\n}\\n\",\"keccak256\":\"0x4c38499b2dcde8b53fa2c28efba0fdfd939a6225c660da265d45ab1cd93597f8\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/GovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CoreGovernance.sol\\\";\\n\\nabstract contract GovernanceProposal is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Casts votes by signatures.\\n   *\\n   * Note: This method does not verify the proposal hash with the vote hash. Please consider checking it before.\\n   *\\n   */\\n  function _castVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    require(_supports.length > 0 && _supports.length == _signatures.length, \\\"GovernanceProposal: invalid array length\\\");\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n\\n    address _lastSigner;\\n    address _signer;\\n    Signature calldata _sig;\\n    bool _hasValidVotes;\\n    for (uint256 _i; _i < _signatures.length; _i++) {\\n      _sig = _signatures[_i];\\n\\n      if (_supports[_i] == Ballot.VoteType.For) {\\n        _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n      } else if (_supports[_i] == Ballot.VoteType.Against) {\\n        _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n      } else {\\n        revert(\\\"GovernanceProposal: query for unsupported vote type\\\");\\n      }\\n\\n      require(_lastSigner < _signer, \\\"GovernanceProposal: invalid order\\\");\\n      _lastSigner = _signer;\\n\\n      uint256 _weight = _getWeight(_signer);\\n      if (_weight > 0) {\\n        _hasValidVotes = true;\\n        if (\\n          _castVote(_proposal, _supports[_i], _minimumForVoteWeight, _minimumAgainstVoteWeight, _signer, _sig, _weight)\\n        ) {\\n          return;\\n        }\\n      }\\n    }\\n\\n    require(_hasValidVotes, \\\"GovernanceProposal: invalid signatures\\\");\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator\\n  ) internal {\\n    bytes32 _proposalHash = _proposal.hash();\\n    require(\\n      vote[_proposal.chainId][_proposal.nonce].hash == _proposalHash,\\n      \\\"GovernanceAdmin: cast vote for invalid proposal\\\"\\n    );\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes and votes by signature.\\n   */\\n  function _proposeGlobalProposalStructAndCastVotes(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal returns (Proposal.ProposalDetail memory _proposal) {\\n    _proposal = _proposeGlobalStruct(_globalProposal, _roninTrustedOrganizationContract, _gatewayContract, _creator);\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a global proposal struct and casts votes by signature.\\n   */\\n  function _castGlobalProposalBySignatures(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal {\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    require(vote[0][_proposal.nonce].hash == _proposal.hash(), \\\"GovernanceAdmin: cast vote for invalid proposal\\\");\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function _getWeight(address _governor) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ae6611dcf49152c8e84853772f4cbf4d538c91cb9d4c85a1b0be04a215fd6e0\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BridgeOperatorsBallot.sol\\\";\\n\\ninterface IRoninGovernanceAdmin {\\n  /// @dev Emitted when the bridge operators are approved.\\n  event BridgeOperatorsApproved(uint256 _period, uint256 _epoch, address[] _operators);\\n  /// @dev Emitted when an emergency exit poll is created.\\n  event EmergencyExitPollCreated(\\n    bytes32 _voteHash,\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  );\\n  /// @dev Emitted when an emergency exit poll is approved.\\n  event EmergencyExitPollApproved(bytes32 _voteHash);\\n  /// @dev Emitted when an emergency exit poll is expired.\\n  event EmergencyExitPollExpired(bytes32 _voteHash);\\n  /// @dev Emitted when an emergency exit poll is voted.\\n  event EmergencyExitPollVoted(bytes32 indexed _voteHash, address indexed _voter);\\n\\n  /**\\n   * @dev Returns the last voted block of the bridge voter.\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the synced bridge operator set info.\\n   */\\n  function lastSyncedBridgeOperatorSetInfo()\\n    external\\n    view\\n    returns (BridgeOperatorsBallot.BridgeOperatorSet memory _bridgeOperatorSetInfo);\\n\\n  /**\\n   * @dev Create a vote to agree that an emergency exit is valid and should return the locked funds back.a\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   */\\n  function createEmergencyExitPoll(\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external;\\n}\\n\",\"keccak256\":\"0xfe989bda49f3fd9dd9f6042d71f2a5997084faeeba633ec330982076a7972ac6\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasBridgeContract is IHasContract {\\n  /// @dev Emitted when the bridge contract is updated.\\n  event BridgeContractUpdated(address);\\n\\n  /// @dev Error of method caller must be bridge contract.\\n  error ErrCallerMustBeBridgeContract();\\n\\n  /**\\n   * @dev Returns the bridge contract.\\n   */\\n  function bridgeContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function setBridgeContract(address) external;\\n}\\n\",\"keccak256\":\"0xf3ab1830ba7797cb3b8011512af3a5e38a316549f62140b0c10e0b4dcb67f773\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasContract {\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract();\\n}\\n\",\"keccak256\":\"0x8a17785d841137fcae5b5d542f1714de0492c85b54ca074f0b9c1c490ad3f342\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasRoninTrustedOrganizationContract is IHasContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /// @dev Error of method caller must be Ronin trusted org contract.\\n  error ErrCallerMustBeRoninTrustedOrgContract();\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x7d0a0b1d658e9cf4d69f4934748e0a5c1d22183024d26927f5d621fc61aff0b2\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasValidatorContract is IHasContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /// @dev Error of method caller must be validator contract.\\n  error ErrCallerMustBeValidatorContract();\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0x35a715f123b0c5dc296d13583f946bef4e485201e122b5170988a7535f114559\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/ChainTypeConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainTypeConsumer {\\n  enum ChainType {\\n    RoninChain,\\n    Mainchain\\n  }\\n}\\n\",\"keccak256\":\"0xe0d20e00c8d237f8e0fb881abf1ff1ef114173bcb428f06f689c581666a22db7\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected,\\n    Expired\\n  }\\n}\\n\",\"keccak256\":\"0xa5045232c0c053fcf31fb3fe71942344444159c48d5f1b2063dbb06b6a1c9752\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xc382bd50ca507308ec23826308bc9ff0a22cfb9b3fcd09c7ac7a63c37729d33e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n  /// @dev Emitted when the bridge tracking contract's response is incorrect\\n  event BridgeTrackingIncorrectlyResponded();\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x42ed0bff5f8233dc6de28bd3283f98a0c16df6abc26655fc777bdc07a83ff3f5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xc00b1bda0c6076c9aa0631dc0c01e849d8f42cc616fe4c036f73cda0a9afe9ef\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the latest wrapped up period.\\n   */\\n  function checkBridgeRewardDeprecatedAtLatestPeriod(address _consensusAddr) external view returns (bool _result);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the  `_period`.\\n   */\\n  function checkBridgeRewardDeprecatedAtPeriod(address _consensusAddr, uint256 _period)\\n    external\\n    view\\n    returns (bool _result);\\n}\\n\",\"keccak256\":\"0x19b85ce95caf9deb4aff9614d1ca2d89712b89e8609dc6ab772e989164a51139\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /// @dev Error of number of prioritized greater than number of max validators.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators()\\n    external\\n    view\\n    returns (\\n      address[] memory _validatorList,\\n      address[] memory _bridgeOperators,\\n      EnumFlags.ValidatorFlag[] memory _flags\\n    );\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the bridge operator list corresponding to validator address list.\\n   */\\n  function getBridgeOperatorsOf(address[] memory _validatorAddrs) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool isOperator);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x86189a2fee2e5dccba27728db15e1bd19f647cdb97c02b52d9ab07c5d98a2a75\",\"license\":\"MIT\"},\"contracts/libraries/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 public constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n  }\\n}\\n\",\"keccak256\":\"0x28a0192db886307f30ada203bdb902749ee3f30d42710de4eaf303cba23c32c2\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  struct BridgeOperatorSet {\\n    uint256 period;\\n    uint256 epoch;\\n    address[] operators;\\n  }\\n\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,uint256 epoch,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a;\\n\\n  /**\\n   * @dev Verifies whether the ballot is valid or not.\\n   *\\n   * Requirements:\\n   * - The ballot is not for an empty operator set.\\n   * - The operator address list is in order.\\n   *\\n   */\\n  function verifyBallot(BridgeOperatorSet calldata _ballot) internal pure {\\n    require(_ballot.operators.length > 0, \\\"BridgeOperatorsBallot: invalid array length\\\");\\n    address _addr = _ballot.operators[0];\\n    for (uint _i = 1; _i < _ballot.operators.length; _i++) {\\n      require(_addr < _ballot.operators[_i], \\\"BridgeOperatorsBallot: invalid order of bridge operators\\\");\\n      _addr = _ballot.operators[_i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(BridgeOperatorSet calldata _ballot) internal pure returns (bytes32) {\\n    bytes32 _operatorsHash;\\n    address[] memory _operators = _ballot.operators;\\n\\n    assembly {\\n      _operatorsHash := keccak256(add(_operators, 32), mul(mload(_operators), 32))\\n    }\\n\\n    return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _ballot.period, _ballot.epoch, _operatorsHash));\\n  }\\n}\\n\",\"keccak256\":\"0x986425ebae2dcfcfa266c9ca825232ff300ec8ce796e8975da6714d87e921793\",\"license\":\"MIT\"},\"contracts/libraries/EmergencyExitBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary EmergencyExitBallot {\\n  // keccak256(\\\"EmergencyExitBallot(address consensusAddress,address recipientAfterUnlockedFund,uint256 requestedAt,uint256 expiredAt)\\\");\\n  bytes32 public constant EMERGENCY_EXIT_BALLOT_TYPEHASH =\\n    0x697acba4deaf1a718d8c2d93e42860488cb7812696f28ca10eed17bac41e7027;\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(\\n    address _consensusAddress,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          EMERGENCY_EXIT_BALLOT_TYPEHASH,\\n          _consensusAddress,\\n          _recipientAfterUnlockedFund,\\n          _requestedAt,\\n          _expiredAt\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xfee3f0b001f34b3760a06c7abcf4f7d35054dba0004221adfc4c5f5ede4a1114\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/libraries/GlobalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  enum TargetOption {\\n    RoninTrustedOrganizationContract,\\n    GatewayContract\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    uint256 expiryTimestamp;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint256 expiryTimestamp,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    TargetOption[] memory _targets = _proposal.targetOptions;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _proposal.nonce,\\n          _proposal.expiryTimestamp,\\n          _targetsHash,\\n          _valuesHash,\\n          _calldatasHash,\\n          _gasAmountsHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function into_proposal_detail(\\n    GlobalProposalDetail memory _proposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal pure returns (Proposal.ProposalDetail memory _detail) {\\n    _detail.nonce = _proposal.nonce;\\n    _detail.expiryTimestamp = _proposal.expiryTimestamp;\\n    _detail.chainId = 0;\\n    _detail.targets = new address[](_proposal.targetOptions.length);\\n    _detail.values = _proposal.values;\\n    _detail.calldatas = _proposal.calldatas;\\n    _detail.gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _proposal.targetOptions.length; _i++) {\\n      if (_proposal.targetOptions[_i] == TargetOption.GatewayContract) {\\n        _detail.targets[_i] = _gatewayContract;\\n      } else if (_proposal.targetOptions[_i] == TargetOption.RoninTrustedOrganizationContract) {\\n        _detail.targets[_i] = _roninTrustedOrganizationContract;\\n      } else {\\n        revert(\\\"GlobalProposal: unsupported target\\\");\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4749e811eebe029ac572b48e5c755bc852cc74e8234c5243a57f7536c3ed00e0\",\"license\":\"MIT\"},\"contracts/libraries/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nlibrary IsolatedGovernance {\\n  struct Vote {\\n    VoteStatusConsumer.VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev The timestamp that voting is expired (no expiration=0)\\n    uint256 expiredAt;\\n    /// @dev The timestamp that voting is created\\n    uint256 createdAt;\\n    /// @dev The list of voters\\n    address[] voters;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function castVote(\\n    Vote storage _v,\\n    address _voter,\\n    bytes32 _hash\\n  ) internal {\\n    if (_v.expiredAt > 0 && _v.expiredAt <= block.timestamp) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Expired;\\n    }\\n\\n    if (voted(_v, _voter)) {\\n      revert(\\n        string(abi.encodePacked(\\\"IsolatedGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\"))\\n      );\\n    }\\n\\n    _v.voteHashOf[_voter] = _hash;\\n    _v.voters.push(_voter);\\n  }\\n\\n  /**\\n   * @dev Updates vote with the requirement of minimum vote weight.\\n   */\\n  function syncVoteStatus(\\n    Vote storage _v,\\n    uint256 _minimumVoteWeight,\\n    uint256 _votedWeightForHash,\\n    uint256 _minimumTrustedVoteWeight,\\n    uint256 _trustedVotedWeightForHash,\\n    bytes32 _hash\\n  ) internal returns (VoteStatusConsumer.VoteStatus _status) {\\n    if (\\n      _votedWeightForHash >= _minimumVoteWeight &&\\n      _trustedVotedWeightForHash >= _minimumTrustedVoteWeight &&\\n      _v.status == VoteStatusConsumer.VoteStatus.Pending\\n    ) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Approved;\\n      _v.finalHash = _hash;\\n    }\\n\\n    return _v.status;\\n  }\\n\\n  /**\\n   * @dev Returns the list of vote's addresses that voted for the hash `_hash`.\\n   */\\n  function filterByHash(Vote storage _v, bytes32 _hash) internal view returns (address[] memory _voters) {\\n    uint256 _count;\\n    _voters = new address[](_v.voters.length);\\n\\n    for (uint _i; _i < _voters.length; _i++) {\\n      address _voter = _v.voters[_i];\\n      if (_v.voteHashOf[_voter] == _hash) {\\n        _voters[_count++] = _voter;\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_voters, _count)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function voted(Vote storage _v, address _voter) internal view returns (bool) {\\n    return _v.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0x7bdb18ce2c548b3241360370312ca12f168140217fc3ee9c983627b86506c73f\",\"license\":\"MIT\"},\"contracts/libraries/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Proposal {\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    uint256 expiryTimestamp;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,uint256 expiryTimestamp,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal, uint256 _maxExpiryDuration) internal view {\\n    require(\\n      _proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length,\\n      \\\"Proposal: invalid array length\\\"\\n    );\\n    require(_proposal.expiryTimestamp <= block.timestamp + _maxExpiryDuration, \\\"Proposal: invalid expiry timestamp\\\");\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _proposal.nonce,\\n          _proposal.chainId,\\n          _proposal.expiryTimestamp,\\n          _targetsHash,\\n          _valuesHash,\\n          _calldatasHash,\\n          _gasAmountsHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(ProposalDetail memory _proposal)\\n    internal\\n    returns (bool[] memory _successCalls, bytes[] memory _returnDatas)\\n  {\\n    require(executable(_proposal), \\\"Proposal: query for invalid chainId\\\");\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ++_i) {\\n      require(gasleft() > _proposal.gasAmounts[_i], \\\"Proposal: insufficient gas\\\");\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x96bf9eaea9a87a5eceed026a6eaedc74cf5dde6760f7e969d5b5974dad43ff80\",\"license\":\"MIT\"},\"contracts/ronin/RoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/bridge-operator-governance/BOsGovernanceProposal.sol\\\";\\nimport \\\"../extensions/sequential-governance/GovernanceProposal.sol\\\";\\nimport \\\"../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../extensions/GovernanceAdmin.sol\\\";\\nimport \\\"../libraries/EmergencyExitBallot.sol\\\";\\nimport \\\"../interfaces/IRoninGovernanceAdmin.sol\\\";\\n\\ncontract RoninGovernanceAdmin is\\n  IRoninGovernanceAdmin,\\n  GovernanceAdmin,\\n  GovernanceProposal,\\n  BOsGovernanceProposal,\\n  HasValidatorContract\\n{\\n  using Proposal for Proposal.ProposalDetail;\\n  using IsolatedGovernance for IsolatedGovernance.Vote;\\n\\n  /// @dev Mapping from request hash => emergency poll\\n  mapping(bytes32 => IsolatedGovernance.Vote) internal _emergencyExitPoll;\\n\\n  modifier onlyGovernor() {\\n    require(_getWeight(msg.sender) > 0, \\\"RoninGovernanceAdmin: sender is not governor\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 _roninChainId,\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    address _validatorContract,\\n    uint256 _proposalExpiryDuration\\n  ) GovernanceAdmin(_roninChainId, _roninTrustedOrganizationContract, _bridgeContract, _proposalExpiryDuration) {\\n    _setValidatorContract(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external override onlySelfCall {\\n    require(_addr.code.length > 0, \\\"RoninGovernanceAdmin: set to non-contract\\\");\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Returns the voted signatures for the proposals.\\n   *\\n   * Note: The signatures can be empty in case the proposal is voted on the current network.\\n   *\\n   */\\n  function getProposalSignatures(uint256 _chainId, uint256 _round)\\n    external\\n    view\\n    returns (\\n      address[] memory _voters,\\n      Ballot.VoteType[] memory _supports,\\n      Signature[] memory _signatures\\n    )\\n  {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    uint256 _forLength = _vote.forVoteds.length;\\n    uint256 _againstLength = _vote.againstVoteds.length;\\n    uint256 _voterLength = _forLength + _againstLength;\\n\\n    _supports = new Ballot.VoteType[](_voterLength);\\n    _signatures = new Signature[](_voterLength);\\n    _voters = new address[](_voterLength);\\n    for (uint256 _i; _i < _forLength; _i++) {\\n      _supports[_i] = Ballot.VoteType.For;\\n      _signatures[_i] = vote[_chainId][_round].sig[_vote.forVoteds[_i]];\\n      _voters[_i] = _vote.forVoteds[_i];\\n    }\\n    for (uint256 _i; _i < _againstLength; _i++) {\\n      _supports[_i + _forLength] = Ballot.VoteType.Against;\\n      _signatures[_i + _forLength] = vote[_chainId][_round].sig[_vote.againstVoteds[_i]];\\n      _voters[_i + _forLength] = _vote.againstVoteds[_i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the voted signatures for bridge operators at a specific period.\\n   */\\n  function getBridgeOperatorVotingSignatures(uint256 _period, uint256 _epoch)\\n    external\\n    view\\n    returns (address[] memory _voters, Signature[] memory _signatures)\\n  {\\n    mapping(address => Signature) storage _sigMap = _bridgeVoterSig[_period][_epoch];\\n    _voters = _bridgeOperatorVote[_period][_epoch].voters;\\n    _signatures = new Signature[](_voters.length);\\n    for (uint _i; _i < _voters.length; _i++) {\\n      _signatures[_i] = _sigMap[_voters[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for the proposal.\\n   */\\n  function proposalVoted(\\n    uint256 _chainId,\\n    uint256 _round,\\n    address _voter\\n  ) external view returns (bool) {\\n    return _voted(vote[_chainId][_round], _voter);\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for bridge operators at a specific period.\\n   */\\n  function bridgeOperatorsVoted(\\n    uint256 _period,\\n    uint256 _epoch,\\n    address _voter\\n  ) external view returns (bool) {\\n    return _bridgeOperatorVote[_period][_epoch].voted(_voter);\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted vote for emergency exit poll.\\n   */\\n  function emergencyPollVoted(bytes32 _voteHash, address _voter) external view returns (bool) {\\n    return _emergencyExitPoll[_voteHash].voted(_voter);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_proposeProposal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function propose(\\n    uint256 _chainId,\\n    uint256 _expiryTimestamp,\\n    address[] calldata _targets,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeProposal(_chainId, _expiryTimestamp, _targets, _values, _calldatas, _gasAmounts, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_proposeProposalStructAndCastVotes`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   * - The proposal is for the current network.\\n   *\\n   */\\n  function proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeProposalStructAndCastVotes(_proposal, _supports, _signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Proposes and casts vote for a proposal on the current network.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   * - The proposal is for the current network.\\n   *\\n   */\\n  function proposeProposalForCurrentNetwork(\\n    uint256 _expiryTimestamp,\\n    address[] calldata _targets,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts,\\n    Ballot.VoteType _support\\n  ) external onlyGovernor {\\n    address _voter = msg.sender;\\n    Proposal.ProposalDetail memory _proposal = _proposeProposal(\\n      block.chainid,\\n      _expiryTimestamp,\\n      _targets,\\n      _values,\\n      _calldatas,\\n      _gasAmounts,\\n      _voter\\n    );\\n    _castProposalVoteForCurrentNetwork(_voter, _proposal, _support);\\n  }\\n\\n  /**\\n   * @dev Casts vote for a proposal on the current network.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function castProposalVoteForCurrentNetwork(Proposal.ProposalDetail calldata _proposal, Ballot.VoteType _support)\\n    external\\n    onlyGovernor\\n  {\\n    _castProposalVoteForCurrentNetwork(msg.sender, _proposal, _support);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_castProposalBySignatures`.\\n   */\\n  function castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castProposalBySignatures(_proposal, _supports, _signatures, DOMAIN_SEPARATOR);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_proposeGlobal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeGlobal(\\n    uint256 _expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeGlobal(\\n      _expiryTimestamp,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeGlobalProposalStructAndCastVotes(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeGlobalProposalStructAndCastVotes(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_castGlobalProposalBySignatures`.\\n   */\\n  function castGlobalProposalBySignatures(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castGlobalProposalBySignatures(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract()\\n    );\\n  }\\n\\n  /**\\n   * @dev Deletes the expired proposal by its chainId and nonce, without creating a new proposal.\\n   *\\n   * Requirements:\\n   * - The proposal is already created.\\n   *\\n   */\\n  function deleteExpired(uint256 _chainId, uint256 _round) external {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n    require(_vote.hash != bytes32(0), \\\"RoninGovernanceAdmin: query for empty voting\\\");\\n    _tryDeleteExpiredVotingRound(_vote);\\n  }\\n\\n  /**\\n   * @dev See `BOsGovernanceProposal-_castVotesBySignatures`.\\n   */\\n  function voteBridgeOperatorsBySignatures(\\n    BridgeOperatorsBallot.BridgeOperatorSet calldata _ballot,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castBOVotesBySignatures(_ballot, _signatures, _getMinimumVoteWeight(), DOMAIN_SEPARATOR);\\n    IsolatedGovernance.Vote storage _v = _bridgeOperatorVote[_ballot.period][_ballot.epoch];\\n    if (_v.status == VoteStatus.Approved) {\\n      _lastSyncedBridgeOperatorSetInfo = _ballot;\\n      emit BridgeOperatorsApproved(_ballot.period, _ballot.epoch, _ballot.operators);\\n      _v.status = VoteStatus.Executed;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function createEmergencyExitPoll(\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external onlyValidatorContract {\\n    bytes32 _hash = EmergencyExitBallot.hash(_consensusAddr, _recipientAfterUnlockedFund, _requestedAt, _expiredAt);\\n    IsolatedGovernance.Vote storage _v = _emergencyExitPoll[_hash];\\n    _v.createdAt = block.timestamp;\\n    _v.expiredAt = _expiredAt;\\n    emit EmergencyExitPollCreated(_hash, _consensusAddr, _recipientAfterUnlockedFund, _requestedAt, _expiredAt);\\n  }\\n\\n  /**\\n   * @dev Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester.\\n   *\\n   * Requirements:\\n   * - The voter is governor.\\n   * - The voting is existent.\\n   * - The voting is not expired yet.\\n   *\\n   */\\n  function voteEmergencyExit(\\n    bytes32 _voteHash,\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external onlyGovernor {\\n    address _voter = msg.sender;\\n    bytes32 _hash = EmergencyExitBallot.hash(_consensusAddr, _recipientAfterUnlockedFund, _requestedAt, _expiredAt);\\n    require(_voteHash == _hash, \\\"RoninGovernanceAdmin: invalid vote hash\\\");\\n\\n    IsolatedGovernance.Vote storage _v = _emergencyExitPoll[_hash];\\n    require(_v.createdAt > 0, \\\"RoninGovernanceAdmin: query for non-existent vote\\\");\\n    require(_v.status != VoteStatus.Expired, \\\"RoninGovernanceAdmin: query for expired vote\\\");\\n\\n    _v.castVote(_voter, _hash);\\n    emit EmergencyExitPollVoted(_hash, _voter);\\n\\n    address[] memory _voters = _v.filterByHash(_hash);\\n    VoteStatus _stt = _v.syncVoteStatus(_getMinimumVoteWeight(), _sumGovernorWeights(_voters), 0, 0, _hash);\\n    if (_stt == VoteStatus.Approved) {\\n      _execReleaseLockedFundForEmergencyExitRequest(_consensusAddr, _recipientAfterUnlockedFund);\\n      emit EmergencyExitPollApproved(_hash);\\n      _v.status = VoteStatus.Executed;\\n    } else if (_stt == VoteStatus.Expired) {\\n      emit EmergencyExitPollExpired(_hash);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc GovernanceProposal\\n   */\\n  function _getWeight(address _governor) internal view virtual override returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.getGovernorWeight.selector;\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, _governor)\\n      )\\n    );\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Returns the total weight of a list address of governors.\\n   */\\n  function _sumGovernorWeights(address[] memory _governors) internal view virtual returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.sumGovernorWeights.selector;\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, _governors)\\n      )\\n    );\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Returns the bridge voter weight.\\n   */\\n  function _getBridgeVoterWeight(address _governor) internal view virtual returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.getBridgeVoterWeight.selector;\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, _governor)\\n      )\\n    );\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @inheritdoc BOsGovernanceProposal\\n   */\\n  function _isBridgeVoter(address _addr) internal view virtual override returns (bool) {\\n    return _getBridgeVoterWeight(_addr) > 0;\\n  }\\n\\n  /**\\n   * @inheritdoc BOsGovernanceProposal\\n   */\\n  function _sumBridgeVoterWeights(address[] memory _bridgeVoters) internal view virtual override returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.sumBridgeVoterWeights.selector;\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, _bridgeVoters)\\n      )\\n    );\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Trigger function from validator contract to unlock fund for emeregency exit request.\\n   */\\n  function _execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address _recipientAfterUnlockedFund)\\n    internal\\n    virtual\\n  {\\n    bytes4 _selector = _validatorContract.execReleaseLockedFundForEmergencyExitRequest.selector;\\n    (bool _success, ) = validatorContract().call(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, _consensusAddr, _recipientAfterUnlockedFund)\\n      )\\n    );\\n    if (!_success) revert ErrProxyCallFailed(_selector);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_getChainType`.\\n   */\\n  function _getChainType() internal pure override returns (ChainType) {\\n    return ChainType.RoninChain;\\n  }\\n\\n  /**\\n   * @dev See `castProposalVoteForCurrentNetwork`.\\n   */\\n  function _castProposalVoteForCurrentNetwork(\\n    address _voter,\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support\\n  ) internal {\\n    require(_proposal.chainId == block.chainid, \\\"RoninGovernanceAdmin: invalid chain id\\\");\\n    require(\\n      vote[_proposal.chainId][_proposal.nonce].hash == _proposal.hash(),\\n      \\\"RoninGovernanceAdmin: cast vote for invalid proposal\\\"\\n    );\\n\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n    Signature memory _emptySignature;\\n    _castVote(\\n      _proposal,\\n      _support,\\n      _minimumForVoteWeight,\\n      _minimumAgainstVoteWeight,\\n      _voter,\\n      _emptySignature,\\n      _getWeight(_voter)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x75916f133047608aaf3eb4c98b4db2deba5e8e700ce78327e9bf7167b3810e17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101955760003560e01c80624054b81461019a57806309fcd8c7146101af5780630b26cf66146101c25780630b881830146101d557806317ce2dd4146101e85780631c905e39146102045780631e23e04814610226578063204e1c7a146102475780632b5df351146102675780632c5e65201461028a5780632e96a6fb1461029d5780632faf925d146102b057806334d5f37b146102c35780633644e515146102e35780635511cde1146102ec57806360911e8e146102f457806362e52e5f14610307578063663ac0111461031c5780637eff275e1461032f578063988ef53c14610342578063994390891461036b5780639a7d3382146103735780639e0dc0b314610386578063a1819f9a14610399578063a2fae570146103ac578063a8a0e32c146103bf578063b384abef146103d2578063b5e337de1461042d578063bc96180b14610440578063cd59658314610448578063cdf64a7614610450578063dcc3eb1914610463578063f3b7dead14610476578063fb4f637114610489575b600080fd5b6101ad6101a83660046143e1565b61049c565b005b6101ad6101bd366004614475565b6104e5565b6101ad6101d0366004614559565b6105a9565b6101ad6101e33660046143e1565b6105fe565b6101f160055481565b6040519081526020015b60405180910390f35b610217610212366004614576565b61060e565b6040516101fb9392919061464b565b610239610234366004614576565b6109f9565b6040516101fb9291906146be565b61025a610255366004614559565b610b7d565b6040516101fb91906146e3565b61027a6102753660046146f7565b610c49565b60405190151581526020016101fb565b61027a6102983660046146f7565b610c74565b6101ad6102ab366004614730565b610c97565b6101ad6102be366004614749565b610cbf565b6101f16102d1366004614730565b60006020819052908152604090205481565b6101f160065481565b61025a610cdf565b6101ad6103023660046147a2565b610cee565b61030f610dae565b6040516101fb9190614812565b6101ad61032a366004614859565b610e50565b6101ad61033d366004614936565b610f5c565b6101f1610350366004614559565b6001600160a01b03166000908152600b602052604090205490565b61025a611049565b6101ad610381366004614576565b611058565b6101ad61039436600461496f565b6110ce565b6101ad6103a73660046149c1565b611367565b6101ad6103ba366004614a9a565b61144d565b6101ad6103cd366004614ae0565b6114f3565b61041c6103e0366004614576565b600160208181526000938452604080852090915291835291208054918101546002820154600383015460069093015460ff909416939192909185565b6040516101fb959493929190614b26565b6101ad61043b366004614559565b611532565b6101f1611584565b61025a611594565b6101ad61045e366004614559565b6115a3565b61027a610471366004614b5b565b611637565b61025a610484366004614559565b611658565b6101ad610497366004614749565b6116a2565b60006104a7336116f3565b116104cd5760405162461bcd60e51b81526004016104c490614b80565b60405180910390fd5b6104de85858585856006543361181a565b5050505050565b60006104f0336116f3565b1161050d5760405162461bcd60e51b81526004016104c490614b80565b61059e89898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061055392508a91508b9050614d4f565b8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506105909250610cdf915050565b610598611594565b33611884565b505050505050505050565b3330146105c85760405162461bcd60e51b81526004016104c490614d5c565b6000816001600160a01b03163b116105f25760405162461bcd60e51b81526004016104c490614da3565b6105fb81611993565b50565b6104de85858585856006546119e9565b600082815260016020908152604080832084845290915281206004810154600582015460609384938493909290916106468284614dfd565b9050806001600160401b0381111561066057610660614bcc565b604051908082528060200260200182016040528015610689578160200160208202803683370190505b509550806001600160401b038111156106a4576106a4614bcc565b6040519080825280602002602001820160405280156106dd57816020015b6106ca6142ab565b8152602001906001900390816106c25790505b509450806001600160401b038111156106f8576106f8614bcc565b604051908082528060200260200182016040528015610721578160200160208202803683370190505b50965060005b8381101561088057600087828151811061074357610743614e10565b6020026020010190600181111561075c5761075c6145dc565b9081600181111561076f5761076f6145dc565b90525060008a81526001602090815260408083208c8452909152812060048701805460079092019291849081106107a8576107a8614e10565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff1681526001820154938101939093526002015490820152865187908390811061080657610806614e10565b602002602001018190525084600401818154811061082657610826614e10565b9060005260206000200160009054906101000a90046001600160a01b031688828151811061085657610856614e10565b6001600160a01b03909216602092830291909101909101528061087881614e26565b915050610727565b5060005b828110156109ed576001876108998684614dfd565b815181106108a9576108a9614e10565b602002602001019060018111156108c2576108c26145dc565b908160018111156108d5576108d56145dc565b90525060008a81526001602090815260408083208c84529091528120600587018054600790920192918490811061090e5761090e614e10565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff1681526001820154938101939093526002015490820152866109638684614dfd565b8151811061097357610973614e10565b602002602001018190525084600501818154811061099357610993614e10565b6000918252602090912001546001600160a01b0316886109b38684614dfd565b815181106109c3576109c3614e10565b6001600160a01b0390921660209283029190910190910152806109e581614e26565b915050610884565b50505050509250925092565b6000828152600c602090815260408083208484528252808320858452600a8352818420858552835292819020600501805482518185028101850190935280835260609485949093929190830182828015610a7c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a5e575b5050505050925082516001600160401b03811115610a9c57610a9c614bcc565b604051908082528060200260200182016040528015610ad557816020015b610ac26142ab565b815260200190600190039081610aba5790505b50915060005b8351811015610b7457816000858381518110610af957610af9614e10565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208151606081018352815460ff16815260018201549381019390935260020154908201528351849083908110610b5657610b56614e10565b60200260200101819052508080610b6c90614e26565b915050610adb565b50509250929050565b60408051600481526024810182526020810180516001600160e01b0316635c60da1b60e01b908117909152915160009291839182916001600160a01b03871691610bc79190614e63565b600060405180830381855afa9150503d8060008114610c02576040519150601f19603f3d011682016040523d82523d6000602084013e610c07565b606091505b509150915081610c2c578260405163411471c360e11b81526004016104c49190614e7f565b80806020019051810190610c409190614e94565b95945050505050565b6000838152600a602090815260408083208584529091528120610c6c9083611a70565b949350505050565b60008381526001602090815260408083208584529091528120610c6c9083611a91565b333014610cb65760405162461bcd60e51b81526004016104c490614d5c565b6105fb81600255565b6104de8585858585600654610cd2610cdf565b610cda611594565b611ab3565b6003546001600160a01b031690565b610d04838383610cfc611b55565b600654611c6f565b82356000908152600a6020908152604080832082870135845290915290206001815460ff166004811115610d3a57610d3a6145dc565b03610da857836007610d4c8282614f1e565b507f7c45875370690698791a915954b9c69729cc5f9373edc5a2e04436c07589f30d905084356020860135610d846040880188614eb1565b604051610d949493929190614fec565b60405180910390a1805460ff191660021781555b50505050565b610dd260405180606001604052806000815260200160008152602001606081525090565b60408051606081018252600780548252600854602080840191909152600980548551818402810184018752818152949593949386019392830182828015610e4257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e24575b505050505081525050905090565b6000610e5b336116f3565b11610e785760405162461bcd60e51b81526004016104c490614b80565b60003390506000610f41468d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610f0692508d91508e9050614d4f565b8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b9250611f83915050565b9050610f4e82828561206b565b505050505050505050505050565b333014610f7b5760405162461bcd60e51b81526004016104c490614d5c565b6040516308f2839760e41b906000906001600160a01b038516908390610fa59086906024016146e3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610fe39190614e63565b6000604051808303816000865af19150503d8060008114611020576040519150601f19603f3d011682016040523d82523d6000602084013e611025565b606091505b5050905080610da8578160405163411471c360e11b81526004016104c49190614e7f565b600d546001600160a01b031690565b6000828152600160208181526040808420858552909152909120908101546110c55760405162461bcd60e51b815260206004820152602c602482015260008051602061595183398151915260448201526b656d70747920766f74696e6760a01b60648201526084016104c4565b610da8816121ae565b60006110d9336116f3565b116110f65760405162461bcd60e51b81526004016104c490614b80565b336000611105868686866123d0565b90508087146111665760405162461bcd60e51b815260206004820152602760248201527f526f6e696e476f7665726e616e636541646d696e3a20696e76616c696420766f6044820152660e8ca40d0c2e6d60cb1b60648201526084016104c4565b6000818152600e6020526040902060048101546111cd5760405162461bcd60e51b815260206004820152603160248201526000805160206159518339815191526044820152706e6f6e2d6578697374656e7420766f746560781b60648201526084016104c4565b6004815460ff1660048111156111e5576111e56145dc565b036112355760405162461bcd60e51b815260206004820152602c602482015260008051602061595183398151915260448201526b6578706972656420766f746560a01b60648201526084016104c4565b61124081848461242c565b6040516001600160a01b0384169083907f903555bcf22239155f645431a67d9da9b85888c59ce9bf913c25a035ead6e99790600090a3600061128282846124f7565b905060006112a6611291611b55565b61129a846125f4565b85919060008089612628565b905060018160048111156112bc576112bc6145dc565b0361130e576112cb8989612682565b6040518481527fd3500576a0d4923326fbb893cf2169273e0df93f3cb6b94b83f2ca2e0ecb681b9060200160405180910390a1825460ff1916600217835561135b565b6004816004811115611322576113226145dc565b0361135b576040518481527feecb3148acc573548e89cb64eb5f2023a61171f1c413ed8bf0fe506c19aeebe49060200160405180910390a15b50505050505050505050565b6000611372336116f3565b1161138f5760405162461bcd60e51b81526004016104c490614b80565b6114408a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525061140592508a91508b9050614d4f565b878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611f83915050565b5050505050505050505050565b33611456611049565b6001600160a01b03161461147d57604051630e6444a160e31b815260040160405180910390fd5b600061148b858585856123d0565b6000818152600e602052604090819020426004820155600381018590559051919250907f18ea835340bb2973a31996158138f109e9c5b9cfdb2424e999e6b1a9ce565de8906114e3908490899089908990899061504b565b60405180910390a1505050505050565b60006114fe336116f3565b1161151b5760405162461bcd60e51b81526004016104c490614b80565b61152e3361152884615164565b8361206b565b5050565b3330146115515760405162461bcd60e51b81526004016104c490614d5c565b6000816001600160a01b03163b1161157b5760405162461bcd60e51b81526004016104c490614da3565b6105fb81612745565b600061158f60025490565b905090565b6004546001600160a01b031690565b3330146115c25760405162461bcd60e51b81526004016104c490614d5c565b6000816001600160a01b03163b1161162e5760405162461bcd60e51b815260206004820152602960248201527f526f6e696e476f7665726e616e636541646d696e3a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b60648201526084016104c4565b6105fb81612790565b6000828152600e6020526040812061164f9083611a70565b90505b92915050565b60408051600481526024810182526020810180516001600160e01b03166303e1469160e61b908117909152915160009291839182916001600160a01b03871691610bc79190614e63565b60006116ad336116f3565b116116ca5760405162461bcd60e51b81526004016104c490614b80565b6116eb85858585856006546116dd610cdf565b6116e5611594565b336127db565b505050505050565b6000631af0725f60e31b8180611707610cdf565b6001600160a01b0316634bb5274a848760405160240161172791906146e3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516117689190602401615264565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516117a19190614e63565b600060405180830381855afa9150503d80600081146117dc576040519150601f19603f3d011682016040523d82523d6000602084013e6117e1565b606091505b509150915081611806578260405163411471c360e11b81526004016104c49190614e7f565b80806020019051810190610c409190615277565b61182c61182688615164565b8261283d565b50600061184061183b89615164565b612907565b905061187a61184e89615164565b8888888861186689611861896000612aa6565b612afc565b6118758a6118618a6001612aa6565b612b23565b5050505050505050565b60006118906000612e5c565b905060006040518060c001604052808381526020018c81526020018b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082018b9052604082018a90526060909101889052909150611904828787612f5f565b905061191b6002548261312d90919063ffffffff16565b600061192682612907565b60008581526000805160206159318339815191526020526040902090915061194f90828f613229565b80846000805160206159b18339815191528461196a87613239565b878a60405161197c9493929190615395565b60405180910390a350505050505050505050505050565b600480546001600160a01b0319166001600160a01b0383161790556040517f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906119de9083906146e3565b60405180910390a150565b60006119f761183b88615164565b6020808901356000908152600180835260408083208c35845290935291902001549091508114611a395760405162461bcd60e51b81526004016104c49061547c565b611a67611a4588615164565b87878787611a5888611861896000612aa6565b611875896118618a6001612aa6565b50505050505050565b6001600160a01b031660009081526002919091016020526040902054151590565b6001600160a01b03166000908152600891909101602052604090205460ff1690565b6000611aca8383611ac38c61552f565b9190612f5f565b90506000611adf611ada8b61552f565b613239565b9050611aea82612907565b6000808052600160208181528551835260008051602061593183398151915290526040909120015414611b2f5760405162461bcd60e51b81526004016104c49061547c565b61135b828a8a8a8a611b468b611861896000612aa6565b6118758c6118618a6001612aa6565b6000637de5dedd60e01b8180611b69610cdf565b6040805160048152602480820183526020820180516001600160e01b03166001600160e01b0319891617905291516001600160a01b039390931692634bb5274a92611bb5929101615264565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611bee9190614e63565b600060405180830381855afa9150503d8060008114611c29576040519150601f19603f3d011682016040523d82523d6000602084013e611c2e565b606091505b509150915081611c53578260405163411471c360e11b81526004016104c49190614e7f565b80806020019051810190611c679190615277565b935050505090565b600754853510801590611c885750600854602086013510155b611cfa5760405162461bcd60e51b815260206004820152603d60248201527f424f73476f7665726e616e636550726f706f73616c3a20717565727920666f7260448201527f206f7574646174656420627269646765206f70657261746f722073657400000060648201526084016104c4565b611d0385613393565b82611d645760405162461bcd60e51b815260206004820152602b60248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b60648201526084016104c4565b6000806000611d7288613553565b90506000611d808583612afc565b89356000818152600a60209081526040808320828f0135808552908352818420948452600c83528184209084529091528120929350909190805b8a811015611efe57368c8c83818110611dd557611dd5614e10565b606002919091019150611e00905086611df16020840184615608565b83602001358460400135613605565b9850886001600160a01b0316886001600160a01b031610611e655760405162461bcd60e51b815260206004820152602b602482015260008051602061599183398151915260448201526a34b3b732b91037b93232b960a91b60648201526084016104c4565b88975050611e728861362d565b15611eec576001600160a01b0388166000908152600b60205260409020439055600191508b8b82818110611ea857611ea8614e10565b9050606002018360008a6001600160a01b03166001600160a01b031681526020019081526020016000208181611ede9190615625565b50611eec905084898861242c565b80611ef681614e26565b915050611dba565b5080611f4c5760405162461bcd60e51b8152602060048201526029602482015260008051602061599183398151915260448201526869676e61747572657360b81b60648201526084016104c4565b6000611f5884876124f7565b9050611f738a611f6783613640565b8691906000808b612628565b5050505050505050505050505050565b611f8b6142cb565b87600003611fab5760405162461bcd60e51b81526004016104c490615656565b6000611fb689612e5c565b90506040518060e001604052808281526020018a81526020018981526020018881526020018781526020018681526020018581525091506120026002548361312d90919063ffffffff16565b600061200d83612907565b60008b8152600160209081526040808320868452909152902090915061203490828b613229565b80828b600080516020615971833981519152868860405161205692919061568b565b60405180910390a45050979650505050505050565b468260200151146120cd5760405162461bcd60e51b815260206004820152602660248201527f526f6e696e476f7665726e616e636541646d696e3a20696e76616c6964206368604482015265185a5b881a5960d21b60648201526084016104c4565b6120d682612907565b602080840151600090815260018083526040808320875184529093529190200154146121615760405162461bcd60e51b815260206004820152603460248201527f526f6e696e476f7665726e616e636541646d696e3a206361737420766f746520604482015273199bdc881a5b9d985b1a59081c1c9bdc1bdcd85b60621b60648201526084016104c4565b600061216b611b55565b9050600081612178613654565b61218291906156b5565b61218d906001614dfd565b90506121976142ab565b611a67858585858a866121a98d6116f3565b613668565b600080825460ff1660048111156121c7576121c76145dc565b1480156121d8575042826006015411155b905080156123cb5760018201546040517f58f98006a7f2f253f8ae8f8b7cec9008ca05359633561cd7c22f3005682d4a5590600090a260005b60048301548110156122ca5782600801600084600401838154811061223857612238614e10565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600484018054600786019291908490811061228157612281614e10565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191681556001810182905560020155806122c281614e26565b915050612211565b5060005b6005830154811015612387578260080160008460050183815481106122f5576122f5614e10565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600584018054600786019291908490811061233e5761233e614e10565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff1916815560018101829055600201558061237f81614e26565b9150506122ce565b50815460ff1916825560006001830181905560028301819055600383018190556123b5906004840190614308565b6123c3600583016000614308565b600060068301555b919050565b60405160009061240c907f697acba4deaf1a718d8c2d93e42860488cb7812696f28ca10eed17bac41e702790879087908790879060200161504b565b604051602081830303815290604052805190602001209050949350505050565b60008360030154118015612444575042836003015411155b1561245557825460ff191660041783555b61245f8383611a70565b156124ae57612478826001600160a01b03166014613a6f565b60405160200161248891906156c8565b60408051601f198184030181529082905262461bcd60e51b82526104c491600401615264565b6001600160a01b039091166000818152600284016020908152604082209390935560059093018054600181018255908452919092200180546001600160a01b0319169091179055565b60058201546060906000906001600160401b0381111561251957612519614bcc565b604051908082528060200260200182016040528015612542578160200160208202803683370190505b50915060005b82518110156125eb57600085600501828154811061256857612568614e10565b60009182526020808320909101546001600160a01b0316808352600289019091526040909120549091508590036125d8578084846125a581614e26565b9550815181106125b7576125b7614e10565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50806125e381614e26565b915050612548565b50815292915050565b6000635f14a1c360e01b8180612608610cdf565b6001600160a01b0316634bb5274a8487604051602401611727919061571c565b600085851015801561263a5750838310155b801561265b57506000875460ff166004811115612659576126596145dc565b145b1561267357865460ff19166001908117885587018290555b5050935460ff16949350505050565b6361e45aeb60e11b6000612694611049565b6001600160a01b0316634bb5274a8386866040516024016126cb9291906001600160a01b0392831681529116602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161270c9190602401615264565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610fe39190614e63565b600380546001600160a01b0319166001600160a01b0383161790556040517ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7906119de9083906146e3565b600d80546001600160a01b0319166001600160a01b0383161790556040517fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b6836169906119de9083906146e3565b6127e36142cb565b6127f76127ef8b61552f565b858585613c0a565b90506000612807611ada8c61552f565b905061282f828b8b8b8b6128208c611861896000612aa6565b6118758d6118618a6001612aa6565b509998505050505050505050565b60208201516000908082036128645760405162461bcd60e51b81526004016104c490615656565b60025461287290859061312d565b600061287d85612907565b905061288882612e5c565b600083815260016020908152604080832084845290915290819020908701519194506128b5918390613229565b845183146128d55760405162461bcd60e51b81526004016104c49061572f565b80838360008051602061597183398151915288886040516128f792919061568b565b60405180910390a4505092915050565b6000806000806000808660800151905060008760600151905060008860a00151516001600160401b0381111561293f5761293f614bcc565b604051908082528060200260200182016040528015612968578160200160208202803683370190505b5060c08a015190915060005b82518110156129d1578a60a00151818151811061299357612993614e10565b6020026020010151805190602001208382815181106129b4576129b4614e10565b6020908102919091010152806129c981614e26565b915050612974565b506020835102602084012097506020845102602085012096506020825102602083012095506020815102602082012094507fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a60001b8a600001518b602001518c604001518b8b8b8b604051602001612a81989796959493929190978852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b6040516020818303038152906040528051906020012098505050505050505050919050565b604051600090612ade907fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c29085908590602001615775565b60405160208183030381529060405280519060200120905092915050565b60405161190160f01b60208201526022810183905260428101829052600090606201612ade565b8415801590612b3157508483145b612b8e5760405162461bcd60e51b815260206004820152602860248201527f476f7665726e616e636550726f706f73616c3a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b60648201526084016104c4565b6000612b98611b55565b9050600081612ba5613654565b612baf91906156b5565b612bba906001614dfd565b9050600080366000805b89811015612df0578a8a82818110612bde57612bde614e10565b606002919091019350600090508d8d83818110612bfd57612bfd614e10565b9050602002016020810190612c12919061579a565b6001811115612c2357612c236145dc565b03612c4f57612c4889612c396020860186615608565b85602001358660400135613605565b9350612d03565b60018d8d83818110612c6357612c63614e10565b9050602002016020810190612c78919061579a565b6001811115612c8957612c896145dc565b03612c9f57612c4888612c396020860186615608565b60405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636550726f706f73616c3a20717565727920666f7220756e604482015272737570706f7274656420766f7465207479706560681b60648201526084016104c4565b836001600160a01b0316856001600160a01b031610612d6e5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964206f7264656044820152603960f91b60648201526084016104c4565b8394506000612d7c856116f3565b90508015612ddd5760019250612dcb8f8f8f85818110612d9e57612d9e614e10565b9050602002016020810190612db3919061579a565b8a8a89612dc5368b90038b018b6157b7565b87613668565b15612ddd575050505050505050611a67565b5080612de881614e26565b915050612bc4565b5080612e4d5760405162461bcd60e51b815260206004820152602660248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964207369676e60448201526561747572657360d01b60648201526084016104c4565b50505050505050505050505050565b60008181526020819052604081205490819003612e8b5750600090815260208190526040902060019081905590565b6000828152600160209081526040808320848452909152812090612eae826121ae565b905080612f58576000825460ff166004811115612ecd57612ecd6145dc565b03612f345760405162461bcd60e51b815260206004820152603160248201527f436f7265476f7665726e616e63653a2063757272656e742070726f706f73616c604482015270081a5cc81b9bdd0818dbdb5c1b195d1959607a1b60648201526084016104c4565b60008481526020819052604081208054909190612f5090614e26565b918290555092505b5050919050565b612f676142cb565b83518152602080850151604080840191909152600091830191909152840151516001600160401b03811115612f9e57612f9e614bcc565b604051908082528060200260200182016040528015612fc7578160200160208202803683370190505b5060608083019190915284015160808083019190915284015160a08083019190915284015160c082015260005b8460400151518110156131255760018560400151828151811061301957613019614e10565b60200260200101516001811115613032576130326145dc565b0361307357828260600151828151811061304e5761304e614e10565b60200260200101906001600160a01b031690816001600160a01b031681525050613113565b60008560400151828151811061308b5761308b614e10565b602002602001015160018111156130a4576130a46145dc565b036130c057838260600151828151811061304e5761304e614e10565b60405162461bcd60e51b815260206004820152602260248201527f476c6f62616c50726f706f73616c3a20756e737570706f727465642074617267604482015261195d60f21b60648201526084016104c4565b8061311d81614e26565b915050612ff4565b509392505050565b600082606001515111801561314b5750816080015151826060015151145b801561316057508160a0015151826060015151145b801561317557508160c0015151826060015151145b6131c15760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c3a20696e76616c6964206172726179206c656e677468000060448201526064016104c4565b6131cb8142614dfd565b8260400151111561152e5760405162461bcd60e51b815260206004820152602260248201527f50726f706f73616c3a20696e76616c6964206578706972792074696d6573746160448201526106d760f41b60648201526084016104c4565b6001830191909155600690910155565b6000806000806000808660600151905060008760400151905060008860800151516001600160401b0381111561327157613271614bcc565b60405190808252806020026020018201604052801561329a578160200160208202803683370190505b5060a08a015190915060005b8251811015613303578a6080015181815181106132c5576132c5614e10565b6020026020010151805190602001208382815181106132e6576132e6614e10565b6020908102919091010152806132fb81614e26565b9150506132a6565b5082516020908102848201208551820286830120845183028584012084518402858501208e518f860151604080517f1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee911413509881019890985287019190915260608601526080850184905260a0850183905260c0850182905260e08501819052929b509099509750955061010001612a81565b60006133a26040830183614eb1565b9050116134055760405162461bcd60e51b815260206004820152602b60248201527f4272696467654f70657261746f727342616c6c6f743a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b60648201526084016104c4565b60006134146040830183614eb1565b600081811061342557613425614e10565b905060200201602081019061343a9190614559565b905060015b61344c6040840184614eb1565b905081101561354e576134626040840184614eb1565b8281811061347257613472614e10565b90506020020160208101906134879190614559565b6001600160a01b0316826001600160a01b0316106135085760405162461bcd60e51b815260206004820152603860248201527f4272696467654f70657261746f727342616c6c6f743a20696e76616c6964206f60448201527772646572206f6620627269646765206f70657261746f727360401b60648201526084016104c4565b6135156040840184614eb1565b8281811061352557613525614e10565b905060200201602081019061353a9190614559565b91508061354681614e26565b91505061343f565b505050565b600080806135646040850185614eb1565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251602090810293810193909320604080517fd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a818701528935818301529885013560608a01526080808a01929092528051808a03909201825260a0909801909752505084519401939093209392505050565b600080600061361687878787613cdc565b9150915061362381613dbf565b5095945050505050565b60008061363983613f70565b1192915050565b600063d9d5dadb60e01b8180612608610cdf565b600063926323d560e01b8180611b69610cdf565b60208088015188516000828152600184526040808220838352909452928320613690816121ae565b156136a15760019350505050613a64565b6020808c01516000908152908190526040902054821461371c5760405162461bcd60e51b815260206004820152603060248201527f436f7265476f7665726e616e63653a20717565727920666f7220696e76616c6960448201526f642070726f706f73616c206e6f6e636560801b60648201526084016104c4565b6000815460ff166004811115613734576137346145dc565b1461378f5760405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a2074686520766f74652069732066696e616044820152641b1a5e995960da1b60648201526084016104c4565b6137998188611a91565b156137c2576137b2876001600160a01b03166014613a6f565b6040516020016124889190615818565b6001600160a01b03871660009081526008820160209081526040909120805460ff191660011790558601511515806137fd5750604086015115155b8061380b5750855160ff1615155b15613852576001600160a01b03871660009081526007820160209081526040918290208851815460ff191660ff909116178155908801516001820155908701516002909101555b866001600160a01b031681600101547f1203f9e81c814a35f5f4cc24087b2a24c6fb7986a9f1406b68a9484882c93a238c88604051613892929190615868565b60405180910390a3600080808c60018111156138b0576138b06145dc565b03613905576004830180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038c161790556003840180548992906138f8908490614dfd565b92505081905591506139c4565b60018c6001811115613919576139196145dc565b0361396e576005830180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038c16179055600284018054899290613961908490614dfd565b92505081905590506139c4565b60405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a20756e737570706f7274656420766f7465604482015264207479706560d81b60648201526084016104c4565b8a8210613a1857825460ff19166001908117845580840154604051919750907f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a2613a13838e613f84565b613a5e565b898110613a5e57825460ff19166003178355600180840154604051919750907f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25b50505050505b979650505050505050565b60606000613a7e836002614efa565b613a89906002614dfd565b6001600160401b03811115613aa057613aa0614bcc565b6040519080825280601f01601f191660200182016040528015613aca576020820181803683370190505b509050600360fc1b81600081518110613ae557613ae5614e10565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b1457613b14614e10565b60200101906001600160f81b031916908160001a9053506000613b38846002614efa565b613b43906001614dfd565b90505b6001811115613bbb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b7757613b77614e10565b1a60f81b828281518110613b8d57613b8d614e10565b60200101906001600160f81b031916908160001a90535060049490941c93613bb48161587f565b9050613b46565b50831561164f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104c4565b613c126142cb565b613c1d858585612f5f565b9050613c346002548261312d90919063ffffffff16565b6000613c3f82612907565b90506000613c4d6000612e5c565b60008181526000805160206159318339815191526020908152604090912090890151919250613c7d918490613229565b82518114613c9d5760405162461bcd60e51b81526004016104c49061572f565b81816000805160206159b183398151915285613cb88b613239565b8b89604051613cca9493929190615395565b60405180910390a35050949350505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115613d095750600090506003613db6565b8460ff16601b14158015613d2157508460ff16601c14155b15613d325750600090506004613db6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613d86573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613daf57600060019250925050613db6565b9150600090505b94509492505050565b6000816004811115613dd357613dd36145dc565b03613ddb5750565b6001816004811115613def57613def6145dc565b03613e375760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016104c4565b6002816004811115613e4b57613e4b6145dc565b03613e985760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104c4565b6003816004811115613eac57613eac6145dc565b03613f045760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104c4565b6004816004811115613f1857613f186145dc565b036105fb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104c4565b6000635624191160e01b8180611707610cdf565b613f8d81613ff1565b1561152e57815460ff19166002178255600080613fa98361400b565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba8383604051613fe3929190615896565b60405180910390a250505050565b600081602001516000148061165257505060200151461490565b60608061401783613ff1565b61406f5760405162461bcd60e51b815260206004820152602360248201527f50726f706f73616c3a20717565727920666f7220696e76616c696420636861696044820152621b925960ea1b60648201526084016104c4565b8260600151516001600160401b0381111561408c5761408c614bcc565b6040519080825280602002602001820160405280156140b5578160200160208202803683370190505b5091508260600151516001600160401b038111156140d5576140d5614bcc565b60405190808252806020026020018201604052801561410857816020015b60608152602001906001900390816140f35790505b50905060005b8360600151518110156142a5578360c00151818151811061413157614131614e10565b60200260200101515a116141845760405162461bcd60e51b815260206004820152601a60248201527950726f706f73616c3a20696e73756666696369656e742067617360301b60448201526064016104c4565b8360600151818151811061419a5761419a614e10565b60200260200101516001600160a01b0316846080015182815181106141c1576141c1614e10565b60200260200101518560c0015183815181106141df576141df614e10565b6020026020010151908660a0015184815181106141fe576141fe614e10565b60200260200101516040516142139190614e63565b600060405180830381858888f193505050503d8060008114614251576040519150601f19603f3d011682016040523d82523d6000602084013e614256565b606091505b5084838151811061426957614269614e10565b6020026020010184848151811061428257614282614e10565b6020908102919091010191909152901515905261429e81614e26565b905061410e565b50915091565b604080516060810182526000808252602082018190529181019190915290565b6040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b50805460008255906000526020600020908101906105fb91905b808211156143365760008155600101614322565b5090565b600060e0828403121561434c57600080fd5b50919050565b60008083601f84011261436457600080fd5b5081356001600160401b0381111561437b57600080fd5b6020830191508360208260051b850101111561439657600080fd5b9250929050565b60008083601f8401126143af57600080fd5b5081356001600160401b038111156143c657600080fd5b60208301915083602060608302850101111561439657600080fd5b6000806000806000606086880312156143f957600080fd5b85356001600160401b038082111561441057600080fd5b61441c89838a0161433a565b9650602088013591508082111561443257600080fd5b61443e89838a01614352565b9096509450604088013591508082111561445757600080fd5b506144648882890161439d565b969995985093965092949392505050565b600080600080600080600080600060a08a8c03121561449357600080fd5b8935985060208a01356001600160401b03808211156144b157600080fd5b6144bd8d838e01614352565b909a50985060408c01359150808211156144d657600080fd5b6144e28d838e01614352565b909850965060608c01359150808211156144fb57600080fd5b6145078d838e01614352565b909650945060808c013591508082111561452057600080fd5b5061452d8c828d01614352565b915080935050809150509295985092959850929598565b6001600160a01b03811681146105fb57600080fd5b60006020828403121561456b57600080fd5b813561164f81614544565b6000806040838503121561458957600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b838110156145d15781516001600160a01b0316875295820195908201906001016145ac565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b600281106105fb576105fb6145dc565b600081518084526020808501945080840160005b838110156145d1578151805160ff16885283810151848901526040908101519088015260609096019590820190600101614616565b60608152600061465e6060830186614598565b82810360208481019190915285518083528682019282019060005b8181101561469e57845161468c816145f2565b83529383019391830191600101614679565b505084810360408601526146b28187614602565b98975050505050505050565b6040815260006146d16040830185614598565b8281036020840152610c408185614602565b6001600160a01b0391909116815260200190565b60008060006060848603121561470c57600080fd5b8335925060208401359150604084013561472581614544565b809150509250925092565b60006020828403121561474257600080fd5b5035919050565b60008060008060006060868803121561476157600080fd5b85356001600160401b038082111561477857600080fd5b9087019060c0828a03121561478c57600080fd5b9095506020870135908082111561443257600080fd5b6000806000604084860312156147b757600080fd5b83356001600160401b03808211156147ce57600080fd5b90850190606082880312156147e257600080fd5b909350602085013590808211156147f857600080fd5b506148058682870161439d565b9497909650939450505050565b60208152815160208201526020820151604082015260006040830151606080840152610c6c6080840182614598565b600281106105fb57600080fd5b80356123cb81614841565b60008060008060008060008060008060c08b8d03121561487857600080fd5b8a35995060208b01356001600160401b038082111561489657600080fd5b6148a28e838f01614352565b909b50995060408d01359150808211156148bb57600080fd5b6148c78e838f01614352565b909950975060608d01359150808211156148e057600080fd5b6148ec8e838f01614352565b909750955060808d013591508082111561490557600080fd5b506149128d828e01614352565b9094509250614925905060a08c0161484e565b90509295989b9194979a5092959850565b6000806040838503121561494957600080fd5b823561495481614544565b9150602083013561496481614544565b809150509250929050565b600080600080600060a0868803121561498757600080fd5b85359450602086013561499981614544565b935060408601356149a981614544565b94979396509394606081013594506080013592915050565b60008060008060008060008060008060c08b8d0312156149e057600080fd5b8a35995060208b0135985060408b01356001600160401b0380821115614a0557600080fd5b614a118e838f01614352565b909a50985060608d0135915080821115614a2a57600080fd5b614a368e838f01614352565b909850965060808d0135915080821115614a4f57600080fd5b614a5b8e838f01614352565b909650945060a08d0135915080821115614a7457600080fd5b50614a818d828e01614352565b915080935050809150509295989b9194979a5092959850565b60008060008060808587031215614ab057600080fd5b8435614abb81614544565b93506020850135614acb81614544565b93969395505050506040820135916060013590565b60008060408385031215614af357600080fd5b82356001600160401b03811115614b0957600080fd5b614b158582860161433a565b925050602083013561496481614841565b60a0810160058710614b3a57614b3a6145dc565b95815260208101949094526040840192909252606083015260809091015290565b60008060408385031215614b6e57600080fd5b82359150602083013561496481614544565b6020808252602c908201527f526f6e696e476f7665726e616e636541646d696e3a2073656e6465722069732060408201526b3737ba1033b7bb32b93737b960a11b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715614c0457614c04614bcc565b60405290565b60405160c081016001600160401b0381118282101715614c0457614c04614bcc565b604051601f8201601f191681016001600160401b0381118282101715614c5457614c54614bcc565b604052919050565b60006001600160401b03821115614c7557614c75614bcc565b5060051b60200190565b6000614c92614c8d84614c5c565b614c2c565b8381529050602080820190600585901b840186811115614cb157600080fd5b845b81811015614d445780356001600160401b0380821115614cd35760008081fd5b8188019150601f8a81840112614ce95760008081fd5b823582811115614cfb57614cfb614bcc565b614d0c818301601f19168801614c2c565b92508083528b87828601011115614d2557600091508182fd5b8087850188850137600090830187015250855250928201928201614cb3565b505050509392505050565b600061164f368484614c7f565b60208082526027908201527f476f7665726e616e636541646d696e3a206f6e6c7920616c6c6f7765642073656040820152661b198b58d85b1b60ca1b606082015260800190565b60208082526024908201527f476f7665726e616e636541646d696e3a2073657420746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561165257611652614de7565b634e487b7160e01b600052603260045260246000fd5b600060018201614e3857614e38614de7565b5060010190565b60005b83811015614e5a578181015183820152602001614e42565b50506000910152565b60008251614e75818460208701614e3f565b9190910192915050565b6001600160e01b031991909116815260200190565b600060208284031215614ea657600080fd5b815161164f81614544565b6000808335601e19843603018112614ec857600080fd5b8301803591506001600160401b03821115614ee257600080fd5b6020019150600581901b360382131561439657600080fd5b808202811582820484141761165257611652614de7565b6000813561165281614544565b81358155600160208084013582840155600283016040850135601e19863603018112614f4957600080fd5b850180356001600160401b03811115614f6157600080fd5b83820191508060051b3603821315614f7857600080fd5b600160401b811115614f8c57614f8c614bcc565b825481845580821015614fc05760008481528581208381019083015b80821015614fbc5782825590880190614fa8565b5050505b50600092835260208320925b8181101561187a57614fdd83614f11565b84820155918401918501614fcc565b84815260208082018590526060604083018190528201839052600090849060808401835b8681101561503e57833561502381614544565b6001600160a01b031682529282019290820190600101615010565b5098975050505050505050565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b600082601f83011261508b57600080fd5b8135602061509b614c8d83614c5c565b82815260059290921b840181019181810190868411156150ba57600080fd5b8286015b848110156150de5780356150d181614544565b83529183019183016150be565b509695505050505050565b600082601f8301126150fa57600080fd5b8135602061510a614c8d83614c5c565b82815260059290921b8401810191818101908684111561512957600080fd5b8286015b848110156150de578035835291830191830161512d565b600082601f83011261515557600080fd5b61164f83833560208501614c7f565b600060e0823603121561517657600080fd5b61517e614be2565b82358152602080840135908201526040808401359082015260608301356001600160401b03808211156151b057600080fd5b6151bc3683870161507a565b606084015260808501359150808211156151d557600080fd5b6151e1368387016150e9565b608084015260a08501359150808211156151fa57600080fd5b61520636838701615144565b60a084015260c085013591508082111561521f57600080fd5b5061522c368286016150e9565b60c08301525092915050565b60008151808452615250816020860160208601614e3f565b601f01601f19169290920160200192915050565b60208152600061164f6020830184615238565b60006020828403121561528957600080fd5b5051919050565b600081518084526020808501945080840160005b838110156145d1578151875295820195908201906001016152a4565b600081518084526020808501808196508360051b8101915082860160005b858110156153085782840389526152f6848351615238565b988501989350908401906001016152de565b5091979650505050505050565b8051825260208101516020830152604081015160408301526000606082015160e0606085015261534860e0850182614598565b9050608083015184820360808601526153618282615290565b91505060a083015184820360a086015261537b82826152c0565b91505060c083015184820360c0860152610c408282615290565b6080815260006153a86080830187615315565b60208681850152838203604085015260c08201865183528187015182840152604087015160c0604085015281815180845260e0860191508483019350600092505b808310156154125783516153fc816145f2565b82529284019260019290920191908401906153e9565b5060608901519350848103606086015261542c8185615290565b93505050506080860151828203608084015261544882826152c0565b91505060a086015182820360a08401526154628282615290565b9350505050610c4060608301846001600160a01b03169052565b6020808252602f908201527f476f7665726e616e636541646d696e3a206361737420766f746520666f72206960408201526e1b9d985b1a59081c1c9bdc1bdcd85b608a1b606082015260800190565b600082601f8301126154dc57600080fd5b813560206154ec614c8d83614c5c565b82815260059290921b8401810191818101908684111561550b57600080fd5b8286015b848110156150de57803561552281614841565b835291830191830161550f565b600060c0823603121561554157600080fd5b615549614c0a565b823581526020808401359082015260408301356001600160401b038082111561557157600080fd5b61557d368387016154cb565b6040840152606085013591508082111561559657600080fd5b6155a2368387016150e9565b606084015260808501359150808211156155bb57600080fd5b6155c736838701615144565b608084015260a08501359150808211156155e057600080fd5b506155ed368286016150e9565b60a08301525092915050565b60ff811681146105fb57600080fd5b60006020828403121561561a57600080fd5b813561164f816155f9565b8135615630816155f9565b60ff811660ff198354161782555060208201356001820155604082013560028201555050565b6020808252818101527f436f7265476f7665726e616e63653a20696e76616c696420636861696e206964604082015260600190565b60408152600061569e6040830185615315565b905060018060a01b03831660208301529392505050565b8181038181111561165257611652614de7565b73024b9b7b630ba32b223b7bb32b93730b731b29d160651b8152600082516156f7816014850160208701614e3f565b6d08185b1c9958591e481d9bdd195960921b6014939091019283015250602201919050565b60208152600061164f6020830184614598565b60208082526026908201527f436f7265476f7665726e616e63653a20696e76616c69642070726f706f73616c604082015265206e6f6e636560d01b606082015260800190565b838152602081018390526060810161578c836145f2565b826040830152949350505050565b6000602082840312156157ac57600080fd5b813561164f81614841565b6000606082840312156157c957600080fd5b604051606081016001600160401b03811182821017156157eb576157eb614bcc565b60405282356157f9816155f9565b8152602083810135908201526040928301359281019290925250919050565b6f021b7b932a3b7bb32b93730b731b29d160851b815260008251615843816010850160208701614e3f565b6d08185b1c9958591e481d9bdd195960921b6010939091019283015250601e01919050565b60408101615875846145f2565b9281526020015290565b60008161588e5761588e614de7565b506000190190565b604080825283519082018190526000906020906060840190828701845b828110156158d15781511515845292840192908401906001016158b3565b50505083810382850152845180825282820190600581901b8301840187850160005b8381101561592157601f1986840301855261590f838351615238565b948701949250908601906001016158f3565b5090999850505050505050505056fea6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49526f6e696e476f7665726e616e636541646d696e3a20717565727920666f7220a57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd9424f73476f7665726e616e636550726f706f73616c3a20696e76616c69642073771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0ecaa2646970667358221220dcb8e065cc5e9c6d0b23d549a32cddb110ac8ca08f2ef51f62c0c9386df42e5c64736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ErrCallerMustBeBridgeContract()": [
        {
          "details": "Error of method caller must be bridge contract."
        }
      ],
      "ErrCallerMustBeRoninTrustedOrgContract()": [
        {
          "details": "Error of method caller must be Ronin trusted org contract."
        }
      ],
      "ErrCallerMustBeValidatorContract()": [
        {
          "details": "Error of method caller must be validator contract."
        }
      ],
      "ErrZeroCodeContract()": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bridgeContract()": {
        "details": "Returns the bridge contract."
      },
      "bridgeOperatorsVoted(uint256,uint256,address)": {
        "details": "Returns whether the voter `_voter` casted vote for bridge operators at a specific period."
      },
      "castGlobalProposalBySignatures((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_castGlobalProposalBySignatures`."
      },
      "castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_castProposalBySignatures`."
      },
      "castProposalVoteForCurrentNetwork((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8)": {
        "details": "Casts vote for a proposal on the current network. Requirements: - The method caller is governor."
      },
      "changeProxyAdmin(address,address)": {
        "details": "Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`."
      },
      "createEmergencyExitPoll(address,address,uint256,uint256)": {
        "details": "Create a vote to agree that an emergency exit is valid and should return the locked funds back.a Requirements: - The method caller is validator contract."
      },
      "deleteExpired(uint256,uint256)": {
        "details": "Deletes the expired proposal by its chainId and nonce, without creating a new proposal. Requirements: - The proposal is already created."
      },
      "emergencyPollVoted(bytes32,address)": {
        "details": "Returns whether the voter casted vote for emergency exit poll."
      },
      "getBridgeOperatorVotingSignatures(uint256,uint256)": {
        "details": "Returns the voted signatures for bridge operators at a specific period."
      },
      "getProposalExpiryDuration()": {
        "details": "Returns the proposal expiry duration."
      },
      "getProposalSignatures(uint256,uint256)": {
        "details": "Returns the voted signatures for the proposals. Note: The signatures can be empty in case the proposal is voted on the current network."
      },
      "getProxyAdmin(address)": {
        "details": "Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getProxyImplementation(address)": {
        "details": "Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "lastSyncedBridgeOperatorSetInfo()": {
        "details": "Returns the synced bridge operator set info."
      },
      "lastVotedBlock(address)": {
        "details": "Returns the last voted block of the bridge voter."
      },
      "proposalVoted(uint256,uint256,address)": {
        "details": "Returns whether the voter `_voter` casted vote for the proposal."
      },
      "propose(uint256,uint256,address[],uint256[],bytes[],uint256[])": {
        "details": "See `CoreGovernance-_proposeProposal`. Requirements: - The method caller is governor."
      },
      "proposeGlobal(uint256,uint8[],uint256[],bytes[],uint256[])": {
        "details": "See `CoreGovernance-_proposeGlobal`. Requirements: - The method caller is governor."
      },
      "proposeGlobalProposalStructAndCastVotes((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`. Requirements: - The method caller is governor."
      },
      "proposeProposalForCurrentNetwork(uint256,address[],uint256[],bytes[],uint256[],uint8)": {
        "details": "Proposes and casts vote for a proposal on the current network. Requirements: - The method caller is governor. - The proposal is for the current network."
      },
      "proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_proposeProposalStructAndCastVotes`. Requirements: - The method caller is governor. - The proposal is for the current network."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeContract(address)": {
        "details": "Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`."
      },
      "setProposalExpiryDuration(uint256)": {
        "details": "Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      },
      "voteBridgeOperatorsBySignatures((uint256,uint256,address[]),(uint8,bytes32,bytes32)[])": {
        "details": "See `BOsGovernanceProposal-_castVotesBySignatures`."
      },
      "voteEmergencyExit(bytes32,address,address,uint256,uint256)": {
        "details": "Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester. Requirements: - The voter is governor. - The voting is existent. - The voting is not expired yet."
      }
    },
    "stateVariables": {
      "_emergencyExitPoll": {
        "details": "Mapping from request hash => emergency poll"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "round(uint256)": {
        "notice": "chain id = 0 for global proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7413,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "round",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7421,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "vote",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)7339_storage))"
      },
      {
        "astId": 7423,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_proposalExpiryDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6735,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IRoninTrustedOrganization)10189"
      },
      {
        "astId": 6386,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_bridgeContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBridge)9212"
      },
      {
        "astId": 4545,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "roninChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4548,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 5882,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_lastSyncedBridgeOperatorSetInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(BridgeOperatorSet)12491_storage"
      },
      {
        "astId": 5890,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_bridgeOperatorVote",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)12992_storage))"
      },
      {
        "astId": 5895,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_lastVotedBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5905,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_bridgeVoterSig",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_struct(Signature)10569_storage)))"
      },
      {
        "astId": 7051,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IRoninValidatorSet)11980"
      },
      {
        "astId": 21527,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_emergencyExitPoll",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(Vote)12992_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)9212": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)10189": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninValidatorSet)11980": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_enum(VoteStatus)10578": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_struct(Signature)10569_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignatureConsumer.Signature)",
        "numberOfBytes": "32",
        "value": "t_struct(Signature)10569_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Vote)12992_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IsolatedGovernance.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)12992_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Signature)10569_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct SignatureConsumer.Signature))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Signature)10569_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_struct(Signature)10569_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => struct SignatureConsumer.Signature)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Signature)10569_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)7339_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalVote)7339_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)12992_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct IsolatedGovernance.Vote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vote)12992_storage)"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)7339_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreGovernance.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)7339_storage"
      },
      "t_mapping(t_uint256,t_struct(Vote)12992_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IsolatedGovernance.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)12992_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BridgeOperatorSet)12491_storage": {
        "encoding": "inplace",
        "label": "struct BridgeOperatorsBallot.BridgeOperatorSet",
        "members": [
          {
            "astId": 12485,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "period",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12487,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "epoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12490,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "operators",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalVote)7339_storage": {
        "encoding": "inplace",
        "label": "struct CoreGovernance.ProposalVote",
        "members": [
          {
            "astId": 7315,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10578"
          },
          {
            "astId": 7317,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 7319,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7321,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7324,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7327,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7329,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "expiryTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7334,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "sig",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Signature)10569_storage)"
          },
          {
            "astId": 7338,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voted",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Signature)10569_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConsumer.Signature",
        "members": [
          {
            "astId": 10564,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "v",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10566,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "r",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10568,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "s",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Vote)12992_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.Vote",
        "members": [
          {
            "astId": 12974,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10578"
          },
          {
            "astId": 12976,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 12981,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 12984,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "expiredAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12987,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12991,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}