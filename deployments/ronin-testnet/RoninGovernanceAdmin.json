{
  "address": "0x6D22328422509F4fe5539e34D15Bf44F47A9df9F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_proposalExpiryDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorsApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "globalProposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "globalProposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GlobalProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "successCalls",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "returnDatas",
          "type": "bytes[]"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Ballot.VoteType",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "bridgeOperatorsVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "castGlobalProposalBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "castProposalBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "changeProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "deleteExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        }
      ],
      "name": "getBridgeOperatorVotingSignatures",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalExpiryDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getProposalSignatures",
      "outputs": [
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeVoter",
          "type": "address"
        }
      ],
      "name": "lastVotedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "proposalVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum GlobalProposal.TargetOption[]",
          "name": "_targetOptions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "proposeGlobal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "proposeGlobalProposalStructAndCastVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "proposeProposalStructAndCastVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryDuration",
          "type": "uint256"
        }
      ],
      "name": "setProposalExpiryDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "againstVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "voteBridgeOperatorsBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7136b4f159e79a157e27c3947dfffb316808e63f6c552fdb5b6b888426e5bd28",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x6D22328422509F4fe5539e34D15Bf44F47A9df9F",
    "transactionIndex": 0,
    "gasUsed": "4245237",
    "logsBloom": "0x
    "blockHash": "0x07c7eeb3b703eaaee9d235e205ed7a1b95775c0ead27c36d6527db714c0e6d07",
    "transactionHash": "0x7136b4f159e79a157e27c3947dfffb316808e63f6c552fdb5b6b888426e5bd28",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12454562,
        "transactionHash": "0x7136b4f159e79a157e27c3947dfffb316808e63f6c552fdb5b6b888426e5bd28",
        "address": "0x6D22328422509F4fe5539e34D15Bf44F47A9df9F",
        "topics": [
          "0xfd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7"
        ],
        "data": "0x0000000000000000000000007f46c5dd5f13ff0dd973317411d70800db248e7d",
        "logIndex": 0,
        "blockHash": "0x07c7eeb3b703eaaee9d235e205ed7a1b95775c0ead27c36d6527db714c0e6d07"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12454562,
        "transactionHash": "0x7136b4f159e79a157e27c3947dfffb316808e63f6c552fdb5b6b888426e5bd28",
        "address": "0x6D22328422509F4fe5539e34D15Bf44F47A9df9F",
        "topics": [
          "0x5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048"
        ],
        "data": "0x000000000000000000000000cee681c9108c42c710c6a8a949307d5f13c9f3ca",
        "logIndex": 1,
        "blockHash": "0x07c7eeb3b703eaaee9d235e205ed7a1b95775c0ead27c36d6527db714c0e6d07"
      }
    ],
    "blockNumber": 12454562,
    "cumulativeGasUsed": "4245237",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7f46c5DD5f13FF0dd973317411d70800db248e7d",
    "0xCee681C9108c42C710c6A8A949307D5F13C9F3ca",
    1209600
  ],
  "numDeployments": 2,
  "solcInputHash": "306cfcffeca66af05c8925f3663c976b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalExpiryDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"globalProposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GlobalProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"bridgeOperatorsVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castGlobalProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"deleteExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"}],\"name\":\"getBridgeOperatorVotingSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getProposalSignatures\",\"outputs\":[{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeVoter\",\"type\":\"address\"}],\"name\":\"lastVotedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"proposalVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"_targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"proposeGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeGlobalProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryDuration\",\"type\":\"uint256\"}],\"name\":\"setProposalExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"voteBridgeOperatorsBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BridgeOperatorsApproved(uint256,address[])\":{\"details\":\"Emitted when the bridge operators are approved.\"}},\"kind\":\"dev\",\"methods\":{\"bridgeContract()\":{\"details\":\"Returns the bridge contract.\"},\"bridgeOperatorsVoted(uint256,address)\":{\"details\":\"Returns whether the voter `_voter` casted vote for bridge operators at a specific period.\"},\"castGlobalProposalBySignatures((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_castGlobalProposalBySignatures`.\"},\"castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_castProposalBySignatures`.\"},\"changeProxyAdmin(address,address)\":{\"details\":\"Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`.\"},\"deleteExpired(uint256,uint256)\":{\"details\":\"See `CoreGovernance-_deleteExpiredProposal`\"},\"getBridgeOperatorVotingSignatures(uint256,address[])\":{\"details\":\"Returns the voted signatures for bridge operators at a specific period. Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty. Please consider filtering for empty signatures after calling this function.\"},\"getProposalExpiryDuration()\":{\"details\":\"Returns the proposal expiry duration.\"},\"getProposalSignatures(uint256,uint256)\":{\"details\":\"Returns the voted signatures for the proposals.\"},\"getProxyAdmin(address)\":{\"details\":\"Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getProxyImplementation(address)\":{\"details\":\"Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"lastVotedBlock(address)\":{\"details\":\"Returns the last voted block of the bridge voter.\"},\"proposalVoted(uint256,uint256,address)\":{\"details\":\"Returns whether the voter `_voter` casted vote for the proposal.\"},\"propose(uint256,uint256,address[],uint256[],bytes[],uint256[])\":{\"details\":\"See `CoreGovernance-_proposeProposal`. Requirements: - The method caller is governor.\"},\"proposeGlobal(uint256,uint8[],uint256[],bytes[],uint256[])\":{\"details\":\"See `CoreGovernance-_proposeGlobal`. Requirements: - The method caller is governor.\"},\"proposeGlobalProposalStructAndCastVotes((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`. Requirements: - The method caller is governor.\"},\"proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_proposeProposalStructAndCastVotes`. Requirements: - The method caller is governor.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeContract(address)\":{\"details\":\"Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`.\"},\"setProposalExpiryDuration(uint256)\":{\"details\":\"Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"voteBridgeOperatorsBySignatures(uint256,address[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `BOsGovernanceProposal-_castVotesBySignatures`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"round(uint256)\":{\"notice\":\"chain id = 0 for global proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/RoninGovernanceAdmin.sol\":\"RoninGovernanceAdmin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/extensions/GovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport \\\"../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../extensions/collections/HasBridgeContract.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\nabstract contract GovernanceAdmin is CoreGovernance, HasRoninTrustedOrganizationContract, HasBridgeContract {\\n  /// @dev Domain separator\\n  bytes32 public constant DOMAIN_SEPARATOR = 0xf8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256b;\\n\\n  modifier onlySelfCall() {\\n    require(msg.sender == address(this), \\\"GovernanceAdmin: only allowed self-call\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    uint256 _proposalExpiryDuration\\n  ) CoreGovernance(_proposalExpiryDuration) {\\n    require(\\n      keccak256(\\n        abi.encode(\\n          keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n          keccak256(\\\"GovernanceAdmin\\\"), // name hash\\n          keccak256(\\\"1\\\"), // version hash\\n          keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", 2020)) // salt\\n        )\\n      ) == DOMAIN_SEPARATOR,\\n      \\\"GovernanceAdmin: invalid domain\\\"\\n    );\\n    _setRoninTrustedOrganizationContract(_roninTrustedOrganizationContract);\\n    _setBridgeContract(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external override onlySelfCall {\\n    require(_addr.code.length > 0, \\\"GovernanceAdmin: set to non-contract\\\");\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external override onlySelfCall {\\n    require(_addr.code.length > 0, \\\"GovernanceAdmin: set to non-contract\\\");\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   *\\n   * Requirements:\\n   * - Only allowing self-call to this method, since this contract does not have admin.\\n   *\\n   */\\n  function setProposalExpiryDuration(uint256 _expiryDuration) external onlySelfCall {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyImplementation(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(hex\\\"5c60da1b\\\");\\n    require(_success, \\\"GovernanceAdmin: proxy call `implementation()` failed\\\");\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the proposal expiry duration.\\n   */\\n  function getProposalExpiryDuration() external view returns (uint256) {\\n    return super._getProposalExpiryDuration();\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyAdmin(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(hex\\\"f851a440\\\");\\n    require(_success, \\\"GovernanceAdmin: proxy call `admin()` failed\\\");\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `_proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - This contract must be the current admin of `_proxy`.\\n   *\\n   */\\n  function changeProxyAdmin(address _proxy, address _newAdmin) external onlySelfCall {\\n    // bytes4(keccak256(\\\"changeAdmin(address)\\\"))\\n    (bool _success, ) = _proxy.call(abi.encodeWithSelector(0x8f283970, _newAdmin));\\n    require(_success, \\\"GovernanceAdmin: proxy call `changeAdmin(address)` failed\\\");\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getMinimumVoteWeight`.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IQuorum.minimumVoteWeight.selector)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `minimumVoteWeight()` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getTotalWeights`.\\n   */\\n  function _getTotalWeights() internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.totalWeights.selector)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `totalWeights()` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x07e179dc68e1d5a860b2b0c9f50730307ec681e3a32c1e41bca5cdcda5e3da51\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeContract.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\n\\ncontract HasBridgeContract is IHasBridgeContract, HasProxyAdmin {\\n  IBridge internal _bridgeContract;\\n\\n  modifier onlyBridgeContract() {\\n    require(bridgeContract() == msg.sender, \\\"HasBridgeContract: method caller must be bridge contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function bridgeContract() public view override returns (address) {\\n    return address(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external virtual override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasBridgeContract: set to non-contract\\\");\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function _setBridgeContract(address _addr) internal {\\n    _bridgeContract = IBridge(_addr);\\n    emit BridgeContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xf4dfa576336d50ab380c3310735575f8729cff0089813abb1a8506ad2cca0f00\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    require(\\n      roninTrustedOrganizationContract() == msg.sender,\\n      \\\"HasRoninTrustedOrganizationContract: method caller must be ronin trusted organization contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasRoninTrustedOrganizationContract: set to non-contract\\\");\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xbdfbd30aa984f10f191b21e4b790ff1872445c7387cf359aadd863aac6635507\",\"license\":\"MIT\"},\"contracts/extensions/isolated-governance/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract IsolatedGovernance is VoteStatusConsumer {\\n  struct IsolatedVote {\\n    VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev Mapping from receipt hash => vote weight\\n    mapping(bytes32 => uint256) weight;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function _castVote(\\n    IsolatedVote storage _proposal,\\n    address _voter,\\n    uint256 _voterWeight,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _hash\\n  ) internal virtual returns (VoteStatus _status) {\\n    if (_voted(_proposal, _voter)) {\\n      revert(\\n        string(abi.encodePacked(\\\"IsolatedGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\"))\\n      );\\n    }\\n\\n    // Record for voter\\n    _proposal.voteHashOf[_voter] = _hash;\\n    // Increase vote weight\\n    uint256 _weight = _proposal.weight[_hash] += _voterWeight;\\n\\n    if (_weight >= _minimumVoteWeight && _proposal.status == VoteStatus.Pending) {\\n      _proposal.status = VoteStatus.Approved;\\n      _proposal.finalHash = _hash;\\n    }\\n\\n    _status = _proposal.status;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(IsolatedVote storage _proposal, address _voter) internal view virtual returns (bool) {\\n    return _proposal.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0x0c84a1e18e5472ec179c0ccba6de642ad53e26a908f66f7fedc1f85499e2513c\",\"license\":\"MIT\"},\"contracts/extensions/isolated-governance/bridge-operator-governance/BOsGovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../extensions/isolated-governance/IsolatedGovernance.sol\\\";\\nimport \\\"../../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../../libraries/BridgeOperatorsBallot.sol\\\";\\nimport \\\"../../../interfaces/IRoninGovernanceAdmin.sol\\\";\\n\\nabstract contract BOsGovernanceProposal is SignatureConsumer, IsolatedGovernance, IRoninGovernanceAdmin {\\n  /// @dev The last period that the brige operators synced.\\n  uint256 internal _lastSyncedPeriod;\\n  /// @dev Mapping from period index => bridge operators vote\\n  mapping(uint256 => IsolatedVote) internal _vote;\\n\\n  /// @dev Mapping from bridge voter address => last block that the address voted\\n  mapping(address => uint256) internal _lastVotedBlock;\\n  /// @dev Mapping from period => voter => signatures\\n  mapping(uint256 => mapping(address => Signature)) internal _votingSig;\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256) {\\n    return _lastVotedBlock[_bridgeVoter];\\n  }\\n\\n  /**\\n   * @dev Votes for a set of bridge operators by signatures.\\n   *\\n   * Requirements:\\n   * - The period of voting is larger than the last synced period.\\n   * - The arrays are not empty.\\n   * - The signature signers are in order.\\n   *\\n   */\\n  function _castVotesBySignatures(\\n    address[] calldata _operators,\\n    Signature[] calldata _signatures,\\n    uint256 _period,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _domainSeperator\\n  ) internal {\\n    require(_period >= _lastSyncedPeriod, \\\"BOsGovernanceProposal: query for outdated period\\\");\\n    require(_operators.length > 0 && _signatures.length > 0, \\\"BOsGovernanceProposal: invalid array length\\\");\\n\\n    Signature memory _sig;\\n    address _signer;\\n    address _lastSigner;\\n    bytes32 _hash = BridgeOperatorsBallot.hash(_period, _operators);\\n    bytes32 _digest = ECDSA.toTypedDataHash(_domainSeperator, _hash);\\n    IsolatedVote storage _v = _vote[_period];\\n    bool _hasValidVotes;\\n\\n    for (uint256 _i = 0; _i < _signatures.length; _i++) {\\n      _sig = _signatures[_i];\\n      _signer = ECDSA.recover(_digest, _sig.v, _sig.r, _sig.s);\\n      require(_lastSigner < _signer, \\\"BOsGovernanceProposal: invalid order\\\");\\n      _lastSigner = _signer;\\n\\n      uint256 _weight = _getBridgeVoterWeight(_signer);\\n      if (_weight > 0) {\\n        _hasValidVotes = true;\\n        _lastVotedBlock[_signer] = block.number;\\n        _votingSig[_period][_signer] = _sig;\\n        if (_castVote(_v, _signer, _weight, _minimumVoteWeight, _hash) == VoteStatus.Approved) {\\n          return;\\n        }\\n      }\\n    }\\n\\n    require(_hasValidVotes, \\\"BOsGovernanceProposal: invalid signatures\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function _getBridgeVoterWeight(address _bridgeVoter) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xdaeae7aa91963ce5160cce59482eb1366a6d85692deaf7504a4b18735ff2cfd2\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/CoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/ChainTypeConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer, ChainTypeConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    address[] forVoteds; // Array of addresses voting for\\n    address[] againstVoteds; // Array of addresses voting against\\n    uint256 expiryTimestamp;\\n    mapping(address => Signature) sig;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when a proposal is created\\n  event GlobalProposalCreated(\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    bytes32 globalProposalHash,\\n    GlobalProposal.GlobalProposalDetail globalProposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is expired\\n  event ProposalExpired(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  uint256 private _proposalExpiryDuration;\\n\\n  constructor(uint256 _expiryDuration) {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Creates new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _createVotingRound(\\n    uint256 _chainId,\\n    bytes32 _proposalHash,\\n    uint256 _expiryTimestamp\\n  ) internal returns (uint256 _round) {\\n    _round = round[_chainId];\\n\\n    // Skip checking for the first ever round\\n    if (_round == 0) {\\n      _round = round[_chainId] = 1;\\n    } else {\\n      ProposalVote storage _latestProposalVote = vote[_chainId][_round];\\n      bool _isExpired = _tryDeleteExpiredVotingRound(_latestProposalVote);\\n      // Skip increase round number if the latest round is expired, allow the vote to be overridden\\n      if (!_isExpired) {\\n        require(_latestProposalVote.status != VoteStatus.Pending, \\\"CoreGovernance: current proposal is not completed\\\");\\n        _round = ++round[_chainId];\\n      }\\n    }\\n\\n    vote[_chainId][_round].hash = _proposalHash;\\n    vote[_chainId][_round].expiryTimestamp = _expiryTimestamp;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 _chainId,\\n    uint256 _expiryTimestamp,\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _creator\\n  ) internal virtual returns (uint256 _round) {\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n\\n    Proposal.ProposalDetail memory _proposal = Proposal.ProposalDetail(\\n      round[_chainId] + 1,\\n      _chainId,\\n      _expiryTimestamp,\\n      _targets,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId, _proposalHash, _expiryTimestamp);\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(Proposal.ProposalDetail memory _proposal, address _creator)\\n    internal\\n    virtual\\n    returns (uint256 _round)\\n  {\\n    uint256 _chainId = _proposal.chainId;\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId, _proposalHash, _proposal.expiryTimestamp);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes for a global proposal.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobal(\\n    uint256 _expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (uint256 _round) {\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal = GlobalProposal.GlobalProposalDetail(\\n      round[0] + 1,\\n      _expiryTimestamp,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(0, _proposalHash, _expiryTimestamp);\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes global proposal struct.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobalStruct(\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal, uint256 _round) {\\n    _proposal = _globalProposal.into_proposal_detail(_roninTrustedOrganizationContract, _gatewayContract);\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(0, _proposalHash, _globalProposal.expiryTimestamp);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support,\\n    uint256 _minimumForVoteWeight,\\n    uint256 _minimumAgainstVoteWeight,\\n    address _voter,\\n    Signature memory _signature,\\n    uint256 _voterWeight\\n  ) internal virtual returns (bool _done) {\\n    uint256 _chainId = _proposal.chainId;\\n    uint256 _round = _proposal.nonce;\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    if (_tryDeleteExpiredVotingRound(_vote)) {\\n      return true;\\n    }\\n\\n    require(round[_proposal.chainId] == _round, \\\"CoreGovernance: query for invalid proposal nonce\\\");\\n    require(_vote.status == VoteStatus.Pending, \\\"CoreGovernance: the vote is finalized\\\");\\n    if (_voted(_vote, _voter)) {\\n      revert(string(abi.encodePacked(\\\"CoreGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\")));\\n    }\\n\\n    _vote.sig[_voter] = _signature;\\n    emit ProposalVoted(_vote.hash, _voter, _support, _voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (_support == Ballot.VoteType.For) {\\n      _vote.forVoteds.push(_voter);\\n      _forVoteWeight = _vote.forVoteWeight += _voterWeight;\\n    } else if (_support == Ballot.VoteType.Against) {\\n      _vote.againstVoteds.push(_voter);\\n      _againstVoteWeight = _vote.againstVoteWeight += _voterWeight;\\n    } else {\\n      revert(\\\"CoreGovernance: unsupported vote type\\\");\\n    }\\n\\n    if (_forVoteWeight >= _minimumForVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n    } else if (_againstVoteWeight >= _minimumAgainstVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev Delete the expired proposal by its chainId and nonce, without creating a new proposal.\\n   */\\n  function _deleteExpiredVotingRound(uint256 _chainId, uint256 _round) internal {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n    _tryDeleteExpiredVotingRound(_vote);\\n  }\\n\\n  /**\\n   * @dev When the contract is on Ronin chain, checks whether the proposal is expired and delete it if is expired.\\n   */\\n  function _tryDeleteExpiredVotingRound(ProposalVote storage _proposalVote) private returns (bool _isExpired) {\\n    _isExpired = _getChainType() == ChainType.RoninChain && _proposalVote.expiryTimestamp <= block.timestamp;\\n\\n    if (_isExpired) {\\n      emit ProposalExpired(_proposalVote.hash);\\n\\n      for (uint256 _i; _i < _proposalVote.forVoteds.length; _i++) {\\n        delete _proposalVote.sig[_proposalVote.forVoteds[_i]];\\n      }\\n      for (uint256 _i; _i < _proposalVote.againstVoteds.length; _i++) {\\n        delete _proposalVote.sig[_proposalVote.againstVoteds[_i]];\\n      }\\n      delete _proposalVote.status;\\n      delete _proposalVote.hash;\\n      delete _proposalVote.againstVoteWeight;\\n      delete _proposalVote.forVoteWeight;\\n      delete _proposalVote.forVoteds;\\n      delete _proposalVote.againstVoteds;\\n      delete _proposalVote.expiryTimestamp;\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage _vote, Proposal.ProposalDetail memory _proposal) internal {\\n    if (_proposal.executable()) {\\n      _vote.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = _proposal.execute();\\n      emit ProposalExecuted(_vote.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   */\\n  function _setProposalExpiryDuration(uint256 _expiryDuration) internal {\\n    _proposalExpiryDuration = _expiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(ProposalVote storage _vote, address _voter) internal view returns (bool) {\\n    return _vote.sig[_voter].r != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function _getProposalExpiryDuration() internal view returns (uint256) {\\n    return _proposalExpiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeights() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns current context is running on whether Ronin chain or on mainchain.\\n   */\\n  function _getChainType() internal view virtual returns (ChainType);\\n}\\n\",\"keccak256\":\"0x1482e3b25beb0e0ff4143ac264fbda361ba91f58f563e570e4e72b87bdb81a11\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/GovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CoreGovernance.sol\\\";\\n\\nabstract contract GovernanceProposal is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Casts votes by signatures.\\n   *\\n   * Note: This method does not verify the proposal hash with the vote hash. Please consider checking it before.\\n   *\\n   */\\n  function _castVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    require(_supports.length > 0 && _supports.length == _signatures.length, \\\"GovernanceProposal: invalid array length\\\");\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n\\n    address _lastSigner;\\n    address _signer;\\n    Signature memory _sig;\\n    bool _hasValidVotes;\\n    for (uint256 _i; _i < _signatures.length; _i++) {\\n      _sig = _signatures[_i];\\n\\n      if (_supports[_i] == Ballot.VoteType.For) {\\n        _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n      } else if (_supports[_i] == Ballot.VoteType.Against) {\\n        _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n      } else {\\n        revert(\\\"GovernanceProposal: query for unsupported vote type\\\");\\n      }\\n\\n      require(_lastSigner < _signer, \\\"GovernanceProposal: invalid order\\\");\\n      _lastSigner = _signer;\\n\\n      uint256 _weight = _getWeight(_signer);\\n      if (_weight > 0) {\\n        _hasValidVotes = true;\\n        if (\\n          _castVote(_proposal, _supports[_i], _minimumForVoteWeight, _minimumAgainstVoteWeight, _signer, _sig, _weight)\\n        ) {\\n          return;\\n        }\\n      }\\n    }\\n\\n    require(_hasValidVotes, \\\"GovernanceProposal: invalid signatures\\\");\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator\\n  ) internal {\\n    bytes32 _proposalHash = _proposal.hash();\\n    require(\\n      vote[_proposal.chainId][_proposal.nonce].hash == _proposalHash,\\n      \\\"GovernanceAdmin: cast vote for invalid proposal\\\"\\n    );\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes and votes by signature.\\n   */\\n  function _proposeGlobalProposalStructAndCastVotes(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal returns (Proposal.ProposalDetail memory _proposal) {\\n    (_proposal, ) = _proposeGlobalStruct(\\n      _globalProposal,\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract,\\n      _creator\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a global proposal struct and casts votes by signature.\\n   */\\n  function _castGlobalProposalBySignatures(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal {\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    require(vote[0][_proposal.nonce].hash == _proposal.hash(), \\\"GovernanceAdmin: cast vote for invalid proposal\\\");\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function _getWeight(address _governor) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe75f250d5c7da8b2c8892b417ba0bc7e14542718802c00f4df556a663d8f6ae7\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoninGovernanceAdmin {\\n  /**\\n   * @dev Returns the last voted block of the bridge voter.\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf8bbda9f65a09444b3ebbcd19a62e39bf8711047224744f86439db6f42551b2\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasBridgeContract {\\n  /// @dev Emitted when the bridge contract is updated.\\n  event BridgeContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the bridge contract.\\n   */\\n  function bridgeContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function setBridgeContract(address) external;\\n}\\n\",\"keccak256\":\"0xb1c239a3987c93db20b65bb80f165861bc83a186fb8d5a1c17c5ad06cfb395a8\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasRoninTrustedOrganizationContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x8ec2782f28a2c41d8feee0c5f213ac66e327c3757eab8d85a09104f21587ff10\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/ChainTypeConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainTypeConsumer {\\n  enum ChainType {\\n    RoninChain,\\n    Mainchain\\n  }\\n}\\n\",\"keccak256\":\"0xe0d20e00c8d237f8e0fb881abf1ff1ef114173bcb428f06f689c581666a22db7\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected\\n  }\\n}\\n\",\"keccak256\":\"0xc2f5e7cf4fdc18b990b3829e4ba479cd7aa0c5ea553a39dc3f1bf2e9aaed38df\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/WeightedAddressConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface WeightedAddressConsumer {\\n  struct WeightedAddress {\\n    address addr;\\n    uint256 weight;\\n  }\\n}\\n\",\"keccak256\":\"0xc141bda51591ca368cf9263df1b10cdb298583a4fe5104160eeaa4cf39f32763\",\"license\":\"MIT\"},\"contracts/libraries/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 public constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n  }\\n}\\n\",\"keccak256\":\"0x28a0192db886307f30ada203bdb902749ee3f30d42710de4eaf303cba23c32c2\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/consumers/WeightedAddressConsumer.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xeea5e3908ac28cbdbbce8853e49444c558a0a03597e98ef19e6ff86162ed9ae3;\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(uint256 _period, address[] memory _operators) internal pure returns (bytes32) {\\n    bytes32 _operatorsHash;\\n    assembly {\\n      _operatorsHash := keccak256(add(_operators, 32), mul(mload(_operators), 32))\\n    }\\n\\n    return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _period, _operatorsHash));\\n  }\\n}\\n\",\"keccak256\":\"0xe90d38a54b9029912a3e58f58a595da8ea285d3775d1ad798651e94f7ec83ab6\",\"license\":\"MIT\"},\"contracts/libraries/GlobalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  enum TargetOption {\\n    RoninTrustedOrganizationContract,\\n    GatewayContract\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    uint256 expiryTimestamp;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint256 expiryTimestamp,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    TargetOption[] memory _targets = _proposal.targetOptions;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _proposal.nonce,\\n          _proposal.expiryTimestamp,\\n          _targetsHash,\\n          _valuesHash,\\n          _calldatasHash,\\n          _gasAmountsHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function into_proposal_detail(\\n    GlobalProposalDetail memory _proposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal pure returns (Proposal.ProposalDetail memory _detail) {\\n    _detail.nonce = _proposal.nonce;\\n    _detail.expiryTimestamp = _proposal.expiryTimestamp;\\n    _detail.chainId = 0;\\n    _detail.targets = new address[](_proposal.targetOptions.length);\\n    _detail.values = _proposal.values;\\n    _detail.calldatas = _proposal.calldatas;\\n    _detail.gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _proposal.targetOptions.length; _i++) {\\n      if (_proposal.targetOptions[_i] == TargetOption.GatewayContract) {\\n        _detail.targets[_i] = _gatewayContract;\\n      } else if (_proposal.targetOptions[_i] == TargetOption.RoninTrustedOrganizationContract) {\\n        _detail.targets[_i] = _roninTrustedOrganizationContract;\\n      } else {\\n        revert(\\\"GlobalProposal: unsupported target\\\");\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4749e811eebe029ac572b48e5c755bc852cc74e8234c5243a57f7536c3ed00e0\",\"license\":\"MIT\"},\"contracts/libraries/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Proposal {\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    uint256 expiryTimestamp;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,uint256 expiryTimestamp,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal, uint256 _maxExpiryDuration) internal view {\\n    require(\\n      _proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length,\\n      \\\"Proposal: invalid array length\\\"\\n    );\\n    require(_proposal.expiryTimestamp <= block.timestamp + _maxExpiryDuration, \\\"Proposal: invalid expiry timestamp\\\");\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _proposal.nonce,\\n          _proposal.chainId,\\n          _proposal.expiryTimestamp,\\n          _targetsHash,\\n          _valuesHash,\\n          _calldatasHash,\\n          _gasAmountsHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(ProposalDetail memory _proposal)\\n    internal\\n    returns (bool[] memory _successCalls, bytes[] memory _returnDatas)\\n  {\\n    require(executable(_proposal), \\\"Proposal: query for invalid chainId\\\");\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ++_i) {\\n      require(gasleft() > _proposal.gasAmounts[_i], \\\"Proposal: insufficient gas\\\");\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x96bf9eaea9a87a5eceed026a6eaedc74cf5dde6760f7e969d5b5974dad43ff80\",\"license\":\"MIT\"},\"contracts/ronin/RoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/isolated-governance/bridge-operator-governance/BOsGovernanceProposal.sol\\\";\\nimport \\\"../extensions/sequential-governance/GovernanceProposal.sol\\\";\\nimport \\\"../extensions/GovernanceAdmin.sol\\\";\\nimport \\\"../interfaces/IBridge.sol\\\";\\n\\ncontract RoninGovernanceAdmin is GovernanceAdmin, GovernanceProposal, BOsGovernanceProposal {\\n  /// @dev Emitted when the bridge operators are approved.\\n  event BridgeOperatorsApproved(uint256 _period, address[] _operators);\\n\\n  modifier onlyGovernor() {\\n    require(_getWeight(msg.sender) > 0, \\\"GovernanceAdmin: sender is not governor\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    uint256 _proposalExpiryDuration\\n  ) GovernanceAdmin(_roninTrustedOrganizationContract, _bridgeContract, _proposalExpiryDuration) {}\\n\\n  /**\\n   * @dev Returns the voted signatures for the proposals.\\n   *\\n   */\\n  function getProposalSignatures(uint256 _chainId, uint256 _round)\\n    external\\n    view\\n    returns (Ballot.VoteType[] memory _supports, Signature[] memory _signatures)\\n  {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    uint256 _forLength = _vote.forVoteds.length;\\n    uint256 _againstLength = _vote.againstVoteds.length;\\n    uint256 _voterLength = _forLength + _againstLength;\\n\\n    _supports = new Ballot.VoteType[](_voterLength);\\n    _signatures = new Signature[](_voterLength);\\n    for (uint256 _i; _i < _forLength; _i++) {\\n      _supports[_i] = Ballot.VoteType.For;\\n      _signatures[_i] = vote[_chainId][_round].sig[_vote.forVoteds[_i]];\\n    }\\n    for (uint256 _i; _i < _againstLength; _i++) {\\n      _supports[_i + _forLength] = Ballot.VoteType.Against;\\n      _signatures[_i + _forLength] = vote[_chainId][_round].sig[_vote.againstVoteds[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the voted signatures for bridge operators at a specific period.\\n   *\\n   * Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty.\\n   * Please consider filtering for empty signatures after calling this function.\\n   *\\n   */\\n  function getBridgeOperatorVotingSignatures(uint256 _period, address[] calldata _voters)\\n    external\\n    view\\n    returns (Signature[] memory _signatures)\\n  {\\n    _signatures = new Signature[](_voters.length);\\n    for (uint256 _i; _i < _voters.length; _i++) {\\n      _signatures[_i] = _votingSig[_period][_voters[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for the proposal.\\n   */\\n  function proposalVoted(\\n    uint256 _chainId,\\n    uint256 _round,\\n    address _voter\\n  ) external view returns (bool) {\\n    return _voted(vote[_chainId][_round], _voter);\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for bridge operators at a specific period.\\n   */\\n  function bridgeOperatorsVoted(uint256 _period, address _voter) external view returns (bool) {\\n    return _voted(_vote[_period], _voter);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_proposeProposal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function propose(\\n    uint256 _chainId,\\n    uint256 _expiryTimestamp,\\n    address[] calldata _targets,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeProposal(_chainId, _expiryTimestamp, _targets, _values, _calldatas, _gasAmounts, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_proposeProposalStructAndCastVotes`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeProposalStructAndCastVotes(_proposal, _supports, _signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_castProposalBySignatures`.\\n   */\\n  function castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castProposalBySignatures(_proposal, _supports, _signatures, DOMAIN_SEPARATOR);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_proposeGlobal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeGlobal(\\n    uint256 _expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeGlobal(\\n      _expiryTimestamp,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeGlobalProposalStructAndCastVotes(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeGlobalProposalStructAndCastVotes(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_castGlobalProposalBySignatures`.\\n   */\\n  function castGlobalProposalBySignatures(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castGlobalProposalBySignatures(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract()\\n    );\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_deleteExpiredProposal`\\n   */\\n  function deleteExpired(uint256 chainId, uint256 round) external {\\n    _deleteExpiredVotingRound(chainId, round);\\n  }\\n\\n  /**\\n   * @dev See `BOsGovernanceProposal-_castVotesBySignatures`.\\n   */\\n  function voteBridgeOperatorsBySignatures(\\n    uint256 _period,\\n    address[] calldata _operators,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castVotesBySignatures(_operators, _signatures, _period, _getMinimumVoteWeight(), DOMAIN_SEPARATOR);\\n    IsolatedVote storage _v = _vote[_period];\\n    if (_v.status == VoteStatus.Approved) {\\n      _lastSyncedPeriod = _period;\\n      emit BridgeOperatorsApproved(_period, _operators);\\n      _v.status = VoteStatus.Executed;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc GovernanceProposal\\n   */\\n  function _getWeight(address _governor) internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.getGovernorWeight.selector, _governor)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `getGovernorWeight(address)` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @inheritdoc BOsGovernanceProposal\\n   */\\n  function _getBridgeVoterWeight(address _governor) internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.getBridgeVoterWeight.selector, _governor)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `getBridgeVoterWeight(address)` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev See {CoreGovernance-_getChainType}\\n   */\\n  function _getChainType() internal pure override returns (ChainType) {\\n    return ChainType.RoninChain;\\n  }\\n}\\n\",\"keccak256\":\"0xb56e369ff4035b55e8f29b0162e729993d47abff785f25e58aabc1a50720f1d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004d4838038062004d48833981016040819052620000349162000288565b828282806200004281600255565b50604080516020808201839052601660608301527f524f4e494e5f474f5645524e414e43455f41444d494e000000000000000000006080808401919091526107e4838501528351808403909101815260a0830184528051908201207f599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf60c08401527f7e7935007966eb860f4a2ee3dcc9fd53fb3205ce2aa86b0126d4893d4d4c14b960e08401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6610100840152610120808401919091528351808403909101815261014090920190925280519101207ff8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256b14620001a55760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e616e636541646d696e3a20696e76616c696420646f6d61696e00604482015260640160405180910390fd5b620001b083620001c7565b620001bb826200021c565b505050505050620002c9565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7906020015b60405180910390a150565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae0489060200162000211565b80516001600160a01b03811681146200028357600080fd5b919050565b6000806000606084860312156200029e57600080fd5b620002a9846200026b565b9250620002b9602085016200026b565b9150604084015190509250925092565b614a6f80620002d96000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c80633644e515116100de578063a1819f9a11610097578063bc96180b11610071578063bc96180b146103c9578063cd596583146103d1578063f3b7dead146103e2578063fb4f6371146103f557600080fd5b8063a1819f9a14610348578063b384abef1461035b578063b5e337de146103b657600080fd5b80633644e515146102c05780635511cde1146102d557806356e237e8146102e65780637eff275e146102f9578063988ef53c1461030c5780639a7d33821461033557600080fd5b8063204e1c7a11610130578063204e1c7a1461020e5780632c5e6520146102395780632e96a6fb1461024c5780632faf925d1461025f578063332635be1461027257806334d5f37b1461029257600080fd5b80624054b814610177578063055c68891461018c57806309fcd8c7146101b45780630b26cf66146101c75780630b881830146101da5780631c905e39146101ed575b600080fd5b61018a610185366004613949565b610408565b005b61019f61019a3660046139fa565b61045d565b60405190151581526020015b60405180910390f35b61018a6101c2366004613a2a565b61048f565b61018a6101d5366004613af9565b610558565b61018a6101e8366004613949565b6105ad565b6102006101fb366004613b16565b6105c9565b6040516101ab929190613bb2565b61022161021c366004613af9565b6108c7565b6040516001600160a01b0390911681526020016101ab565b61019f610247366004613c12565b6109b9565b61018a61025a366004613c4b565b6109ef565b61018a61026d366004613c64565b610a17565b610285610280366004613ca7565b610a51565b6040516101ab9190613cf2565b6102b26102a0366004613c4b565b60006020819052908152604090205481565b6040519081526020016101ab565b6102b2600080516020614a1a83398151915281565b6003546001600160a01b0316610221565b61018a6102f4366004613d05565b610b82565b61018a610307366004613d3b565b610c26565b6102b261031a366004613af9565b6001600160a01b031660009081526007602052604090205490565b61018a610343366004613b16565b610d57565b61018a610356366004613d69565b610d65565b6103a5610369366004613b16565b600160208181526000938452604080852090915291835291208054918101546002820154600383015460069093015460ff909416939192909185565b6040516101ab959493929190613e42565b61018a6103c4366004613af9565b610e4b565b6102b2610e9d565b6004546001600160a01b0316610221565b6102216103f0366004613af9565b610ead565b61018a610403366004613c64565b610f7a565b600061041333610fdd565b116104395760405162461bcd60e51b815260040161043090613e77565b60405180910390fd5b6104568585858585600080516020614a1a83398151915233611151565b5050505050565b60008281526006602090815260408083206001600160a01b038516845260020190915281205415155b90505b92915050565b600061049a33610fdd565b116104b75760405162461bcd60e51b815260040161043090613e77565b61054c8989898989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506104fd92508a91508b9050614041565b87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061053a9250610b73915050565b6004546001600160a01b0316336111bb565b50505050505050505050565b3330146105775760405162461bcd60e51b81526004016104309061404e565b6000816001600160a01b03163b116105a15760405162461bcd60e51b815260040161043090614095565b6105aa816112f0565b50565b6104568585858585600080516020614a1a833981519152611345565b600082815260016020908152604080832084845290915281206004810154600582015460609384939291906105fe82846140ef565b9050806001600160401b0381111561061857610618613ebe565b604051908082528060200260200182016040528015610641578160200160208202803683370190505b509550806001600160401b0381111561065c5761065c613ebe565b6040519080825280602002602001820160405280156106a757816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161067a5790505b50945060005b838110156107aa5760008782815181106106c9576106c9614102565b602002602001019060018111156106e2576106e2613b38565b908160018111156106f5576106f5613b38565b90525060008981526001602090815260408083208b84529091528120600487018054600790920192918490811061072e5761072e614102565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff1681526001820154938101939093526002015490820152865187908390811061078c5761078c614102565b602002602001018190525080806107a290614118565b9150506106ad565b5060005b828110156108bb576001876107c386846140ef565b815181106107d3576107d3614102565b602002602001019060018111156107ec576107ec613b38565b908160018111156107ff576107ff613b38565b90525060008981526001602090815260408083208b84529091528120600587018054600790920192918490811061083857610838614102565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff16815260018201549381019390935260020154908201528661088d86846140ef565b8151811061089d5761089d614102565b602002602001018190525080806108b390614118565b9150506107ae565b50505050509250929050565b6000806000836001600160a01b03166040516108ed90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d8060008114610928576040519150601f19603f3d011682016040523d82523d6000602084013e61092d565b606091505b50915091508161099d5760405162461bcd60e51b815260206004820152603560248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060696d706044820152741b195b595b9d185d1a5bdb8a0a580819985a5b1959605a1b6064820152608401610430565b808060200190518101906109b19190614131565b949350505050565b600083815260016020818152604080842086855282528084206001600160a01b03861685526007019091528220015415156109b1565b333014610a0e5760405162461bcd60e51b81526004016104309061404e565b6105aa81600255565b6104568585858585600080516020614a1a833981519152610a406003546001600160a01b031690565b6004546001600160a01b03166113cc565b6060816001600160401b03811115610a6b57610a6b613ebe565b604051908082528060200260200182016040528015610ab657816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610a895790505b50905060005b82811015610b6b57600085815260086020526040812090858584818110610ae557610ae5614102565b9050602002016020810190610afa9190613af9565b6001600160a01b0316815260208082019290925260409081016000208151606081018352815460ff16815260018201549381019390935260020154908201528251839083908110610b4d57610b4d614102565b60200260200101819052508080610b6390614118565b915050610abc565b509392505050565b6003546001600160a01b031690565b610ba68484848489610b92611480565b600080516020614a1a8339815191526115ec565b60008581526006602052604090206001815460ff166003811115610bcc57610bcc613b38565b03610c1e5760058690556040517f1599b04a1104d19ef534dc177f3de0164ef5e4b99fad7485eda134600fca5f0290610c0a9088908890889061414e565b60405180910390a1805460ff191660021781555b505050505050565b333014610c455760405162461bcd60e51b81526004016104309061404e565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b1790529151600092851691610c99916141ca565b6000604051808303816000865af19150503d8060008114610cd6576040519150601f19603f3d011682016040523d82523d6000602084013e610cdb565b606091505b5050905080610d525760405162461bcd60e51b815260206004820152603960248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206063686160448201527f6e676541646d696e28616464726573732960206661696c6564000000000000006064820152608401610430565b505050565b610d618282611924565b5050565b6000610d7033610fdd565b11610d8d5760405162461bcd60e51b815260040161043090613e77565b610e3e8a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250610e0392508a91508b9050614041565b87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061194c915050565b5050505050505050505050565b333014610e6a5760405162461bcd60e51b81526004016104309061404e565b6000816001600160a01b03163b11610e945760405162461bcd60e51b815260040161043090614095565b6105aa81611a64565b6000610ea860025490565b905090565b6000806000836001600160a01b0316604051610ed3906303e1469160e61b815260040190565b600060405180830381855afa9150503d8060008114610f0e576040519150601f19603f3d011682016040523d82523d6000602084013e610f13565b606091505b50915091508161099d5760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206061646d60448201526b1a5b8a0a580819985a5b195960a21b6064820152608401610430565b6000610f8533610fdd565b11610fa25760405162461bcd60e51b815260040161043090613e77565b610c1e8585858585600080516020614a1a833981519152610fcb6003546001600160a01b031690565b6004546001600160a01b031633611ab2565b6000806000610ff46003546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316631af0725f60e31b1790529251931692634bb5274a9261104c929101614212565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161108591906141ca565b600060405180830381855afa9150503d80600081146110c0576040519150601f19603f3d011682016040523d82523d6000602084013e6110c5565b606091505b50915091508161113d5760405162461bcd60e51b815260206004820152603f60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f476f7665726e6f7257656967687428616464726573732960206661696c6564006064820152608401610430565b808060200190518101906109b19190614225565b61116361115d88614328565b82611b15565b50600061117761117289614328565b611bfd565b90506111b161118589614328565b8888888861119d89611198896000611d9c565b611df2565b6111ac8a6111988a6001611d9c565b611e19565b5050505050505050565b6040805160c08101909152600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5549091829181906112039060016140ef565b81526020018c81526020018b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082018b9052604082018a90526060909101889052909150611267828787612172565b905061127e6002548261233890919063ffffffff16565b600061128982611bfd565b90506112976000828f612434565b935080847f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca846112c687612562565b878a6040516112d89493929190614544565b60405180910390a35050509998505050505050505050565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b600061135361117288614328565b6020808901356000908152600180835260408083208c358452909352919020015490915081146113955760405162461bcd60e51b81526004016104309061462b565b6113c36113a188614328565b878787876113b488611198896000611d9c565b6111ac896111988a6001611d9c565b50505050505050565b60006113e383836113dc8c6146eb565b9190612172565b905060006113f86113f38b6146eb565b612562565b905061140382611bfd565b600080805260016020818152855183527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb499052604090912001541461145a5760405162461bcd60e51b81526004016104309061462b565b61054c828a8a8a8a6114718b611198896000611d9c565b6111ac8c6111988a6001611d9c565b60008060006114976003546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b0316637de5dedd60e01b17905291516001600160a01b039390931692634bb5274a926114e0929101614212565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161151991906141ca565b600060405180830381855afa9150503d8060008114611554576040519150601f19603f3d011682016040523d82523d6000602084013e611559565b606091505b5091509150816115d15760405162461bcd60e51b815260206004820152603860248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c20606d696e60448201527f696d756d566f7465576569676874282960206661696c656400000000000000006064820152608401610430565b808060200190518101906115e59190614225565b9250505090565b6005548310156116575760405162461bcd60e51b815260206004820152603060248201527f424f73476f7665726e616e636550726f706f73616c3a20717565727920666f7260448201526f081bdd5d19185d1959081c195c9a5bd960821b6064820152608401610430565b851580159061166557508315155b6116c55760405162461bcd60e51b815260206004820152602b60248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b6064820152608401610430565b60408051606081018252600080825260208201819052918101919091526000806000611724878c8c808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506126bc92505050565b905060006117328683611df2565b6000898152600660205260408120919250805b8b8110156118b4578c8c8281811061175f5761175f614102565b90506060020180360381019061177591906147b5565b975061178f8489600001518a602001518b6040015161271d565b9650866001600160a01b0316866001600160a01b0316106117fe5760405162461bcd60e51b8152602060048201526024808201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206f604482015263393232b960e11b6064820152608401610430565b869550600061180c88612745565b905080156118a1576001600160a01b03881660008181526007602090815260408083204390558f835260088252808320938352928152908290208b51815460ff191660ff909116178155908b0151600180830191909155918b015160029091015592508261187d858a848f8b6128b0565b600381111561188e5761188e613b38565b036118a1575050505050505050506113c3565b50806118ac81614118565b915050611745565b50806119145760405162461bcd60e51b815260206004820152602960248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964207360448201526869676e61747572657360b81b6064820152608401610430565b5050505050505050505050505050565b60008281526001602090815260408083208484529091529020611946816129ac565b50505050565b60008760000361199e5760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e2069646044820152606401610430565b6040805160e08101825260008a815260208190529182205481906119c39060016140ef565b81526020018a8152602001898152602001888152602001878152602001868152602001858152509050611a016002548261233890919063ffffffff16565b6000611a0c82611bfd565b9050611a198a828b612434565b925080838b7fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98588604051611a4f92919061481c565b60405180910390a45050979650505050505050565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d79060200161133a565b611aba61384b565b611ace611ac68b6146eb565b858585612b18565b5090506000611adf6113f38c6146eb565b9050611b07828b8b8b8b611af88c611198896000611d9c565b6111ac8d6111988a6001611d9c565b509998505050505050505050565b6020820151600090808203611b6c5760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e2069646044820152606401610430565b600254611b7a908590612338565b6000611b8585611bfd565b9050611b9682828760400151612434565b85519093508314611bb95760405162461bcd60e51b815260040161043090614846565b8083837fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98888604051611bed92919061481c565b60405180910390a4505092915050565b6000806000806000808660800151905060008760600151905060008860a00151516001600160401b03811115611c3557611c35613ebe565b604051908082528060200260200182016040528015611c5e578160200160208202803683370190505b5060c08a015190915060005b8251811015611cc7578a60a001518181518110611c8957611c89614102565b602002602001015180519060200120838281518110611caa57611caa614102565b602090810291909101015280611cbf81614118565b915050611c6a565b506020835102602084012097506020845102602085012096506020825102602083012095506020815102602082012094507fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a60001b8a600001518b602001518c604001518b8b8b8b604051602001611d77989796959493929190978852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b6040516020818303038152906040528051906020012098505050505050505050919050565b604051600090611dd4907fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2908590859060200161488c565b60405160208183030381529060405280519060200120905092915050565b60405161190160f01b60208201526022810183905260428101829052600090606201611dd4565b8415801590611e2757508483145b611e845760405162461bcd60e51b815260206004820152602860248201527f476f7665726e616e636550726f706f73616c3a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b6064820152608401610430565b6000611e8e611480565b9050600081611e9b612bd5565b611ea591906148b1565b611eb09060016140ef565b9050600080611ed8604080516060810182526000808252602082018190529181019190915290565b6000805b89811015612106578a8a82818110611ef657611ef6614102565b905060600201803603810190611f0c91906147b5565b925060008d8d83818110611f2257611f22614102565b9050602002016020810190611f3791906148c4565b6001811115611f4857611f48613b38565b03611f6c57611f658984600001518560200151866040015161271d565b9350612027565b60018d8d83818110611f8057611f80614102565b9050602002016020810190611f9591906148c4565b6001811115611fa657611fa6613b38565b03611fc357611f658884600001518560200151866040015161271d565b60405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636550726f706f73616c3a20717565727920666f7220756e604482015272737570706f7274656420766f7465207479706560681b6064820152608401610430565b836001600160a01b0316856001600160a01b0316106120925760405162461bcd60e51b815260206004820152602160248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964206f7264656044820152603960f91b6064820152608401610430565b83945060006120a085610fdd565b905080156120f357600192506120e18f8f8f858181106120c2576120c2614102565b90506020020160208101906120d791906148c4565b8a8a898987612d1c565b156120f35750505050505050506113c3565b50806120fe81614118565b915050611edc565b50806121635760405162461bcd60e51b815260206004820152602660248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964207369676e60448201526561747572657360d01b6064820152608401610430565b50505050505050505050505050565b61217a61384b565b83518152602080850151604080840191909152600091830191909152840151516001600160401b038111156121b1576121b1613ebe565b6040519080825280602002602001820160405280156121da578160200160208202803683370190505b5060608083019190915284015160808083019190915284015160a08083019190915284015160c082015260005b846040015151811015610b6b5760018560400151828151811061222c5761222c614102565b6020026020010151600181111561224557612245613b38565b0361228657828260600151828151811061226157612261614102565b60200260200101906001600160a01b031690816001600160a01b031681525050612326565b60008560400151828151811061229e5761229e614102565b602002602001015160018111156122b7576122b7613b38565b036122d357838260600151828151811061226157612261614102565b60405162461bcd60e51b815260206004820152602260248201527f476c6f62616c50726f706f73616c3a20756e737570706f727465642074617267604482015261195d60f21b6064820152608401610430565b8061233081614118565b915050612207565b60008260600151511180156123565750816080015151826060015151145b801561236b57508160a0015151826060015151145b801561238057508160c0015151826060015151145b6123cc5760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c3a20696e76616c6964206172726179206c656e67746800006044820152606401610430565b6123d681426140ef565b82604001511115610d615760405162461bcd60e51b815260206004820152602260248201527f50726f706f73616c3a20696e76616c6964206578706972792074696d6573746160448201526106d760f41b6064820152608401610430565b6000838152602081905260408120549081900361246557506000838152602081905260409020600190819055612535565b6000848152600160209081526040808320848452909152812090612488826129ac565b905080612532576000825460ff1660038111156124a7576124a7613b38565b0361250e5760405162461bcd60e51b815260206004820152603160248201527f436f7265476f7665726e616e63653a2063757272656e742070726f706f73616c604482015270081a5cc81b9bdd0818dbdb5c1b195d1959607a1b6064820152608401610430565b6000868152602081905260408120805490919061252a90614118565b918290555092505b50505b60009384526001602081815260408087208488529091529094209384019290925560069092019190915590565b6000806000806000808660600151905060008760400151905060008860800151516001600160401b0381111561259a5761259a613ebe565b6040519080825280602002602001820160405280156125c3578160200160208202803683370190505b5060a08a015190915060005b825181101561262c578a6080015181815181106125ee576125ee614102565b60200260200101518051906020012083828151811061260f5761260f614102565b60209081029190910101528061262481614118565b9150506125cf565b5082516020908102848201208551820286830120845183028584012084518402858501208e518f860151604080517f1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee911413509881019890985287019190915260608601526080850184905260a0850183905260c0850182905260e08501819052929b509099509750955061010001611d77565b8051602090810291810191909120604080517feea5e3908ac28cbdbbce8853e49444c558a0a03597e98ef19e6ff86162ed9ae38185015280820194909452606080850192909252805180850390920182526080909301909252815191012090565b600080600061272e878787876130e3565b9150915061273b816131d0565b5095945050505050565b600080600061275c6003546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316635624191160e01b1790529251931692634bb5274a926127b4929101614212565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516127ed91906141ca565b600060405180830381855afa9150503d8060008114612828576040519150601f19603f3d011682016040523d82523d6000602084013e61282d565b606091505b50915091508161113d5760405162461bcd60e51b815260206004820152604260248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f427269646765566f74657257656967687428616464726573732960206661696c606482015261195960f21b608482015260a401610430565b6001600160a01b03841660009081526002860160205260408120541561291a576128e4856001600160a01b03166014613386565b6040516020016128f491906148e1565b60408051601f198184030181529082905262461bcd60e51b825261043091600401614212565b6001600160a01b03851660009081526002870160209081526040808320859055848352600389019091528120805486919083906129589084906140ef565b925050819055905083811015801561298557506000875460ff16600381111561298357612983613b38565b145b1561299d57865460ff19166001908117885587018390555b5050935460ff16949350505050565b60068101544210801590612b135760018201546040517f58f98006a7f2f253f8ae8f8b7cec9008ca05359633561cd7c22f3005682d4a5590600090a260005b6004830154811015612a5b57826007016000846004018381548110612a1257612a12614102565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181018290556002015580612a5381614118565b9150506129eb565b5060005b6005830154811015612acf57826007016000846005018381548110612a8657612a86614102565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181018290556002015580612ac781614118565b915050612a5f565b50815460ff191682556000600183018190556002830181905560038301819055612afd906004840190613888565b612b0b600583016000613888565b600060068301555b919050565b612b2061384b565b6000612b2d868686612172565b9150612b446002548361233890919063ffffffff16565b6000612b4f83611bfd565b9050612b616000828960200151612434565b83519092508214612b845760405162461bcd60e51b815260040161043090614846565b80827f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca85612bb18b612562565b8b89604051612bc39493929190614544565b60405180910390a35094509492505050565b6000806000612bec6003546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b031663926323d560e01b17905291516001600160a01b039390931692634bb5274a92612c35929101614212565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612c6e91906141ca565b600060405180830381855afa9150503d8060008114612ca9576040519150601f19603f3d011682016040523d82523d6000602084013e612cae565b606091505b5091509150816115d15760405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060746f74604482015272185b15d95a59da1d1cca0a580819985a5b1959606a1b6064820152608401610430565b60208088015188516000828152600184526040808220838352909452928320612d44816129ac565b15612d5557600193505050506130d8565b6020808c015160009081529081905260409020548214612dd05760405162461bcd60e51b815260206004820152603060248201527f436f7265476f7665726e616e63653a20717565727920666f7220696e76616c6960448201526f642070726f706f73616c206e6f6e636560801b6064820152608401610430565b6000815460ff166003811115612de857612de8613b38565b14612e435760405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a2074686520766f74652069732066696e616044820152641b1a5e995960da1b6064820152608401610430565b6001600160a01b038716600090815260078201602052604090206001015415612e8a57612e7a876001600160a01b03166014613386565b6040516020016128f49190614935565b6001600160a01b03871660008181526007830160209081526040918290208951815460ff191660ff909116178155908901516001808301919091558983015160029092019190915583015490517f1203f9e81c814a35f5f4cc24087b2a24c6fb7986a9f1406b68a9484882c93a2390612f06908e908a90614985565b60405180910390a3600080808c6001811115612f2457612f24613b38565b03612f79576004830180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038c16179055600384018054899290612f6c9084906140ef565b9250508190559150613038565b60018c6001811115612f8d57612f8d613b38565b03612fe2576005830180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038c16179055600284018054899290612fd59084906140ef565b9250508190559050613038565b60405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a20756e737570706f7274656420766f7465604482015264207479706560d81b6064820152608401610430565b8a821061308c57825460ff19166001908117845580840154604051919750907f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a2613087838e613521565b6130d2565b8981106130d257825460ff19166003178355600180840154604051919750907f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25b50505050505b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561311a57506000905060036131c7565b8460ff16601b1415801561313257508460ff16601c14155b1561314357506000905060046131c7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613197573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166131c0576000600192509250506131c7565b9150600090505b94509492505050565b60008160048111156131e4576131e4613b38565b036131ec5750565b600181600481111561320057613200613b38565b0361324d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610430565b600281600481111561326157613261613b38565b036132ae5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610430565b60038160048111156132c2576132c2613b38565b0361331a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610430565b600481600481111561332e5761332e613b38565b036105aa5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610430565b6060600061339583600261499c565b6133a09060026140ef565b6001600160401b038111156133b7576133b7613ebe565b6040519080825280601f01601f1916602001820160405280156133e1576020820181803683370190505b509050600360fc1b816000815181106133fc576133fc614102565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061342b5761342b614102565b60200101906001600160f81b031916908160001a905350600061344f84600261499c565b61345a9060016140ef565b90505b60018111156134d2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061348e5761348e614102565b1a60f81b8282815181106134a4576134a4614102565b60200101906001600160f81b031916908160001a90535060049490941c936134cb816149b3565b905061345d565b5083156104865760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610430565b61352a8161358e565b15610d6157815460ff19166002178255600080613546836135a8565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba83836040516135809291906149ca565b60405180910390a250505050565b600081602001516000148061048957505060200151461490565b6060806135b48361358e565b61360c5760405162461bcd60e51b815260206004820152602360248201527f50726f706f73616c3a20717565727920666f7220696e76616c696420636861696044820152621b925960ea1b6064820152608401610430565b8260600151516001600160401b0381111561362957613629613ebe565b604051908082528060200260200182016040528015613652578160200160208202803683370190505b5091508260600151516001600160401b0381111561367257613672613ebe565b6040519080825280602002602001820160405280156136a557816020015b60608152602001906001900390816136905790505b50905060005b836060015151811015613845578360c0015181815181106136ce576136ce614102565b60200260200101515a116137245760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c3a20696e73756666696369656e74206761730000000000006044820152606401610430565b8360600151818151811061373a5761373a614102565b60200260200101516001600160a01b03168460800151828151811061376157613761614102565b60200260200101518560c00151838151811061377f5761377f614102565b6020026020010151908660a00151848151811061379e5761379e614102565b60200260200101516040516137b391906141ca565b600060405180830381858888f193505050503d80600081146137f1576040519150601f19603f3d011682016040523d82523d6000602084013e6137f6565b606091505b5084838151811061380957613809614102565b6020026020010184848151811061382257613822614102565b6020908102919091010191909152901515905261383e81614118565b90506136ab565b50915091565b6040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b50805460008255906000526020600020908101906105aa91905b808211156138b657600081556001016138a2565b5090565b60008083601f8401126138cc57600080fd5b5081356001600160401b038111156138e357600080fd5b6020830191508360208260051b85010111156138fe57600080fd5b9250929050565b60008083601f84011261391757600080fd5b5081356001600160401b0381111561392e57600080fd5b6020830191508360206060830285010111156138fe57600080fd5b60008060008060006060868803121561396157600080fd5b85356001600160401b038082111561397857600080fd5b9087019060e0828a03121561398c57600080fd5b909550602087013590808211156139a257600080fd5b6139ae89838a016138ba565b909650945060408801359150808211156139c757600080fd5b506139d488828901613905565b969995985093965092949392505050565b6001600160a01b03811681146105aa57600080fd5b60008060408385031215613a0d57600080fd5b823591506020830135613a1f816139e5565b809150509250929050565b600080600080600080600080600060a08a8c031215613a4857600080fd5b8935985060208a01356001600160401b0380821115613a6657600080fd5b613a728d838e016138ba565b909a50985060408c0135915080821115613a8b57600080fd5b613a978d838e016138ba565b909850965060608c0135915080821115613ab057600080fd5b613abc8d838e016138ba565b909650945060808c0135915080821115613ad557600080fd5b50613ae28c828d016138ba565b915080935050809150509295985092959850929598565b600060208284031215613b0b57600080fd5b8135610486816139e5565b60008060408385031215613b2957600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b600281106105aa576105aa613b38565b600081518084526020808501945080840160005b83811015613ba7578151805160ff16885283810151848901526040908101519088015260609096019590820190600101613b72565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b82811015613bf4578151613be281613b4e565b84529284019290840190600101613bcf565b50505083810382850152613c088186613b5e565b9695505050505050565b600080600060608486031215613c2757600080fd5b83359250602084013591506040840135613c40816139e5565b809150509250925092565b600060208284031215613c5d57600080fd5b5035919050565b600080600080600060608688031215613c7c57600080fd5b85356001600160401b0380821115613c9357600080fd5b9087019060c0828a03121561398c57600080fd5b600080600060408486031215613cbc57600080fd5b8335925060208401356001600160401b03811115613cd957600080fd5b613ce5868287016138ba565b9497909650939450505050565b6020815260006104866020830184613b5e565b600080600080600060608688031215613d1d57600080fd5b8535945060208601356001600160401b03808211156139a257600080fd5b60008060408385031215613d4e57600080fd5b8235613d59816139e5565b91506020830135613a1f816139e5565b60008060008060008060008060008060c08b8d031215613d8857600080fd5b8a35995060208b0135985060408b01356001600160401b0380821115613dad57600080fd5b613db98e838f016138ba565b909a50985060608d0135915080821115613dd257600080fd5b613dde8e838f016138ba565b909850965060808d0135915080821115613df757600080fd5b613e038e838f016138ba565b909650945060a08d0135915080821115613e1c57600080fd5b50613e298d828e016138ba565b915080935050809150509295989b9194979a5092959850565b60a0810160048710613e5657613e56613b38565b95815260208101949094526040840192909252606083015260809091015290565b60208082526027908201527f476f7665726e616e636541646d696e3a2073656e646572206973206e6f74206760408201526637bb32b93737b960c91b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715613ef657613ef6613ebe565b60405290565b60405160c081016001600160401b0381118282101715613ef657613ef6613ebe565b604051601f8201601f191681016001600160401b0381118282101715613f4657613f46613ebe565b604052919050565b60006001600160401b03821115613f6757613f67613ebe565b5060051b60200190565b6000613f84613f7f84613f4e565b613f1e565b8381529050602080820190600585901b840186811115613fa357600080fd5b845b818110156140365780356001600160401b0380821115613fc55760008081fd5b8188019150601f8a81840112613fdb5760008081fd5b823582811115613fed57613fed613ebe565b613ffe818301601f19168801613f1e565b92508083528b8782860101111561401757600091508182fd5b8087850188850137600090830187015250855250928201928201613fa5565b505050509392505050565b6000610486368484613f71565b60208082526027908201527f476f7665726e616e636541646d696e3a206f6e6c7920616c6c6f7765642073656040820152661b198b58d85b1b60ca1b606082015260800190565b60208082526024908201527f476f7665726e616e636541646d696e3a2073657420746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610489576104896140d9565b634e487b7160e01b600052603260045260246000fd5b60006001820161412a5761412a6140d9565b5060010190565b60006020828403121561414357600080fd5b8151610486816139e5565b83815260406020808301829052908201839052600090849060608401835b8681101561419a57833561417f816139e5565b6001600160a01b03168252928201929082019060010161416c565b50979650505050505050565b60005b838110156141c15781810151838201526020016141a9565b50506000910152565b600082516141dc8184602087016141a6565b9190910192915050565b600081518084526141fe8160208601602086016141a6565b601f01601f19169290920160200192915050565b60208152600061048660208301846141e6565b60006020828403121561423757600080fd5b5051919050565b600082601f83011261424f57600080fd5b8135602061425f613f7f83613f4e565b82815260059290921b8401810191818101908684111561427e57600080fd5b8286015b848110156142a2578035614295816139e5565b8352918301918301614282565b509695505050505050565b600082601f8301126142be57600080fd5b813560206142ce613f7f83613f4e565b82815260059290921b840181019181810190868411156142ed57600080fd5b8286015b848110156142a257803583529183019183016142f1565b600082601f83011261431957600080fd5b61048683833560208501613f71565b600060e0823603121561433a57600080fd5b614342613ed4565b82358152602083013560208201526040830135604082015260608301356001600160401b038082111561437457600080fd5b6143803683870161423e565b6060840152608085013591508082111561439957600080fd5b6143a5368387016142ad565b608084015260a08501359150808211156143be57600080fd5b6143ca36838701614308565b60a084015260c08501359150808211156143e357600080fd5b506143f0368286016142ad565b60c08301525092915050565b600081518084526020808501945080840160005b83811015613ba757815187529582019590820190600101614410565b600081518084526020808501808196508360051b8101915082860160005b858110156144745782840389526144628483516141e6565b9885019893509084019060010161444a565b5091979650505050505050565b600060e08301825184526020808401518186015260408401516040860152606084015160e06060870152828151808552610100880191508383019450600092505b808310156144eb5784516001600160a01b031682529383019360019290920191908301906144c2565b5060808601519350868103608088015261450581856143fc565b935050505060a083015184820360a0860152614521828261442c565b91505060c083015184820360c086015261453b82826143fc565b95945050505050565b6080815260006145576080830187614481565b60208681850152838203604085015260c08201865183528187015182840152604087015160c0604085015281815180845260e0860191508483019350600092505b808310156145c15783516145ab81613b4e565b8252928401926001929092019190840190614598565b506060890151935084810360608601526145db81856143fc565b9350505050608086015182820360808401526145f7828261442c565b91505060a086015182820360a084015261461182826143fc565b935050505061453b60608301846001600160a01b03169052565b6020808252602f908201527f476f7665726e616e636541646d696e3a206361737420766f746520666f72206960408201526e1b9d985b1a59081c1c9bdc1bdcd85b608a1b606082015260800190565b600281106105aa57600080fd5b600082601f83011261469857600080fd5b813560206146a8613f7f83613f4e565b82815260059290921b840181019181810190868411156146c757600080fd5b8286015b848110156142a25780356146de8161467a565b83529183019183016146cb565b600060c082360312156146fd57600080fd5b614705613efc565b823581526020830135602082015260408301356001600160401b038082111561472d57600080fd5b61473936838701614687565b6040840152606085013591508082111561475257600080fd5b61475e368387016142ad565b6060840152608085013591508082111561477757600080fd5b61478336838701614308565b608084015260a085013591508082111561479c57600080fd5b506147a9368286016142ad565b60a08301525092915050565b6000606082840312156147c757600080fd5b604051606081018181106001600160401b03821117156147e9576147e9613ebe565b604052823560ff811681146147fd57600080fd5b8152602083810135908201526040928301359281019290925250919050565b60408152600061482f6040830185614481565b905060018060a01b03831660208301529392505050565b60208082526026908201527f436f7265476f7665726e616e63653a20696e76616c69642070726f706f73616c604082015265206e6f6e636560d01b606082015260800190565b83815260208101839052606081016148a383613b4e565b826040830152949350505050565b81810381811115610489576104896140d9565b6000602082840312156148d657600080fd5b81356104868161467a565b73024b9b7b630ba32b223b7bb32b93730b731b29d160651b8152600082516149108160148501602087016141a6565b6d08185b1c9958591e481d9bdd195960921b6014939091019283015250602201919050565b6f021b7b932a3b7bb32b93730b731b29d160851b8152600082516149608160108501602087016141a6565b6d08185b1c9958591e481d9bdd195960921b6010939091019283015250601e01919050565b6040810161499284613b4e565b9281526020015290565b8082028115828204841417610489576104896140d9565b6000816149c2576149c26140d9565b506000190190565b604080825283519082018190526000906020906060840190828701845b82811015614a055781511515845292840192908401906001016149e7565b50505083810382850152613c08818661442c56fef8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256ba2646970667358221220b8c44859a99fef98140e7036521676f05098a664fa30b41b44982148a6a7162764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "BridgeOperatorsApproved(uint256,address[])": {
        "details": "Emitted when the bridge operators are approved."
      }
    },
    "kind": "dev",
    "methods": {
      "bridgeContract()": {
        "details": "Returns the bridge contract."
      },
      "bridgeOperatorsVoted(uint256,address)": {
        "details": "Returns whether the voter `_voter` casted vote for bridge operators at a specific period."
      },
      "castGlobalProposalBySignatures((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_castGlobalProposalBySignatures`."
      },
      "castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_castProposalBySignatures`."
      },
      "changeProxyAdmin(address,address)": {
        "details": "Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`."
      },
      "deleteExpired(uint256,uint256)": {
        "details": "See `CoreGovernance-_deleteExpiredProposal`"
      },
      "getBridgeOperatorVotingSignatures(uint256,address[])": {
        "details": "Returns the voted signatures for bridge operators at a specific period. Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty. Please consider filtering for empty signatures after calling this function."
      },
      "getProposalExpiryDuration()": {
        "details": "Returns the proposal expiry duration."
      },
      "getProposalSignatures(uint256,uint256)": {
        "details": "Returns the voted signatures for the proposals."
      },
      "getProxyAdmin(address)": {
        "details": "Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getProxyImplementation(address)": {
        "details": "Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "lastVotedBlock(address)": {
        "details": "Returns the last voted block of the bridge voter."
      },
      "proposalVoted(uint256,uint256,address)": {
        "details": "Returns whether the voter `_voter` casted vote for the proposal."
      },
      "propose(uint256,uint256,address[],uint256[],bytes[],uint256[])": {
        "details": "See `CoreGovernance-_proposeProposal`. Requirements: - The method caller is governor."
      },
      "proposeGlobal(uint256,uint8[],uint256[],bytes[],uint256[])": {
        "details": "See `CoreGovernance-_proposeGlobal`. Requirements: - The method caller is governor."
      },
      "proposeGlobalProposalStructAndCastVotes((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`. Requirements: - The method caller is governor."
      },
      "proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_proposeProposalStructAndCastVotes`. Requirements: - The method caller is governor."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeContract(address)": {
        "details": "Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`."
      },
      "setProposalExpiryDuration(uint256)": {
        "details": "Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "voteBridgeOperatorsBySignatures(uint256,address[],(uint8,bytes32,bytes32)[])": {
        "details": "See `BOsGovernanceProposal-_castVotesBySignatures`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "round(uint256)": {
        "notice": "chain id = 0 for global proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7167,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "round",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7175,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "vote",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)7093_storage))"
      },
      {
        "astId": 7177,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_proposalExpiryDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6111,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IRoninTrustedOrganization)9772"
      },
      {
        "astId": 5762,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_bridgeContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBridge)8924"
      },
      {
        "astId": 6650,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_lastSyncedPeriod",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6656,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_vote",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(IsolatedVote)6522_storage)"
      },
      {
        "astId": 6661,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_lastVotedBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6669,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_votingSig",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Signature)10092_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)8924": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)9772": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_enum(VoteStatus)10100": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_struct(Signature)10092_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignatureConsumer.Signature)",
        "numberOfBytes": "32",
        "value": "t_struct(Signature)10092_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Signature)10092_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct SignatureConsumer.Signature))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Signature)10092_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)7093_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalVote)7093_storage)"
      },
      "t_mapping(t_uint256,t_struct(IsolatedVote)6522_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IsolatedGovernance.IsolatedVote)",
        "numberOfBytes": "32",
        "value": "t_struct(IsolatedVote)6522_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)7093_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreGovernance.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)7093_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(IsolatedVote)6522_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.IsolatedVote",
        "members": [
          {
            "astId": 6509,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10100"
          },
          {
            "astId": 6511,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6516,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 6521,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "weight",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ProposalVote)7093_storage": {
        "encoding": "inplace",
        "label": "struct CoreGovernance.ProposalVote",
        "members": [
          {
            "astId": 7073,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10100"
          },
          {
            "astId": 7075,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 7077,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7079,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7082,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7085,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7087,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "expiryTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7092,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "sig",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Signature)10092_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Signature)10092_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConsumer.Signature",
        "members": [
          {
            "astId": 10087,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "v",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10089,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "r",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10091,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "s",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}