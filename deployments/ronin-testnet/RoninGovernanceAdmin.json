{
  "address": "0x61626ba084aDdc5dBFCdFfA257e66F8618d3feAB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorsApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "globalProposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "globalProposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GlobalProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "successCalls",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "returnDatas",
          "type": "bytes[]"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Ballot.VoteType",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "castGlobalProposalBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "castProposalBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "changeProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        }
      ],
      "name": "getBridgeOperatorVotingSignatures",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        }
      ],
      "name": "getProposalSignatures",
      "outputs": [
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeVoter",
          "type": "address"
        }
      ],
      "name": "lastVotedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum GlobalProposal.TargetOption[]",
          "name": "_targetOptions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "proposeGlobal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "proposeGlobalProposalStructAndCastVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "proposeProposalStructAndCastVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "againstVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVoteWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "voteBridgeOperatorsBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc84e9e9b1b2e65320e5bf0d5a2d25a44f795bcae6ca38a37167d400d34492774",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0x61626ba084aDdc5dBFCdFfA257e66F8618d3feAB",
    "transactionIndex": 0,
    "gasUsed": "3883645",
    "logsBloom": "0x
    "blockHash": "0x9c37646ace185090514a7effec29af7e719b68d3ab8cf6bce5a37ac9918bd2d5",
    "transactionHash": "0xc84e9e9b1b2e65320e5bf0d5a2d25a44f795bcae6ca38a37167d400d34492774",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11817733,
        "transactionHash": "0xc84e9e9b1b2e65320e5bf0d5a2d25a44f795bcae6ca38a37167d400d34492774",
        "address": "0x61626ba084aDdc5dBFCdFfA257e66F8618d3feAB",
        "topics": [
          "0xfd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7"
        ],
        "data": "0x000000000000000000000000642cbdc239db60e488a917e34b833e541b623f7a",
        "logIndex": 0,
        "blockHash": "0x9c37646ace185090514a7effec29af7e719b68d3ab8cf6bce5a37ac9918bd2d5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11817733,
        "transactionHash": "0xc84e9e9b1b2e65320e5bf0d5a2d25a44f795bcae6ca38a37167d400d34492774",
        "address": "0x61626ba084aDdc5dBFCdFfA257e66F8618d3feAB",
        "topics": [
          "0x5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048"
        ],
        "data": "0x000000000000000000000000cee681c9108c42c710c6a8a949307d5f13c9f3ca",
        "logIndex": 1,
        "blockHash": "0x9c37646ace185090514a7effec29af7e719b68d3ab8cf6bce5a37ac9918bd2d5"
      }
    ],
    "blockNumber": 11817733,
    "cumulativeGasUsed": "3883645",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x642CBdc239Db60E488a917e34b833e541b623F7A",
    "0xCee681C9108c42C710c6A8A949307D5F13C9F3ca"
  ],
  "numDeployments": 1,
  "solcInputHash": "1d53902dd90cd91eebd679fc038e76a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"globalProposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GlobalProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castGlobalProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"}],\"name\":\"getBridgeOperatorVotingSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"}],\"name\":\"getProposalSignatures\",\"outputs\":[{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeVoter\",\"type\":\"address\"}],\"name\":\"lastVotedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"_targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"proposeGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeGlobalProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"voteBridgeOperatorsBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BridgeOperatorsApproved(uint256,address[])\":{\"details\":\"Emitted when the bridge operators are approved.\"}},\"kind\":\"dev\",\"methods\":{\"bridgeContract()\":{\"details\":\"Returns the bridge contract.\"},\"castGlobalProposalBySignatures((uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See {GovernanceProposal-_castGlobalProposalBySignatures}.\"},\"castProposalBySignatures((uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See {GovernanceProposal-_castProposalBySignatures}.\"},\"changeProxyAdmin(address,address)\":{\"details\":\"Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`.\"},\"getBridgeOperatorVotingSignatures(uint256,address[])\":{\"details\":\"Returns the voted signatures for bridge operators at a specific period. Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty. Please consider filtering for empty signatures after calling this function.\"},\"getProposalSignatures(uint256,uint256,address[])\":{\"details\":\"Returns the voted signatures for the proposals. Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty. Please consider filtering for empty signatures after calling this function.\"},\"getProxyAdmin(address)\":{\"details\":\"Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getProxyImplementation(address)\":{\"details\":\"Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"lastVotedBlock(address)\":{\"details\":\"Returns the last voted block of the bridge voter.\"},\"propose(uint256,address[],uint256[],bytes[],uint256[])\":{\"details\":\"See {CoreGovernance-_proposeProposal}. Requirements: - The method caller is governor.\"},\"proposeGlobal(uint8[],uint256[],bytes[],uint256[])\":{\"details\":\"See {CoreGovernance-_proposeGlobal}. Requirements: - The method caller is governor.\"},\"proposeGlobalProposalStructAndCastVotes((uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See {GovernanceProposal-_proposeGlobalProposalStructAndCastVotes}. Requirements: - The method caller is governor.\"},\"proposeProposalStructAndCastVotes((uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See {GovernanceProposal-_proposeProposalStructAndCastVotes}. Requirements: - The method caller is governor.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeContract(address)\":{\"details\":\"Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"voteBridgeOperatorsBySignatures(uint256,address[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See {BOsGovernanceProposal-_castVotesBySignatures}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"round(uint256)\":{\"notice\":\"chain id = 0 for global proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/RoninGovernanceAdmin.sol\":\"RoninGovernanceAdmin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/extensions/GovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport \\\"../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../extensions/collections/HasBridgeContract.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract GovernanceAdmin is CoreGovernance, HasRoninTrustedOrganizationContract, HasBridgeContract {\\n  /// @dev Domain separator\\n  bytes32 public constant DOMAIN_SEPARATOR = 0xf8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256b;\\n\\n  modifier onlySelfCall() {\\n    require(msg.sender == address(this), \\\"GovernanceAdmin: only allowed self-call\\\");\\n    _;\\n  }\\n\\n  constructor(address _roninTrustedOrganizationContract, address _bridgeContract) {\\n    require(\\n      keccak256(\\n        abi.encode(\\n          keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n          keccak256(\\\"GovernanceAdmin\\\"), // name hash\\n          keccak256(\\\"1\\\"), // version hash\\n          keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", 2020)) // salt\\n        )\\n      ) == DOMAIN_SEPARATOR,\\n      \\\"GovernanceAdmin: invalid domain\\\"\\n    );\\n    _setRoninTrustedOrganizationContract(_roninTrustedOrganizationContract);\\n    _setBridgeContract(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external override onlySelfCall {\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external override onlySelfCall {\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyImplementation(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(hex\\\"5c60da1b\\\");\\n    require(_success, \\\"GovernanceAdmin: proxy call `implementation()` failed\\\");\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyAdmin(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(hex\\\"f851a440\\\");\\n    require(_success, \\\"GovernanceAdmin: proxy call `admin()` failed\\\");\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `_proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - This contract must be the current admin of `_proxy`.\\n   *\\n   */\\n  function changeProxyAdmin(address _proxy, address _newAdmin) external onlySelfCall {\\n    // bytes4(keccak256(\\\"changeAdmin(address)\\\"))\\n    (bool _success, ) = _proxy.call(abi.encodeWithSelector(0x8f283970, _newAdmin));\\n    require(_success, \\\"GovernanceAdmin: proxy call `changeAdmin(address)` failed\\\");\\n  }\\n\\n  /**\\n   * @dev Override {CoreGovernance-_getMinimumVoteWeight}.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IQuorum.minimumVoteWeight.selector)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `minimumVoteWeight()` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Override {CoreGovernance-_getTotalWeights}.\\n   */\\n  function _getTotalWeights() internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.totalWeights.selector)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `totalWeights()` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x08ced5e2518aa74414130c3f24dd11924aaf62a2bb9979381d2600d5d8f4c37a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeContract.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\n\\ncontract HasBridgeContract is IHasBridgeContract, HasProxyAdmin {\\n  IBridge internal _bridgeContract;\\n\\n  modifier onlyBridgeContract() {\\n    require(bridgeContract() == msg.sender, \\\"HasBridgeContract: method caller must be bridge contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function bridgeContract() public view override returns (address) {\\n    return address(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external virtual override onlyAdmin {\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function _setBridgeContract(address _addr) internal {\\n    _bridgeContract = IBridge(_addr);\\n    emit BridgeContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xdaa1cc7acd36008e0839274c7d4614c4066cbc67a0aa603b599bebb1c7b4fa2c\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    require(\\n      roninTrustedOrganizationContract() == msg.sender,\\n      \\\"HasRoninTrustedOrganizationContract: method caller must be ronin trusted organization contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x0a79acbb2439826b8a28f562026b7e5be6b857c78bfdd130a8c4ebc47f777cc6\",\"license\":\"MIT\"},\"contracts/extensions/isolated-governance/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract IsolatedGovernance is VoteStatusConsumer {\\n  struct IsolatedVote {\\n    VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev Mapping from receipt hash => vote weight\\n    mapping(bytes32 => uint256) weight;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function _castVote(\\n    IsolatedVote storage _proposal,\\n    address _voter,\\n    uint256 _voterWeight,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _hash\\n  ) internal virtual returns (VoteStatus _status) {\\n    if (_voted(_proposal, _voter)) {\\n      revert(\\n        string(abi.encodePacked(\\\"IsolatedGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\"))\\n      );\\n    }\\n\\n    // Record for voter\\n    _proposal.voteHashOf[_voter] = _hash;\\n    // Increase vote weight\\n    uint256 _weight = _proposal.weight[_hash] += _voterWeight;\\n\\n    if (_weight >= _minimumVoteWeight && _proposal.status == VoteStatus.Pending) {\\n      _proposal.status = VoteStatus.Approved;\\n      _proposal.finalHash = _hash;\\n    }\\n\\n    _status = _proposal.status;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(IsolatedVote storage _proposal, address _voter) internal view virtual returns (bool) {\\n    return _proposal.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0x0c84a1e18e5472ec179c0ccba6de642ad53e26a908f66f7fedc1f85499e2513c\",\"license\":\"MIT\"},\"contracts/extensions/isolated-governance/bridge-operator-governance/BOsGovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../extensions/isolated-governance/IsolatedGovernance.sol\\\";\\nimport \\\"../../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../../libraries/BridgeOperatorsBallot.sol\\\";\\nimport \\\"../../../interfaces/IRoninGovernanceAdmin.sol\\\";\\n\\nabstract contract BOsGovernanceProposal is SignatureConsumer, IsolatedGovernance, IRoninGovernanceAdmin {\\n  /// @dev The last period that the brige operators synced.\\n  uint256 internal _lastSyncedPeriod;\\n  /// @dev Mapping from period index => bridge operators vote\\n  mapping(uint256 => IsolatedVote) internal _vote;\\n\\n  /// @dev Mapping from bridge voter address => last block that the address voted\\n  mapping(address => uint256) internal _lastVotedBlock;\\n  /// @dev Mapping from period => voter => signatures\\n  mapping(uint256 => mapping(address => Signature)) internal _votingSig;\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256) {\\n    return _lastVotedBlock[_bridgeVoter];\\n  }\\n\\n  /**\\n   * @dev Votes for a set of bridge operators by signatures.\\n   *\\n   * Requirements:\\n   * - The period of voting is larger than the last synced period.\\n   * - The arrays are not empty.\\n   * - The signature signers are in order.\\n   *\\n   */\\n  function _castVotesBySignatures(\\n    address[] calldata _operators,\\n    Signature[] calldata _signatures,\\n    uint256 _period,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _domainSeperator\\n  ) internal {\\n    require(_period >= _lastSyncedPeriod, \\\"BOsGovernanceProposal: query for outdated period\\\");\\n    require(_operators.length > 0 && _signatures.length > 0, \\\"BOsGovernanceProposal: invalid array length\\\");\\n\\n    Signature memory _sig;\\n    address _signer;\\n    address _lastSigner;\\n    bytes32 _hash = BridgeOperatorsBallot.hash(_period, _operators);\\n    bytes32 _digest = ECDSA.toTypedDataHash(_domainSeperator, _hash);\\n    IsolatedVote storage _v = _vote[_period];\\n    bool _hasValidVotes;\\n\\n    for (uint256 _i = 0; _i < _signatures.length; _i++) {\\n      _sig = _signatures[_i];\\n      _signer = ECDSA.recover(_digest, _sig.v, _sig.r, _sig.s);\\n      require(_lastSigner < _signer, \\\"BOsGovernanceProposal: invalid order\\\");\\n      _lastSigner = _signer;\\n\\n      uint256 _weight = _getBridgeVoterWeight(_signer);\\n      if (_weight > 0) {\\n        _hasValidVotes = true;\\n        _lastVotedBlock[_signer] = block.number;\\n        _votingSig[_period][_signer] = _sig;\\n        if (_castVote(_v, _signer, _weight, _minimumVoteWeight, _hash) == VoteStatus.Approved) {\\n          return;\\n        }\\n      }\\n    }\\n\\n    require(_hasValidVotes, \\\"BOsGovernanceProposal: invalid signatures\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function _getBridgeVoterWeight(address _bridgeVoter) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xdaeae7aa91963ce5160cce59482eb1366a6d85692deaf7504a4b18735ff2cfd2\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/CoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    mapping(address => bool) forVoted;\\n    mapping(address => bool) againstVoted;\\n    mapping(address => Signature) sig;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when a proposal is created\\n  event GlobalProposalCreated(\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    bytes32 globalProposalHash,\\n    GlobalProposal.GlobalProposalDetail globalProposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  /**\\n   * @dev Creates new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _createVotingRound(uint256 _chainId, bytes32 _proposalHash) internal returns (uint256 _round) {\\n    _round = round[_chainId]++;\\n    // Skip checking for the first ever round\\n    if (_round > 0) {\\n      require(vote[_chainId][_round].status != VoteStatus.Pending, \\\"CoreGovernance: current proposal is not completed\\\");\\n    }\\n    vote[_chainId][++_round].hash = _proposalHash;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 _chainId,\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _creator\\n  ) internal virtual returns (uint256 _round) {\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n\\n    Proposal.ProposalDetail memory _proposal = Proposal.ProposalDetail(\\n      round[_chainId] + 1,\\n      _chainId,\\n      _targets,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    _proposal.validate();\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId, _proposalHash);\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(Proposal.ProposalDetail memory _proposal, address _creator)\\n    internal\\n    virtual\\n    returns (uint256 _round)\\n  {\\n    uint256 _chainId = _proposal.chainId;\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n    _proposal.validate();\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId, _proposalHash);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes for a global proposal.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobal(\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (uint256 _round) {\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal = GlobalProposal.GlobalProposalDetail(\\n      round[0] + 1,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    _proposal.validate();\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(0, _proposalHash);\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes global proposal struct.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobalStruct(\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal, uint256 _round) {\\n    _proposal = _globalProposal.into_proposal_detail(_roninTrustedOrganizationContract, _gatewayContract);\\n    _proposal.validate();\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(0, _proposalHash);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support,\\n    uint256 _minimumForVoteWeight,\\n    uint256 _minimumAgainstVoteWeight,\\n    address _voter,\\n    Signature memory _signature,\\n    uint256 _voterWeight\\n  ) internal virtual returns (bool _done) {\\n    uint256 _chainId = _proposal.chainId;\\n    uint256 _round = _proposal.nonce;\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    require(round[_proposal.chainId] == _round, \\\"CoreGovernance: query for invalid proposal nonce\\\");\\n    require(_vote.status == VoteStatus.Pending, \\\"CoreGovernance: the vote is finalized\\\");\\n    if (_vote.forVoted[_voter] || _vote.againstVoted[_voter]) {\\n      revert(string(abi.encodePacked(\\\"CoreGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\")));\\n    }\\n\\n    _vote.sig[_voter] = _signature;\\n    emit ProposalVoted(_vote.hash, _voter, _support, _voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (_support == Ballot.VoteType.For) {\\n      _vote.forVoted[_voter] = true;\\n      _forVoteWeight = _vote.forVoteWeight += _voterWeight;\\n    } else if (_support == Ballot.VoteType.Against) {\\n      _vote.againstVoted[_voter] = true;\\n      _againstVoteWeight = _vote.againstVoteWeight += _voterWeight;\\n    } else {\\n      revert(\\\"CoreGovernance: unsupported vote type\\\");\\n    }\\n\\n    if (_forVoteWeight >= _minimumForVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n    } else if (_againstVoteWeight >= _minimumAgainstVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage _vote, Proposal.ProposalDetail memory _proposal) internal {\\n    if (_proposal.executable()) {\\n      _vote.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = _proposal.execute();\\n      emit ProposalExecuted(_vote.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeights() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xa151c5d7e728724b28150377aa9fb605066051c857873f56be37a214c26f04bf\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/GovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CoreGovernance.sol\\\";\\n\\nabstract contract GovernanceProposal is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Casts votes by signatures.\\n   *\\n   * @notice This method does not verify the proposal hash with the vote hash. Please consider checking it before.\\n   *\\n   */\\n  function _castVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    require(_supports.length > 0 && _supports.length == _signatures.length, \\\"GovernanceProposal: invalid array length\\\");\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n\\n    address _lastSigner;\\n    address _signer;\\n    Signature memory _sig;\\n    bool _hasValidVotes;\\n    for (uint256 _i; _i < _signatures.length; _i++) {\\n      _sig = _signatures[_i];\\n\\n      if (_supports[_i] == Ballot.VoteType.For) {\\n        _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n      } else if (_supports[_i] == Ballot.VoteType.Against) {\\n        _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n      } else {\\n        revert(\\\"GovernanceProposal: query for unsupported vote type\\\");\\n      }\\n\\n      require(_lastSigner < _signer, \\\"GovernanceProposal: invalid order\\\");\\n      _lastSigner = _signer;\\n\\n      uint256 _weight = _getWeight(_signer);\\n      if (_weight > 0) {\\n        _hasValidVotes = true;\\n        if (\\n          _castVote(_proposal, _supports[_i], _minimumForVoteWeight, _minimumAgainstVoteWeight, _signer, _sig, _weight)\\n        ) {\\n          return;\\n        }\\n      }\\n    }\\n\\n    require(_hasValidVotes, \\\"GovernanceProposal: invalid signatures\\\");\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator\\n  ) internal {\\n    bytes32 _proposalHash = _proposal.hash();\\n    require(\\n      vote[_proposal.chainId][_proposal.nonce].hash == _proposalHash,\\n      \\\"GovernanceAdmin: cast vote for invalid proposal\\\"\\n    );\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes and votes by signature.\\n   */\\n  function _proposeGlobalProposalStructAndCastVotes(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal returns (Proposal.ProposalDetail memory _proposal) {\\n    (_proposal, ) = _proposeGlobalStruct(\\n      _globalProposal,\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract,\\n      _creator\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a global proposal struct and casts votes by signature.\\n   */\\n  function _castGlobalProposalBySignatures(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal {\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    require(vote[0][_proposal.nonce].hash == _proposal.hash(), \\\"GovernanceAdmin: cast vote for invalid proposal\\\");\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function _getWeight(address _governor) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xf19b617cadb67fa7961bac66b8cf3a4bfe672e4f42f47fe563fbbe86d9902f0d\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoninGovernanceAdmin {\\n  /**\\n   * @dev Returns the last voted block of the bridge voter.\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf8bbda9f65a09444b3ebbcd19a62e39bf8711047224744f86439db6f42551b2\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasBridgeContract {\\n  /// @dev Emitted when the bridge contract is updated.\\n  event BridgeContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the bridge contract.\\n   */\\n  function bridgeContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function setBridgeContract(address) external;\\n}\\n\",\"keccak256\":\"0xb1c239a3987c93db20b65bb80f165861bc83a186fb8d5a1c17c5ad06cfb395a8\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasRoninTrustedOrganizationContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x8ec2782f28a2c41d8feee0c5f213ac66e327c3757eab8d85a09104f21587ff10\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected\\n  }\\n}\\n\",\"keccak256\":\"0xc2f5e7cf4fdc18b990b3829e4ba479cd7aa0c5ea553a39dc3f1bf2e9aaed38df\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/WeightedAddressConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface WeightedAddressConsumer {\\n  struct WeightedAddress {\\n    address addr;\\n    uint256 weight;\\n  }\\n}\\n\",\"keccak256\":\"0xc141bda51591ca368cf9263df1b10cdb298583a4fe5104160eeaa4cf39f32763\",\"license\":\"MIT\"},\"contracts/libraries/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 public constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n  }\\n}\\n\",\"keccak256\":\"0x28a0192db886307f30ada203bdb902749ee3f30d42710de4eaf303cba23c32c2\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/consumers/WeightedAddressConsumer.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xeea5e3908ac28cbdbbce8853e49444c558a0a03597e98ef19e6ff86162ed9ae3;\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(uint256 _period, address[] memory _operators) internal pure returns (bytes32) {\\n    bytes32 _operatorsHash;\\n    assembly {\\n      _operatorsHash := keccak256(add(_operators, 32), mul(mload(_operators), 32))\\n    }\\n\\n    return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _period, _operatorsHash));\\n  }\\n}\\n\",\"keccak256\":\"0xe90d38a54b9029912a3e58f58a595da8ea285d3775d1ad798651e94f7ec83ab6\",\"license\":\"MIT\"},\"contracts/libraries/GlobalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  enum TargetOption {\\n    RoninTrustedOrganizationContract,\\n    GatewayContract\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xdb316eb400de2ddff92ab4255c0cd3cba634cd5236b93386ed9328b7d822d1c7;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    TargetOption[] memory _targets = _proposal.targetOptions;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(abi.encode(TYPE_HASH, _proposal.nonce, _targetsHash, _valuesHash, _calldatasHash, _gasAmountsHash));\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function into_proposal_detail(\\n    GlobalProposalDetail memory _proposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal pure returns (Proposal.ProposalDetail memory _detail) {\\n    _detail.nonce = _proposal.nonce;\\n    _detail.chainId = 0;\\n    _detail.targets = new address[](_proposal.targetOptions.length);\\n    _detail.values = _proposal.values;\\n    _detail.calldatas = _proposal.calldatas;\\n    _detail.gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _proposal.targetOptions.length; _i++) {\\n      if (_proposal.targetOptions[_i] == TargetOption.GatewayContract) {\\n        _detail.targets[_i] = _gatewayContract;\\n      } else if (_proposal.targetOptions[_i] == TargetOption.RoninTrustedOrganizationContract) {\\n        _detail.targets[_i] = _roninTrustedOrganizationContract;\\n      } else {\\n        revert(\\\"GlobalProposal: unsupported target\\\");\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfd2c537e2df6f90725bd927660ad4905e84f5be00195081bd685ff6e7c45ee0f\",\"license\":\"MIT\"},\"contracts/libraries/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Proposal {\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x65526afa953b4e935ecd640e6905741252eedae157e79c37331ee8103c70019d;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal) internal pure {\\n    require(\\n      _proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length,\\n      \\\"Proposal: invalid array length\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _proposal.nonce,\\n          _proposal.chainId,\\n          _targetsHash,\\n          _valuesHash,\\n          _calldatasHash,\\n          _gasAmountsHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(ProposalDetail memory _proposal)\\n    internal\\n    returns (bool[] memory _successCalls, bytes[] memory _returnDatas)\\n  {\\n    require(executable(_proposal), \\\"Proposal: query for invalid chainId\\\");\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ++_i) {\\n      require(gasleft() > _proposal.gasAmounts[_i], \\\"Proposal: insufficient gas\\\");\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd898f14c8212662db9481d072e64135e207e89055fd8dd56d06d6f3dbab11c67\",\"license\":\"MIT\"},\"contracts/ronin/RoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/isolated-governance/bridge-operator-governance/BOsGovernanceProposal.sol\\\";\\nimport \\\"../extensions/sequential-governance/GovernanceProposal.sol\\\";\\nimport \\\"../extensions/GovernanceAdmin.sol\\\";\\nimport \\\"../interfaces/IBridge.sol\\\";\\n\\ncontract RoninGovernanceAdmin is GovernanceAdmin, GovernanceProposal, BOsGovernanceProposal {\\n  /// @dev Emitted when the bridge operators are approved.\\n  event BridgeOperatorsApproved(uint256 _period, address[] _operators);\\n\\n  modifier onlyGovernor() {\\n    require(_getWeight(msg.sender) > 0, \\\"GovernanceAdmin: sender is not governor\\\");\\n    _;\\n  }\\n\\n  constructor(address _roninTrustedOrganizationContract, address _bridgeContract)\\n    GovernanceAdmin(_roninTrustedOrganizationContract, _bridgeContract)\\n  {}\\n\\n  /**\\n   * @dev Returns the voted signatures for the proposals.\\n   *\\n   * Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty.\\n   * Please consider filtering for empty signatures after calling this function.\\n   *\\n   */\\n  function getProposalSignatures(\\n    uint256 _chainId,\\n    uint256 _round,\\n    address[] calldata _voters\\n  ) external view returns (Ballot.VoteType[] memory _supports, Signature[] memory _signatures) {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    address _voter;\\n    _supports = new Ballot.VoteType[](_voters.length);\\n    _signatures = new Signature[](_voters.length);\\n    for (uint256 _i; _i < _voters.length; _i++) {\\n      _voter = _voters[_i];\\n\\n      if (_vote.againstVoted[_voter]) {\\n        _supports[_i] = Ballot.VoteType.Against;\\n      }\\n\\n      _signatures[_i] = vote[_chainId][_round].sig[_voter];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the voted signatures for bridge operators at a specific period.\\n   *\\n   * Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty.\\n   * Please consider filtering for empty signatures after calling this function.\\n   *\\n   */\\n  function getBridgeOperatorVotingSignatures(uint256 _period, address[] calldata _voters)\\n    external\\n    view\\n    returns (Signature[] memory _signatures)\\n  {\\n    _signatures = new Signature[](_voters.length);\\n    for (uint256 _i; _i < _voters.length; _i++) {\\n      _signatures[_i] = _votingSig[_period][_voters[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev See {CoreGovernance-_proposeProposal}.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function propose(\\n    uint256 _chainId,\\n    address[] calldata _targets,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeProposal(_chainId, _targets, _values, _calldatas, _gasAmounts, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See {GovernanceProposal-_proposeProposalStructAndCastVotes}.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeProposalStructAndCastVotes(_proposal, _supports, _signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See {GovernanceProposal-_castProposalBySignatures}.\\n   */\\n  function castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castProposalBySignatures(_proposal, _supports, _signatures, DOMAIN_SEPARATOR);\\n  }\\n\\n  /**\\n   * @dev See {CoreGovernance-_proposeGlobal}.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeGlobal(\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeGlobal(\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See {GovernanceProposal-_proposeGlobalProposalStructAndCastVotes}.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeGlobalProposalStructAndCastVotes(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeGlobalProposalStructAndCastVotes(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See {GovernanceProposal-_castGlobalProposalBySignatures}.\\n   */\\n  function castGlobalProposalBySignatures(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castGlobalProposalBySignatures(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract()\\n    );\\n  }\\n\\n  /**\\n   * @dev See {BOsGovernanceProposal-_castVotesBySignatures}.\\n   */\\n  function voteBridgeOperatorsBySignatures(\\n    uint256 _period,\\n    address[] calldata _operators,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castVotesBySignatures(_operators, _signatures, _period, _getMinimumVoteWeight(), DOMAIN_SEPARATOR);\\n    IsolatedVote storage _v = _vote[_period];\\n    if (_v.status == VoteStatus.Approved) {\\n      _lastSyncedPeriod = _period;\\n      emit BridgeOperatorsApproved(_period, _operators);\\n      _v.status = VoteStatus.Executed;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc GovernanceProposal\\n   */\\n  function _getWeight(address _governor) internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.getGovernorWeight.selector, _governor)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `getGovernorWeight(address)` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @inheritdoc BOsGovernanceProposal\\n   */\\n  function _getBridgeVoterWeight(address _governor) internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.getBridgeVoterWeight.selector, _governor)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `getBridgeVoterWeight(address)` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x163fc628fb1852aab689191d2792f1f93aa49de9c145c38bc8eaac920e1ca819\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620047183803806200471883398101604081905262000034916200028d565b81817ff8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256b60001b7f599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf7f7e7935007966eb860f4a2ee3dcc9fd53fb3205ce2aa86b0126d4893d4d4c14b97fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66107e46040516020016200010f919060408082526016908201527f524f4e494e5f474f5645524e414e43455f41444d494e00000000000000000000606082015261ffff91909116602082015260800190565b60408051601f198184030181528282528051602091820120908301959095528101929092526060820152608081019190915260a0016040516020818303038152906040528051906020012014620001ac5760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e616e636541646d696e3a20696e76616c696420646f6d61696e00604482015260640160405180910390fd5b620001b782620001cc565b620001c28162000221565b50505050620002c5565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7906020015b60405180910390a150565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae0489060200162000216565b80516001600160a01b03811681146200028857600080fd5b919050565b60008060408385031215620002a157600080fd5b620002ac8362000270565b9150620002bc6020840162000270565b90509250929050565b61444380620002d56000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638841d5bb116100ad578063b5e337de11610071578063b5e337de146102fa578063bd458bdc1461030d578063be852fbe14610320578063cd59658314610333578063f3b7dead1461034457600080fd5b80638841d5bb1461024457806388bc711b146102575780638d4f231e1461026a578063988ef53c1461027d578063b384abef146102a657600080fd5b80634f9db8b6116100f45780634f9db8b6146101d95780635511cde1146101fa57806356e237e81461020b5780635ad1e50e1461021e5780637eff275e1461023157600080fd5b80630b26cf6614610131578063204e1c7a14610146578063332635be1461017657806334d5f37b146101965780633644e515146101c4575b600080fd5b61014461013f36600461331a565b610357565b005b61015961015436600461331a565b61038b565b6040516001600160a01b0390911681526020015b60405180910390f35b610189610184366004613382565b61047d565b60405161016d9190613421565b6101b66101a4366004613434565b60006020819052908152604090205481565b60405190815260200161016d565b6101b66000805160206143ee83398151915281565b6101ec6101e736600461344d565b61059f565b60405161016d9291906134c5565b6002546001600160a01b0316610159565b610144610219366004613569565b6107a4565b61014461022c3660046135e2565b610849565b61014461023f3660046136b1565b61092d565b6101446102523660046136ea565b610a5e565b610144610265366004613743565b610a81565b6101446102783660046136ea565b610abb565b6101b661028b36600461331a565b6001600160a01b031660009081526006602052604090205490565b6102ea6102b4366004613786565b60016020818152600093845260408085209091529183529120805491810154600282015460039092015460ff9093169290919084565b60405161016d94939291906137a8565b61014461030836600461331a565b610b00565b61014461031b3660046137d8565b610b28565b61014461032e366004613743565b610bef565b6003546001600160a01b0316610159565b61015961035236600461331a565b610c52565b33301461037f5760405162461bcd60e51b81526004016103769061389b565b60405180910390fd5b61038881610d1f565b50565b6000806000836001600160a01b03166040516103b190635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146103ec576040519150601f19603f3d011682016040523d82523d6000602084013e6103f1565b606091505b5091509150816104615760405162461bcd60e51b815260206004820152603560248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060696d706044820152741b195b595b9d185d1a5bdb8a0a580819985a5b1959605a1b6064820152608401610376565b8080602001905181019061047591906138e2565b949350505050565b6060816001600160401b03811115610497576104976138ff565b6040519080825280602002602001820160405280156104e257816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816104b55790505b50905060005b828110156105975760008581526007602052604081209085858481811061051157610511613915565b9050602002016020810190610526919061331a565b6001600160a01b0316815260208082019290925260409081016000208151606081018352815460ff1681526001820154938101939093526002015490820152825183908390811061057957610579613915565b6020026020010181905250808061058f90613941565b9150506104e8565b509392505050565b60008481526001602090815260408083208684529091528120606091829190846001600160401b038111156105d6576105d66138ff565b6040519080825280602002602001820160405280156105ff578160200160208202803683370190505b509350846001600160401b0381111561061a5761061a6138ff565b60405190808252806020026020018201604052801561066557816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816106385790505b50925060005b858110156107895786868281811061068557610685613915565b905060200201602081019061069a919061331a565b6001600160a01b038116600090815260058501602052604090205490925060ff16156107045760018582815181106106d4576106d4613915565b602002602001019060018111156106ed576106ed61349f565b908160018111156107005761070061349f565b9052505b60008981526001602081815260408084208c855282528084206001600160a01b03871685526006018252928390208351606081018552815460ff16815292810154918301919091526002015491810191909152845185908390811061076b5761076b613915565b6020026020010181905250808061078190613941565b91505061066b565b50505094509492505050565b6002546001600160a01b031690565b6107c884848484896107b4610d74565b6000805160206143ee833981519152610ee0565b60008581526005602052604090206001815460ff1660038111156107ee576107ee61349f565b14156108415760048690556040517f1599b04a1104d19ef534dc177f3de0164ef5e4b99fad7485eda134600fca5f029061082d9088908890889061395c565b60405180910390a1805460ff191660021781555b505050505050565b60006108543361121a565b116108715760405162461bcd60e51b8152600401610376906139b4565b6109218989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152506108e692508991508a9050613b68565b86868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061138e915050565b50505050505050505050565b33301461094c5760405162461bcd60e51b81526004016103769061389b565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b17905291516000928516916109a091613ba5565b6000604051808303816000865af19150503d80600081146109dd576040519150601f19603f3d011682016040523d82523d6000602084013e6109e2565b606091505b5050905080610a595760405162461bcd60e51b815260206004820152603960248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206063686160448201527f6e676541646d696e28616464726573732960206661696c6564000000000000006064820152608401610376565b505050565b610a7a85858585856000805160206143ee83398151915261148f565b5050505050565b610a7a85858585856000805160206143ee833981519152610aaa6002546001600160a01b031690565b6003546001600160a01b031661151c565b6000610ac63361121a565b11610ae35760405162461bcd60e51b8152600401610376906139b4565b610a7a85858585856000805160206143ee833981519152336115d0565b333014610b1f5760405162461bcd60e51b81526004016103769061389b565b6103888161162b565b6000610b333361121a565b11610b505760405162461bcd60e51b8152600401610376906139b4565b610be48888888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610b9592508991508a9050613b68565b868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610bd29250610795915050565b6003546001600160a01b031633611679565b505050505050505050565b6000610bfa3361121a565b11610c175760405162461bcd60e51b8152600401610376906139b4565b61084185858585856000805160206143ee833981519152610c406002546001600160a01b031690565b6003546001600160a01b03163361179a565b6000806000836001600160a01b0316604051610c78906303e1469160e61b815260040190565b600060405180830381855afa9150503d8060008114610cb3576040519150601f19603f3d011682016040523d82523d6000602084013e610cb8565b606091505b5091509150816104615760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206061646d60448201526b1a5b8a0a580819985a5b195960a21b6064820152608401610376565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b6000806000610d8b6002546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b0316637de5dedd60e01b17905291516001600160a01b039390931692634bb5274a92610dd4929101613bed565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610e0d9190613ba5565b600060405180830381855afa9150503d8060008114610e48576040519150601f19603f3d011682016040523d82523d6000602084013e610e4d565b606091505b509150915081610ec55760405162461bcd60e51b815260206004820152603860248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c20606d696e60448201527f696d756d566f7465576569676874282960206661696c656400000000000000006064820152608401610376565b80806020019051810190610ed99190613c00565b9250505090565b600454831015610f4b5760405162461bcd60e51b815260206004820152603060248201527f424f73476f7665726e616e636550726f706f73616c3a20717565727920666f7260448201526f081bdd5d19185d1959081c195c9a5bd960821b6064820152608401610376565b8515801590610f5957508315155b610fb95760405162461bcd60e51b815260206004820152602b60248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b6064820152608401610376565b60408051606081018252600080825260208201819052918101919091526000806000611018878c8c808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506117fd92505050565b90506000611026868361185e565b6000898152600560205260408120919250805b8b8110156111a9578c8c8281811061105357611053613915565b9050606002018036038101906110699190613c19565b97506110838489600001518a602001518b6040015161189f565b9650866001600160a01b0316866001600160a01b0316106110f25760405162461bcd60e51b8152602060048201526024808201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206f604482015263393232b960e11b6064820152608401610376565b8695506000611100886118c7565b90508015611196576001600160a01b03881660008181526006602090815260408083204390558f835260078252808320938352928152908290208b51815460ff191660ff909116178155908b0151600180830191909155918b0151600290910155925082611171858a848f8b611a32565b60038111156111825761118261349f565b141561119657505050505050505050611211565b50806111a181613941565b915050611039565b50806112095760405162461bcd60e51b815260206004820152602960248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964207360448201526869676e61747572657360b81b6064820152608401610376565b505050505050505b50505050505050565b60008060006112316002546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316631af0725f60e31b1790529251931692634bb5274a92611289929101613bed565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516112c29190613ba5565b600060405180830381855afa9150503d80600081146112fd576040519150601f19603f3d011682016040523d82523d6000602084013e611302565b606091505b50915091508161137a5760405162461bcd60e51b815260206004820152603f60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f476f7665726e6f7257656967687428616464726573732960206661696c6564006064820152608401610376565b808060200190518101906104759190613c00565b6000866113dd5760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e2069646044820152606401610376565b6040805160c08101825260008981526020819052918220548190611402906001613c80565b815260200189815260200188815260200187815260200186815260200185815250905061142e81611b2e565b600061143982611bc2565b90506114458982611d3d565b925080838a7f0861aae3a90b957953a30ca9779a1e27af2feeca4205ae2e45cdd5842468a26d858860405161147b929190613dd5565b60405180910390a450509695505050505050565b60006114a261149d88613ee9565b611bc2565b6020808901356000908152600180835260408083208c358452909352919020015490915081146114e45760405162461bcd60e51b815260040161037690613fb3565b6112116114f088613ee9565b8787878761150888611503896000611e31565b61185e565b611517896115038a6001611e31565b611e69565b6000611533838361152c8c614073565b91906121c4565b905060006115486115438b614073565b61237f565b905061155382611bc2565b600080805260016020818152855183527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49905260409091200154146115aa5760405162461bcd60e51b815260040161037690613fb3565b610921828a8a8a8a6115c18b611503896000611e31565b6115178c6115038a6001611e31565b6115e26115dc88613ee9565b826124cc565b5060006115f161149d89613ee9565b90506116216115ff89613ee9565b8888888861161289611503896000611e31565b6115178a6115038a6001611e31565b5050505050505050565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001610d69565b6040805160a08101909152600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5549091829181906116c1906001613c80565b81526020018b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082018b9052604082018a9052606090910188905290915061171f8287876121c4565b905061172a81611b2e565b600061173582611bc2565b9050611742600082611d3d565b935080847fedacddc6fe3387cd527f9ac55848b2e48a439a02270ed36e053a8065169b99c2846117718761237f565b878a6040516117839493929190614133565b60405180910390a350505098975050505050505050565b6117a26132cf565b6117b66117ae8b614073565b8585856125a8565b50905060006117c76115438c614073565b90506117ef828b8b8b8b6117e08c611503896000611e31565b6115178d6115038a6001611e31565b509998505050505050505050565b8051602090810291810191909120604080517feea5e3908ac28cbdbbce8853e49444c558a0a03597e98ef19e6ff86162ed9ae38185015280820194909452606080850192909252805180850390920182526080909301909252815191012090565b60405161190160f01b602082015260228101839052604281018290526000906062015b60405160208183030381529060405280519060200120905092915050565b60008060006118b087878787612654565b915091506118bd81612741565b5095945050505050565b60008060006118de6002546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316635624191160e01b1790529251931692634bb5274a92611936929101613bed565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161196f9190613ba5565b600060405180830381855afa9150503d80600081146119aa576040519150601f19603f3d011682016040523d82523d6000602084013e6119af565b606091505b50915091508161137a5760405162461bcd60e51b815260206004820152604260248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f427269646765566f74657257656967687428616464726573732960206661696c606482015261195960f21b608482015260a401610376565b6001600160a01b038416600090815260028601602052604081205415611a9c57611a66856001600160a01b031660146128fc565b604051602001611a76919061420e565b60408051601f198184030181529082905262461bcd60e51b825261037691600401613bed565b6001600160a01b0385166000908152600287016020908152604080832085905584835260038901909152812080548691908390611ada908490613c80565b9250508190559050838110158015611b0757506000875460ff166003811115611b0557611b0561349f565b145b15611b1f57865460ff19166001908117885587018390555b5050935460ff16949350505050565b6000816040015151118015611b4c5750806060015151816040015151145b8015611b615750806080015151816040015151145b8015611b7657508060a0015151816040015151145b6103885760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c3a20696e76616c6964206172726179206c656e67746800006044820152606401610376565b6000806000806000808660600151905060008760400151905060008860800151516001600160401b03811115611bfa57611bfa6138ff565b604051908082528060200260200182016040528015611c23578160200160208202803683370190505b5060a08a015190915060005b8251811015611c8c578a608001518181518110611c4e57611c4e613915565b602002602001015180519060200120838281518110611c6f57611c6f613915565b602090810291909101015280611c8481613941565b915050611c2f565b5082516020908102848201208551820286830120845183028584012084518402858501208e518f860151604080517f65526afa953b4e935ecd640e6905741252eedae157e79c37331ee8103c70019d9881019890985287019190915260608601526080850184905260a0850183905260c0850182905260e08501819052929b5090995097509550610100015b6040516020818303038152906040528051906020012098505050505050505050919050565b600082815260208190526040812080549082611d5883613941565b9091555090508015611dfa57600083815260016020908152604080832084845290915281205460ff166003811115611d9257611d9261349f565b1415611dfa5760405162461bcd60e51b815260206004820152603160248201527f436f7265476f7665726e616e63653a2063757272656e742070726f706f73616c604482015270081a5cc81b9bdd0818dbdb5c1b195d1959607a1b6064820152608401610376565b60008381526001602052604081208391611e1384613941565b93508381526020019081526020016000206001018190555092915050565b604051600090611881907fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c29085908590602001614262565b8415801590611e7757508483145b611ed45760405162461bcd60e51b815260206004820152602860248201527f476f7665726e616e636550726f706f73616c3a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b6064820152608401610376565b6000611ede610d74565b9050600081611eeb612a9e565b611ef59190614287565b611f00906001613c80565b9050600080611f28604080516060810182526000808252602082018190529181019190915290565b6000805b89811015612158578a8a82818110611f4657611f46613915565b905060600201803603810190611f5c9190613c19565b925060008d8d83818110611f7257611f72613915565b9050602002016020810190611f87919061429e565b6001811115611f9857611f9861349f565b1415611fbd57611fb68984600001518560200151866040015161189f565b9350612079565b60018d8d83818110611fd157611fd1613915565b9050602002016020810190611fe6919061429e565b6001811115611ff757611ff761349f565b141561201557611fb68884600001518560200151866040015161189f565b60405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636550726f706f73616c3a20717565727920666f7220756e604482015272737570706f7274656420766f7465207479706560681b6064820152608401610376565b836001600160a01b0316856001600160a01b0316106120e45760405162461bcd60e51b815260206004820152602160248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964206f7264656044820152603960f91b6064820152608401610376565b83945060006120f28561121a565b9050801561214557600192506121338f8f8f8581811061211457612114613915565b9050602002016020810190612129919061429e565b8a8a898987612be5565b15612145575050505050505050611211565b508061215081613941565b915050611f2c565b50806121b55760405162461bcd60e51b815260206004820152602660248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964207369676e60448201526561747572657360d01b6064820152608401610376565b50505050505050505050505050565b6121cc6132cf565b835181526000602080830191909152840151516001600160401b038111156121f6576121f66138ff565b60405190808252806020026020018201604052801561221f578160200160208202803683370190505b5060408083019190915284015160608083019190915284015160808083019190915284015160a082015260005b8460200151518110156105975760018560200151828151811061227157612271613915565b6020026020010151600181111561228a5761228a61349f565b14156122cc5782826040015182815181106122a7576122a7613915565b60200260200101906001600160a01b031690816001600160a01b03168152505061236d565b6000856020015182815181106122e4576122e4613915565b602002602001015160018111156122fd576122fd61349f565b141561231a5783826040015182815181106122a7576122a7613915565b60405162461bcd60e51b815260206004820152602260248201527f476c6f62616c50726f706f73616c3a20756e737570706f727465642074617267604482015261195d60f21b6064820152608401610376565b8061237781613941565b91505061224c565b6000806000806000808660400151905060008760200151905060008860600151516001600160401b038111156123b7576123b76138ff565b6040519080825280602002602001820160405280156123e0578160200160208202803683370190505b5060808a015190915060005b8251811015612449578a60600151818151811061240b5761240b613915565b60200260200101518051906020012083828151811061242c5761242c613915565b60209081029190910101528061244181613941565b9150506123ec565b5082516020908102818501208551820286830120845183028584012084518402858501208e51604080517fdb316eb400de2ddff92ab4255c0cd3cba634cd5236b93386ed9328b7d822d1c797810197909752860152606085018490526080850183905260a0850182905260c08501819052929b509099509750955060e001611d18565b6020820151600090806125215760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e2069646044820152606401610376565b61252a84611b2e565b600061253585611bc2565b90506125418282611d3d565b855190935083146125645760405162461bcd60e51b8152600401610376906142bb565b8083837f0861aae3a90b957953a30ca9779a1e27af2feeca4205ae2e45cdd5842468a26d8888604051612598929190613dd5565b60405180910390a4505092915050565b6125b06132cf565b60006125bd8686866121c4565b91506125c882611b2e565b60006125d383611bc2565b90506125e0600082611d3d565b835190925082146126035760405162461bcd60e51b8152600401610376906142bb565b80827fedacddc6fe3387cd527f9ac55848b2e48a439a02270ed36e053a8065169b99c2856126308b61237f565b8b896040516126429493929190614133565b60405180910390a35094509492505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561268b5750600090506003612738565b8460ff16601b141580156126a357508460ff16601c14155b156126b45750600090506004612738565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612708573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661273157600060019250925050612738565b9150600090505b94509492505050565b60008160048111156127555761275561349f565b141561275e5750565b60018160048111156127725761277261349f565b14156127c05760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610376565b60028160048111156127d4576127d461349f565b14156128225760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610376565b60038160048111156128365761283661349f565b141561288f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610376565b60048160048111156128a3576128a361349f565b14156103885760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610376565b6060600061290b836002614301565b612916906002613c80565b6001600160401b0381111561292d5761292d6138ff565b6040519080825280601f01601f191660200182016040528015612957576020820181803683370190505b509050600360fc1b8160008151811061297257612972613915565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106129a1576129a1613915565b60200101906001600160f81b031916908160001a90535060006129c5846002614301565b6129d0906001613c80565b90505b6001811115612a48576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a0457612a04613915565b1a60f81b828281518110612a1a57612a1a613915565b60200101906001600160f81b031916908160001a90535060049490941c93612a4181614320565b90506129d3565b508315612a975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610376565b9392505050565b6000806000612ab56002546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b031663926323d560e01b17905291516001600160a01b039390931692634bb5274a92612afe929101613bed565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612b379190613ba5565b600060405180830381855afa9150503d8060008114612b72576040519150601f19603f3d011682016040523d82523d6000602084013e612b77565b606091505b509150915081610ec55760405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060746f74604482015272185b15d95a59da1d1cca0a580819985a5b1959606a1b6064820152608401610376565b60208088018051895160008281526001855260408082208383528652808220945182529481905293842054919290918214612c7b5760405162461bcd60e51b815260206004820152603060248201527f436f7265476f7665726e616e63653a20717565727920666f7220696e76616c6960448201526f642070726f706f73616c206e6f6e636560801b6064820152608401610376565b6000815460ff166003811115612c9357612c9361349f565b14612cee5760405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a2074686520766f74652069732066696e616044820152641b1a5e995960da1b6064820152608401610376565b6001600160a01b038716600090815260048201602052604090205460ff1680612d3157506001600160a01b038716600090815260058201602052604090205460ff165b15612d5a57612d4a876001600160a01b031660146128fc565b604051602001611a769190614337565b6001600160a01b03871660008181526006830160209081526040918290208951815460ff191660ff909116178155908901516001808301919091558983015160029092019190915583015490517f1203f9e81c814a35f5f4cc24087b2a24c6fb7986a9f1406b68a9484882c93a2390612dd6908e908a90614387565b60405180910390a3600080808c6001811115612df457612df461349f565b1415612e40576001600160a01b03891660009081526004840160205260408120805460ff19166001179055600384018054899290612e33908490613c80565b9250508190559150612ef6565b60018c6001811115612e5457612e5461349f565b1415612ea0576001600160a01b03891660009081526005840160205260408120805460ff19166001179055600284018054899290612e93908490613c80565b9250508190559050612ef6565b60405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a20756e737570706f7274656420766f7465604482015264207479706560d81b6064820152608401610376565b8a8210612f4a57825460ff19166001908117845580840154604051919750907f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a2612f45838e612fa0565b612f90565b898110612f9057825460ff19166003178355600180840154604051919750907f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25b5050505050979650505050505050565b612fa98161300e565b1561300a57815460ff19166002178255600080612fc58361302c565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba8383604051612fff92919061439e565b60405180910390a250505b5050565b60008160200151600014806130265750468260200151145b92915050565b6060806130388361300e565b6130905760405162461bcd60e51b815260206004820152602360248201527f50726f706f73616c3a20717565727920666f7220696e76616c696420636861696044820152621b925960ea1b6064820152608401610376565b8260400151516001600160401b038111156130ad576130ad6138ff565b6040519080825280602002602001820160405280156130d6578160200160208202803683370190505b5091508260400151516001600160401b038111156130f6576130f66138ff565b60405190808252806020026020018201604052801561312957816020015b60608152602001906001900390816131145790505b50905060005b8360400151518110156132c9578360a00151818151811061315257613152613915565b60200260200101515a116131a85760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c3a20696e73756666696369656e74206761730000000000006044820152606401610376565b836040015181815181106131be576131be613915565b60200260200101516001600160a01b0316846060015182815181106131e5576131e5613915565b60200260200101518560a00151838151811061320357613203613915565b6020026020010151908660800151848151811061322257613222613915565b60200260200101516040516132379190613ba5565b600060405180830381858888f193505050503d8060008114613275576040519150601f19603f3d011682016040523d82523d6000602084013e61327a565b606091505b5084838151811061328d5761328d613915565b602002602001018484815181106132a6576132a6613915565b602090810291909101019190915290151590526132c281613941565b905061312f565b50915091565b6040518060c001604052806000815260200160008152602001606081526020016060815260200160608152602001606081525090565b6001600160a01b038116811461038857600080fd5b60006020828403121561332c57600080fd5b8135612a9781613305565b60008083601f84011261334957600080fd5b5081356001600160401b0381111561336057600080fd5b6020830191508360208260051b850101111561337b57600080fd5b9250929050565b60008060006040848603121561339757600080fd5b8335925060208401356001600160401b038111156133b457600080fd5b6133c086828701613337565b9497909650939450505050565b600081518084526020808501945080840160005b83811015613416578151805160ff168852838101518489015260409081015190880152606090960195908201906001016133e1565b509495945050505050565b602081526000612a9760208301846133cd565b60006020828403121561344657600080fd5b5035919050565b6000806000806060858703121561346357600080fd5b843593506020850135925060408501356001600160401b0381111561348757600080fd5b61349387828801613337565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b600281106103885761038861349f565b604080825283519082018190526000906020906060840190828701845b828110156135075781516134f5816134b5565b845292840192908401906001016134e2565b5050508381038285015261351b81866133cd565b9695505050505050565b60008083601f84011261353757600080fd5b5081356001600160401b0381111561354e57600080fd5b60208301915083602060608302850101111561337b57600080fd5b60008060008060006060868803121561358157600080fd5b8535945060208601356001600160401b038082111561359f57600080fd5b6135ab89838a01613337565b909650945060408801359150808211156135c457600080fd5b506135d188828901613525565b969995985093965092949392505050565b600080600080600080600080600060a08a8c03121561360057600080fd5b8935985060208a01356001600160401b038082111561361e57600080fd5b61362a8d838e01613337565b909a50985060408c013591508082111561364357600080fd5b61364f8d838e01613337565b909850965060608c013591508082111561366857600080fd5b6136748d838e01613337565b909650945060808c013591508082111561368d57600080fd5b5061369a8c828d01613337565b915080935050809150509295985092959850929598565b600080604083850312156136c457600080fd5b82356136cf81613305565b915060208301356136df81613305565b809150509250929050565b60008060008060006060868803121561370257600080fd5b85356001600160401b038082111561371957600080fd5b9087019060c0828a03121561372d57600080fd5b9095506020870135908082111561359f57600080fd5b60008060008060006060868803121561375b57600080fd5b85356001600160401b038082111561377257600080fd5b9087019060a0828a03121561372d57600080fd5b6000806040838503121561379957600080fd5b50508035926020909101359150565b60808101600486106137bc576137bc61349f565b9481526020810193909352604083019190915260609091015290565b6000806000806000806000806080898b0312156137f457600080fd5b88356001600160401b038082111561380b57600080fd5b6138178c838d01613337565b909a50985060208b013591508082111561383057600080fd5b61383c8c838d01613337565b909850965060408b013591508082111561385557600080fd5b6138618c838d01613337565b909650945060608b013591508082111561387a57600080fd5b506138878b828c01613337565b999c989b5096995094979396929594505050565b60208082526027908201527f476f7665726e616e636541646d696e3a206f6e6c7920616c6c6f7765642073656040820152661b198b58d85b1b60ca1b606082015260800190565b6000602082840312156138f457600080fd5b8151612a9781613305565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156139555761395561392b565b5060010190565b83815260406020808301829052908201839052600090849060608401835b868110156139a857833561398d81613305565b6001600160a01b03168252928201929082019060010161397a565b50979650505050505050565b60208082526027908201527f476f7665726e616e636541646d696e3a2073656e646572206973206e6f74206760408201526637bb32b93737b960c91b606082015260800190565b60405160c081016001600160401b0381118282101715613a1d57613a1d6138ff565b60405290565b60405160a081016001600160401b0381118282101715613a1d57613a1d6138ff565b604051601f8201601f191681016001600160401b0381118282101715613a6d57613a6d6138ff565b604052919050565b60006001600160401b03821115613a8e57613a8e6138ff565b5060051b60200190565b6000613aab613aa684613a75565b613a45565b8381529050602080820190600585901b840186811115613aca57600080fd5b845b81811015613b5d5780356001600160401b0380821115613aec5760008081fd5b8188019150601f8a81840112613b025760008081fd5b823582811115613b1457613b146138ff565b613b25818301601f19168801613a45565b92508083528b87828601011115613b3e57600091508182fd5b8087850188850137600090830187015250855250928201928201613acc565b505050509392505050565b6000612a97368484613a98565b60005b83811015613b90578181015183820152602001613b78565b83811115613b9f576000848401525b50505050565b60008251613bb7818460208701613b75565b9190910192915050565b60008151808452613bd9816020860160208601613b75565b601f01601f19169290920160200192915050565b602081526000612a976020830184613bc1565b600060208284031215613c1257600080fd5b5051919050565b600060608284031215613c2b57600080fd5b604051606081018181106001600160401b0382111715613c4d57613c4d6138ff565b604052823560ff81168114613c6157600080fd5b8152602083810135908201526040928301359281019290925250919050565b60008219821115613c9357613c9361392b565b500190565b600081518084526020808501945080840160005b8381101561341657815187529582019590820190600101613cac565b600081518084526020808501808196508360051b8101915082860160005b85811015613d10578284038952613cfe848351613bc1565b98850198935090840190600101613ce6565b5091979650505050505050565b600060c083018251845260208084015181860152604084015160c0604087015282815180855260e0880191508383019450600092505b80831015613d7c5784516001600160a01b03168252938301936001929092019190830190613d53565b50606086015193508681036060880152613d968185613c98565b935050505060808301518482036080860152613db28282613cc8565b91505060a083015184820360a0860152613dcc8282613c98565b95945050505050565b604081526000613de86040830185613d1d565b905060018060a01b03831660208301529392505050565b600082601f830112613e1057600080fd5b81356020613e20613aa683613a75565b82815260059290921b84018101918181019086841115613e3f57600080fd5b8286015b84811015613e63578035613e5681613305565b8352918301918301613e43565b509695505050505050565b600082601f830112613e7f57600080fd5b81356020613e8f613aa683613a75565b82815260059290921b84018101918181019086841115613eae57600080fd5b8286015b84811015613e635780358352918301918301613eb2565b600082601f830112613eda57600080fd5b612a9783833560208501613a98565b600060c08236031215613efb57600080fd5b613f036139fb565b823581526020830135602082015260408301356001600160401b0380821115613f2b57600080fd5b613f3736838701613dff565b60408401526060850135915080821115613f5057600080fd5b613f5c36838701613e6e565b60608401526080850135915080821115613f7557600080fd5b613f8136838701613ec9565b608084015260a0850135915080821115613f9a57600080fd5b50613fa736828601613e6e565b60a08301525092915050565b6020808252602f908201527f476f7665726e616e636541646d696e3a206361737420766f746520666f72206960408201526e1b9d985b1a59081c1c9bdc1bdcd85b608a1b606082015260800190565b6002811061038857600080fd5b600082601f83011261402057600080fd5b81356020614030613aa683613a75565b82815260059290921b8401810191818101908684111561404f57600080fd5b8286015b84811015613e6357803561406681614002565b8352918301918301614053565b600060a0823603121561408557600080fd5b61408d613a23565b8235815260208301356001600160401b03808211156140ab57600080fd5b6140b73683870161400f565b602084015260408501359150808211156140d057600080fd5b6140dc36838701613e6e565b604084015260608501359150808211156140f557600080fd5b61410136838701613ec9565b6060840152608085013591508082111561411a57600080fd5b5061412736828601613e6e565b60808301525092915050565b6080815260006141466080830187613d1d565b60208381018790528382036040850152855182528581015160a083830181905281519084018190529082019060009060c08501905b808310156141a457835161418e816134b5565b825292840192600192909201919084019061417b565b506040890151935084810360408601526141be8185613c98565b9350505050606086015182820360608401526141da8282613cc8565b915050608086015182820360808401526141f48282613c98565b9350505050613dcc60608301846001600160a01b03169052565b73024b9b7b630ba32b223b7bb32b93730b731b29d160651b81526000825161423d816014850160208701613b75565b6d08185b1c9958591e481d9bdd195960921b6014939091019283015250602201919050565b8381526020810183905260608101614279836134b5565b826040830152949350505050565b6000828210156142995761429961392b565b500390565b6000602082840312156142b057600080fd5b8135612a9781614002565b60208082526026908201527f436f7265476f7665726e616e63653a20696e76616c69642070726f706f73616c604082015265206e6f6e636560d01b606082015260800190565b600081600019048311821515161561431b5761431b61392b565b500290565b60008161432f5761432f61392b565b506000190190565b6f021b7b932a3b7bb32b93730b731b29d160851b815260008251614362816010850160208701613b75565b6d08185b1c9958591e481d9bdd195960921b6010939091019283015250601e01919050565b60408101614394846134b5565b9281526020015290565b604080825283519082018190526000906020906060840190828701845b828110156143d95781511515845292840192908401906001016143bb565b5050508381038285015261351b8186613cc856fef8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256ba26469706673582212209d4a2d3d952e51d940ea2a40b8c208dce5b5f2ca404ec1f70985592834c5fd5b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638841d5bb116100ad578063b5e337de11610071578063b5e337de146102fa578063bd458bdc1461030d578063be852fbe14610320578063cd59658314610333578063f3b7dead1461034457600080fd5b80638841d5bb1461024457806388bc711b146102575780638d4f231e1461026a578063988ef53c1461027d578063b384abef146102a657600080fd5b80634f9db8b6116100f45780634f9db8b6146101d95780635511cde1146101fa57806356e237e81461020b5780635ad1e50e1461021e5780637eff275e1461023157600080fd5b80630b26cf6614610131578063204e1c7a14610146578063332635be1461017657806334d5f37b146101965780633644e515146101c4575b600080fd5b61014461013f36600461331a565b610357565b005b61015961015436600461331a565b61038b565b6040516001600160a01b0390911681526020015b60405180910390f35b610189610184366004613382565b61047d565b60405161016d9190613421565b6101b66101a4366004613434565b60006020819052908152604090205481565b60405190815260200161016d565b6101b66000805160206143ee83398151915281565b6101ec6101e736600461344d565b61059f565b60405161016d9291906134c5565b6002546001600160a01b0316610159565b610144610219366004613569565b6107a4565b61014461022c3660046135e2565b610849565b61014461023f3660046136b1565b61092d565b6101446102523660046136ea565b610a5e565b610144610265366004613743565b610a81565b6101446102783660046136ea565b610abb565b6101b661028b36600461331a565b6001600160a01b031660009081526006602052604090205490565b6102ea6102b4366004613786565b60016020818152600093845260408085209091529183529120805491810154600282015460039092015460ff9093169290919084565b60405161016d94939291906137a8565b61014461030836600461331a565b610b00565b61014461031b3660046137d8565b610b28565b61014461032e366004613743565b610bef565b6003546001600160a01b0316610159565b61015961035236600461331a565b610c52565b33301461037f5760405162461bcd60e51b81526004016103769061389b565b60405180910390fd5b61038881610d1f565b50565b6000806000836001600160a01b03166040516103b190635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146103ec576040519150601f19603f3d011682016040523d82523d6000602084013e6103f1565b606091505b5091509150816104615760405162461bcd60e51b815260206004820152603560248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060696d706044820152741b195b595b9d185d1a5bdb8a0a580819985a5b1959605a1b6064820152608401610376565b8080602001905181019061047591906138e2565b949350505050565b6060816001600160401b03811115610497576104976138ff565b6040519080825280602002602001820160405280156104e257816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816104b55790505b50905060005b828110156105975760008581526007602052604081209085858481811061051157610511613915565b9050602002016020810190610526919061331a565b6001600160a01b0316815260208082019290925260409081016000208151606081018352815460ff1681526001820154938101939093526002015490820152825183908390811061057957610579613915565b6020026020010181905250808061058f90613941565b9150506104e8565b509392505050565b60008481526001602090815260408083208684529091528120606091829190846001600160401b038111156105d6576105d66138ff565b6040519080825280602002602001820160405280156105ff578160200160208202803683370190505b509350846001600160401b0381111561061a5761061a6138ff565b60405190808252806020026020018201604052801561066557816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816106385790505b50925060005b858110156107895786868281811061068557610685613915565b905060200201602081019061069a919061331a565b6001600160a01b038116600090815260058501602052604090205490925060ff16156107045760018582815181106106d4576106d4613915565b602002602001019060018111156106ed576106ed61349f565b908160018111156107005761070061349f565b9052505b60008981526001602081815260408084208c855282528084206001600160a01b03871685526006018252928390208351606081018552815460ff16815292810154918301919091526002015491810191909152845185908390811061076b5761076b613915565b6020026020010181905250808061078190613941565b91505061066b565b50505094509492505050565b6002546001600160a01b031690565b6107c884848484896107b4610d74565b6000805160206143ee833981519152610ee0565b60008581526005602052604090206001815460ff1660038111156107ee576107ee61349f565b14156108415760048690556040517f1599b04a1104d19ef534dc177f3de0164ef5e4b99fad7485eda134600fca5f029061082d9088908890889061395c565b60405180910390a1805460ff191660021781555b505050505050565b60006108543361121a565b116108715760405162461bcd60e51b8152600401610376906139b4565b6109218989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152506108e692508991508a9050613b68565b86868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525033925061138e915050565b50505050505050505050565b33301461094c5760405162461bcd60e51b81526004016103769061389b565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b17905291516000928516916109a091613ba5565b6000604051808303816000865af19150503d80600081146109dd576040519150601f19603f3d011682016040523d82523d6000602084013e6109e2565b606091505b5050905080610a595760405162461bcd60e51b815260206004820152603960248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206063686160448201527f6e676541646d696e28616464726573732960206661696c6564000000000000006064820152608401610376565b505050565b610a7a85858585856000805160206143ee83398151915261148f565b5050505050565b610a7a85858585856000805160206143ee833981519152610aaa6002546001600160a01b031690565b6003546001600160a01b031661151c565b6000610ac63361121a565b11610ae35760405162461bcd60e51b8152600401610376906139b4565b610a7a85858585856000805160206143ee833981519152336115d0565b333014610b1f5760405162461bcd60e51b81526004016103769061389b565b6103888161162b565b6000610b333361121a565b11610b505760405162461bcd60e51b8152600401610376906139b4565b610be48888888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610b9592508991508a9050613b68565b868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610bd29250610795915050565b6003546001600160a01b031633611679565b505050505050505050565b6000610bfa3361121a565b11610c175760405162461bcd60e51b8152600401610376906139b4565b61084185858585856000805160206143ee833981519152610c406002546001600160a01b031690565b6003546001600160a01b03163361179a565b6000806000836001600160a01b0316604051610c78906303e1469160e61b815260040190565b600060405180830381855afa9150503d8060008114610cb3576040519150601f19603f3d011682016040523d82523d6000602084013e610cb8565b606091505b5091509150816104615760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206061646d60448201526b1a5b8a0a580819985a5b195960a21b6064820152608401610376565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b6000806000610d8b6002546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b0316637de5dedd60e01b17905291516001600160a01b039390931692634bb5274a92610dd4929101613bed565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610e0d9190613ba5565b600060405180830381855afa9150503d8060008114610e48576040519150601f19603f3d011682016040523d82523d6000602084013e610e4d565b606091505b509150915081610ec55760405162461bcd60e51b815260206004820152603860248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c20606d696e60448201527f696d756d566f7465576569676874282960206661696c656400000000000000006064820152608401610376565b80806020019051810190610ed99190613c00565b9250505090565b600454831015610f4b5760405162461bcd60e51b815260206004820152603060248201527f424f73476f7665726e616e636550726f706f73616c3a20717565727920666f7260448201526f081bdd5d19185d1959081c195c9a5bd960821b6064820152608401610376565b8515801590610f5957508315155b610fb95760405162461bcd60e51b815260206004820152602b60248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b6064820152608401610376565b60408051606081018252600080825260208201819052918101919091526000806000611018878c8c808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506117fd92505050565b90506000611026868361185e565b6000898152600560205260408120919250805b8b8110156111a9578c8c8281811061105357611053613915565b9050606002018036038101906110699190613c19565b97506110838489600001518a602001518b6040015161189f565b9650866001600160a01b0316866001600160a01b0316106110f25760405162461bcd60e51b8152602060048201526024808201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206f604482015263393232b960e11b6064820152608401610376565b8695506000611100886118c7565b90508015611196576001600160a01b03881660008181526006602090815260408083204390558f835260078252808320938352928152908290208b51815460ff191660ff909116178155908b0151600180830191909155918b0151600290910155925082611171858a848f8b611a32565b60038111156111825761118261349f565b141561119657505050505050505050611211565b50806111a181613941565b915050611039565b50806112095760405162461bcd60e51b815260206004820152602960248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964207360448201526869676e61747572657360b81b6064820152608401610376565b505050505050505b50505050505050565b60008060006112316002546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316631af0725f60e31b1790529251931692634bb5274a92611289929101613bed565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516112c29190613ba5565b600060405180830381855afa9150503d80600081146112fd576040519150601f19603f3d011682016040523d82523d6000602084013e611302565b606091505b50915091508161137a5760405162461bcd60e51b815260206004820152603f60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f476f7665726e6f7257656967687428616464726573732960206661696c6564006064820152608401610376565b808060200190518101906104759190613c00565b6000866113dd5760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e2069646044820152606401610376565b6040805160c08101825260008981526020819052918220548190611402906001613c80565b815260200189815260200188815260200187815260200186815260200185815250905061142e81611b2e565b600061143982611bc2565b90506114458982611d3d565b925080838a7f0861aae3a90b957953a30ca9779a1e27af2feeca4205ae2e45cdd5842468a26d858860405161147b929190613dd5565b60405180910390a450509695505050505050565b60006114a261149d88613ee9565b611bc2565b6020808901356000908152600180835260408083208c358452909352919020015490915081146114e45760405162461bcd60e51b815260040161037690613fb3565b6112116114f088613ee9565b8787878761150888611503896000611e31565b61185e565b611517896115038a6001611e31565b611e69565b6000611533838361152c8c614073565b91906121c4565b905060006115486115438b614073565b61237f565b905061155382611bc2565b600080805260016020818152855183527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49905260409091200154146115aa5760405162461bcd60e51b815260040161037690613fb3565b610921828a8a8a8a6115c18b611503896000611e31565b6115178c6115038a6001611e31565b6115e26115dc88613ee9565b826124cc565b5060006115f161149d89613ee9565b90506116216115ff89613ee9565b8888888861161289611503896000611e31565b6115178a6115038a6001611e31565b5050505050505050565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001610d69565b6040805160a08101909152600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5549091829181906116c1906001613c80565b81526020018b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082018b9052604082018a9052606090910188905290915061171f8287876121c4565b905061172a81611b2e565b600061173582611bc2565b9050611742600082611d3d565b935080847fedacddc6fe3387cd527f9ac55848b2e48a439a02270ed36e053a8065169b99c2846117718761237f565b878a6040516117839493929190614133565b60405180910390a350505098975050505050505050565b6117a26132cf565b6117b66117ae8b614073565b8585856125a8565b50905060006117c76115438c614073565b90506117ef828b8b8b8b6117e08c611503896000611e31565b6115178d6115038a6001611e31565b509998505050505050505050565b8051602090810291810191909120604080517feea5e3908ac28cbdbbce8853e49444c558a0a03597e98ef19e6ff86162ed9ae38185015280820194909452606080850192909252805180850390920182526080909301909252815191012090565b60405161190160f01b602082015260228101839052604281018290526000906062015b60405160208183030381529060405280519060200120905092915050565b60008060006118b087878787612654565b915091506118bd81612741565b5095945050505050565b60008060006118de6002546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316635624191160e01b1790529251931692634bb5274a92611936929101613bed565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161196f9190613ba5565b600060405180830381855afa9150503d80600081146119aa576040519150601f19603f3d011682016040523d82523d6000602084013e6119af565b606091505b50915091508161137a5760405162461bcd60e51b815260206004820152604260248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f427269646765566f74657257656967687428616464726573732960206661696c606482015261195960f21b608482015260a401610376565b6001600160a01b038416600090815260028601602052604081205415611a9c57611a66856001600160a01b031660146128fc565b604051602001611a76919061420e565b60408051601f198184030181529082905262461bcd60e51b825261037691600401613bed565b6001600160a01b0385166000908152600287016020908152604080832085905584835260038901909152812080548691908390611ada908490613c80565b9250508190559050838110158015611b0757506000875460ff166003811115611b0557611b0561349f565b145b15611b1f57865460ff19166001908117885587018390555b5050935460ff16949350505050565b6000816040015151118015611b4c5750806060015151816040015151145b8015611b615750806080015151816040015151145b8015611b7657508060a0015151816040015151145b6103885760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c3a20696e76616c6964206172726179206c656e67746800006044820152606401610376565b6000806000806000808660600151905060008760400151905060008860800151516001600160401b03811115611bfa57611bfa6138ff565b604051908082528060200260200182016040528015611c23578160200160208202803683370190505b5060a08a015190915060005b8251811015611c8c578a608001518181518110611c4e57611c4e613915565b602002602001015180519060200120838281518110611c6f57611c6f613915565b602090810291909101015280611c8481613941565b915050611c2f565b5082516020908102848201208551820286830120845183028584012084518402858501208e518f860151604080517f65526afa953b4e935ecd640e6905741252eedae157e79c37331ee8103c70019d9881019890985287019190915260608601526080850184905260a0850183905260c0850182905260e08501819052929b5090995097509550610100015b6040516020818303038152906040528051906020012098505050505050505050919050565b600082815260208190526040812080549082611d5883613941565b9091555090508015611dfa57600083815260016020908152604080832084845290915281205460ff166003811115611d9257611d9261349f565b1415611dfa5760405162461bcd60e51b815260206004820152603160248201527f436f7265476f7665726e616e63653a2063757272656e742070726f706f73616c604482015270081a5cc81b9bdd0818dbdb5c1b195d1959607a1b6064820152608401610376565b60008381526001602052604081208391611e1384613941565b93508381526020019081526020016000206001018190555092915050565b604051600090611881907fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c29085908590602001614262565b8415801590611e7757508483145b611ed45760405162461bcd60e51b815260206004820152602860248201527f476f7665726e616e636550726f706f73616c3a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b6064820152608401610376565b6000611ede610d74565b9050600081611eeb612a9e565b611ef59190614287565b611f00906001613c80565b9050600080611f28604080516060810182526000808252602082018190529181019190915290565b6000805b89811015612158578a8a82818110611f4657611f46613915565b905060600201803603810190611f5c9190613c19565b925060008d8d83818110611f7257611f72613915565b9050602002016020810190611f87919061429e565b6001811115611f9857611f9861349f565b1415611fbd57611fb68984600001518560200151866040015161189f565b9350612079565b60018d8d83818110611fd157611fd1613915565b9050602002016020810190611fe6919061429e565b6001811115611ff757611ff761349f565b141561201557611fb68884600001518560200151866040015161189f565b60405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636550726f706f73616c3a20717565727920666f7220756e604482015272737570706f7274656420766f7465207479706560681b6064820152608401610376565b836001600160a01b0316856001600160a01b0316106120e45760405162461bcd60e51b815260206004820152602160248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964206f7264656044820152603960f91b6064820152608401610376565b83945060006120f28561121a565b9050801561214557600192506121338f8f8f8581811061211457612114613915565b9050602002016020810190612129919061429e565b8a8a898987612be5565b15612145575050505050505050611211565b508061215081613941565b915050611f2c565b50806121b55760405162461bcd60e51b815260206004820152602660248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964207369676e60448201526561747572657360d01b6064820152608401610376565b50505050505050505050505050565b6121cc6132cf565b835181526000602080830191909152840151516001600160401b038111156121f6576121f66138ff565b60405190808252806020026020018201604052801561221f578160200160208202803683370190505b5060408083019190915284015160608083019190915284015160808083019190915284015160a082015260005b8460200151518110156105975760018560200151828151811061227157612271613915565b6020026020010151600181111561228a5761228a61349f565b14156122cc5782826040015182815181106122a7576122a7613915565b60200260200101906001600160a01b031690816001600160a01b03168152505061236d565b6000856020015182815181106122e4576122e4613915565b602002602001015160018111156122fd576122fd61349f565b141561231a5783826040015182815181106122a7576122a7613915565b60405162461bcd60e51b815260206004820152602260248201527f476c6f62616c50726f706f73616c3a20756e737570706f727465642074617267604482015261195d60f21b6064820152608401610376565b8061237781613941565b91505061224c565b6000806000806000808660400151905060008760200151905060008860600151516001600160401b038111156123b7576123b76138ff565b6040519080825280602002602001820160405280156123e0578160200160208202803683370190505b5060808a015190915060005b8251811015612449578a60600151818151811061240b5761240b613915565b60200260200101518051906020012083828151811061242c5761242c613915565b60209081029190910101528061244181613941565b9150506123ec565b5082516020908102818501208551820286830120845183028584012084518402858501208e51604080517fdb316eb400de2ddff92ab4255c0cd3cba634cd5236b93386ed9328b7d822d1c797810197909752860152606085018490526080850183905260a0850182905260c08501819052929b509099509750955060e001611d18565b6020820151600090806125215760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e2069646044820152606401610376565b61252a84611b2e565b600061253585611bc2565b90506125418282611d3d565b855190935083146125645760405162461bcd60e51b8152600401610376906142bb565b8083837f0861aae3a90b957953a30ca9779a1e27af2feeca4205ae2e45cdd5842468a26d8888604051612598929190613dd5565b60405180910390a4505092915050565b6125b06132cf565b60006125bd8686866121c4565b91506125c882611b2e565b60006125d383611bc2565b90506125e0600082611d3d565b835190925082146126035760405162461bcd60e51b8152600401610376906142bb565b80827fedacddc6fe3387cd527f9ac55848b2e48a439a02270ed36e053a8065169b99c2856126308b61237f565b8b896040516126429493929190614133565b60405180910390a35094509492505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561268b5750600090506003612738565b8460ff16601b141580156126a357508460ff16601c14155b156126b45750600090506004612738565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612708573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661273157600060019250925050612738565b9150600090505b94509492505050565b60008160048111156127555761275561349f565b141561275e5750565b60018160048111156127725761277261349f565b14156127c05760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610376565b60028160048111156127d4576127d461349f565b14156128225760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610376565b60038160048111156128365761283661349f565b141561288f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610376565b60048160048111156128a3576128a361349f565b14156103885760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610376565b6060600061290b836002614301565b612916906002613c80565b6001600160401b0381111561292d5761292d6138ff565b6040519080825280601f01601f191660200182016040528015612957576020820181803683370190505b509050600360fc1b8160008151811061297257612972613915565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106129a1576129a1613915565b60200101906001600160f81b031916908160001a90535060006129c5846002614301565b6129d0906001613c80565b90505b6001811115612a48576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a0457612a04613915565b1a60f81b828281518110612a1a57612a1a613915565b60200101906001600160f81b031916908160001a90535060049490941c93612a4181614320565b90506129d3565b508315612a975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610376565b9392505050565b6000806000612ab56002546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b031663926323d560e01b17905291516001600160a01b039390931692634bb5274a92612afe929101613bed565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612b379190613ba5565b600060405180830381855afa9150503d8060008114612b72576040519150601f19603f3d011682016040523d82523d6000602084013e612b77565b606091505b509150915081610ec55760405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060746f74604482015272185b15d95a59da1d1cca0a580819985a5b1959606a1b6064820152608401610376565b60208088018051895160008281526001855260408082208383528652808220945182529481905293842054919290918214612c7b5760405162461bcd60e51b815260206004820152603060248201527f436f7265476f7665726e616e63653a20717565727920666f7220696e76616c6960448201526f642070726f706f73616c206e6f6e636560801b6064820152608401610376565b6000815460ff166003811115612c9357612c9361349f565b14612cee5760405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a2074686520766f74652069732066696e616044820152641b1a5e995960da1b6064820152608401610376565b6001600160a01b038716600090815260048201602052604090205460ff1680612d3157506001600160a01b038716600090815260058201602052604090205460ff165b15612d5a57612d4a876001600160a01b031660146128fc565b604051602001611a769190614337565b6001600160a01b03871660008181526006830160209081526040918290208951815460ff191660ff909116178155908901516001808301919091558983015160029092019190915583015490517f1203f9e81c814a35f5f4cc24087b2a24c6fb7986a9f1406b68a9484882c93a2390612dd6908e908a90614387565b60405180910390a3600080808c6001811115612df457612df461349f565b1415612e40576001600160a01b03891660009081526004840160205260408120805460ff19166001179055600384018054899290612e33908490613c80565b9250508190559150612ef6565b60018c6001811115612e5457612e5461349f565b1415612ea0576001600160a01b03891660009081526005840160205260408120805460ff19166001179055600284018054899290612e93908490613c80565b9250508190559050612ef6565b60405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a20756e737570706f7274656420766f7465604482015264207479706560d81b6064820152608401610376565b8a8210612f4a57825460ff19166001908117845580840154604051919750907f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a2612f45838e612fa0565b612f90565b898110612f9057825460ff19166003178355600180840154604051919750907f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25b5050505050979650505050505050565b612fa98161300e565b1561300a57815460ff19166002178255600080612fc58361302c565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba8383604051612fff92919061439e565b60405180910390a250505b5050565b60008160200151600014806130265750468260200151145b92915050565b6060806130388361300e565b6130905760405162461bcd60e51b815260206004820152602360248201527f50726f706f73616c3a20717565727920666f7220696e76616c696420636861696044820152621b925960ea1b6064820152608401610376565b8260400151516001600160401b038111156130ad576130ad6138ff565b6040519080825280602002602001820160405280156130d6578160200160208202803683370190505b5091508260400151516001600160401b038111156130f6576130f66138ff565b60405190808252806020026020018201604052801561312957816020015b60608152602001906001900390816131145790505b50905060005b8360400151518110156132c9578360a00151818151811061315257613152613915565b60200260200101515a116131a85760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c3a20696e73756666696369656e74206761730000000000006044820152606401610376565b836040015181815181106131be576131be613915565b60200260200101516001600160a01b0316846060015182815181106131e5576131e5613915565b60200260200101518560a00151838151811061320357613203613915565b6020026020010151908660800151848151811061322257613222613915565b60200260200101516040516132379190613ba5565b600060405180830381858888f193505050503d8060008114613275576040519150601f19603f3d011682016040523d82523d6000602084013e61327a565b606091505b5084838151811061328d5761328d613915565b602002602001018484815181106132a6576132a6613915565b602090810291909101019190915290151590526132c281613941565b905061312f565b50915091565b6040518060c001604052806000815260200160008152602001606081526020016060815260200160608152602001606081525090565b6001600160a01b038116811461038857600080fd5b60006020828403121561332c57600080fd5b8135612a9781613305565b60008083601f84011261334957600080fd5b5081356001600160401b0381111561336057600080fd5b6020830191508360208260051b850101111561337b57600080fd5b9250929050565b60008060006040848603121561339757600080fd5b8335925060208401356001600160401b038111156133b457600080fd5b6133c086828701613337565b9497909650939450505050565b600081518084526020808501945080840160005b83811015613416578151805160ff168852838101518489015260409081015190880152606090960195908201906001016133e1565b509495945050505050565b602081526000612a9760208301846133cd565b60006020828403121561344657600080fd5b5035919050565b6000806000806060858703121561346357600080fd5b843593506020850135925060408501356001600160401b0381111561348757600080fd5b61349387828801613337565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b600281106103885761038861349f565b604080825283519082018190526000906020906060840190828701845b828110156135075781516134f5816134b5565b845292840192908401906001016134e2565b5050508381038285015261351b81866133cd565b9695505050505050565b60008083601f84011261353757600080fd5b5081356001600160401b0381111561354e57600080fd5b60208301915083602060608302850101111561337b57600080fd5b60008060008060006060868803121561358157600080fd5b8535945060208601356001600160401b038082111561359f57600080fd5b6135ab89838a01613337565b909650945060408801359150808211156135c457600080fd5b506135d188828901613525565b969995985093965092949392505050565b600080600080600080600080600060a08a8c03121561360057600080fd5b8935985060208a01356001600160401b038082111561361e57600080fd5b61362a8d838e01613337565b909a50985060408c013591508082111561364357600080fd5b61364f8d838e01613337565b909850965060608c013591508082111561366857600080fd5b6136748d838e01613337565b909650945060808c013591508082111561368d57600080fd5b5061369a8c828d01613337565b915080935050809150509295985092959850929598565b600080604083850312156136c457600080fd5b82356136cf81613305565b915060208301356136df81613305565b809150509250929050565b60008060008060006060868803121561370257600080fd5b85356001600160401b038082111561371957600080fd5b9087019060c0828a03121561372d57600080fd5b9095506020870135908082111561359f57600080fd5b60008060008060006060868803121561375b57600080fd5b85356001600160401b038082111561377257600080fd5b9087019060a0828a03121561372d57600080fd5b6000806040838503121561379957600080fd5b50508035926020909101359150565b60808101600486106137bc576137bc61349f565b9481526020810193909352604083019190915260609091015290565b6000806000806000806000806080898b0312156137f457600080fd5b88356001600160401b038082111561380b57600080fd5b6138178c838d01613337565b909a50985060208b013591508082111561383057600080fd5b61383c8c838d01613337565b909850965060408b013591508082111561385557600080fd5b6138618c838d01613337565b909650945060608b013591508082111561387a57600080fd5b506138878b828c01613337565b999c989b5096995094979396929594505050565b60208082526027908201527f476f7665726e616e636541646d696e3a206f6e6c7920616c6c6f7765642073656040820152661b198b58d85b1b60ca1b606082015260800190565b6000602082840312156138f457600080fd5b8151612a9781613305565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156139555761395561392b565b5060010190565b83815260406020808301829052908201839052600090849060608401835b868110156139a857833561398d81613305565b6001600160a01b03168252928201929082019060010161397a565b50979650505050505050565b60208082526027908201527f476f7665726e616e636541646d696e3a2073656e646572206973206e6f74206760408201526637bb32b93737b960c91b606082015260800190565b60405160c081016001600160401b0381118282101715613a1d57613a1d6138ff565b60405290565b60405160a081016001600160401b0381118282101715613a1d57613a1d6138ff565b604051601f8201601f191681016001600160401b0381118282101715613a6d57613a6d6138ff565b604052919050565b60006001600160401b03821115613a8e57613a8e6138ff565b5060051b60200190565b6000613aab613aa684613a75565b613a45565b8381529050602080820190600585901b840186811115613aca57600080fd5b845b81811015613b5d5780356001600160401b0380821115613aec5760008081fd5b8188019150601f8a81840112613b025760008081fd5b823582811115613b1457613b146138ff565b613b25818301601f19168801613a45565b92508083528b87828601011115613b3e57600091508182fd5b8087850188850137600090830187015250855250928201928201613acc565b505050509392505050565b6000612a97368484613a98565b60005b83811015613b90578181015183820152602001613b78565b83811115613b9f576000848401525b50505050565b60008251613bb7818460208701613b75565b9190910192915050565b60008151808452613bd9816020860160208601613b75565b601f01601f19169290920160200192915050565b602081526000612a976020830184613bc1565b600060208284031215613c1257600080fd5b5051919050565b600060608284031215613c2b57600080fd5b604051606081018181106001600160401b0382111715613c4d57613c4d6138ff565b604052823560ff81168114613c6157600080fd5b8152602083810135908201526040928301359281019290925250919050565b60008219821115613c9357613c9361392b565b500190565b600081518084526020808501945080840160005b8381101561341657815187529582019590820190600101613cac565b600081518084526020808501808196508360051b8101915082860160005b85811015613d10578284038952613cfe848351613bc1565b98850198935090840190600101613ce6565b5091979650505050505050565b600060c083018251845260208084015181860152604084015160c0604087015282815180855260e0880191508383019450600092505b80831015613d7c5784516001600160a01b03168252938301936001929092019190830190613d53565b50606086015193508681036060880152613d968185613c98565b935050505060808301518482036080860152613db28282613cc8565b91505060a083015184820360a0860152613dcc8282613c98565b95945050505050565b604081526000613de86040830185613d1d565b905060018060a01b03831660208301529392505050565b600082601f830112613e1057600080fd5b81356020613e20613aa683613a75565b82815260059290921b84018101918181019086841115613e3f57600080fd5b8286015b84811015613e63578035613e5681613305565b8352918301918301613e43565b509695505050505050565b600082601f830112613e7f57600080fd5b81356020613e8f613aa683613a75565b82815260059290921b84018101918181019086841115613eae57600080fd5b8286015b84811015613e635780358352918301918301613eb2565b600082601f830112613eda57600080fd5b612a9783833560208501613a98565b600060c08236031215613efb57600080fd5b613f036139fb565b823581526020830135602082015260408301356001600160401b0380821115613f2b57600080fd5b613f3736838701613dff565b60408401526060850135915080821115613f5057600080fd5b613f5c36838701613e6e565b60608401526080850135915080821115613f7557600080fd5b613f8136838701613ec9565b608084015260a0850135915080821115613f9a57600080fd5b50613fa736828601613e6e565b60a08301525092915050565b6020808252602f908201527f476f7665726e616e636541646d696e3a206361737420766f746520666f72206960408201526e1b9d985b1a59081c1c9bdc1bdcd85b608a1b606082015260800190565b6002811061038857600080fd5b600082601f83011261402057600080fd5b81356020614030613aa683613a75565b82815260059290921b8401810191818101908684111561404f57600080fd5b8286015b84811015613e6357803561406681614002565b8352918301918301614053565b600060a0823603121561408557600080fd5b61408d613a23565b8235815260208301356001600160401b03808211156140ab57600080fd5b6140b73683870161400f565b602084015260408501359150808211156140d057600080fd5b6140dc36838701613e6e565b604084015260608501359150808211156140f557600080fd5b61410136838701613ec9565b6060840152608085013591508082111561411a57600080fd5b5061412736828601613e6e565b60808301525092915050565b6080815260006141466080830187613d1d565b60208381018790528382036040850152855182528581015160a083830181905281519084018190529082019060009060c08501905b808310156141a457835161418e816134b5565b825292840192600192909201919084019061417b565b506040890151935084810360408601526141be8185613c98565b9350505050606086015182820360608401526141da8282613cc8565b915050608086015182820360808401526141f48282613c98565b9350505050613dcc60608301846001600160a01b03169052565b73024b9b7b630ba32b223b7bb32b93730b731b29d160651b81526000825161423d816014850160208701613b75565b6d08185b1c9958591e481d9bdd195960921b6014939091019283015250602201919050565b8381526020810183905260608101614279836134b5565b826040830152949350505050565b6000828210156142995761429961392b565b500390565b6000602082840312156142b057600080fd5b8135612a9781614002565b60208082526026908201527f436f7265476f7665726e616e63653a20696e76616c69642070726f706f73616c604082015265206e6f6e636560d01b606082015260800190565b600081600019048311821515161561431b5761431b61392b565b500290565b60008161432f5761432f61392b565b506000190190565b6f021b7b932a3b7bb32b93730b731b29d160851b815260008251614362816010850160208701613b75565b6d08185b1c9958591e481d9bdd195960921b6010939091019283015250601e01919050565b60408101614394846134b5565b9281526020015290565b604080825283519082018190526000906020906060840190828701845b828110156143d95781511515845292840192908401906001016143bb565b5050508381038285015261351b8186613cc856fef8704f8860d9e985bf6c52ec4738bd10fe31487599b36c0944f746ea09dc256ba26469706673582212209d4a2d3d952e51d940ea2a40b8c208dce5b5f2ca404ec1f70985592834c5fd5b64736f6c63430008090033",
  "devdoc": {
    "events": {
      "BridgeOperatorsApproved(uint256,address[])": {
        "details": "Emitted when the bridge operators are approved."
      }
    },
    "kind": "dev",
    "methods": {
      "bridgeContract()": {
        "details": "Returns the bridge contract."
      },
      "castGlobalProposalBySignatures((uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See {GovernanceProposal-_castGlobalProposalBySignatures}."
      },
      "castProposalBySignatures((uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See {GovernanceProposal-_castProposalBySignatures}."
      },
      "changeProxyAdmin(address,address)": {
        "details": "Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`."
      },
      "getBridgeOperatorVotingSignatures(uint256,address[])": {
        "details": "Returns the voted signatures for bridge operators at a specific period. Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty. Please consider filtering for empty signatures after calling this function."
      },
      "getProposalSignatures(uint256,uint256,address[])": {
        "details": "Returns the voted signatures for the proposals. Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty. Please consider filtering for empty signatures after calling this function."
      },
      "getProxyAdmin(address)": {
        "details": "Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getProxyImplementation(address)": {
        "details": "Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "lastVotedBlock(address)": {
        "details": "Returns the last voted block of the bridge voter."
      },
      "propose(uint256,address[],uint256[],bytes[],uint256[])": {
        "details": "See {CoreGovernance-_proposeProposal}. Requirements: - The method caller is governor."
      },
      "proposeGlobal(uint8[],uint256[],bytes[],uint256[])": {
        "details": "See {CoreGovernance-_proposeGlobal}. Requirements: - The method caller is governor."
      },
      "proposeGlobalProposalStructAndCastVotes((uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See {GovernanceProposal-_proposeGlobalProposalStructAndCastVotes}. Requirements: - The method caller is governor."
      },
      "proposeProposalStructAndCastVotes((uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See {GovernanceProposal-_proposeProposalStructAndCastVotes}. Requirements: - The method caller is governor."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeContract(address)": {
        "details": "Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "voteBridgeOperatorsBySignatures(uint256,address[],(uint8,bytes32,bytes32)[])": {
        "details": "See {BOsGovernanceProposal-_castVotesBySignatures}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "round(uint256)": {
        "notice": "chain id = 0 for global proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7031,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "round",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7039,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "vote",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)6962_storage))"
      },
      {
        "astId": 6028,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoninTrustedOrganization)9534"
      },
      {
        "astId": 5715,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_bridgeContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IBridge)8545"
      },
      {
        "astId": 6522,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_lastSyncedPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6528,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_vote",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(IsolatedVote)6394_storage)"
      },
      {
        "astId": 6533,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_lastVotedBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6541,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_votingSig",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Signature)10209_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)8545": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)9534": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_enum(VoteStatus)10217": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_struct(Signature)10209_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignatureConsumer.Signature)",
        "numberOfBytes": "32",
        "value": "t_struct(Signature)10209_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Signature)10209_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct SignatureConsumer.Signature))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Signature)10209_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)6962_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalVote)6962_storage)"
      },
      "t_mapping(t_uint256,t_struct(IsolatedVote)6394_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IsolatedGovernance.IsolatedVote)",
        "numberOfBytes": "32",
        "value": "t_struct(IsolatedVote)6394_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)6962_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreGovernance.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)6962_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(IsolatedVote)6394_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.IsolatedVote",
        "members": [
          {
            "astId": 6381,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10217"
          },
          {
            "astId": 6383,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6388,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 6393,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "weight",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ProposalVote)6962_storage": {
        "encoding": "inplace",
        "label": "struct CoreGovernance.ProposalVote",
        "members": [
          {
            "astId": 6942,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10217"
          },
          {
            "astId": 6944,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6946,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6948,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6952,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoted",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6956,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoted",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6961,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "sig",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_struct(Signature)10209_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Signature)10209_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConsumer.Signature",
        "members": [
          {
            "astId": 10204,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "v",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10206,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "r",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10208,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "s",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}