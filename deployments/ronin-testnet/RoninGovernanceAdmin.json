{
  "address": "0xA1DE8d3F62114Bc1666655Ae1719bE26Ae26Ee36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roninChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_roninTrustedOrganizationContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_proposalExpiryDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeBridgeContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeRoninTrustedOrgContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeValidatorContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_operators",
          "type": "address[]"
        }
      ],
      "name": "BridgeOperatorsApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        }
      ],
      "name": "EmergencyExitPollApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipientAfterUnlockedFund",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_expiredAt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExitPollCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        }
      ],
      "name": "EmergencyExitPollExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "globalProposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "globalProposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GlobalProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "name": "proposal",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "successCalls",
          "type": "bool[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "returnDatas",
          "type": "bytes[]"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "proposalHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Ballot.VoteType",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoninTrustedOrganizationContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "bridgeOperatorsVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "castGlobalProposalBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "castProposalBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType",
          "name": "_support",
          "type": "uint8"
        }
      ],
      "name": "castProposalVoteForCurrentNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "changeProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipientAfterUnlockedFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiredAt",
          "type": "uint256"
        }
      ],
      "name": "createEmergencyExitPoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "deleteExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "emergencyPollVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "getBridgeOperatorVotingSignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProposalExpiryDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getProposalSignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "getProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSyncedBridgeOperatorSetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct BridgeOperatorsBallot.BridgeOperatorSet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeVoter",
          "type": "address"
        }
      ],
      "name": "lastVotedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "proposalVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum GlobalProposal.TargetOption[]",
          "name": "_targetOptions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "proposeGlobal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum GlobalProposal.TargetOption[]",
              "name": "targetOptions",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct GlobalProposal.GlobalProposalDetail",
          "name": "_globalProposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "proposeGlobalProposalStructAndCastVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_gasAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Ballot.VoteType",
          "name": "_support",
          "type": "uint8"
        }
      ],
      "name": "proposeProposalForCurrentNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gasAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Proposal.ProposalDetail",
          "name": "_proposal",
          "type": "tuple"
        },
        {
          "internalType": "enum Ballot.VoteType[]",
          "name": "_supports",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "proposeProposalStructAndCastVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roninTrustedOrganizationContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryDuration",
          "type": "uint256"
        }
      ],
      "name": "setProposalExpiryDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRoninTrustedOrganizationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "enum VoteStatusConsumer.VoteStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "againstVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVoteWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct BridgeOperatorsBallot.BridgeOperatorSet",
          "name": "_ballot",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureConsumer.Signature[]",
          "name": "_signatures",
          "type": "tuple[]"
        }
      ],
      "name": "voteBridgeOperatorsBySignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_voteHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_consensusAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipientAfterUnlockedFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiredAt",
          "type": "uint256"
        }
      ],
      "name": "voteEmergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f73cd68eeddde9ce1a5e84a3007db1cb60bd547c56abd9106d0e91bf8960f11",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xA1DE8d3F62114Bc1666655Ae1719bE26Ae26Ee36",
    "transactionIndex": 0,
    "gasUsed": "5374800",
    "logsBloom": "0x
    "blockHash": "0x450191ac486e3b09b9302561d87c38c02b7853817ef51171f2a1676a00714940",
    "transactionHash": "0x2f73cd68eeddde9ce1a5e84a3007db1cb60bd547c56abd9106d0e91bf8960f11",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13306432,
        "transactionHash": "0x2f73cd68eeddde9ce1a5e84a3007db1cb60bd547c56abd9106d0e91bf8960f11",
        "address": "0xA1DE8d3F62114Bc1666655Ae1719bE26Ae26Ee36",
        "topics": [
          "0xfd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7"
        ],
        "data": "0x0000000000000000000000007507dc433a98e1fe105d69f19f3b40e4315a4f32",
        "logIndex": 0,
        "blockHash": "0x450191ac486e3b09b9302561d87c38c02b7853817ef51171f2a1676a00714940"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13306432,
        "transactionHash": "0x2f73cd68eeddde9ce1a5e84a3007db1cb60bd547c56abd9106d0e91bf8960f11",
        "address": "0xA1DE8d3F62114Bc1666655Ae1719bE26Ae26Ee36",
        "topics": [
          "0x5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048"
        ],
        "data": "0x000000000000000000000000cee681c9108c42c710c6a8a949307d5f13c9f3ca",
        "logIndex": 1,
        "blockHash": "0x450191ac486e3b09b9302561d87c38c02b7853817ef51171f2a1676a00714940"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13306432,
        "transactionHash": "0x2f73cd68eeddde9ce1a5e84a3007db1cb60bd547c56abd9106d0e91bf8960f11",
        "address": "0xA1DE8d3F62114Bc1666655Ae1719bE26Ae26Ee36",
        "topics": [
          "0xef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b6836169"
        ],
        "data": "0x00000000000000000000000054b3ac74a90e64e8dde60671b6fe8f8ddf18ec9d",
        "logIndex": 2,
        "blockHash": "0x450191ac486e3b09b9302561d87c38c02b7853817ef51171f2a1676a00714940"
      }
    ],
    "blockNumber": 13306432,
    "cumulativeGasUsed": "5374800",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2021,
    "0x7507dc433a98E1fE105d69f19f3B40E4315A4F32",
    "0xCee681C9108c42C710c6A8A949307D5F13C9F3ca",
    "0x54B3AC74a90E64E8dDE60671b6fE8F8DDf18eC9d",
    1209600
  ],
  "numDeployments": 5,
  "solcInputHash": "95f7f074e14fa276eae26f8589bbed19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roninChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalExpiryDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeBridgeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeRoninTrustedOrgContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeValidatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorsApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"}],\"name\":\"EmergencyExitPollApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipientAfterUnlockedFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiredAt\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitPollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"}],\"name\":\"EmergencyExitPollExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"globalProposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"globalProposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GlobalProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoninTrustedOrganizationContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"bridgeOperatorsVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castGlobalProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType\",\"name\":\"_support\",\"type\":\"uint8\"}],\"name\":\"castProposalVoteForCurrentNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipientAfterUnlockedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiredAt\",\"type\":\"uint256\"}],\"name\":\"createEmergencyExitPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"deleteExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"emergencyPollVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getBridgeOperatorVotingSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getProposalSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSyncedBridgeOperatorSetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct BridgeOperatorsBallot.BridgeOperatorSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeVoter\",\"type\":\"address\"}],\"name\":\"lastVotedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"proposalVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"_targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"proposeGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum GlobalProposal.TargetOption[]\",\"name\":\"targetOptions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GlobalProposal.GlobalProposalDetail\",\"name\":\"_globalProposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeGlobalProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Ballot.VoteType\",\"name\":\"_support\",\"type\":\"uint8\"}],\"name\":\"proposeProposalForCurrentNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninTrustedOrganizationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryDuration\",\"type\":\"uint256\"}],\"name\":\"setProposalExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoninTrustedOrganizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct BridgeOperatorsBallot.BridgeOperatorSet\",\"name\":\"_ballot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"voteBridgeOperatorsBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipientAfterUnlockedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiredAt\",\"type\":\"uint256\"}],\"name\":\"voteEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallerMustBeBridgeContract()\":[{\"details\":\"Error of method caller must be bridge contract.\"}],\"ErrCallerMustBeRoninTrustedOrgContract()\":[{\"details\":\"Error of method caller must be Ronin trusted org contract.\"}],\"ErrCallerMustBeValidatorContract()\":[{\"details\":\"Error of method caller must be validator contract.\"}],\"ErrZeroCodeContract()\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"bridgeContract()\":{\"details\":\"Returns the bridge contract.\"},\"bridgeOperatorsVoted(uint256,uint256,address)\":{\"details\":\"Returns whether the voter `_voter` casted vote for bridge operators at a specific period.\"},\"castGlobalProposalBySignatures((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_castGlobalProposalBySignatures`.\"},\"castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_castProposalBySignatures`.\"},\"castProposalVoteForCurrentNetwork((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8)\":{\"details\":\"Casts vote for a proposal on the current network. Requirements: - The method caller is governor.\"},\"changeProxyAdmin(address,address)\":{\"details\":\"Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`.\"},\"createEmergencyExitPoll(address,address,uint256,uint256)\":{\"details\":\"Create a vote to agree that an emergency exit is valid and should return the locked funds back.a Requirements: - The method caller is validator contract.\"},\"deleteExpired(uint256,uint256)\":{\"details\":\"See `CoreGovernance-_deleteExpiredProposal`\"},\"emergencyPollVoted(bytes32,address)\":{\"details\":\"Returns whether the voter casted vote for emergency exit poll.\"},\"getBridgeOperatorVotingSignatures(uint256,uint256)\":{\"details\":\"Returns the voted signatures for bridge operators at a specific period. Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty. Please consider filtering for empty signatures after calling this function.\"},\"getProposalExpiryDuration()\":{\"details\":\"Returns the proposal expiry duration.\"},\"getProposalSignatures(uint256,uint256)\":{\"details\":\"Returns the voted signatures for the proposals. Note: The signatures can be empty in case the proposal is voted on the current network.\"},\"getProxyAdmin(address)\":{\"details\":\"Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getProxyImplementation(address)\":{\"details\":\"Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"lastSyncedBridgeOperatorSetInfo()\":{\"details\":\"Returns the synced bridge operator set info.\"},\"lastVotedBlock(address)\":{\"details\":\"Returns the last voted block of the bridge voter.\"},\"proposalVoted(uint256,uint256,address)\":{\"details\":\"Returns whether the voter `_voter` casted vote for the proposal.\"},\"propose(uint256,uint256,address[],uint256[],bytes[],uint256[])\":{\"details\":\"See `CoreGovernance-_proposeProposal`. Requirements: - The method caller is governor.\"},\"proposeGlobal(uint256,uint8[],uint256[],bytes[],uint256[])\":{\"details\":\"See `CoreGovernance-_proposeGlobal`. Requirements: - The method caller is governor.\"},\"proposeGlobalProposalStructAndCastVotes((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`. Requirements: - The method caller is governor.\"},\"proposeProposalForCurrentNetwork(uint256,address[],uint256[],bytes[],uint256[],uint8)\":{\"details\":\"Proposes and casts vote for a proposal on the current network. Requirements: - The method caller is governor. - The proposal is for the current network.\"},\"proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_proposeProposalStructAndCastVotes`. Requirements: - The method caller is governor. - The proposal is for the current network.\"},\"roninTrustedOrganizationContract()\":{\"details\":\"Returns the ronin trusted organization contract.\"},\"setBridgeContract(address)\":{\"details\":\"Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`.\"},\"setProposalExpiryDuration(uint256)\":{\"details\":\"Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin.\"},\"setRoninTrustedOrganizationContract(address)\":{\"details\":\"Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`.\"},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"},\"voteBridgeOperatorsBySignatures((uint256,uint256,address[]),(uint8,bytes32,bytes32)[])\":{\"details\":\"See `BOsGovernanceProposal-_castVotesBySignatures`.\"},\"voteEmergencyExit(bytes32,address,address,uint256,uint256)\":{\"details\":\"Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester. Requirements: - The voter is governor. - The voting is existent. - The voting is not expired yet.\"}},\"stateVariables\":{\"_emergencyExitPoll\":{\"details\":\"Mapping from request hash => emergency poll\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"round(uint256)\":{\"notice\":\"chain id = 0 for global proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/RoninGovernanceAdmin.sol\":\"RoninGovernanceAdmin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/extensions/GovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport \\\"../extensions/collections/HasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../extensions/collections/HasBridgeContract.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\nabstract contract GovernanceAdmin is CoreGovernance, HasRoninTrustedOrganizationContract, HasBridgeContract {\\n  uint256 public roninChainId;\\n  /// @dev Domain separator\\n  bytes32 public DOMAIN_SEPARATOR;\\n\\n  modifier onlySelfCall() {\\n    require(msg.sender == address(this), \\\"GovernanceAdmin: only allowed self-call\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 _roninChainId,\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    uint256 _proposalExpiryDuration\\n  ) CoreGovernance(_proposalExpiryDuration) {\\n    roninChainId = _roninChainId;\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n        keccak256(\\\"GovernanceAdmin\\\"), // name hash\\n        keccak256(\\\"2\\\"), // version hash\\n        keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", _roninChainId)) // salt\\n      )\\n    );\\n    _setRoninTrustedOrganizationContract(_roninTrustedOrganizationContract);\\n    _setBridgeContract(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external override onlySelfCall {\\n    require(_addr.code.length > 0, \\\"GovernanceAdmin: set to non-contract\\\");\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external override onlySelfCall {\\n    require(_addr.code.length > 0, \\\"GovernanceAdmin: set to non-contract\\\");\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   *\\n   * Requirements:\\n   * - Only allowing self-call to this method, since this contract does not have admin.\\n   *\\n   */\\n  function setProposalExpiryDuration(uint256 _expiryDuration) external onlySelfCall {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyImplementation(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(hex\\\"5c60da1b\\\");\\n    require(_success, \\\"GovernanceAdmin: proxy call `implementation()` failed\\\");\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the proposal expiry duration.\\n   */\\n  function getProposalExpiryDuration() external view returns (uint256) {\\n    return super._getProposalExpiryDuration();\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyAdmin(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(hex\\\"f851a440\\\");\\n    require(_success, \\\"GovernanceAdmin: proxy call `admin()` failed\\\");\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `_proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - This contract must be the current admin of `_proxy`.\\n   *\\n   */\\n  function changeProxyAdmin(address _proxy, address _newAdmin) external onlySelfCall {\\n    // bytes4(keccak256(\\\"changeAdmin(address)\\\"))\\n    (bool _success, ) = _proxy.call(abi.encodeWithSelector(0x8f283970, _newAdmin));\\n    require(_success, \\\"GovernanceAdmin: proxy call `changeAdmin(address)` failed\\\");\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getMinimumVoteWeight`.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IQuorum.minimumVoteWeight.selector)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `minimumVoteWeight()` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getTotalWeights`.\\n   */\\n  function _getTotalWeights() internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.totalWeights.selector)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `totalWeights()` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0xe7ff3968824b74d4c49a5861adafde78763992801fe316cbe751198c47654e0b\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeContract.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\n\\ncontract HasBridgeContract is IHasBridgeContract, HasProxyAdmin {\\n  IBridge internal _bridgeContract;\\n\\n  modifier onlyBridgeContract() {\\n    if (bridgeContract() != msg.sender) revert ErrCallerMustBeBridgeContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function bridgeContract() public view override returns (address) {\\n    return address(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length <= 0) revert ErrZeroCodeContract();\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function _setBridgeContract(address _addr) internal {\\n    _bridgeContract = IBridge(_addr);\\n    emit BridgeContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x6fabd1a69eb4391793a28f0d5449f4662b7e7eaf3d9ca87554ccbc77e2b099f9\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasRoninTrustedOrganizationContract.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\n\\ncontract HasRoninTrustedOrganizationContract is IHasRoninTrustedOrganizationContract, HasProxyAdmin {\\n  IRoninTrustedOrganization internal _roninTrustedOrganizationContract;\\n\\n  modifier onlyRoninTrustedOrganizationContract() {\\n    if (roninTrustedOrganizationContract() != msg.sender) revert ErrCallerMustBeRoninTrustedOrgContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function roninTrustedOrganizationContract() public view override returns (address) {\\n    return address(_roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasRoninTrustedOrganizationContract\\n   */\\n  function setRoninTrustedOrganizationContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setRoninTrustedOrganizationContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function _setRoninTrustedOrganizationContract(address _addr) internal {\\n    _roninTrustedOrganizationContract = IRoninTrustedOrganization(_addr);\\n    emit RoninTrustedOrganizationContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x951fd730f4853d8c932da5484ea093f3094c8186735b603d31fb53035c395751\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    if (validatorContract() != msg.sender) revert ErrCallerMustBeValidatorContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xf0a7c4c2165ede118c6ba219ee1a20d293d94049b18aa6fc86a2c48661eb654d\",\"license\":\"MIT\"},\"contracts/extensions/isolated-governance/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract IsolatedGovernance is VoteStatusConsumer {\\n  struct IsolatedVote {\\n    VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev Mapping from receipt hash => vote weight\\n    mapping(bytes32 => uint256) weight;\\n    /// @dev The timestamp that voting is expired (no expiration=0)\\n    uint256 expiredAt;\\n    /// @dev The timestamp that voting is created\\n    uint256 createdAt;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function _castVote(\\n    IsolatedVote storage _proposal,\\n    address _voter,\\n    uint256 _voterWeight,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _hash\\n  ) internal virtual returns (VoteStatus _status) {\\n    if (_proposal.expiredAt > 0 && _proposal.expiredAt <= block.timestamp) {\\n      _proposal.status = VoteStatus.Expired;\\n      return _proposal.status;\\n    }\\n\\n    if (_voted(_proposal, _voter)) {\\n      revert(\\n        string(abi.encodePacked(\\\"IsolatedGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\"))\\n      );\\n    }\\n\\n    // Record for voter\\n    _proposal.voteHashOf[_voter] = _hash;\\n    // Increase vote weight\\n    uint256 _weight = _proposal.weight[_hash] += _voterWeight;\\n\\n    if (_weight >= _minimumVoteWeight && _proposal.status == VoteStatus.Pending) {\\n      _proposal.status = VoteStatus.Approved;\\n      _proposal.finalHash = _hash;\\n    }\\n\\n    _status = _proposal.status;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(IsolatedVote storage _proposal, address _voter) internal view virtual returns (bool) {\\n    return _proposal.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0xe2d3bd6a2dae71c371aca5e6db35dc20cb76621d62a747d445d0da616145866b\",\"license\":\"MIT\"},\"contracts/extensions/isolated-governance/bridge-operator-governance/BOsGovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../extensions/isolated-governance/IsolatedGovernance.sol\\\";\\nimport \\\"../../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../../libraries/BridgeOperatorsBallot.sol\\\";\\nimport \\\"../../../interfaces/IRoninGovernanceAdmin.sol\\\";\\n\\nabstract contract BOsGovernanceProposal is SignatureConsumer, IsolatedGovernance, IRoninGovernanceAdmin {\\n  struct VotingSignature {\\n    mapping(address => Signature) signatureOf;\\n    address[] voters;\\n  }\\n\\n  /// @dev The last the brige operator set info.\\n  BridgeOperatorsBallot.BridgeOperatorSet internal _lastSyncedBridgeOperatorSetInfo;\\n  /// @dev Mapping from period index => epoch index => bridge operators vote\\n  mapping(uint256 => mapping(uint256 => IsolatedVote)) internal _vote;\\n  /// @dev Mapping from bridge voter address => last block that the address voted\\n  mapping(address => uint256) internal _lastVotedBlock;\\n  /// @dev Mapping from period index => epoch index => bridge voter signatures\\n  mapping(uint256 => mapping(uint256 => VotingSignature)) internal _bridgeVoterSig;\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256) {\\n    return _lastVotedBlock[_bridgeVoter];\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function lastSyncedBridgeOperatorSetInfo() external view returns (BridgeOperatorsBallot.BridgeOperatorSet memory) {\\n    return _lastSyncedBridgeOperatorSetInfo;\\n  }\\n\\n  /**\\n   * @dev Votes for a set of bridge operators by signatures.\\n   *\\n   * Requirements:\\n   * - The period of voting is larger than the last synced period.\\n   * - The arrays are not empty.\\n   * - The signature signers are in order.\\n   *\\n   */\\n  function _castVotesBySignatures(\\n    BridgeOperatorsBallot.BridgeOperatorSet calldata _ballot,\\n    Signature[] calldata _signatures,\\n    uint256 _minimumVoteWeight,\\n    bytes32 _domainSeperator\\n  ) internal {\\n    require(\\n      _ballot.period >= _lastSyncedBridgeOperatorSetInfo.period &&\\n        _ballot.epoch >= _lastSyncedBridgeOperatorSetInfo.epoch,\\n      \\\"BOsGovernanceProposal: query for outdated bridge operator set\\\"\\n    );\\n    BridgeOperatorsBallot.verifyBallot(_ballot);\\n    require(_signatures.length > 0, \\\"BOsGovernanceProposal: invalid array length\\\");\\n\\n    address _signer;\\n    address _lastSigner;\\n    bytes32 _hash = BridgeOperatorsBallot.hash(_ballot);\\n    bytes32 _digest = ECDSA.toTypedDataHash(_domainSeperator, _hash);\\n    IsolatedVote storage _v = _vote[_ballot.period][_ballot.epoch];\\n    VotingSignature storage _info = _bridgeVoterSig[_ballot.period][_ballot.epoch];\\n    bool _hasValidVotes;\\n\\n    for (uint256 _i = 0; _i < _signatures.length; _i++) {\\n      // Avoids stack too deeps\\n      {\\n        Signature calldata _sig = _signatures[_i];\\n        _signer = ECDSA.recover(_digest, _sig.v, _sig.r, _sig.s);\\n        require(_lastSigner < _signer, \\\"BOsGovernanceProposal: invalid signer order\\\");\\n        _lastSigner = _signer;\\n      }\\n\\n      uint256 _weight = _getBridgeVoterWeight(_signer);\\n      if (_weight > 0) {\\n        _hasValidVotes = true;\\n        _lastVotedBlock[_signer] = block.number;\\n        _info.signatureOf[_signer] = _signatures[_i];\\n        _info.voters.push(_signer);\\n        if (_castVote(_v, _signer, _weight, _minimumVoteWeight, _hash) == VoteStatus.Approved) {\\n          return;\\n        }\\n      }\\n    }\\n\\n    require(_hasValidVotes, \\\"BOsGovernanceProposal: invalid signatures\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function _getBridgeVoterWeight(address _bridgeVoter) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xf4b6f5fb98d6bb98587af700d4813eb281e6ecd5a6dde652d10c99056ad337e2\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/CoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/ChainTypeConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer, ChainTypeConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    address[] forVoteds; // Array of addresses voting for\\n    address[] againstVoteds; // Array of addresses voting against\\n    uint256 expiryTimestamp;\\n    mapping(address => Signature) sig;\\n    mapping(address => bool) voted;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when a proposal is created\\n  event GlobalProposalCreated(\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    bytes32 globalProposalHash,\\n    GlobalProposal.GlobalProposalDetail globalProposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is expired\\n  event ProposalExpired(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  uint256 private _proposalExpiryDuration;\\n\\n  constructor(uint256 _expiryDuration) {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Creates new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _createVotingRound(\\n    uint256 _chainId,\\n    bytes32 _proposalHash,\\n    uint256 _expiryTimestamp\\n  ) internal returns (uint256 _round) {\\n    _round = round[_chainId];\\n\\n    // Skip checking for the first ever round\\n    if (_round == 0) {\\n      _round = round[_chainId] = 1;\\n    } else {\\n      ProposalVote storage _latestProposalVote = vote[_chainId][_round];\\n      bool _isExpired = _tryDeleteExpiredVotingRound(_latestProposalVote);\\n      // Skip increase round number if the latest round is expired, allow the vote to be overridden\\n      if (!_isExpired) {\\n        require(_latestProposalVote.status != VoteStatus.Pending, \\\"CoreGovernance: current proposal is not completed\\\");\\n        _round = ++round[_chainId];\\n      }\\n    }\\n\\n    vote[_chainId][_round].hash = _proposalHash;\\n    vote[_chainId][_round].expiryTimestamp = _expiryTimestamp;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 _chainId,\\n    uint256 _expiryTimestamp,\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal) {\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n\\n    _proposal = Proposal.ProposalDetail(\\n      round[_chainId] + 1,\\n      _chainId,\\n      _expiryTimestamp,\\n      _targets,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    uint256 _round = _createVotingRound(_chainId, _proposalHash, _expiryTimestamp);\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(Proposal.ProposalDetail memory _proposal, address _creator)\\n    internal\\n    virtual\\n    returns (uint256 _round)\\n  {\\n    uint256 _chainId = _proposal.chainId;\\n    require(_chainId != 0, \\\"CoreGovernance: invalid chain id\\\");\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(_chainId, _proposalHash, _proposal.expiryTimestamp);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit ProposalCreated(_chainId, _round, _proposalHash, _proposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes for a global proposal.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobal(\\n    uint256 _expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] memory _values,\\n    bytes[] memory _calldatas,\\n    uint256[] memory _gasAmounts,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (uint256 _round) {\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal = GlobalProposal.GlobalProposalDetail(\\n      round[0] + 1,\\n      _expiryTimestamp,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts\\n    );\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(0, _proposalHash, _expiryTimestamp);\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Proposes global proposal struct.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `GlobalProposalCreated` event.\\n   *\\n   */\\n  function _proposeGlobalStruct(\\n    GlobalProposal.GlobalProposalDetail memory _globalProposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory _proposal, uint256 _round) {\\n    _proposal = _globalProposal.into_proposal_detail(_roninTrustedOrganizationContract, _gatewayContract);\\n    _proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 _proposalHash = _proposal.hash();\\n    _round = _createVotingRound(0, _proposalHash, _globalProposal.expiryTimestamp);\\n    require(_round == _proposal.nonce, \\\"CoreGovernance: invalid proposal nonce\\\");\\n    emit GlobalProposalCreated(_round, _proposalHash, _proposal, _globalProposal.hash(), _globalProposal, _creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support,\\n    uint256 _minimumForVoteWeight,\\n    uint256 _minimumAgainstVoteWeight,\\n    address _voter,\\n    Signature memory _signature,\\n    uint256 _voterWeight\\n  ) internal virtual returns (bool _done) {\\n    uint256 _chainId = _proposal.chainId;\\n    uint256 _round = _proposal.nonce;\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    if (_tryDeleteExpiredVotingRound(_vote)) {\\n      return true;\\n    }\\n\\n    require(round[_proposal.chainId] == _round, \\\"CoreGovernance: query for invalid proposal nonce\\\");\\n    require(_vote.status == VoteStatus.Pending, \\\"CoreGovernance: the vote is finalized\\\");\\n    if (_voted(_vote, _voter)) {\\n      revert(string(abi.encodePacked(\\\"CoreGovernance: \\\", Strings.toHexString(uint160(_voter), 20), \\\" already voted\\\")));\\n    }\\n\\n    _vote.voted[_voter] = true;\\n    // Stores the signature if it is not empty\\n    if (_signature.r > 0 || _signature.s > 0 || _signature.v > 0) {\\n      _vote.sig[_voter] = _signature;\\n    }\\n    emit ProposalVoted(_vote.hash, _voter, _support, _voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (_support == Ballot.VoteType.For) {\\n      _vote.forVoteds.push(_voter);\\n      _forVoteWeight = _vote.forVoteWeight += _voterWeight;\\n    } else if (_support == Ballot.VoteType.Against) {\\n      _vote.againstVoteds.push(_voter);\\n      _againstVoteWeight = _vote.againstVoteWeight += _voterWeight;\\n    } else {\\n      revert(\\\"CoreGovernance: unsupported vote type\\\");\\n    }\\n\\n    if (_forVoteWeight >= _minimumForVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, _proposal);\\n    } else if (_againstVoteWeight >= _minimumAgainstVoteWeight) {\\n      _done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev Delete the expired proposal by its chainId and nonce, without creating a new proposal.\\n   */\\n  function _deleteExpiredVotingRound(uint256 _chainId, uint256 _round) internal {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n    _tryDeleteExpiredVotingRound(_vote);\\n  }\\n\\n  /**\\n   * @dev When the contract is on Ronin chain, checks whether the proposal is expired and delete it if is expired.\\n   */\\n  function _tryDeleteExpiredVotingRound(ProposalVote storage _proposalVote) private returns (bool _isExpired) {\\n    _isExpired =\\n      _getChainType() == ChainType.RoninChain &&\\n      _proposalVote.status == VoteStatus.Pending &&\\n      _proposalVote.expiryTimestamp <= block.timestamp;\\n\\n    if (_isExpired) {\\n      emit ProposalExpired(_proposalVote.hash);\\n\\n      for (uint256 _i; _i < _proposalVote.forVoteds.length; _i++) {\\n        delete _proposalVote.voted[_proposalVote.forVoteds[_i]];\\n        delete _proposalVote.sig[_proposalVote.forVoteds[_i]];\\n      }\\n      for (uint256 _i; _i < _proposalVote.againstVoteds.length; _i++) {\\n        delete _proposalVote.voted[_proposalVote.againstVoteds[_i]];\\n        delete _proposalVote.sig[_proposalVote.againstVoteds[_i]];\\n      }\\n      delete _proposalVote.status;\\n      delete _proposalVote.hash;\\n      delete _proposalVote.againstVoteWeight;\\n      delete _proposalVote.forVoteWeight;\\n      delete _proposalVote.forVoteds;\\n      delete _proposalVote.againstVoteds;\\n      delete _proposalVote.expiryTimestamp;\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage _vote, Proposal.ProposalDetail memory _proposal) internal {\\n    if (_proposal.executable()) {\\n      _vote.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = _proposal.execute();\\n      emit ProposalExecuted(_vote.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   */\\n  function _setProposalExpiryDuration(uint256 _expiryDuration) internal {\\n    _proposalExpiryDuration = _expiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(ProposalVote storage _vote, address _voter) internal view returns (bool) {\\n    return _vote.voted[_voter];\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function _getProposalExpiryDuration() internal view returns (uint256) {\\n    return _proposalExpiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeights() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns current context is running on whether Ronin chain or on mainchain.\\n   */\\n  function _getChainType() internal view virtual returns (ChainType);\\n}\\n\",\"keccak256\":\"0xcb4060c8f5259646d978d77bf3022124e065c12c0d9589739195a2191023f23d\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/GovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CoreGovernance.sol\\\";\\n\\nabstract contract GovernanceProposal is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n  using GlobalProposal for GlobalProposal.GlobalProposalDetail;\\n\\n  /**\\n   * @dev Casts votes by signatures.\\n   *\\n   * Note: This method does not verify the proposal hash with the vote hash. Please consider checking it before.\\n   *\\n   */\\n  function _castVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    require(_supports.length > 0 && _supports.length == _signatures.length, \\\"GovernanceProposal: invalid array length\\\");\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n\\n    address _lastSigner;\\n    address _signer;\\n    Signature calldata _sig;\\n    bool _hasValidVotes;\\n    for (uint256 _i; _i < _signatures.length; _i++) {\\n      _sig = _signatures[_i];\\n\\n      if (_supports[_i] == Ballot.VoteType.For) {\\n        _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n      } else if (_supports[_i] == Ballot.VoteType.Against) {\\n        _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n      } else {\\n        revert(\\\"GovernanceProposal: query for unsupported vote type\\\");\\n      }\\n\\n      require(_lastSigner < _signer, \\\"GovernanceProposal: invalid order\\\");\\n      _lastSigner = _signer;\\n\\n      uint256 _weight = _getWeight(_signer);\\n      if (_weight > 0) {\\n        _hasValidVotes = true;\\n        if (\\n          _castVote(_proposal, _supports[_i], _minimumForVoteWeight, _minimumAgainstVoteWeight, _signer, _sig, _weight)\\n        ) {\\n          return;\\n        }\\n      }\\n    }\\n\\n    require(_hasValidVotes, \\\"GovernanceProposal: invalid signatures\\\");\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator\\n  ) internal {\\n    bytes32 _proposalHash = _proposal.hash();\\n    require(\\n      vote[_proposal.chainId][_proposal.nonce].hash == _proposalHash,\\n      \\\"GovernanceAdmin: cast vote for invalid proposal\\\"\\n    );\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes and votes by signature.\\n   */\\n  function _proposeGlobalProposalStructAndCastVotes(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract,\\n    address _creator\\n  ) internal returns (Proposal.ProposalDetail memory _proposal) {\\n    (_proposal, ) = _proposeGlobalStruct(\\n      _globalProposal,\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract,\\n      _creator\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a global proposal struct and casts votes by signature.\\n   */\\n  function _castGlobalProposalBySignatures(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal {\\n    Proposal.ProposalDetail memory _proposal = _globalProposal.into_proposal_detail(\\n      _roninTrustedOrganizationContract,\\n      _gatewayContract\\n    );\\n    bytes32 _globalProposalHash = _globalProposal.hash();\\n    require(vote[0][_proposal.nonce].hash == _proposal.hash(), \\\"GovernanceAdmin: cast vote for invalid proposal\\\");\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_globalProposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function _getWeight(address _governor) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x32f541b4d2cd73d9c625a789395f9bfd8232ff74b54dfda400d58c67dfcc0e08\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(uint256 _numerator, uint256 _denominator)\\n    external\\n    returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x10f3b360430e6d03773c9959f54cbed6fb0346069645c05b05ef50cfb19f3753\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BridgeOperatorsBallot.sol\\\";\\n\\ninterface IRoninGovernanceAdmin {\\n  /// @dev Emitted when the bridge operators are approved.\\n  event BridgeOperatorsApproved(uint256 _period, uint256 _epoch, address[] _operators);\\n  /// @dev Emitted when an emergency exit poll is created.\\n  event EmergencyExitPollCreated(\\n    bytes32 _voteHash,\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  );\\n  /// @dev Emitted when an emergency exit poll is approved.\\n  event EmergencyExitPollApproved(bytes32 _voteHash);\\n  /// @dev Emitted when an emergency exit poll is expired.\\n  event EmergencyExitPollExpired(bytes32 _voteHash);\\n\\n  /**\\n   * @dev Returns the last voted block of the bridge voter.\\n   */\\n  function lastVotedBlock(address _bridgeVoter) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the synced bridge operator set info.\\n   */\\n  function lastSyncedBridgeOperatorSetInfo()\\n    external\\n    view\\n    returns (BridgeOperatorsBallot.BridgeOperatorSet memory _bridgeOperatorSetInfo);\\n\\n  /**\\n   * @dev Create a vote to agree that an emergency exit is valid and should return the locked funds back.a\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   */\\n  function createEmergencyExitPoll(\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1aa218f9a8cad8fa9f865c179b257aa8f2614e034100dedebdd352da9a7d96d9\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address bridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(address[] orgs);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata _list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param _consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(address[] calldata _consensusAddrs) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeights() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(address _consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address _governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a bridge voter.\\n   */\\n  function getBridgeVoterWeight(address _addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of bridge voter addresses.\\n   */\\n  function getBridgeVoterWeights(address[] calldata _list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the bridge voter list.\\n   */\\n  function sumBridgeVoterWeights(address[] calldata _list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 _index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganizations() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(address _consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x1edb7a3f5d340e7efc141cb8d94c5499954dec869f026d3998ad92cbc714d604\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasBridgeContract is IHasContract {\\n  /// @dev Emitted when the bridge contract is updated.\\n  event BridgeContractUpdated(address);\\n\\n  /// @dev Error of method caller must be bridge contract.\\n  error ErrCallerMustBeBridgeContract();\\n\\n  /**\\n   * @dev Returns the bridge contract.\\n   */\\n  function bridgeContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function setBridgeContract(address) external;\\n}\\n\",\"keccak256\":\"0xf3ab1830ba7797cb3b8011512af3a5e38a316549f62140b0c10e0b4dcb67f773\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasContract {\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract();\\n}\\n\",\"keccak256\":\"0x8a17785d841137fcae5b5d542f1714de0492c85b54ca074f0b9c1c490ad3f342\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasRoninTrustedOrganizationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasRoninTrustedOrganizationContract is IHasContract {\\n  /// @dev Emitted when the ronin trusted organization contract is updated.\\n  event RoninTrustedOrganizationContractUpdated(address);\\n\\n  /// @dev Error of method caller must be Ronin trusted org contract.\\n  error ErrCallerMustBeRoninTrustedOrgContract();\\n\\n  /**\\n   * @dev Returns the ronin trusted organization contract.\\n   */\\n  function roninTrustedOrganizationContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the ronin trusted organization contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `RoninTrustedOrganizationContractUpdated`.\\n   *\\n   */\\n  function setRoninTrustedOrganizationContract(address) external;\\n}\\n\",\"keccak256\":\"0x7d0a0b1d658e9cf4d69f4934748e0a5c1d22183024d26927f5d621fc61aff0b2\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasValidatorContract is IHasContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /// @dev Error of method caller must be validator contract.\\n  error ErrCallerMustBeValidatorContract();\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0x35a715f123b0c5dc296d13583f946bef4e485201e122b5170988a7535f114559\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/ChainTypeConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainTypeConsumer {\\n  enum ChainType {\\n    RoninChain,\\n    Mainchain\\n  }\\n}\\n\",\"keccak256\":\"0xe0d20e00c8d237f8e0fb881abf1ff1ef114173bcb428f06f689c581666a22db7\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected,\\n    Expired\\n  }\\n}\\n\",\"keccak256\":\"0xa5045232c0c053fcf31fb3fe71942344444159c48d5f1b2063dbb06b6a1c9752\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xc382bd50ca507308ec23826308bc9ff0a22cfb9b3fcd09c7ac7a63c37729d33e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xe4060b7e3b04a0043bd334011fe4ba67c990b0484dad52d7f14b35040989b6ab\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0xdeb929875d06c5dfb8562029ccc2922e1c5238f2dc67c8c61acad614f5fe1e28\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  // Error thrown when receives RON from neither staking vesting contract nor staking contract\\\"\\n  error ErrUnauthorizedReceiveRON();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0x4e81a61359a3f8bcc9d452615e3df7b0d0201823ce88f763530ddd4f00c2fc48\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x310f321625fac8b7dbabfdad36e82b960b0b1f7bf0e5b70b763e45438b8a8d30\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /// @dev Error of number of prioritized greater than number of max validators.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xfb64d511790566812a0bf8cf09c3998ee9046029c6dc7114153ec0646124b07a\",\"license\":\"MIT\"},\"contracts/libraries/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 public constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n  }\\n}\\n\",\"keccak256\":\"0x28a0192db886307f30ada203bdb902749ee3f30d42710de4eaf303cba23c32c2\",\"license\":\"MIT\"},\"contracts/libraries/BridgeOperatorsBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary BridgeOperatorsBallot {\\n  struct BridgeOperatorSet {\\n    uint256 period;\\n    uint256 epoch;\\n    address[] operators;\\n  }\\n\\n  // keccak256(\\\"BridgeOperatorsBallot(uint256 period,uint256 epoch,address[] operators)\\\");\\n  bytes32 public constant BRIDGE_OPERATORS_BALLOT_TYPEHASH =\\n    0xd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a;\\n\\n  /**\\n   * @dev Verifies whether the ballot is valid or not.\\n   *\\n   * Requirements:\\n   * - The ballot is not for an empty operator set.\\n   * - The operator address list is in order.\\n   *\\n   */\\n  function verifyBallot(BridgeOperatorSet calldata _ballot) internal pure {\\n    require(_ballot.operators.length > 0, \\\"BridgeOperatorsBallot: invalid array length\\\");\\n    address _addr = _ballot.operators[0];\\n    for (uint _i = 1; _i < _ballot.operators.length; _i++) {\\n      require(_addr < _ballot.operators[_i], \\\"BridgeOperatorsBallot: invalid order of bridge operators\\\");\\n      _addr = _ballot.operators[_i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(BridgeOperatorSet calldata _ballot) internal pure returns (bytes32) {\\n    bytes32 _operatorsHash;\\n    address[] memory _operators = _ballot.operators;\\n\\n    assembly {\\n      _operatorsHash := keccak256(add(_operators, 32), mul(mload(_operators), 32))\\n    }\\n\\n    return keccak256(abi.encode(BRIDGE_OPERATORS_BALLOT_TYPEHASH, _ballot.period, _ballot.epoch, _operatorsHash));\\n  }\\n}\\n\",\"keccak256\":\"0x986425ebae2dcfcfa266c9ca825232ff300ec8ce796e8975da6714d87e921793\",\"license\":\"MIT\"},\"contracts/libraries/EmergencyExitBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary EmergencyExitBallot {\\n  // keccak256(\\\"EmergencyExitBallot(address consensusAddress,address recipientAfterUnlockedFund,uint256 requestedAt,uint256 expiredAt)\\\");\\n  bytes32 public constant EMERGENCY_EXIT_BALLOT_TYPEHASH =\\n    0x697acba4deaf1a718d8c2d93e42860488cb7812696f28ca10eed17bac41e7027;\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(\\n    address _consensusAddress,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          EMERGENCY_EXIT_BALLOT_TYPEHASH,\\n          _consensusAddress,\\n          _recipientAfterUnlockedFund,\\n          _requestedAt,\\n          _expiredAt\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xfee3f0b001f34b3760a06c7abcf4f7d35054dba0004221adfc4c5f5ede4a1114\",\"license\":\"MIT\"},\"contracts/libraries/GlobalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  enum TargetOption {\\n    RoninTrustedOrganizationContract,\\n    GatewayContract\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    uint256 expiryTimestamp;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint256 expiryTimestamp,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    TargetOption[] memory _targets = _proposal.targetOptions;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _proposal.nonce,\\n          _proposal.expiryTimestamp,\\n          _targetsHash,\\n          _valuesHash,\\n          _calldatasHash,\\n          _gasAmountsHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function into_proposal_detail(\\n    GlobalProposalDetail memory _proposal,\\n    address _roninTrustedOrganizationContract,\\n    address _gatewayContract\\n  ) internal pure returns (Proposal.ProposalDetail memory _detail) {\\n    _detail.nonce = _proposal.nonce;\\n    _detail.expiryTimestamp = _proposal.expiryTimestamp;\\n    _detail.chainId = 0;\\n    _detail.targets = new address[](_proposal.targetOptions.length);\\n    _detail.values = _proposal.values;\\n    _detail.calldatas = _proposal.calldatas;\\n    _detail.gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _proposal.targetOptions.length; _i++) {\\n      if (_proposal.targetOptions[_i] == TargetOption.GatewayContract) {\\n        _detail.targets[_i] = _gatewayContract;\\n      } else if (_proposal.targetOptions[_i] == TargetOption.RoninTrustedOrganizationContract) {\\n        _detail.targets[_i] = _roninTrustedOrganizationContract;\\n      } else {\\n        revert(\\\"GlobalProposal: unsupported target\\\");\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4749e811eebe029ac572b48e5c755bc852cc74e8234c5243a57f7536c3ed00e0\",\"license\":\"MIT\"},\"contracts/libraries/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Proposal {\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    uint256 expiryTimestamp;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,uint256 expiryTimestamp,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal, uint256 _maxExpiryDuration) internal view {\\n    require(\\n      _proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length,\\n      \\\"Proposal: invalid array length\\\"\\n    );\\n    require(_proposal.expiryTimestamp <= block.timestamp + _maxExpiryDuration, \\\"Proposal: invalid expiry timestamp\\\");\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32) {\\n    bytes32 _targetsHash;\\n    bytes32 _valuesHash;\\n    bytes32 _calldatasHash;\\n    bytes32 _gasAmountsHash;\\n\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; _i++) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n    }\\n\\n    assembly {\\n      _targetsHash := keccak256(add(_targets, 32), mul(mload(_targets), 32))\\n      _valuesHash := keccak256(add(_values, 32), mul(mload(_values), 32))\\n      _calldatasHash := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32))\\n      _gasAmountsHash := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32))\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          _proposal.nonce,\\n          _proposal.chainId,\\n          _proposal.expiryTimestamp,\\n          _targetsHash,\\n          _valuesHash,\\n          _calldatasHash,\\n          _gasAmountsHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(ProposalDetail memory _proposal)\\n    internal\\n    returns (bool[] memory _successCalls, bytes[] memory _returnDatas)\\n  {\\n    require(executable(_proposal), \\\"Proposal: query for invalid chainId\\\");\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ++_i) {\\n      require(gasleft() > _proposal.gasAmounts[_i], \\\"Proposal: insufficient gas\\\");\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x96bf9eaea9a87a5eceed026a6eaedc74cf5dde6760f7e969d5b5974dad43ff80\",\"license\":\"MIT\"},\"contracts/ronin/RoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/isolated-governance/bridge-operator-governance/BOsGovernanceProposal.sol\\\";\\nimport \\\"../extensions/sequential-governance/GovernanceProposal.sol\\\";\\nimport \\\"../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../extensions/GovernanceAdmin.sol\\\";\\nimport \\\"../libraries/EmergencyExitBallot.sol\\\";\\nimport \\\"../interfaces/IRoninGovernanceAdmin.sol\\\";\\n\\ncontract RoninGovernanceAdmin is\\n  IRoninGovernanceAdmin,\\n  GovernanceAdmin,\\n  GovernanceProposal,\\n  BOsGovernanceProposal,\\n  HasValidatorContract\\n{\\n  using Proposal for Proposal.ProposalDetail;\\n\\n  /// @dev Mapping from request hash => emergency poll\\n  mapping(bytes32 => IsolatedVote) internal _emergencyExitPoll;\\n\\n  modifier onlyGovernor() {\\n    require(_getWeight(msg.sender) > 0, \\\"RoninGovernanceAdmin: sender is not governor\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 _roninChainId,\\n    address _roninTrustedOrganizationContract,\\n    address _bridgeContract,\\n    address _validatorContract,\\n    uint256 _proposalExpiryDuration\\n  ) GovernanceAdmin(_roninChainId, _roninTrustedOrganizationContract, _bridgeContract, _proposalExpiryDuration) {\\n    _setValidatorContract(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external override onlySelfCall {\\n    require(_addr.code.length > 0, \\\"RoninGovernanceAdmin: set to non-contract\\\");\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Returns the voted signatures for the proposals.\\n   *\\n   * Note: The signatures can be empty in case the proposal is voted on the current network.\\n   *\\n   */\\n  function getProposalSignatures(uint256 _chainId, uint256 _round)\\n    external\\n    view\\n    returns (\\n      address[] memory _voters,\\n      Ballot.VoteType[] memory _supports,\\n      Signature[] memory _signatures\\n    )\\n  {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    uint256 _forLength = _vote.forVoteds.length;\\n    uint256 _againstLength = _vote.againstVoteds.length;\\n    uint256 _voterLength = _forLength + _againstLength;\\n\\n    _supports = new Ballot.VoteType[](_voterLength);\\n    _signatures = new Signature[](_voterLength);\\n    _voters = new address[](_voterLength);\\n    for (uint256 _i; _i < _forLength; _i++) {\\n      _supports[_i] = Ballot.VoteType.For;\\n      _signatures[_i] = vote[_chainId][_round].sig[_vote.forVoteds[_i]];\\n      _voters[_i] = _vote.forVoteds[_i];\\n    }\\n    for (uint256 _i; _i < _againstLength; _i++) {\\n      _supports[_i + _forLength] = Ballot.VoteType.Against;\\n      _signatures[_i + _forLength] = vote[_chainId][_round].sig[_vote.againstVoteds[_i]];\\n      _voters[_i + _forLength] = _vote.againstVoteds[_i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the voted signatures for bridge operators at a specific period.\\n   *\\n   * Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty.\\n   * Please consider filtering for empty signatures after calling this function.\\n   *\\n   */\\n  function getBridgeOperatorVotingSignatures(uint256 _period, uint256 _epoch)\\n    external\\n    view\\n    returns (address[] memory _voters, Signature[] memory _signatures)\\n  {\\n    VotingSignature storage _info = _bridgeVoterSig[_period][_epoch];\\n    _voters = _info.voters;\\n    _signatures = new Signature[](_voters.length);\\n    for (uint _i; _i < _voters.length; _i++) {\\n      _signatures[_i] = _info.signatureOf[_voters[_i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for the proposal.\\n   */\\n  function proposalVoted(\\n    uint256 _chainId,\\n    uint256 _round,\\n    address _voter\\n  ) external view returns (bool) {\\n    return _voted(vote[_chainId][_round], _voter);\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for bridge operators at a specific period.\\n   */\\n  function bridgeOperatorsVoted(\\n    uint256 _period,\\n    uint256 _epoch,\\n    address _voter\\n  ) external view returns (bool) {\\n    return _voted(_vote[_period][_epoch], _voter);\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted vote for emergency exit poll.\\n   */\\n  function emergencyPollVoted(bytes32 _voteHash, address _voter) external view returns (bool) {\\n    return _voted(_emergencyExitPoll[_voteHash], _voter);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_proposeProposal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function propose(\\n    uint256 _chainId,\\n    uint256 _expiryTimestamp,\\n    address[] calldata _targets,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeProposal(_chainId, _expiryTimestamp, _targets, _values, _calldatas, _gasAmounts, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_proposeProposalStructAndCastVotes`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   * - The proposal is for the current network.\\n   *\\n   */\\n  function proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeProposalStructAndCastVotes(_proposal, _supports, _signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Proposes and casts vote for a proposal on the current network.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   * - The proposal is for the current network.\\n   *\\n   */\\n  function proposeProposalForCurrentNetwork(\\n    uint256 _expiryTimestamp,\\n    address[] calldata _targets,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts,\\n    Ballot.VoteType _support\\n  ) external onlyGovernor {\\n    address _voter = msg.sender;\\n    Proposal.ProposalDetail memory _proposal = _proposeProposal(\\n      block.chainid,\\n      _expiryTimestamp,\\n      _targets,\\n      _values,\\n      _calldatas,\\n      _gasAmounts,\\n      _voter\\n    );\\n    _castProposalVoteForCurrentNetwork(_voter, _proposal, _support);\\n  }\\n\\n  /**\\n   * @dev Casts vote for a proposal on the current network.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function castProposalVoteForCurrentNetwork(Proposal.ProposalDetail calldata _proposal, Ballot.VoteType _support)\\n    external\\n    onlyGovernor\\n  {\\n    _castProposalVoteForCurrentNetwork(msg.sender, _proposal, _support);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_castProposalBySignatures`.\\n   */\\n  function castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castProposalBySignatures(_proposal, _supports, _signatures, DOMAIN_SEPARATOR);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_proposeGlobal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeGlobal(\\n    uint256 _expiryTimestamp,\\n    GlobalProposal.TargetOption[] calldata _targetOptions,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeGlobal(\\n      _expiryTimestamp,\\n      _targetOptions,\\n      _values,\\n      _calldatas,\\n      _gasAmounts,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function proposeGlobalProposalStructAndCastVotes(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeGlobalProposalStructAndCastVotes(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract(),\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_castGlobalProposalBySignatures`.\\n   */\\n  function castGlobalProposalBySignatures(\\n    GlobalProposal.GlobalProposalDetail calldata _globalProposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castGlobalProposalBySignatures(\\n      _globalProposal,\\n      _supports,\\n      _signatures,\\n      DOMAIN_SEPARATOR,\\n      roninTrustedOrganizationContract(),\\n      bridgeContract()\\n    );\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_deleteExpiredProposal`\\n   */\\n  function deleteExpired(uint256 chainId, uint256 round) external {\\n    _deleteExpiredVotingRound(chainId, round);\\n  }\\n\\n  /**\\n   * @dev See `BOsGovernanceProposal-_castVotesBySignatures`.\\n   */\\n  function voteBridgeOperatorsBySignatures(\\n    BridgeOperatorsBallot.BridgeOperatorSet calldata _ballot,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castVotesBySignatures(_ballot, _signatures, _getMinimumVoteWeight(), DOMAIN_SEPARATOR);\\n    IsolatedVote storage _v = _vote[_ballot.period][_ballot.epoch];\\n    if (_v.status == VoteStatus.Approved) {\\n      _lastSyncedBridgeOperatorSetInfo = _ballot;\\n      emit BridgeOperatorsApproved(_ballot.period, _ballot.epoch, _ballot.operators);\\n      _v.status = VoteStatus.Executed;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function createEmergencyExitPoll(\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external onlyValidatorContract {\\n    bytes32 _hash = EmergencyExitBallot.hash(_consensusAddr, _recipientAfterUnlockedFund, _requestedAt, _expiredAt);\\n    IsolatedVote storage _v = _emergencyExitPoll[_hash];\\n    _v.createdAt = block.timestamp;\\n    _v.expiredAt = _expiredAt;\\n    emit EmergencyExitPollCreated(_hash, _consensusAddr, _recipientAfterUnlockedFund, _requestedAt, _expiredAt);\\n  }\\n\\n  /**\\n   * @dev Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester.\\n   *\\n   * Requirements:\\n   * - The voter is governor.\\n   * - The voting is existent.\\n   * - The voting is not expired yet.\\n   *\\n   */\\n  function voteEmergencyExit(\\n    bytes32 _voteHash,\\n    address _consensusAddr,\\n    address _recipientAfterUnlockedFund,\\n    uint256 _requestedAt,\\n    uint256 _expiredAt\\n  ) external {\\n    address _voter = msg.sender;\\n    uint256 _weight = _getWeight(_voter);\\n    require(_weight > 0, \\\"RoninGovernanceAdmin: sender is not governor\\\");\\n\\n    bytes32 _hash = EmergencyExitBallot.hash(_consensusAddr, _recipientAfterUnlockedFund, _requestedAt, _expiredAt);\\n    require(_voteHash == _hash, \\\"RoninGovernanceAdmin: invalid vote hash\\\");\\n\\n    IsolatedVote storage _v = _emergencyExitPoll[_hash];\\n    require(_v.createdAt > 0, \\\"RoninGovernanceAdmin: query for non-existent vote\\\");\\n    require(_v.status != VoteStatus.Expired, \\\"RoninGovernanceAdmin: query for expired vote\\\");\\n\\n    VoteStatus _stt = _castVote(_v, _voter, _weight, _getMinimumVoteWeight(), _hash);\\n    if (_stt == VoteStatus.Approved) {\\n      _execReleaseLockedFundForEmergencyExitRequest(_consensusAddr, _recipientAfterUnlockedFund);\\n      emit EmergencyExitPollApproved(_hash);\\n      _v.status = VoteStatus.Executed;\\n    } else if (_stt == VoteStatus.Expired) {\\n      emit EmergencyExitPollExpired(_hash);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc GovernanceProposal\\n   */\\n  function _getWeight(address _governor) internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.getGovernorWeight.selector, _governor)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `getGovernorWeight(address)` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @inheritdoc BOsGovernanceProposal\\n   */\\n  function _getBridgeVoterWeight(address _governor) internal view virtual override returns (uint256) {\\n    (bool _success, bytes memory _returndata) = roninTrustedOrganizationContract().staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(IRoninTrustedOrganization.getBridgeVoterWeight.selector, _governor)\\n      )\\n    );\\n    require(_success, \\\"GovernanceAdmin: proxy call `getBridgeVoterWeight(address)` failed\\\");\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Trigger function from validator contract to unlock fund for emeregency exit request.\\n   */\\n  function _execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address _recipientAfterUnlockedFund)\\n    internal\\n    virtual\\n  {\\n    (bool _success, ) = validatorContract().call(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(\\n          _validatorContract.execReleaseLockedFundForEmergencyExitRequest.selector,\\n          _consensusAddr,\\n          _recipientAfterUnlockedFund\\n        )\\n      )\\n    );\\n    require(\\n      _success,\\n      \\\"GovernanceAdmin: proxy call `execReleaseLockedFundForEmergencyExitRequest(address,address)` failed\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_getChainType`.\\n   */\\n  function _getChainType() internal pure override returns (ChainType) {\\n    return ChainType.RoninChain;\\n  }\\n\\n  /**\\n   * @dev See `castProposalVoteForCurrentNetwork`.\\n   */\\n  function _castProposalVoteForCurrentNetwork(\\n    address _voter,\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support\\n  ) internal {\\n    require(_proposal.chainId == block.chainid, \\\"RoninGovernanceAdmin: invalid chain id\\\");\\n    require(\\n      vote[_proposal.chainId][_proposal.nonce].hash == _proposal.hash(),\\n      \\\"RoninGovernanceAdmin: cast vote for invalid proposal\\\"\\n    );\\n\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeights() - _minimumForVoteWeight + 1;\\n    Signature memory _emptySignature;\\n    _castVote(\\n      _proposal,\\n      _support,\\n      _minimumForVoteWeight,\\n      _minimumAgainstVoteWeight,\\n      _voter,\\n      _emptySignature,\\n      _getWeight(_voter)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x65d955368579d1e3a0f969178bc952037574b90309532f3706d08b1f7f057a71\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620060a7380380620060a7833981016040819052620000349162000280565b84848483806200004381600255565b506005849055604080516020808201839052601660608301527f524f4e494e5f474f5645524e414e43455f41444d494e000000000000000000006080808401919091528284018890528351808403909101815260a0830184528051908201207f599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf60c08401527f7e7935007966eb860f4a2ee3dcc9fd53fb3205ce2aa86b0126d4893d4d4c14b960e08401527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a561010084015261012080840191909152835180840390910181526101409092019092528051910120600655620001458362000170565b6200015082620001c5565b5050505062000165826200021460201b60201c565b5050505050620002de565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d7906020015b60405180910390a150565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae04890602001620001ba565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b683616990602001620001ba565b80516001600160a01b03811681146200027b57600080fd5b919050565b600080600080600060a086880312156200029957600080fd5b85519450620002ab6020870162000263565b9350620002bb6040870162000263565b9250620002cb6060870162000263565b9150608086015190509295509295909350565b615db980620002ee6000396000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c8063663ac0111161011a578063a8a0e32c116100ad578063cd5965831161007c578063cd596583146104d5578063cdf64a76146104e6578063dcc3eb19146104f9578063f3b7dead1461050c578063fb4f63711461051f57600080fd5b8063a8a0e32c1461044c578063b384abef1461045f578063b5e337de146104ba578063bc96180b146104cd57600080fd5b80639a7d3382116100e95780639a7d3382146104005780639e0dc0b314610413578063a1819f9a14610426578063a2fae5701461043957600080fd5b8063663ac011146103a05780637eff275e146103b3578063988ef53c146103c657806399439089146103ef57600080fd5b80632b5df3511161019d57806334d5f37b1161016c57806334d5f37b1461033e5780633644e5151461035e5780635511cde11461036757806360911e8e1461037857806362e52e5f1461038b57600080fd5b80632b5df351146102e25780632c5e6520146103055780632e96a6fb146103185780632faf925d1461032b57600080fd5b806317ce2dd4116101d957806317ce2dd4146102585780631c905e39146102745780631e23e04814610296578063204e1c7a146102b757600080fd5b80624054b81461020a57806309fcd8c71461021f5780630b26cf66146102325780630b88183014610245575b600080fd5b61021d6102183660046148cf565b610532565b005b61021d61022d366004614963565b61057b565b61021d610240366004614a47565b610644565b61021d6102533660046148cf565b610699565b61026160055481565b6040519081526020015b60405180910390f35b610287610282366004614a64565b6106a9565b60405161026b93929190614b39565b6102a96102a4366004614a64565b610aa6565b60405161026b929190614bac565b6102ca6102c5366004614a47565b610c2d565b6040516001600160a01b03909116815260200161026b565b6102f56102f0366004614bd1565b610d1f565b604051901515815260200161026b565b6102f5610313366004614bd1565b610d54565b61021d610326366004614c0a565b610d8a565b61021d610339366004614c23565b610db2565b61026161034c366004614c0a565b60006020819052908152604090205481565b61026160065481565b6003546001600160a01b03166102ca565b61021d610386366004614c7c565b610def565b610393610eaf565b60405161026b9190614cec565b61021d6103ae366004614d33565b610f51565b61021d6103c1366004614e10565b61105d565b6102616103d4366004614a47565b6001600160a01b03166000908152600b602052604090205490565b600d546001600160a01b03166102ca565b61021d61040e366004614a64565b61118e565b61021d610421366004614e49565b61119c565b61021d610434366004614e9b565b611402565b61021d610447366004614f74565b6114e8565b61021d61045a366004614fba565b6115b4565b6104a961046d366004614a64565b600160208181526000938452604080852090915291835291208054918101546002820154600383015460069093015460ff909416939192909185565b60405161026b959493929190615000565b61021d6104c8366004614a47565b6115ef565b610261611641565b6004546001600160a01b03166102ca565b61021d6104f4366004614a47565b611651565b6102f5610507366004615035565b6116e5565b6102ca61051a366004614a47565b611717565b61021d61052d366004614c23565b6117e4565b600061053d33611843565b116105635760405162461bcd60e51b815260040161055a9061505a565b60405180910390fd5b6105748585858585600654336119b7565b5050505050565b600061058633611843565b116105a35760405162461bcd60e51b815260040161055a9061505a565b6106388989898989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506105e992508a91508b9050615229565b8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506106269250610de0915050565b6004546001600160a01b031633611a21565b50505050505050505050565b3330146106635760405162461bcd60e51b815260040161055a90615236565b6000816001600160a01b03163b1161068d5760405162461bcd60e51b815260040161055a9061527d565b61069681611b56565b50565b6105748585858585600654611bab565b600082815260016020908152604080832084845290915281206004810154600582015460609384938493909290916106e182846152d7565b9050806001600160401b038111156106fb576106fb6150a6565b604051908082528060200260200182016040528015610724578160200160208202803683370190505b509550806001600160401b0381111561073f5761073f6150a6565b60405190808252806020026020018201604052801561078a57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161075d5790505b509450806001600160401b038111156107a5576107a56150a6565b6040519080825280602002602001820160405280156107ce578160200160208202803683370190505b50965060005b8381101561092d5760008782815181106107f0576107f06152ea565b6020026020010190600181111561080957610809614aca565b9081600181111561081c5761081c614aca565b90525060008a81526001602090815260408083208c845290915281206004870180546007909201929184908110610855576108556152ea565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff168152600182015493810193909352600201549082015286518790839081106108b3576108b36152ea565b60200260200101819052508460040181815481106108d3576108d36152ea565b9060005260206000200160009054906101000a90046001600160a01b0316888281518110610903576109036152ea565b6001600160a01b03909216602092830291909101909101528061092581615300565b9150506107d4565b5060005b82811015610a9a5760018761094686846152d7565b81518110610956576109566152ea565b6020026020010190600181111561096f5761096f614aca565b9081600181111561098257610982614aca565b90525060008a81526001602090815260408083208c8452909152812060058701805460079092019291849081106109bb576109bb6152ea565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff168152600182015493810193909352600201549082015286610a1086846152d7565b81518110610a2057610a206152ea565b6020026020010181905250846005018181548110610a4057610a406152ea565b6000918252602090912001546001600160a01b031688610a6086846152d7565b81518110610a7057610a706152ea565b6001600160a01b039092166020928302919091019091015280610a9281615300565b915050610931565b50505050509250925092565b6000828152600c60209081526040808320848452825291829020600181018054845181850281018501909552808552606094859490929190830182828015610b1757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610af9575b5050505050925082516001600160401b03811115610b3757610b376150a6565b604051908082528060200260200182016040528015610b8257816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610b555790505b50915060005b8351811015610c2457816000016000858381518110610ba957610ba96152ea565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208151606081018352815460ff16815260018201549381019390935260020154908201528351849083908110610c0657610c066152ea565b60200260200101819052508080610c1c90615300565b915050610b88565b50509250929050565b6000806000836001600160a01b0316604051610c5390635c60da1b60e01b815260040190565b600060405180830381855afa9150503d8060008114610c8e576040519150601f19603f3d011682016040523d82523d6000602084013e610c93565b606091505b509150915081610d035760405162461bcd60e51b815260206004820152603560248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060696d706044820152741b195b595b9d185d1a5bdb8a0a580819985a5b1959605a1b606482015260840161055a565b80806020019051810190610d179190615319565b949350505050565b6000838152600a6020908152604080832085845282528083206001600160a01b03851684526002019091528120541515610d17565b600083815260016020908152604080832085845282528083206001600160a01b038516845260080190915281205460ff16610d17565b333014610da95760405162461bcd60e51b815260040161055a90615236565b61069681600255565b6105748585858585600654610dcf6003546001600160a01b031690565b6004546001600160a01b0316611c32565b6003546001600160a01b031690565b610e05838383610dfd611ce6565b600654611e52565b82356000908152600a6020908152604080832082870135845290915290206001815460ff166004811115610e3b57610e3b614aca565b03610ea957836007610e4d82826153a3565b507f7c45875370690698791a915954b9c69729cc5f9373edc5a2e04436c07589f30d905084356020860135610e856040880188615336565b604051610e959493929190615476565b60405180910390a1805460ff191660021781555b50505050565b610ed360405180606001604052806000815260200160008152602001606081525090565b60408051606081018252600780548252600854602080840191909152600980548551818402810184018752818152949593949386019392830182828015610f4357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f25575b505050505081525050905090565b6000610f5c33611843565b11610f795760405162461bcd60e51b815260040161055a9061505a565b60003390506000611042468d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061100792508d91508e9050615229565b8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506121a6915050565b905061104f8282856122c7565b505050505050505050505050565b33301461107c5760405162461bcd60e51b815260040161055a90615236565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b17905291516000928516916110d0916154f9565b6000604051808303816000865af19150503d806000811461110d576040519150601f19603f3d011682016040523d82523d6000602084013e611112565b606091505b50509050806111895760405162461bcd60e51b815260206004820152603960248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206063686160448201527f6e676541646d696e28616464726573732960206661696c656400000000000000606482015260840161055a565b505050565b6111988282612420565b5050565b3360006111a882611843565b9050600081116111ca5760405162461bcd60e51b815260040161055a9061505a565b60006111d887878787612442565b90508088146112395760405162461bcd60e51b815260206004820152602760248201527f526f6e696e476f7665726e616e636541646d696e3a20696e76616c696420766f6044820152660e8ca40d0c2e6d60cb1b606482015260840161055a565b6000818152600e6020526040902060058101546112b25760405162461bcd60e51b815260206004820152603160248201527f526f6e696e476f7665726e616e636541646d696e3a20717565727920666f72206044820152706e6f6e2d6578697374656e7420766f746560781b606482015260840161055a565b6004815460ff1660048111156112ca576112ca614aca565b0361132c5760405162461bcd60e51b815260206004820152602c60248201527f526f6e696e476f7665726e616e636541646d696e3a20717565727920666f722060448201526b6578706972656420766f746560a01b606482015260840161055a565b600061134282868661133c611ce6565b876124b2565b9050600181600481111561135857611358614aca565b036113aa5761136789896125e1565b6040518381527fd3500576a0d4923326fbb893cf2169273e0df93f3cb6b94b83f2ca2e0ecb681b9060200160405180910390a1815460ff19166002178255610638565b60048160048111156113be576113be614aca565b03610638576040518381527feecb3148acc573548e89cb64eb5f2023a61171f1c413ed8bf0fe506c19aeebe49060200160405180910390a150505050505050505050565b600061140d33611843565b1161142a5760405162461bcd60e51b815260040161055a9061505a565b6114db8a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152506114a092508a91508b9050615229565b8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506121a6915050565b5050505050505050505050565b336114fb600d546001600160a01b031690565b6001600160a01b03161461152257604051630e6444a160e31b815260040160405180910390fd5b600061153085858585612442565b6000818152600e60209081526040918290204260058201556004810186905582518481526001600160a01b038a811693820193909352918816828401526060820187905260808201869052915192935090917f18ea835340bb2973a31996158138f109e9c5b9cfdb2424e999e6b1a9ce565de89181900360a00190a1505050505050565b60006115bf33611843565b116115dc5760405162461bcd60e51b815260040161055a9061505a565b611198336115e9846155ff565b836122c7565b33301461160e5760405162461bcd60e51b815260040161055a90615236565b6000816001600160a01b03163b116116385760405162461bcd60e51b815260040161055a9061527d565b6106968161277d565b600061164c60025490565b905090565b3330146116705760405162461bcd60e51b815260040161055a90615236565b6000816001600160a01b03163b116116dc5760405162461bcd60e51b815260206004820152602960248201527f526f6e696e476f7665726e616e636541646d696e3a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b606482015260840161055a565b610696816127cb565b6000828152600e602090815260408083206001600160a01b038516845260020190915281205415155b90505b92915050565b6000806000836001600160a01b031660405161173d906303e1469160e61b815260040190565b600060405180830381855afa9150503d8060008114611778576040519150601f19603f3d011682016040523d82523d6000602084013e61177d565b606091505b509150915081610d035760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206061646d60448201526b1a5b8a0a580819985a5b195960a21b606482015260840161055a565b60006117ef33611843565b1161180c5760405162461bcd60e51b815260040161055a9061505a565b61183b85858585856006546118296003546001600160a01b031690565b6004546001600160a01b031633612819565b505050505050565b600080600061185a6003546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316631af0725f60e31b1790529251931692634bb5274a926118b29291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516118eb91906154f9565b600060405180830381855afa9150503d8060008114611926576040519150601f19603f3d011682016040523d82523d6000602084013e61192b565b606091505b5091509150816119a35760405162461bcd60e51b815260206004820152603f60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f476f7665726e6f7257656967687428616464726573732960206661696c656400606482015260840161055a565b80806020019051810190610d179190615712565b6119c96119c3886155ff565b8261287c565b5060006119dd6119d8896155ff565b612964565b9050611a176119eb896155ff565b88888888611a03896119fe896000612b03565b612b59565b611a128a6119fe8a6001612b03565b612b80565b5050505050505050565b6040805160c08101909152600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb554909182918190611a699060016152d7565b81526020018c81526020018b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082018b9052604082018a90526060909101889052909150611acd828787612eb9565b9050611ae46002548261308790919063ffffffff16565b6000611aef82612964565b9050611afd6000828f613183565b935080847f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca84611b2c876132b1565b878a604051611b3e9493929190615830565b60405180910390a35050509998505050505050505050565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b6000611bb96119d8886155ff565b6020808901356000908152600180835260408083208c35845290935291902001549091508114611bfb5760405162461bcd60e51b815260040161055a90615917565b611c29611c07886155ff565b87878787611c1a886119fe896000612b03565b611a12896119fe8a6001612b03565b50505050505050565b6000611c498383611c428c6159ca565b9190612eb9565b90506000611c5e611c598b6159ca565b6132b1565b9050611c6982612964565b600080805260016020818152855183527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4990526040909120015414611cc05760405162461bcd60e51b815260040161055a90615917565b610638828a8a8a8a611cd78b6119fe896000612b03565b611a128c6119fe8a6001612b03565b6000806000611cfd6003546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b0316637de5dedd60e01b17905291516001600160a01b039390931692634bb5274a92611d469291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611d7f91906154f9565b600060405180830381855afa9150503d8060008114611dba576040519150601f19603f3d011682016040523d82523d6000602084013e611dbf565b606091505b509150915081611e375760405162461bcd60e51b815260206004820152603860248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c20606d696e60448201527f696d756d566f7465576569676874282960206661696c65640000000000000000606482015260840161055a565b80806020019051810190611e4b9190615712565b9250505090565b600754853510801590611e6b5750600854602086013510155b611edd5760405162461bcd60e51b815260206004820152603d60248201527f424f73476f7665726e616e636550726f706f73616c3a20717565727920666f7260448201527f206f7574646174656420627269646765206f70657261746f7220736574000000606482015260840161055a565b611ee68561340b565b82611f475760405162461bcd60e51b815260206004820152602b60248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b606482015260840161055a565b6000806000611f55886135cb565b90506000611f638583612b59565b89356000818152600a60209081526040808320828f0135808552908352818420948452600c83528184209084529091528120929350909190805b8a81101561214657368c8c83818110611fb857611fb86152ea565b606002919091019150611fe3905086611fd46020840184615aa3565b8360200135846040013561367d565b9850886001600160a01b0316886001600160a01b03161061205a5760405162461bcd60e51b815260206004820152602b60248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964207360448201526a34b3b732b91037b93232b960a91b606482015260840161055a565b889750506000612069896136a5565b90508015612133576001600160a01b0389166000908152600b60205260409020439055600192508c8c838181106120a2576120a26152ea565b6001600160a01b038c1660009081526020889052604090206060909102929092019190506120d08282615ac0565b5050600184810180548083018255600091825260209091200180546001600160a01b0319166001600160a01b038c1617905561210f868b848f8c6124b2565b600481111561212057612120614aca565b0361213357505050505050505050610574565b508061213e81615300565b915050611f9d565b508061104f5760405162461bcd60e51b815260206004820152602960248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964207360448201526869676e61747572657360b81b606482015260840161055a565b6121ae6147b9565b876000036121fe5760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e206964604482015260640161055a565b6040805160e08101825260008a81526020819052919091205481906122249060016152d7565b81526020018981526020018881526020018781526020018681526020018581526020018481525090506122626002548261308790919063ffffffff16565b600061226d82612964565b9050600061227c8a838b613183565b905081818b7fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd986886040516122b2929190615af1565b60405180910390a45050979650505050505050565b468260200151146123295760405162461bcd60e51b815260206004820152602660248201527f526f6e696e476f7665726e616e636541646d696e3a20696e76616c6964206368604482015265185a5b881a5960d21b606482015260840161055a565b61233282612964565b602080840151600090815260018083526040808320875184529093529190200154146123bd5760405162461bcd60e51b815260206004820152603460248201527f526f6e696e476f7665726e616e636541646d696e3a206361737420766f746520604482015273199bdc881a5b9d985b1a59081c1c9bdc1bdcd85b60621b606482015260840161055a565b60006123c7611ce6565b90506000816123d4613810565b6123de9190615b1b565b6123e99060016152d7565b6040805160608101825260008082526020820181905291810191909152909150611c29858585858a8661241b8d611843565b613957565b60008281526001602090815260408083208484529091529020610ea981613d72565b604080517f697acba4deaf1a718d8c2d93e42860488cb7812696f28ca10eed17bac41e70276020808301919091526001600160a01b0396871682840152949095166060860152608085019290925260a0808501919091528151808503909101815260c09093019052815191012090565b60008086600401541180156124cb575042866004015411155b156124e35750845460ff1916600490811786556125d8565b6001600160a01b03851660009081526002870160205260409020541561254d57612517856001600160a01b03166014613f94565b6040516020016125279190615b2e565b60408051601f198184030181529082905262461bcd60e51b825261055a916004016156ff565b6001600160a01b038516600090815260028701602090815260408083208590558483526003890190915281208054869190839061258b9084906152d7565b92505081905590508381101580156125b857506000875460ff1660048111156125b6576125b6614aca565b145b156125d057865460ff19166001908117885587018390555b5050845460ff165b95945050505050565b60006125f5600d546001600160a01b031690565b604080516001600160a01b0386811660248084019190915286821660448085019190915284518085039091018152606490930184526020830180516001600160e01b03166361e45aeb60e11b1790529251931692634bb5274a9261265a9291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161269391906154f9565b6000604051808303816000865af19150503d80600081146126d0576040519150601f19603f3d011682016040523d82523d6000602084013e6126d5565b606091505b50509050806111895760405162461bcd60e51b815260206004820152606260248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206065786560448201527f6352656c656173654c6f636b656446756e64466f72456d657267656e6379457860648201527f69745265717565737428616464726573732c616464726573732960206661696c608482015261195960f21b60a482015260c40161055a565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001611ba0565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b683616990602001611ba0565b6128216147b9565b61283561282d8b6159ca565b85858561412f565b5090506000612846611c598c6159ca565b905061286e828b8b8b8b61285f8c6119fe896000612b03565b611a128d6119fe8a6001612b03565b509998505050505050505050565b60208201516000908082036128d35760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e206964604482015260640161055a565b6002546128e1908590613087565b60006128ec85612964565b90506128fd82828760400151613183565b855190935083146129205760405162461bcd60e51b815260040161055a90615b82565b8083837fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98888604051612954929190615af1565b60405180910390a4505092915050565b6000806000806000808660800151905060008760600151905060008860a00151516001600160401b0381111561299c5761299c6150a6565b6040519080825280602002602001820160405280156129c5578160200160208202803683370190505b5060c08a015190915060005b8251811015612a2e578a60a0015181815181106129f0576129f06152ea565b602002602001015180519060200120838281518110612a1157612a116152ea565b602090810291909101015280612a2681615300565b9150506129d1565b506020835102602084012097506020845102602085012096506020825102602083012095506020815102602082012094507fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a60001b8a600001518b602001518c604001518b8b8b8b604051602001612ade989796959493929190978852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b6040516020818303038152906040528051906020012098505050505050505050919050565b604051600090612b3b907fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c29085908590602001615bc8565b60405160208183030381529060405280519060200120905092915050565b60405161190160f01b60208201526022810183905260428101829052600090606201612b3b565b8415801590612b8e57508483145b612beb5760405162461bcd60e51b815260206004820152602860248201527f476f7665726e616e636550726f706f73616c3a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b606482015260840161055a565b6000612bf5611ce6565b9050600081612c02613810565b612c0c9190615b1b565b612c179060016152d7565b9050600080366000805b89811015612e4d578a8a82818110612c3b57612c3b6152ea565b606002919091019350600090508d8d83818110612c5a57612c5a6152ea565b9050602002016020810190612c6f9190615bed565b6001811115612c8057612c80614aca565b03612cac57612ca589612c966020860186615aa3565b8560200135866040013561367d565b9350612d60565b60018d8d83818110612cc057612cc06152ea565b9050602002016020810190612cd59190615bed565b6001811115612ce657612ce6614aca565b03612cfc57612ca588612c966020860186615aa3565b60405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636550726f706f73616c3a20717565727920666f7220756e604482015272737570706f7274656420766f7465207479706560681b606482015260840161055a565b836001600160a01b0316856001600160a01b031610612dcb5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964206f7264656044820152603960f91b606482015260840161055a565b8394506000612dd985611843565b90508015612e3a5760019250612e288f8f8f85818110612dfb57612dfb6152ea565b9050602002016020810190612e109190615bed565b8a8a89612e22368b90038b018b615c0a565b87613957565b15612e3a575050505050505050611c29565b5080612e4581615300565b915050612c21565b5080612eaa5760405162461bcd60e51b815260206004820152602660248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964207369676e60448201526561747572657360d01b606482015260840161055a565b50505050505050505050505050565b612ec16147b9565b83518152602080850151604080840191909152600091830191909152840151516001600160401b03811115612ef857612ef86150a6565b604051908082528060200260200182016040528015612f21578160200160208202803683370190505b5060608083019190915284015160808083019190915284015160a08083019190915284015160c082015260005b84604001515181101561307f57600185604001518281518110612f7357612f736152ea565b60200260200101516001811115612f8c57612f8c614aca565b03612fcd578282606001518281518110612fa857612fa86152ea565b60200260200101906001600160a01b031690816001600160a01b03168152505061306d565b600085604001518281518110612fe557612fe56152ea565b60200260200101516001811115612ffe57612ffe614aca565b0361301a578382606001518281518110612fa857612fa86152ea565b60405162461bcd60e51b815260206004820152602260248201527f476c6f62616c50726f706f73616c3a20756e737570706f727465642074617267604482015261195d60f21b606482015260840161055a565b8061307781615300565b915050612f4e565b509392505050565b60008260600151511180156130a55750816080015151826060015151145b80156130ba57508160a0015151826060015151145b80156130cf57508160c0015151826060015151145b61311b5760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c3a20696e76616c6964206172726179206c656e6774680000604482015260640161055a565b61312581426152d7565b826040015111156111985760405162461bcd60e51b815260206004820152602260248201527f50726f706f73616c3a20696e76616c6964206578706972792074696d6573746160448201526106d760f41b606482015260840161055a565b600083815260208190526040812054908190036131b457506000838152602081905260409020600190819055613284565b60008481526001602090815260408083208484529091528120906131d782613d72565b905080613281576000825460ff1660048111156131f6576131f6614aca565b0361325d5760405162461bcd60e51b815260206004820152603160248201527f436f7265476f7665726e616e63653a2063757272656e742070726f706f73616c604482015270081a5cc81b9bdd0818dbdb5c1b195d1959607a1b606482015260840161055a565b6000868152602081905260408120805490919061327990615300565b918290555092505b50505b60009384526001602081815260408087208488529091529094209384019290925560069092019190915590565b6000806000806000808660600151905060008760400151905060008860800151516001600160401b038111156132e9576132e96150a6565b604051908082528060200260200182016040528015613312578160200160208202803683370190505b5060a08a015190915060005b825181101561337b578a60800151818151811061333d5761333d6152ea565b60200260200101518051906020012083828151811061335e5761335e6152ea565b60209081029190910101528061337381615300565b91505061331e565b5082516020908102848201208551820286830120845183028584012084518402858501208e518f860151604080517f1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee911413509881019890985287019190915260608601526080850184905260a0850183905260c0850182905260e08501819052929b509099509750955061010001612ade565b600061341a6040830183615336565b90501161347d5760405162461bcd60e51b815260206004820152602b60248201527f4272696467654f70657261746f727342616c6c6f743a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b606482015260840161055a565b600061348c6040830183615336565b600081811061349d5761349d6152ea565b90506020020160208101906134b29190614a47565b905060015b6134c46040840184615336565b9050811015611189576134da6040840184615336565b828181106134ea576134ea6152ea565b90506020020160208101906134ff9190614a47565b6001600160a01b0316826001600160a01b0316106135855760405162461bcd60e51b815260206004820152603860248201527f4272696467654f70657261746f727342616c6c6f743a20696e76616c6964206f60448201527f72646572206f6620627269646765206f70657261746f72730000000000000000606482015260840161055a565b6135926040840184615336565b828181106135a2576135a26152ea565b90506020020160208101906135b79190614a47565b9150806135c381615300565b9150506134b7565b600080806135dc6040850185615336565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251602090810293810193909320604080517fd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a818701528935818301529885013560608a01526080808a01929092528051808a03909201825260a0909801909752505084519401939093209392505050565b600080600061368e878787876141ec565b9150915061369b816142d9565b5095945050505050565b60008060006136bc6003546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316635624191160e01b1790529251931692634bb5274a926137149291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161374d91906154f9565b600060405180830381855afa9150503d8060008114613788576040519150601f19603f3d011682016040523d82523d6000602084013e61378d565b606091505b5091509150816119a35760405162461bcd60e51b815260206004820152604260248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f427269646765566f74657257656967687428616464726573732960206661696c606482015261195960f21b608482015260a40161055a565b60008060006138276003546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b031663926323d560e01b17905291516001600160a01b039390931692634bb5274a926138709291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516138a991906154f9565b600060405180830381855afa9150503d80600081146138e4576040519150601f19603f3d011682016040523d82523d6000602084013e6138e9565b606091505b509150915081611e375760405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060746f74604482015272185b15d95a59da1d1cca0a580819985a5b1959606a1b606482015260840161055a565b6020808801518851600082815260018452604080822083835290945292832061397f81613d72565b156139905760019350505050613d67565b6020808c015160009081529081905260409020548214613a0b5760405162461bcd60e51b815260206004820152603060248201527f436f7265476f7665726e616e63653a20717565727920666f7220696e76616c6960448201526f642070726f706f73616c206e6f6e636560801b606482015260840161055a565b6000815460ff166004811115613a2357613a23614aca565b14613a7e5760405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a2074686520766f74652069732066696e616044820152641b1a5e995960da1b606482015260840161055a565b6001600160a01b038716600090815260088201602052604090205460ff1615613ac557613ab5876001600160a01b03166014613f94565b6040516020016125279190615c6b565b6001600160a01b03871660009081526008820160209081526040909120805460ff19166001179055860151151580613b005750604086015115155b80613b0e5750855160ff1615155b15613b55576001600160a01b03871660009081526007820160209081526040918290208851815460ff191660ff909116178155908801516001820155908701516002909101555b866001600160a01b031681600101547f1203f9e81c814a35f5f4cc24087b2a24c6fb7986a9f1406b68a9484882c93a238c88604051613b95929190615cbb565b60405180910390a3600080808c6001811115613bb357613bb3614aca565b03613c08576004830180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038c16179055600384018054899290613bfb9084906152d7565b9250508190559150613cc7565b60018c6001811115613c1c57613c1c614aca565b03613c71576005830180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038c16179055600284018054899290613c649084906152d7565b9250508190559050613cc7565b60405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a20756e737570706f7274656420766f7465604482015264207479706560d81b606482015260840161055a565b8a8210613d1b57825460ff19166001908117845580840154604051919750907f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a2613d16838e61448f565b613d61565b898110613d6157825460ff19166003178355600180840154604051919750907f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25b50505050505b979650505050505050565b600080825460ff166004811115613d8b57613d8b614aca565b148015613d9c575042826006015411155b90508015613f8f5760018201546040517f58f98006a7f2f253f8ae8f8b7cec9008ca05359633561cd7c22f3005682d4a5590600090a260005b6004830154811015613e8e57826008016000846004018381548110613dfc57613dfc6152ea565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191690556004840180546007860192919084908110613e4557613e456152ea565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181018290556002015580613e8681615300565b915050613dd5565b5060005b6005830154811015613f4b57826008016000846005018381548110613eb957613eb96152ea565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191690556005840180546007860192919084908110613f0257613f026152ea565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181018290556002015580613f4381615300565b915050613e92565b50815460ff191682556000600183018190556002830181905560038301819055613f799060048401906147f6565b613f876005830160006147f6565b600060068301555b919050565b60606000613fa383600261537f565b613fae9060026152d7565b6001600160401b03811115613fc557613fc56150a6565b6040519080825280601f01601f191660200182016040528015613fef576020820181803683370190505b509050600360fc1b8160008151811061400a5761400a6152ea565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614039576140396152ea565b60200101906001600160f81b031916908160001a905350600061405d84600261537f565b6140689060016152d7565b90505b60018111156140e0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061409c5761409c6152ea565b1a60f81b8282815181106140b2576140b26152ea565b60200101906001600160f81b031916908160001a90535060049490941c936140d981615cd2565b905061406b565b50831561170e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161055a565b6141376147b9565b6000614144868686612eb9565b915061415b6002548361308790919063ffffffff16565b600061416683612964565b90506141786000828960200151613183565b8351909250821461419b5760405162461bcd60e51b815260040161055a90615b82565b80827f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca856141c88b6132b1565b8b896040516141da9493929190615830565b60405180910390a35094509492505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561422357506000905060036142d0565b8460ff16601b1415801561423b57508460ff16601c14155b1561424c57506000905060046142d0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156142a0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166142c9576000600192509250506142d0565b9150600090505b94509492505050565b60008160048111156142ed576142ed614aca565b036142f55750565b600181600481111561430957614309614aca565b036143565760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161055a565b600281600481111561436a5761436a614aca565b036143b75760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161055a565b60038160048111156143cb576143cb614aca565b036144235760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161055a565b600481600481111561443757614437614aca565b036106965760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161055a565b614498816144fc565b1561119857815460ff191660021782556000806144b483614516565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba83836040516144ee929190615ce9565b60405180910390a250505050565b600081602001516000148061171157505060200151461490565b606080614522836144fc565b61457a5760405162461bcd60e51b815260206004820152602360248201527f50726f706f73616c3a20717565727920666f7220696e76616c696420636861696044820152621b925960ea1b606482015260840161055a565b8260600151516001600160401b03811115614597576145976150a6565b6040519080825280602002602001820160405280156145c0578160200160208202803683370190505b5091508260600151516001600160401b038111156145e0576145e06150a6565b60405190808252806020026020018201604052801561461357816020015b60608152602001906001900390816145fe5790505b50905060005b8360600151518110156147b3578360c00151818151811061463c5761463c6152ea565b60200260200101515a116146925760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c3a20696e73756666696369656e7420676173000000000000604482015260640161055a565b836060015181815181106146a8576146a86152ea565b60200260200101516001600160a01b0316846080015182815181106146cf576146cf6152ea565b60200260200101518560c0015183815181106146ed576146ed6152ea565b6020026020010151908660a00151848151811061470c5761470c6152ea565b602002602001015160405161472191906154f9565b600060405180830381858888f193505050503d806000811461475f576040519150601f19603f3d011682016040523d82523d6000602084013e614764565b606091505b50848381518110614777576147776152ea565b60200260200101848481518110614790576147906152ea565b602090810291909101019190915290151590526147ac81615300565b9050614619565b50915091565b6040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b508054600082559060005260206000209081019061069691905b808211156148245760008155600101614810565b5090565b600060e0828403121561483a57600080fd5b50919050565b60008083601f84011261485257600080fd5b5081356001600160401b0381111561486957600080fd5b6020830191508360208260051b850101111561488457600080fd5b9250929050565b60008083601f84011261489d57600080fd5b5081356001600160401b038111156148b457600080fd5b60208301915083602060608302850101111561488457600080fd5b6000806000806000606086880312156148e757600080fd5b85356001600160401b03808211156148fe57600080fd5b61490a89838a01614828565b9650602088013591508082111561492057600080fd5b61492c89838a01614840565b9096509450604088013591508082111561494557600080fd5b506149528882890161488b565b969995985093965092949392505050565b600080600080600080600080600060a08a8c03121561498157600080fd5b8935985060208a01356001600160401b038082111561499f57600080fd5b6149ab8d838e01614840565b909a50985060408c01359150808211156149c457600080fd5b6149d08d838e01614840565b909850965060608c01359150808211156149e957600080fd5b6149f58d838e01614840565b909650945060808c0135915080821115614a0e57600080fd5b50614a1b8c828d01614840565b915080935050809150509295985092959850929598565b6001600160a01b038116811461069657600080fd5b600060208284031215614a5957600080fd5b813561170e81614a32565b60008060408385031215614a7757600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b83811015614abf5781516001600160a01b031687529582019590820190600101614a9a565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b6002811061069657610696614aca565b600081518084526020808501945080840160005b83811015614abf578151805160ff16885283810151848901526040908101519088015260609096019590820190600101614b04565b606081526000614b4c6060830186614a86565b82810360208481019190915285518083528682019282019060005b81811015614b8c578451614b7a81614ae0565b83529383019391830191600101614b67565b50508481036040860152614ba08187614af0565b98975050505050505050565b604081526000614bbf6040830185614a86565b82810360208401526125d88185614af0565b600080600060608486031215614be657600080fd5b83359250602084013591506040840135614bff81614a32565b809150509250925092565b600060208284031215614c1c57600080fd5b5035919050565b600080600080600060608688031215614c3b57600080fd5b85356001600160401b0380821115614c5257600080fd5b9087019060c0828a031215614c6657600080fd5b9095506020870135908082111561492057600080fd5b600080600060408486031215614c9157600080fd5b83356001600160401b0380821115614ca857600080fd5b9085019060608288031215614cbc57600080fd5b90935060208501359080821115614cd257600080fd5b50614cdf8682870161488b565b9497909650939450505050565b60208152815160208201526020820151604082015260006040830151606080840152610d176080840182614a86565b6002811061069657600080fd5b8035613f8f81614d1b565b60008060008060008060008060008060c08b8d031215614d5257600080fd5b8a35995060208b01356001600160401b0380821115614d7057600080fd5b614d7c8e838f01614840565b909b50995060408d0135915080821115614d9557600080fd5b614da18e838f01614840565b909950975060608d0135915080821115614dba57600080fd5b614dc68e838f01614840565b909750955060808d0135915080821115614ddf57600080fd5b50614dec8d828e01614840565b9094509250614dff905060a08c01614d28565b90509295989b9194979a5092959850565b60008060408385031215614e2357600080fd5b8235614e2e81614a32565b91506020830135614e3e81614a32565b809150509250929050565b600080600080600060a08688031215614e6157600080fd5b853594506020860135614e7381614a32565b93506040860135614e8381614a32565b94979396509394606081013594506080013592915050565b60008060008060008060008060008060c08b8d031215614eba57600080fd5b8a35995060208b0135985060408b01356001600160401b0380821115614edf57600080fd5b614eeb8e838f01614840565b909a50985060608d0135915080821115614f0457600080fd5b614f108e838f01614840565b909850965060808d0135915080821115614f2957600080fd5b614f358e838f01614840565b909650945060a08d0135915080821115614f4e57600080fd5b50614f5b8d828e01614840565b915080935050809150509295989b9194979a5092959850565b60008060008060808587031215614f8a57600080fd5b8435614f9581614a32565b93506020850135614fa581614a32565b93969395505050506040820135916060013590565b60008060408385031215614fcd57600080fd5b82356001600160401b03811115614fe357600080fd5b614fef85828601614828565b9250506020830135614e3e81614d1b565b60a081016005871061501457615014614aca565b95815260208101949094526040840192909252606083015260809091015290565b6000806040838503121561504857600080fd5b823591506020830135614e3e81614a32565b6020808252602c908201527f526f6e696e476f7665726e616e636541646d696e3a2073656e6465722069732060408201526b3737ba1033b7bb32b93737b960a11b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156150de576150de6150a6565b60405290565b60405160c081016001600160401b03811182821017156150de576150de6150a6565b604051601f8201601f191681016001600160401b038111828210171561512e5761512e6150a6565b604052919050565b60006001600160401b0382111561514f5761514f6150a6565b5060051b60200190565b600061516c61516784615136565b615106565b8381529050602080820190600585901b84018681111561518b57600080fd5b845b8181101561521e5780356001600160401b03808211156151ad5760008081fd5b8188019150601f8a818401126151c35760008081fd5b8235828111156151d5576151d56150a6565b6151e6818301601f19168801615106565b92508083528b878286010111156151ff57600091508182fd5b808785018885013760009083018701525085525092820192820161518d565b505050509392505050565b600061170e368484615159565b60208082526027908201527f476f7665726e616e636541646d696e3a206f6e6c7920616c6c6f7765642073656040820152661b198b58d85b1b60ca1b606082015260800190565b60208082526024908201527f476f7665726e616e636541646d696e3a2073657420746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611711576117116152c1565b634e487b7160e01b600052603260045260246000fd5b600060018201615312576153126152c1565b5060010190565b60006020828403121561532b57600080fd5b815161170e81614a32565b6000808335601e1984360301811261534d57600080fd5b8301803591506001600160401b0382111561536757600080fd5b6020019150600581901b360382131561488457600080fd5b8082028115828204841417611711576117116152c1565b6000813561171181614a32565b81358155600160208084013582840155600283016040850135601e198636030181126153ce57600080fd5b850180356001600160401b038111156153e657600080fd5b83820191508060051b36038213156153fd57600080fd5b68010000000000000000811115615416576154166150a6565b82548184558082101561544a5760008481528581208381019083015b808210156154465782825590880190615432565b5050505b50600092835260208320925b81811015611a175761546783615396565b84820155918401918501615456565b84815260208082018590526060604083018190528201839052600090849060808401835b868110156154c85783356154ad81614a32565b6001600160a01b03168252928201929082019060010161549a565b5098975050505050505050565b60005b838110156154f05781810151838201526020016154d8565b50506000910152565b6000825161550b8184602087016154d5565b9190910192915050565b600082601f83011261552657600080fd5b8135602061553661516783615136565b82815260059290921b8401810191818101908684111561555557600080fd5b8286015b8481101561557957803561556c81614a32565b8352918301918301615559565b509695505050505050565b600082601f83011261559557600080fd5b813560206155a561516783615136565b82815260059290921b840181019181810190868411156155c457600080fd5b8286015b8481101561557957803583529183019183016155c8565b600082601f8301126155f057600080fd5b61170e83833560208501615159565b600060e0823603121561561157600080fd5b6156196150bc565b82358152602083013560208201526040830135604082015260608301356001600160401b038082111561564b57600080fd5b61565736838701615515565b6060840152608085013591508082111561567057600080fd5b61567c36838701615584565b608084015260a085013591508082111561569557600080fd5b6156a1368387016155df565b60a084015260c08501359150808211156156ba57600080fd5b506156c736828601615584565b60c08301525092915050565b600081518084526156eb8160208601602086016154d5565b601f01601f19169290920160200192915050565b60208152600061170e60208301846156d3565b60006020828403121561572457600080fd5b5051919050565b600081518084526020808501945080840160005b83811015614abf5781518752958201959082019060010161573f565b600081518084526020808501808196508360051b8101915082860160005b858110156157a35782840389526157918483516156d3565b98850198935090840190600101615779565b5091979650505050505050565b8051825260208101516020830152604081015160408301526000606082015160e060608501526157e360e0850182614a86565b9050608083015184820360808601526157fc828261572b565b91505060a083015184820360a0860152615816828261575b565b91505060c083015184820360c08601526125d8828261572b565b60808152600061584360808301876157b0565b60208681850152838203604085015260c08201865183528187015182840152604087015160c0604085015281815180845260e0860191508483019350600092505b808310156158ad57835161589781614ae0565b8252928401926001929092019190840190615884565b506060890151935084810360608601526158c7818561572b565b9350505050608086015182820360808401526158e3828261575b565b91505060a086015182820360a08401526158fd828261572b565b93505050506125d860608301846001600160a01b03169052565b6020808252602f908201527f476f7665726e616e636541646d696e3a206361737420766f746520666f72206960408201526e1b9d985b1a59081c1c9bdc1bdcd85b608a1b606082015260800190565b600082601f83011261597757600080fd5b8135602061598761516783615136565b82815260059290921b840181019181810190868411156159a657600080fd5b8286015b848110156155795780356159bd81614d1b565b83529183019183016159aa565b600060c082360312156159dc57600080fd5b6159e46150e4565b823581526020830135602082015260408301356001600160401b0380821115615a0c57600080fd5b615a1836838701615966565b60408401526060850135915080821115615a3157600080fd5b615a3d36838701615584565b60608401526080850135915080821115615a5657600080fd5b615a62368387016155df565b608084015260a0850135915080821115615a7b57600080fd5b50615a8836828601615584565b60a08301525092915050565b60ff8116811461069657600080fd5b600060208284031215615ab557600080fd5b813561170e81615a94565b8135615acb81615a94565b60ff811660ff198354161782555060208201356001820155604082013560028201555050565b604081526000615b0460408301856157b0565b905060018060a01b03831660208301529392505050565b81810381811115611711576117116152c1565b73024b9b7b630ba32b223b7bb32b93730b731b29d160651b815260008251615b5d8160148501602087016154d5565b6d08185b1c9958591e481d9bdd195960921b6014939091019283015250602201919050565b60208082526026908201527f436f7265476f7665726e616e63653a20696e76616c69642070726f706f73616c604082015265206e6f6e636560d01b606082015260800190565b8381526020810183905260608101615bdf83614ae0565b826040830152949350505050565b600060208284031215615bff57600080fd5b813561170e81614d1b565b600060608284031215615c1c57600080fd5b604051606081018181106001600160401b0382111715615c3e57615c3e6150a6565b6040528235615c4c81615a94565b8152602083810135908201526040928301359281019290925250919050565b6f021b7b932a3b7bb32b93730b731b29d160851b815260008251615c968160108501602087016154d5565b6d08185b1c9958591e481d9bdd195960921b6010939091019283015250601e01919050565b60408101615cc884614ae0565b9281526020015290565b600081615ce157615ce16152c1565b506000190190565b604080825283519082018190526000906020906060840190828701845b82811015615d24578151151584529284019290840190600101615d06565b50505083810382850152845180825282820190600581901b8301840187850160005b83811015615d7457601f19868403018552615d628383516156d3565b94870194925090860190600101615d46565b5090999850505050505050505056fea2646970667358221220fd7f4856c2c5a6d30dc075c52b4fe3ca0da70bf660bbe613298da9eacccb882464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102055760003560e01c8063663ac0111161011a578063a8a0e32c116100ad578063cd5965831161007c578063cd596583146104d5578063cdf64a76146104e6578063dcc3eb19146104f9578063f3b7dead1461050c578063fb4f63711461051f57600080fd5b8063a8a0e32c1461044c578063b384abef1461045f578063b5e337de146104ba578063bc96180b146104cd57600080fd5b80639a7d3382116100e95780639a7d3382146104005780639e0dc0b314610413578063a1819f9a14610426578063a2fae5701461043957600080fd5b8063663ac011146103a05780637eff275e146103b3578063988ef53c146103c657806399439089146103ef57600080fd5b80632b5df3511161019d57806334d5f37b1161016c57806334d5f37b1461033e5780633644e5151461035e5780635511cde11461036757806360911e8e1461037857806362e52e5f1461038b57600080fd5b80632b5df351146102e25780632c5e6520146103055780632e96a6fb146103185780632faf925d1461032b57600080fd5b806317ce2dd4116101d957806317ce2dd4146102585780631c905e39146102745780631e23e04814610296578063204e1c7a146102b757600080fd5b80624054b81461020a57806309fcd8c71461021f5780630b26cf66146102325780630b88183014610245575b600080fd5b61021d6102183660046148cf565b610532565b005b61021d61022d366004614963565b61057b565b61021d610240366004614a47565b610644565b61021d6102533660046148cf565b610699565b61026160055481565b6040519081526020015b60405180910390f35b610287610282366004614a64565b6106a9565b60405161026b93929190614b39565b6102a96102a4366004614a64565b610aa6565b60405161026b929190614bac565b6102ca6102c5366004614a47565b610c2d565b6040516001600160a01b03909116815260200161026b565b6102f56102f0366004614bd1565b610d1f565b604051901515815260200161026b565b6102f5610313366004614bd1565b610d54565b61021d610326366004614c0a565b610d8a565b61021d610339366004614c23565b610db2565b61026161034c366004614c0a565b60006020819052908152604090205481565b61026160065481565b6003546001600160a01b03166102ca565b61021d610386366004614c7c565b610def565b610393610eaf565b60405161026b9190614cec565b61021d6103ae366004614d33565b610f51565b61021d6103c1366004614e10565b61105d565b6102616103d4366004614a47565b6001600160a01b03166000908152600b602052604090205490565b600d546001600160a01b03166102ca565b61021d61040e366004614a64565b61118e565b61021d610421366004614e49565b61119c565b61021d610434366004614e9b565b611402565b61021d610447366004614f74565b6114e8565b61021d61045a366004614fba565b6115b4565b6104a961046d366004614a64565b600160208181526000938452604080852090915291835291208054918101546002820154600383015460069093015460ff909416939192909185565b60405161026b959493929190615000565b61021d6104c8366004614a47565b6115ef565b610261611641565b6004546001600160a01b03166102ca565b61021d6104f4366004614a47565b611651565b6102f5610507366004615035565b6116e5565b6102ca61051a366004614a47565b611717565b61021d61052d366004614c23565b6117e4565b600061053d33611843565b116105635760405162461bcd60e51b815260040161055a9061505a565b60405180910390fd5b6105748585858585600654336119b7565b5050505050565b600061058633611843565b116105a35760405162461bcd60e51b815260040161055a9061505a565b6106388989898989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506105e992508a91508b9050615229565b8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506106269250610de0915050565b6004546001600160a01b031633611a21565b50505050505050505050565b3330146106635760405162461bcd60e51b815260040161055a90615236565b6000816001600160a01b03163b1161068d5760405162461bcd60e51b815260040161055a9061527d565b61069681611b56565b50565b6105748585858585600654611bab565b600082815260016020908152604080832084845290915281206004810154600582015460609384938493909290916106e182846152d7565b9050806001600160401b038111156106fb576106fb6150a6565b604051908082528060200260200182016040528015610724578160200160208202803683370190505b509550806001600160401b0381111561073f5761073f6150a6565b60405190808252806020026020018201604052801561078a57816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161075d5790505b509450806001600160401b038111156107a5576107a56150a6565b6040519080825280602002602001820160405280156107ce578160200160208202803683370190505b50965060005b8381101561092d5760008782815181106107f0576107f06152ea565b6020026020010190600181111561080957610809614aca565b9081600181111561081c5761081c614aca565b90525060008a81526001602090815260408083208c845290915281206004870180546007909201929184908110610855576108556152ea565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff168152600182015493810193909352600201549082015286518790839081106108b3576108b36152ea565b60200260200101819052508460040181815481106108d3576108d36152ea565b9060005260206000200160009054906101000a90046001600160a01b0316888281518110610903576109036152ea565b6001600160a01b03909216602092830291909101909101528061092581615300565b9150506107d4565b5060005b82811015610a9a5760018761094686846152d7565b81518110610956576109566152ea565b6020026020010190600181111561096f5761096f614aca565b9081600181111561098257610982614aca565b90525060008a81526001602090815260408083208c8452909152812060058701805460079092019291849081106109bb576109bb6152ea565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff168152600182015493810193909352600201549082015286610a1086846152d7565b81518110610a2057610a206152ea565b6020026020010181905250846005018181548110610a4057610a406152ea565b6000918252602090912001546001600160a01b031688610a6086846152d7565b81518110610a7057610a706152ea565b6001600160a01b039092166020928302919091019091015280610a9281615300565b915050610931565b50505050509250925092565b6000828152600c60209081526040808320848452825291829020600181018054845181850281018501909552808552606094859490929190830182828015610b1757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610af9575b5050505050925082516001600160401b03811115610b3757610b376150a6565b604051908082528060200260200182016040528015610b8257816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610b555790505b50915060005b8351811015610c2457816000016000858381518110610ba957610ba96152ea565b6020908102919091018101516001600160a01b031682528181019290925260409081016000208151606081018352815460ff16815260018201549381019390935260020154908201528351849083908110610c0657610c066152ea565b60200260200101819052508080610c1c90615300565b915050610b88565b50509250929050565b6000806000836001600160a01b0316604051610c5390635c60da1b60e01b815260040190565b600060405180830381855afa9150503d8060008114610c8e576040519150601f19603f3d011682016040523d82523d6000602084013e610c93565b606091505b509150915081610d035760405162461bcd60e51b815260206004820152603560248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060696d706044820152741b195b595b9d185d1a5bdb8a0a580819985a5b1959605a1b606482015260840161055a565b80806020019051810190610d179190615319565b949350505050565b6000838152600a6020908152604080832085845282528083206001600160a01b03851684526002019091528120541515610d17565b600083815260016020908152604080832085845282528083206001600160a01b038516845260080190915281205460ff16610d17565b333014610da95760405162461bcd60e51b815260040161055a90615236565b61069681600255565b6105748585858585600654610dcf6003546001600160a01b031690565b6004546001600160a01b0316611c32565b6003546001600160a01b031690565b610e05838383610dfd611ce6565b600654611e52565b82356000908152600a6020908152604080832082870135845290915290206001815460ff166004811115610e3b57610e3b614aca565b03610ea957836007610e4d82826153a3565b507f7c45875370690698791a915954b9c69729cc5f9373edc5a2e04436c07589f30d905084356020860135610e856040880188615336565b604051610e959493929190615476565b60405180910390a1805460ff191660021781555b50505050565b610ed360405180606001604052806000815260200160008152602001606081525090565b60408051606081018252600780548252600854602080840191909152600980548551818402810184018752818152949593949386019392830182828015610f4357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f25575b505050505081525050905090565b6000610f5c33611843565b11610f795760405162461bcd60e51b815260040161055a9061505a565b60003390506000611042468d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061100792508d91508e9050615229565b8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506121a6915050565b905061104f8282856122c7565b505050505050505050505050565b33301461107c5760405162461bcd60e51b815260040161055a90615236565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166308f2839760e41b17905291516000928516916110d0916154f9565b6000604051808303816000865af19150503d806000811461110d576040519150601f19603f3d011682016040523d82523d6000602084013e611112565b606091505b50509050806111895760405162461bcd60e51b815260206004820152603960248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206063686160448201527f6e676541646d696e28616464726573732960206661696c656400000000000000606482015260840161055a565b505050565b6111988282612420565b5050565b3360006111a882611843565b9050600081116111ca5760405162461bcd60e51b815260040161055a9061505a565b60006111d887878787612442565b90508088146112395760405162461bcd60e51b815260206004820152602760248201527f526f6e696e476f7665726e616e636541646d696e3a20696e76616c696420766f6044820152660e8ca40d0c2e6d60cb1b606482015260840161055a565b6000818152600e6020526040902060058101546112b25760405162461bcd60e51b815260206004820152603160248201527f526f6e696e476f7665726e616e636541646d696e3a20717565727920666f72206044820152706e6f6e2d6578697374656e7420766f746560781b606482015260840161055a565b6004815460ff1660048111156112ca576112ca614aca565b0361132c5760405162461bcd60e51b815260206004820152602c60248201527f526f6e696e476f7665726e616e636541646d696e3a20717565727920666f722060448201526b6578706972656420766f746560a01b606482015260840161055a565b600061134282868661133c611ce6565b876124b2565b9050600181600481111561135857611358614aca565b036113aa5761136789896125e1565b6040518381527fd3500576a0d4923326fbb893cf2169273e0df93f3cb6b94b83f2ca2e0ecb681b9060200160405180910390a1815460ff19166002178255610638565b60048160048111156113be576113be614aca565b03610638576040518381527feecb3148acc573548e89cb64eb5f2023a61171f1c413ed8bf0fe506c19aeebe49060200160405180910390a150505050505050505050565b600061140d33611843565b1161142a5760405162461bcd60e51b815260040161055a9061505a565b6114db8a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152506114a092508a91508b9050615229565b8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506121a6915050565b5050505050505050505050565b336114fb600d546001600160a01b031690565b6001600160a01b03161461152257604051630e6444a160e31b815260040160405180910390fd5b600061153085858585612442565b6000818152600e60209081526040918290204260058201556004810186905582518481526001600160a01b038a811693820193909352918816828401526060820187905260808201869052915192935090917f18ea835340bb2973a31996158138f109e9c5b9cfdb2424e999e6b1a9ce565de89181900360a00190a1505050505050565b60006115bf33611843565b116115dc5760405162461bcd60e51b815260040161055a9061505a565b611198336115e9846155ff565b836122c7565b33301461160e5760405162461bcd60e51b815260040161055a90615236565b6000816001600160a01b03163b116116385760405162461bcd60e51b815260040161055a9061527d565b6106968161277d565b600061164c60025490565b905090565b3330146116705760405162461bcd60e51b815260040161055a90615236565b6000816001600160a01b03163b116116dc5760405162461bcd60e51b815260206004820152602960248201527f526f6e696e476f7665726e616e636541646d696e3a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b606482015260840161055a565b610696816127cb565b6000828152600e602090815260408083206001600160a01b038516845260020190915281205415155b90505b92915050565b6000806000836001600160a01b031660405161173d906303e1469160e61b815260040190565b600060405180830381855afa9150503d8060008114611778576040519150601f19603f3d011682016040523d82523d6000602084013e61177d565b606091505b509150915081610d035760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206061646d60448201526b1a5b8a0a580819985a5b195960a21b606482015260840161055a565b60006117ef33611843565b1161180c5760405162461bcd60e51b815260040161055a9061505a565b61183b85858585856006546118296003546001600160a01b031690565b6004546001600160a01b031633612819565b505050505050565b600080600061185a6003546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316631af0725f60e31b1790529251931692634bb5274a926118b29291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516118eb91906154f9565b600060405180830381855afa9150503d8060008114611926576040519150601f19603f3d011682016040523d82523d6000602084013e61192b565b606091505b5091509150816119a35760405162461bcd60e51b815260206004820152603f60248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f476f7665726e6f7257656967687428616464726573732960206661696c656400606482015260840161055a565b80806020019051810190610d179190615712565b6119c96119c3886155ff565b8261287c565b5060006119dd6119d8896155ff565b612964565b9050611a176119eb896155ff565b88888888611a03896119fe896000612b03565b612b59565b611a128a6119fe8a6001612b03565b612b80565b5050505050505050565b6040805160c08101909152600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb554909182918190611a699060016152d7565b81526020018c81526020018b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082018b9052604082018a90526060909101889052909150611acd828787612eb9565b9050611ae46002548261308790919063ffffffff16565b6000611aef82612964565b9050611afd6000828f613183565b935080847f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca84611b2c876132b1565b878a604051611b3e9493929190615830565b60405180910390a35050509998505050505050505050565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b6000611bb96119d8886155ff565b6020808901356000908152600180835260408083208c35845290935291902001549091508114611bfb5760405162461bcd60e51b815260040161055a90615917565b611c29611c07886155ff565b87878787611c1a886119fe896000612b03565b611a12896119fe8a6001612b03565b50505050505050565b6000611c498383611c428c6159ca565b9190612eb9565b90506000611c5e611c598b6159ca565b6132b1565b9050611c6982612964565b600080805260016020818152855183527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4990526040909120015414611cc05760405162461bcd60e51b815260040161055a90615917565b610638828a8a8a8a611cd78b6119fe896000612b03565b611a128c6119fe8a6001612b03565b6000806000611cfd6003546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b0316637de5dedd60e01b17905291516001600160a01b039390931692634bb5274a92611d469291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611d7f91906154f9565b600060405180830381855afa9150503d8060008114611dba576040519150601f19603f3d011682016040523d82523d6000602084013e611dbf565b606091505b509150915081611e375760405162461bcd60e51b815260206004820152603860248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c20606d696e60448201527f696d756d566f7465576569676874282960206661696c65640000000000000000606482015260840161055a565b80806020019051810190611e4b9190615712565b9250505090565b600754853510801590611e6b5750600854602086013510155b611edd5760405162461bcd60e51b815260206004820152603d60248201527f424f73476f7665726e616e636550726f706f73616c3a20717565727920666f7260448201527f206f7574646174656420627269646765206f70657261746f7220736574000000606482015260840161055a565b611ee68561340b565b82611f475760405162461bcd60e51b815260206004820152602b60248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b606482015260840161055a565b6000806000611f55886135cb565b90506000611f638583612b59565b89356000818152600a60209081526040808320828f0135808552908352818420948452600c83528184209084529091528120929350909190805b8a81101561214657368c8c83818110611fb857611fb86152ea565b606002919091019150611fe3905086611fd46020840184615aa3565b8360200135846040013561367d565b9850886001600160a01b0316886001600160a01b03161061205a5760405162461bcd60e51b815260206004820152602b60248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964207360448201526a34b3b732b91037b93232b960a91b606482015260840161055a565b889750506000612069896136a5565b90508015612133576001600160a01b0389166000908152600b60205260409020439055600192508c8c838181106120a2576120a26152ea565b6001600160a01b038c1660009081526020889052604090206060909102929092019190506120d08282615ac0565b5050600184810180548083018255600091825260209091200180546001600160a01b0319166001600160a01b038c1617905561210f868b848f8c6124b2565b600481111561212057612120614aca565b0361213357505050505050505050610574565b508061213e81615300565b915050611f9d565b508061104f5760405162461bcd60e51b815260206004820152602960248201527f424f73476f7665726e616e636550726f706f73616c3a20696e76616c6964207360448201526869676e61747572657360b81b606482015260840161055a565b6121ae6147b9565b876000036121fe5760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e206964604482015260640161055a565b6040805160e08101825260008a81526020819052919091205481906122249060016152d7565b81526020018981526020018881526020018781526020018681526020018581526020018481525090506122626002548261308790919063ffffffff16565b600061226d82612964565b9050600061227c8a838b613183565b905081818b7fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd986886040516122b2929190615af1565b60405180910390a45050979650505050505050565b468260200151146123295760405162461bcd60e51b815260206004820152602660248201527f526f6e696e476f7665726e616e636541646d696e3a20696e76616c6964206368604482015265185a5b881a5960d21b606482015260840161055a565b61233282612964565b602080840151600090815260018083526040808320875184529093529190200154146123bd5760405162461bcd60e51b815260206004820152603460248201527f526f6e696e476f7665726e616e636541646d696e3a206361737420766f746520604482015273199bdc881a5b9d985b1a59081c1c9bdc1bdcd85b60621b606482015260840161055a565b60006123c7611ce6565b90506000816123d4613810565b6123de9190615b1b565b6123e99060016152d7565b6040805160608101825260008082526020820181905291810191909152909150611c29858585858a8661241b8d611843565b613957565b60008281526001602090815260408083208484529091529020610ea981613d72565b604080517f697acba4deaf1a718d8c2d93e42860488cb7812696f28ca10eed17bac41e70276020808301919091526001600160a01b0396871682840152949095166060860152608085019290925260a0808501919091528151808503909101815260c09093019052815191012090565b60008086600401541180156124cb575042866004015411155b156124e35750845460ff1916600490811786556125d8565b6001600160a01b03851660009081526002870160205260409020541561254d57612517856001600160a01b03166014613f94565b6040516020016125279190615b2e565b60408051601f198184030181529082905262461bcd60e51b825261055a916004016156ff565b6001600160a01b038516600090815260028701602090815260408083208590558483526003890190915281208054869190839061258b9084906152d7565b92505081905590508381101580156125b857506000875460ff1660048111156125b6576125b6614aca565b145b156125d057865460ff19166001908117885587018390555b5050845460ff165b95945050505050565b60006125f5600d546001600160a01b031690565b604080516001600160a01b0386811660248084019190915286821660448085019190915284518085039091018152606490930184526020830180516001600160e01b03166361e45aeb60e11b1790529251931692634bb5274a9261265a9291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161269391906154f9565b6000604051808303816000865af19150503d80600081146126d0576040519150601f19603f3d011682016040523d82523d6000602084013e6126d5565b606091505b50509050806111895760405162461bcd60e51b815260206004820152606260248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206065786560448201527f6352656c656173654c6f636b656446756e64466f72456d657267656e6379457860648201527f69745265717565737428616464726573732c616464726573732960206661696c608482015261195960f21b60a482015260c40161055a565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd6f5f93d69a07c593a09be0b208bff13ab4ffd6017df3b33433d63bdc59b4d790602001611ba0565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b683616990602001611ba0565b6128216147b9565b61283561282d8b6159ca565b85858561412f565b5090506000612846611c598c6159ca565b905061286e828b8b8b8b61285f8c6119fe896000612b03565b611a128d6119fe8a6001612b03565b509998505050505050505050565b60208201516000908082036128d35760405162461bcd60e51b815260206004820181905260248201527f436f7265476f7665726e616e63653a20696e76616c696420636861696e206964604482015260640161055a565b6002546128e1908590613087565b60006128ec85612964565b90506128fd82828760400151613183565b855190935083146129205760405162461bcd60e51b815260040161055a90615b82565b8083837fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98888604051612954929190615af1565b60405180910390a4505092915050565b6000806000806000808660800151905060008760600151905060008860a00151516001600160401b0381111561299c5761299c6150a6565b6040519080825280602002602001820160405280156129c5578160200160208202803683370190505b5060c08a015190915060005b8251811015612a2e578a60a0015181815181106129f0576129f06152ea565b602002602001015180519060200120838281518110612a1157612a116152ea565b602090810291909101015280612a2681615300565b9150506129d1565b506020835102602084012097506020845102602085012096506020825102602083012095506020815102602082012094507fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a60001b8a600001518b602001518c604001518b8b8b8b604051602001612ade989796959493929190978852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b6040516020818303038152906040528051906020012098505050505050505050919050565b604051600090612b3b907fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c29085908590602001615bc8565b60405160208183030381529060405280519060200120905092915050565b60405161190160f01b60208201526022810183905260428101829052600090606201612b3b565b8415801590612b8e57508483145b612beb5760405162461bcd60e51b815260206004820152602860248201527f476f7665726e616e636550726f706f73616c3a20696e76616c696420617272616044820152670f240d8cadccee8d60c31b606482015260840161055a565b6000612bf5611ce6565b9050600081612c02613810565b612c0c9190615b1b565b612c179060016152d7565b9050600080366000805b89811015612e4d578a8a82818110612c3b57612c3b6152ea565b606002919091019350600090508d8d83818110612c5a57612c5a6152ea565b9050602002016020810190612c6f9190615bed565b6001811115612c8057612c80614aca565b03612cac57612ca589612c966020860186615aa3565b8560200135866040013561367d565b9350612d60565b60018d8d83818110612cc057612cc06152ea565b9050602002016020810190612cd59190615bed565b6001811115612ce657612ce6614aca565b03612cfc57612ca588612c966020860186615aa3565b60405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636550726f706f73616c3a20717565727920666f7220756e604482015272737570706f7274656420766f7465207479706560681b606482015260840161055a565b836001600160a01b0316856001600160a01b031610612dcb5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964206f7264656044820152603960f91b606482015260840161055a565b8394506000612dd985611843565b90508015612e3a5760019250612e288f8f8f85818110612dfb57612dfb6152ea565b9050602002016020810190612e109190615bed565b8a8a89612e22368b90038b018b615c0a565b87613957565b15612e3a575050505050505050611c29565b5080612e4581615300565b915050612c21565b5080612eaa5760405162461bcd60e51b815260206004820152602660248201527f476f7665726e616e636550726f706f73616c3a20696e76616c6964207369676e60448201526561747572657360d01b606482015260840161055a565b50505050505050505050505050565b612ec16147b9565b83518152602080850151604080840191909152600091830191909152840151516001600160401b03811115612ef857612ef86150a6565b604051908082528060200260200182016040528015612f21578160200160208202803683370190505b5060608083019190915284015160808083019190915284015160a08083019190915284015160c082015260005b84604001515181101561307f57600185604001518281518110612f7357612f736152ea565b60200260200101516001811115612f8c57612f8c614aca565b03612fcd578282606001518281518110612fa857612fa86152ea565b60200260200101906001600160a01b031690816001600160a01b03168152505061306d565b600085604001518281518110612fe557612fe56152ea565b60200260200101516001811115612ffe57612ffe614aca565b0361301a578382606001518281518110612fa857612fa86152ea565b60405162461bcd60e51b815260206004820152602260248201527f476c6f62616c50726f706f73616c3a20756e737570706f727465642074617267604482015261195d60f21b606482015260840161055a565b8061307781615300565b915050612f4e565b509392505050565b60008260600151511180156130a55750816080015151826060015151145b80156130ba57508160a0015151826060015151145b80156130cf57508160c0015151826060015151145b61311b5760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c3a20696e76616c6964206172726179206c656e6774680000604482015260640161055a565b61312581426152d7565b826040015111156111985760405162461bcd60e51b815260206004820152602260248201527f50726f706f73616c3a20696e76616c6964206578706972792074696d6573746160448201526106d760f41b606482015260840161055a565b600083815260208190526040812054908190036131b457506000838152602081905260409020600190819055613284565b60008481526001602090815260408083208484529091528120906131d782613d72565b905080613281576000825460ff1660048111156131f6576131f6614aca565b0361325d5760405162461bcd60e51b815260206004820152603160248201527f436f7265476f7665726e616e63653a2063757272656e742070726f706f73616c604482015270081a5cc81b9bdd0818dbdb5c1b195d1959607a1b606482015260840161055a565b6000868152602081905260408120805490919061327990615300565b918290555092505b50505b60009384526001602081815260408087208488529091529094209384019290925560069092019190915590565b6000806000806000808660600151905060008760400151905060008860800151516001600160401b038111156132e9576132e96150a6565b604051908082528060200260200182016040528015613312578160200160208202803683370190505b5060a08a015190915060005b825181101561337b578a60800151818151811061333d5761333d6152ea565b60200260200101518051906020012083828151811061335e5761335e6152ea565b60209081029190910101528061337381615300565b91505061331e565b5082516020908102848201208551820286830120845183028584012084518402858501208e518f860151604080517f1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee911413509881019890985287019190915260608601526080850184905260a0850183905260c0850182905260e08501819052929b509099509750955061010001612ade565b600061341a6040830183615336565b90501161347d5760405162461bcd60e51b815260206004820152602b60248201527f4272696467654f70657261746f727342616c6c6f743a20696e76616c6964206160448201526a0e4e4c2f240d8cadccee8d60ab1b606482015260840161055a565b600061348c6040830183615336565b600081811061349d5761349d6152ea565b90506020020160208101906134b29190614a47565b905060015b6134c46040840184615336565b9050811015611189576134da6040840184615336565b828181106134ea576134ea6152ea565b90506020020160208101906134ff9190614a47565b6001600160a01b0316826001600160a01b0316106135855760405162461bcd60e51b815260206004820152603860248201527f4272696467654f70657261746f727342616c6c6f743a20696e76616c6964206f60448201527f72646572206f6620627269646765206f70657261746f72730000000000000000606482015260840161055a565b6135926040840184615336565b828181106135a2576135a26152ea565b90506020020160208101906135b79190614a47565b9150806135c381615300565b9150506134b7565b600080806135dc6040850185615336565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251602090810293810193909320604080517fd679a49e9e099fa9ed83a5446aaec83e746b03ec6723d6f5efb29d37d7f0b78a818701528935818301529885013560608a01526080808a01929092528051808a03909201825260a0909801909752505084519401939093209392505050565b600080600061368e878787876141ec565b9150915061369b816142d9565b5095945050505050565b60008060006136bc6003546001600160a01b031690565b604080516001600160a01b03878116602480840191909152835180840382018152604490930184526020830180516001600160e01b0316635624191160e01b1790529251931692634bb5274a926137149291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161374d91906154f9565b600060405180830381855afa9150503d8060008114613788576040519150601f19603f3d011682016040523d82523d6000602084013e61378d565b606091505b5091509150816119a35760405162461bcd60e51b815260206004820152604260248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c206067657460448201527f427269646765566f74657257656967687428616464726573732960206661696c606482015261195960f21b608482015260a40161055a565b60008060006138276003546001600160a01b031690565b6040805160048152602480820183526020820180516001600160e01b031663926323d560e01b17905291516001600160a01b039390931692634bb5274a926138709291016156ff565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516138a991906154f9565b600060405180830381855afa9150503d80600081146138e4576040519150601f19603f3d011682016040523d82523d6000602084013e6138e9565b606091505b509150915081611e375760405162461bcd60e51b815260206004820152603360248201527f476f7665726e616e636541646d696e3a2070726f78792063616c6c2060746f74604482015272185b15d95a59da1d1cca0a580819985a5b1959606a1b606482015260840161055a565b6020808801518851600082815260018452604080822083835290945292832061397f81613d72565b156139905760019350505050613d67565b6020808c015160009081529081905260409020548214613a0b5760405162461bcd60e51b815260206004820152603060248201527f436f7265476f7665726e616e63653a20717565727920666f7220696e76616c6960448201526f642070726f706f73616c206e6f6e636560801b606482015260840161055a565b6000815460ff166004811115613a2357613a23614aca565b14613a7e5760405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a2074686520766f74652069732066696e616044820152641b1a5e995960da1b606482015260840161055a565b6001600160a01b038716600090815260088201602052604090205460ff1615613ac557613ab5876001600160a01b03166014613f94565b6040516020016125279190615c6b565b6001600160a01b03871660009081526008820160209081526040909120805460ff19166001179055860151151580613b005750604086015115155b80613b0e5750855160ff1615155b15613b55576001600160a01b03871660009081526007820160209081526040918290208851815460ff191660ff909116178155908801516001820155908701516002909101555b866001600160a01b031681600101547f1203f9e81c814a35f5f4cc24087b2a24c6fb7986a9f1406b68a9484882c93a238c88604051613b95929190615cbb565b60405180910390a3600080808c6001811115613bb357613bb3614aca565b03613c08576004830180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038c16179055600384018054899290613bfb9084906152d7565b9250508190559150613cc7565b60018c6001811115613c1c57613c1c614aca565b03613c71576005830180546001810182556000918252602082200180546001600160a01b0319166001600160a01b038c16179055600284018054899290613c649084906152d7565b9250508190559050613cc7565b60405162461bcd60e51b815260206004820152602560248201527f436f7265476f7665726e616e63653a20756e737570706f7274656420766f7465604482015264207479706560d81b606482015260840161055a565b8a8210613d1b57825460ff19166001908117845580840154604051919750907f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a2613d16838e61448f565b613d61565b898110613d6157825460ff19166003178355600180840154604051919750907f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25b50505050505b979650505050505050565b600080825460ff166004811115613d8b57613d8b614aca565b148015613d9c575042826006015411155b90508015613f8f5760018201546040517f58f98006a7f2f253f8ae8f8b7cec9008ca05359633561cd7c22f3005682d4a5590600090a260005b6004830154811015613e8e57826008016000846004018381548110613dfc57613dfc6152ea565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191690556004840180546007860192919084908110613e4557613e456152ea565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181018290556002015580613e8681615300565b915050613dd5565b5060005b6005830154811015613f4b57826008016000846005018381548110613eb957613eb96152ea565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191690556005840180546007860192919084908110613f0257613f026152ea565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181018290556002015580613f4381615300565b915050613e92565b50815460ff191682556000600183018190556002830181905560038301819055613f799060048401906147f6565b613f876005830160006147f6565b600060068301555b919050565b60606000613fa383600261537f565b613fae9060026152d7565b6001600160401b03811115613fc557613fc56150a6565b6040519080825280601f01601f191660200182016040528015613fef576020820181803683370190505b509050600360fc1b8160008151811061400a5761400a6152ea565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614039576140396152ea565b60200101906001600160f81b031916908160001a905350600061405d84600261537f565b6140689060016152d7565b90505b60018111156140e0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061409c5761409c6152ea565b1a60f81b8282815181106140b2576140b26152ea565b60200101906001600160f81b031916908160001a90535060049490941c936140d981615cd2565b905061406b565b50831561170e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161055a565b6141376147b9565b6000614144868686612eb9565b915061415b6002548361308790919063ffffffff16565b600061416683612964565b90506141786000828960200151613183565b8351909250821461419b5760405162461bcd60e51b815260040161055a90615b82565b80827f771d78ae9e5fca95a532fb0971d575d0ce9b59d14823c063e08740137e0e0eca856141c88b6132b1565b8b896040516141da9493929190615830565b60405180910390a35094509492505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561422357506000905060036142d0565b8460ff16601b1415801561423b57508460ff16601c14155b1561424c57506000905060046142d0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156142a0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166142c9576000600192509250506142d0565b9150600090505b94509492505050565b60008160048111156142ed576142ed614aca565b036142f55750565b600181600481111561430957614309614aca565b036143565760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161055a565b600281600481111561436a5761436a614aca565b036143b75760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161055a565b60038160048111156143cb576143cb614aca565b036144235760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161055a565b600481600481111561443757614437614aca565b036106965760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161055a565b614498816144fc565b1561119857815460ff191660021782556000806144b483614516565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba83836040516144ee929190615ce9565b60405180910390a250505050565b600081602001516000148061171157505060200151461490565b606080614522836144fc565b61457a5760405162461bcd60e51b815260206004820152602360248201527f50726f706f73616c3a20717565727920666f7220696e76616c696420636861696044820152621b925960ea1b606482015260840161055a565b8260600151516001600160401b03811115614597576145976150a6565b6040519080825280602002602001820160405280156145c0578160200160208202803683370190505b5091508260600151516001600160401b038111156145e0576145e06150a6565b60405190808252806020026020018201604052801561461357816020015b60608152602001906001900390816145fe5790505b50905060005b8360600151518110156147b3578360c00151818151811061463c5761463c6152ea565b60200260200101515a116146925760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c3a20696e73756666696369656e7420676173000000000000604482015260640161055a565b836060015181815181106146a8576146a86152ea565b60200260200101516001600160a01b0316846080015182815181106146cf576146cf6152ea565b60200260200101518560c0015183815181106146ed576146ed6152ea565b6020026020010151908660a00151848151811061470c5761470c6152ea565b602002602001015160405161472191906154f9565b600060405180830381858888f193505050503d806000811461475f576040519150601f19603f3d011682016040523d82523d6000602084013e614764565b606091505b50848381518110614777576147776152ea565b60200260200101848481518110614790576147906152ea565b602090810291909101019190915290151590526147ac81615300565b9050614619565b50915091565b6040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b508054600082559060005260206000209081019061069691905b808211156148245760008155600101614810565b5090565b600060e0828403121561483a57600080fd5b50919050565b60008083601f84011261485257600080fd5b5081356001600160401b0381111561486957600080fd5b6020830191508360208260051b850101111561488457600080fd5b9250929050565b60008083601f84011261489d57600080fd5b5081356001600160401b038111156148b457600080fd5b60208301915083602060608302850101111561488457600080fd5b6000806000806000606086880312156148e757600080fd5b85356001600160401b03808211156148fe57600080fd5b61490a89838a01614828565b9650602088013591508082111561492057600080fd5b61492c89838a01614840565b9096509450604088013591508082111561494557600080fd5b506149528882890161488b565b969995985093965092949392505050565b600080600080600080600080600060a08a8c03121561498157600080fd5b8935985060208a01356001600160401b038082111561499f57600080fd5b6149ab8d838e01614840565b909a50985060408c01359150808211156149c457600080fd5b6149d08d838e01614840565b909850965060608c01359150808211156149e957600080fd5b6149f58d838e01614840565b909650945060808c0135915080821115614a0e57600080fd5b50614a1b8c828d01614840565b915080935050809150509295985092959850929598565b6001600160a01b038116811461069657600080fd5b600060208284031215614a5957600080fd5b813561170e81614a32565b60008060408385031215614a7757600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b83811015614abf5781516001600160a01b031687529582019590820190600101614a9a565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b6002811061069657610696614aca565b600081518084526020808501945080840160005b83811015614abf578151805160ff16885283810151848901526040908101519088015260609096019590820190600101614b04565b606081526000614b4c6060830186614a86565b82810360208481019190915285518083528682019282019060005b81811015614b8c578451614b7a81614ae0565b83529383019391830191600101614b67565b50508481036040860152614ba08187614af0565b98975050505050505050565b604081526000614bbf6040830185614a86565b82810360208401526125d88185614af0565b600080600060608486031215614be657600080fd5b83359250602084013591506040840135614bff81614a32565b809150509250925092565b600060208284031215614c1c57600080fd5b5035919050565b600080600080600060608688031215614c3b57600080fd5b85356001600160401b0380821115614c5257600080fd5b9087019060c0828a031215614c6657600080fd5b9095506020870135908082111561492057600080fd5b600080600060408486031215614c9157600080fd5b83356001600160401b0380821115614ca857600080fd5b9085019060608288031215614cbc57600080fd5b90935060208501359080821115614cd257600080fd5b50614cdf8682870161488b565b9497909650939450505050565b60208152815160208201526020820151604082015260006040830151606080840152610d176080840182614a86565b6002811061069657600080fd5b8035613f8f81614d1b565b60008060008060008060008060008060c08b8d031215614d5257600080fd5b8a35995060208b01356001600160401b0380821115614d7057600080fd5b614d7c8e838f01614840565b909b50995060408d0135915080821115614d9557600080fd5b614da18e838f01614840565b909950975060608d0135915080821115614dba57600080fd5b614dc68e838f01614840565b909750955060808d0135915080821115614ddf57600080fd5b50614dec8d828e01614840565b9094509250614dff905060a08c01614d28565b90509295989b9194979a5092959850565b60008060408385031215614e2357600080fd5b8235614e2e81614a32565b91506020830135614e3e81614a32565b809150509250929050565b600080600080600060a08688031215614e6157600080fd5b853594506020860135614e7381614a32565b93506040860135614e8381614a32565b94979396509394606081013594506080013592915050565b60008060008060008060008060008060c08b8d031215614eba57600080fd5b8a35995060208b0135985060408b01356001600160401b0380821115614edf57600080fd5b614eeb8e838f01614840565b909a50985060608d0135915080821115614f0457600080fd5b614f108e838f01614840565b909850965060808d0135915080821115614f2957600080fd5b614f358e838f01614840565b909650945060a08d0135915080821115614f4e57600080fd5b50614f5b8d828e01614840565b915080935050809150509295989b9194979a5092959850565b60008060008060808587031215614f8a57600080fd5b8435614f9581614a32565b93506020850135614fa581614a32565b93969395505050506040820135916060013590565b60008060408385031215614fcd57600080fd5b82356001600160401b03811115614fe357600080fd5b614fef85828601614828565b9250506020830135614e3e81614d1b565b60a081016005871061501457615014614aca565b95815260208101949094526040840192909252606083015260809091015290565b6000806040838503121561504857600080fd5b823591506020830135614e3e81614a32565b6020808252602c908201527f526f6e696e476f7665726e616e636541646d696e3a2073656e6465722069732060408201526b3737ba1033b7bb32b93737b960a11b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156150de576150de6150a6565b60405290565b60405160c081016001600160401b03811182821017156150de576150de6150a6565b604051601f8201601f191681016001600160401b038111828210171561512e5761512e6150a6565b604052919050565b60006001600160401b0382111561514f5761514f6150a6565b5060051b60200190565b600061516c61516784615136565b615106565b8381529050602080820190600585901b84018681111561518b57600080fd5b845b8181101561521e5780356001600160401b03808211156151ad5760008081fd5b8188019150601f8a818401126151c35760008081fd5b8235828111156151d5576151d56150a6565b6151e6818301601f19168801615106565b92508083528b878286010111156151ff57600091508182fd5b808785018885013760009083018701525085525092820192820161518d565b505050509392505050565b600061170e368484615159565b60208082526027908201527f476f7665726e616e636541646d696e3a206f6e6c7920616c6c6f7765642073656040820152661b198b58d85b1b60ca1b606082015260800190565b60208082526024908201527f476f7665726e616e636541646d696e3a2073657420746f206e6f6e2d636f6e746040820152631c9858dd60e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611711576117116152c1565b634e487b7160e01b600052603260045260246000fd5b600060018201615312576153126152c1565b5060010190565b60006020828403121561532b57600080fd5b815161170e81614a32565b6000808335601e1984360301811261534d57600080fd5b8301803591506001600160401b0382111561536757600080fd5b6020019150600581901b360382131561488457600080fd5b8082028115828204841417611711576117116152c1565b6000813561171181614a32565b81358155600160208084013582840155600283016040850135601e198636030181126153ce57600080fd5b850180356001600160401b038111156153e657600080fd5b83820191508060051b36038213156153fd57600080fd5b68010000000000000000811115615416576154166150a6565b82548184558082101561544a5760008481528581208381019083015b808210156154465782825590880190615432565b5050505b50600092835260208320925b81811015611a175761546783615396565b84820155918401918501615456565b84815260208082018590526060604083018190528201839052600090849060808401835b868110156154c85783356154ad81614a32565b6001600160a01b03168252928201929082019060010161549a565b5098975050505050505050565b60005b838110156154f05781810151838201526020016154d8565b50506000910152565b6000825161550b8184602087016154d5565b9190910192915050565b600082601f83011261552657600080fd5b8135602061553661516783615136565b82815260059290921b8401810191818101908684111561555557600080fd5b8286015b8481101561557957803561556c81614a32565b8352918301918301615559565b509695505050505050565b600082601f83011261559557600080fd5b813560206155a561516783615136565b82815260059290921b840181019181810190868411156155c457600080fd5b8286015b8481101561557957803583529183019183016155c8565b600082601f8301126155f057600080fd5b61170e83833560208501615159565b600060e0823603121561561157600080fd5b6156196150bc565b82358152602083013560208201526040830135604082015260608301356001600160401b038082111561564b57600080fd5b61565736838701615515565b6060840152608085013591508082111561567057600080fd5b61567c36838701615584565b608084015260a085013591508082111561569557600080fd5b6156a1368387016155df565b60a084015260c08501359150808211156156ba57600080fd5b506156c736828601615584565b60c08301525092915050565b600081518084526156eb8160208601602086016154d5565b601f01601f19169290920160200192915050565b60208152600061170e60208301846156d3565b60006020828403121561572457600080fd5b5051919050565b600081518084526020808501945080840160005b83811015614abf5781518752958201959082019060010161573f565b600081518084526020808501808196508360051b8101915082860160005b858110156157a35782840389526157918483516156d3565b98850198935090840190600101615779565b5091979650505050505050565b8051825260208101516020830152604081015160408301526000606082015160e060608501526157e360e0850182614a86565b9050608083015184820360808601526157fc828261572b565b91505060a083015184820360a0860152615816828261575b565b91505060c083015184820360c08601526125d8828261572b565b60808152600061584360808301876157b0565b60208681850152838203604085015260c08201865183528187015182840152604087015160c0604085015281815180845260e0860191508483019350600092505b808310156158ad57835161589781614ae0565b8252928401926001929092019190840190615884565b506060890151935084810360608601526158c7818561572b565b9350505050608086015182820360808401526158e3828261575b565b91505060a086015182820360a08401526158fd828261572b565b93505050506125d860608301846001600160a01b03169052565b6020808252602f908201527f476f7665726e616e636541646d696e3a206361737420766f746520666f72206960408201526e1b9d985b1a59081c1c9bdc1bdcd85b608a1b606082015260800190565b600082601f83011261597757600080fd5b8135602061598761516783615136565b82815260059290921b840181019181810190868411156159a657600080fd5b8286015b848110156155795780356159bd81614d1b565b83529183019183016159aa565b600060c082360312156159dc57600080fd5b6159e46150e4565b823581526020830135602082015260408301356001600160401b0380821115615a0c57600080fd5b615a1836838701615966565b60408401526060850135915080821115615a3157600080fd5b615a3d36838701615584565b60608401526080850135915080821115615a5657600080fd5b615a62368387016155df565b608084015260a0850135915080821115615a7b57600080fd5b50615a8836828601615584565b60a08301525092915050565b60ff8116811461069657600080fd5b600060208284031215615ab557600080fd5b813561170e81615a94565b8135615acb81615a94565b60ff811660ff198354161782555060208201356001820155604082013560028201555050565b604081526000615b0460408301856157b0565b905060018060a01b03831660208301529392505050565b81810381811115611711576117116152c1565b73024b9b7b630ba32b223b7bb32b93730b731b29d160651b815260008251615b5d8160148501602087016154d5565b6d08185b1c9958591e481d9bdd195960921b6014939091019283015250602201919050565b60208082526026908201527f436f7265476f7665726e616e63653a20696e76616c69642070726f706f73616c604082015265206e6f6e636560d01b606082015260800190565b8381526020810183905260608101615bdf83614ae0565b826040830152949350505050565b600060208284031215615bff57600080fd5b813561170e81614d1b565b600060608284031215615c1c57600080fd5b604051606081018181106001600160401b0382111715615c3e57615c3e6150a6565b6040528235615c4c81615a94565b8152602083810135908201526040928301359281019290925250919050565b6f021b7b932a3b7bb32b93730b731b29d160851b815260008251615c968160108501602087016154d5565b6d08185b1c9958591e481d9bdd195960921b6010939091019283015250601e01919050565b60408101615cc884614ae0565b9281526020015290565b600081615ce157615ce16152c1565b506000190190565b604080825283519082018190526000906020906060840190828701845b82811015615d24578151151584529284019290840190600101615d06565b50505083810382850152845180825282820190600581901b8301840187850160005b83811015615d7457601f19868403018552615d628383516156d3565b94870194925090860190600101615d46565b5090999850505050505050505056fea2646970667358221220fd7f4856c2c5a6d30dc075c52b4fe3ca0da70bf660bbe613298da9eacccb882464736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ErrCallerMustBeBridgeContract()": [
        {
          "details": "Error of method caller must be bridge contract."
        }
      ],
      "ErrCallerMustBeRoninTrustedOrgContract()": [
        {
          "details": "Error of method caller must be Ronin trusted org contract."
        }
      ],
      "ErrCallerMustBeValidatorContract()": [
        {
          "details": "Error of method caller must be validator contract."
        }
      ],
      "ErrZeroCodeContract()": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bridgeContract()": {
        "details": "Returns the bridge contract."
      },
      "bridgeOperatorsVoted(uint256,uint256,address)": {
        "details": "Returns whether the voter `_voter` casted vote for bridge operators at a specific period."
      },
      "castGlobalProposalBySignatures((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_castGlobalProposalBySignatures`."
      },
      "castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_castProposalBySignatures`."
      },
      "castProposalVoteForCurrentNetwork((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8)": {
        "details": "Casts vote for a proposal on the current network. Requirements: - The method caller is governor."
      },
      "changeProxyAdmin(address,address)": {
        "details": "Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`."
      },
      "createEmergencyExitPoll(address,address,uint256,uint256)": {
        "details": "Create a vote to agree that an emergency exit is valid and should return the locked funds back.a Requirements: - The method caller is validator contract."
      },
      "deleteExpired(uint256,uint256)": {
        "details": "See `CoreGovernance-_deleteExpiredProposal`"
      },
      "emergencyPollVoted(bytes32,address)": {
        "details": "Returns whether the voter casted vote for emergency exit poll."
      },
      "getBridgeOperatorVotingSignatures(uint256,uint256)": {
        "details": "Returns the voted signatures for bridge operators at a specific period. Note: Does not verify whether the voter casted vote for the proposal and the returned signature can be empty. Please consider filtering for empty signatures after calling this function."
      },
      "getProposalExpiryDuration()": {
        "details": "Returns the proposal expiry duration."
      },
      "getProposalSignatures(uint256,uint256)": {
        "details": "Returns the voted signatures for the proposals. Note: The signatures can be empty in case the proposal is voted on the current network."
      },
      "getProxyAdmin(address)": {
        "details": "Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getProxyImplementation(address)": {
        "details": "Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "lastSyncedBridgeOperatorSetInfo()": {
        "details": "Returns the synced bridge operator set info."
      },
      "lastVotedBlock(address)": {
        "details": "Returns the last voted block of the bridge voter."
      },
      "proposalVoted(uint256,uint256,address)": {
        "details": "Returns whether the voter `_voter` casted vote for the proposal."
      },
      "propose(uint256,uint256,address[],uint256[],bytes[],uint256[])": {
        "details": "See `CoreGovernance-_proposeProposal`. Requirements: - The method caller is governor."
      },
      "proposeGlobal(uint256,uint8[],uint256[],bytes[],uint256[])": {
        "details": "See `CoreGovernance-_proposeGlobal`. Requirements: - The method caller is governor."
      },
      "proposeGlobalProposalStructAndCastVotes((uint256,uint256,uint8[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_proposeGlobalProposalStructAndCastVotes`. Requirements: - The method caller is governor."
      },
      "proposeProposalForCurrentNetwork(uint256,address[],uint256[],bytes[],uint256[],uint8)": {
        "details": "Proposes and casts vote for a proposal on the current network. Requirements: - The method caller is governor. - The proposal is for the current network."
      },
      "proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_proposeProposalStructAndCastVotes`. Requirements: - The method caller is governor. - The proposal is for the current network."
      },
      "roninTrustedOrganizationContract()": {
        "details": "Returns the ronin trusted organization contract."
      },
      "setBridgeContract(address)": {
        "details": "Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`."
      },
      "setProposalExpiryDuration(uint256)": {
        "details": "Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin."
      },
      "setRoninTrustedOrganizationContract(address)": {
        "details": "Sets the ronin trusted organization contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `RoninTrustedOrganizationContractUpdated`."
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      },
      "voteBridgeOperatorsBySignatures((uint256,uint256,address[]),(uint8,bytes32,bytes32)[])": {
        "details": "See `BOsGovernanceProposal-_castVotesBySignatures`."
      },
      "voteEmergencyExit(bytes32,address,address,uint256,uint256)": {
        "details": "Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester. Requirements: - The voter is governor. - The voting is existent. - The voting is not expired yet."
      }
    },
    "stateVariables": {
      "_emergencyExitPoll": {
        "details": "Mapping from request hash => emergency poll"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "round(uint256)": {
        "notice": "chain id = 0 for global proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7476,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "round",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7484,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "vote",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)7402_storage))"
      },
      {
        "astId": 7486,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_proposalExpiryDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6146,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_roninTrustedOrganizationContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IRoninTrustedOrganization)10177"
      },
      {
        "astId": 5797,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_bridgeContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBridge)9276"
      },
      {
        "astId": 4506,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "roninChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4509,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 6877,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_lastSyncedBridgeOperatorSetInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(BridgeOperatorSet)12376_storage"
      },
      {
        "astId": 6885,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_vote",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(IsolatedVote)6717_storage))"
      },
      {
        "astId": 6890,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_lastVotedBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6898,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_bridgeVoterSig",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(VotingSignature)6873_storage))"
      },
      {
        "astId": 6462,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IRoninValidatorSet)11908"
      },
      {
        "astId": 22886,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_emergencyExitPoll",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(IsolatedVote)6717_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)9276": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninTrustedOrganization)10177": {
        "encoding": "inplace",
        "label": "contract IRoninTrustedOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninValidatorSet)11908": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_enum(VoteStatus)10566": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_struct(Signature)10557_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignatureConsumer.Signature)",
        "numberOfBytes": "32",
        "value": "t_struct(Signature)10557_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(IsolatedVote)6717_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IsolatedGovernance.IsolatedVote)",
        "numberOfBytes": "32",
        "value": "t_struct(IsolatedVote)6717_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(IsolatedVote)6717_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct IsolatedGovernance.IsolatedVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(IsolatedVote)6717_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)7402_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalVote)7402_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(VotingSignature)6873_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BOsGovernanceProposal.VotingSignature))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(VotingSignature)6873_storage)"
      },
      "t_mapping(t_uint256,t_struct(IsolatedVote)6717_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IsolatedGovernance.IsolatedVote)",
        "numberOfBytes": "32",
        "value": "t_struct(IsolatedVote)6717_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)7402_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreGovernance.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)7402_storage"
      },
      "t_mapping(t_uint256,t_struct(VotingSignature)6873_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BOsGovernanceProposal.VotingSignature)",
        "numberOfBytes": "32",
        "value": "t_struct(VotingSignature)6873_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BridgeOperatorSet)12376_storage": {
        "encoding": "inplace",
        "label": "struct BridgeOperatorsBallot.BridgeOperatorSet",
        "members": [
          {
            "astId": 12370,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "period",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12372,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "epoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12375,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "operators",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(IsolatedVote)6717_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.IsolatedVote",
        "members": [
          {
            "astId": 6698,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10566"
          },
          {
            "astId": 6700,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6705,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 6710,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "weight",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 6713,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "expiredAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6716,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "createdAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ProposalVote)7402_storage": {
        "encoding": "inplace",
        "label": "struct CoreGovernance.ProposalVote",
        "members": [
          {
            "astId": 7378,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)10566"
          },
          {
            "astId": 7380,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 7382,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7384,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7387,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7390,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7392,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "expiryTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7397,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "sig",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Signature)10557_storage)"
          },
          {
            "astId": 7401,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voted",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Signature)10557_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConsumer.Signature",
        "members": [
          {
            "astId": 10552,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "v",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10554,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "r",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10556,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "s",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VotingSignature)6873_storage": {
        "encoding": "inplace",
        "label": "struct BOsGovernanceProposal.VotingSignature",
        "members": [
          {
            "astId": 6869,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "signatureOf",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Signature)10557_storage)"
          },
          {
            "astId": 6872,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voters",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}