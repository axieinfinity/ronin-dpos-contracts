{
  "address": "0xCb60838d271E963031790905685fa9388c5Af095",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridgeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "bulkTotalBallotsOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridgeTracking.VoteKind",
          "name": "_kind",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "handleVoteApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startedAtBlock",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridgeTracking.VoteKind",
          "name": "_kind",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "recordVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startedAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "totalBallots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperator",
          "type": "address"
        }
      ],
      "name": "totalBallotsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "totalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8666cdd544066f2d273a94951cf8bb9bda9cfbc41cd591be3c7dd08160495a3",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xCb60838d271E963031790905685fa9388c5Af095",
    "transactionIndex": 0,
    "gasUsed": "905169",
    "logsBloom": "0x
    "blockHash": "0x460f5171ce3ba2c43decccba49dd95baa1b987830d328d4bc25c7cc19c52e6ce",
    "transactionHash": "0xf8666cdd544066f2d273a94951cf8bb9bda9cfbc41cd591be3c7dd08160495a3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11705064,
        "transactionHash": "0xf8666cdd544066f2d273a94951cf8bb9bda9cfbc41cd591be3c7dd08160495a3",
        "address": "0xCb60838d271E963031790905685fa9388c5Af095",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x460f5171ce3ba2c43decccba49dd95baa1b987830d328d4bc25c7cc19c52e6ce"
      }
    ],
    "blockNumber": 11705064,
    "cumulativeGasUsed": "905169",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2dccd829348aefebbef587667549cd38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"bulkTotalBallotsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridgeTracking.VoteKind\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"handleVoteApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startedAtBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridgeTracking.VoteKind\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"recordVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"totalBallots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperator\",\"type\":\"address\"}],\"name\":\"totalBallotsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bridgeContract()\":{\"details\":\"Returns the bridge contract.\"},\"bulkTotalBallotsOf(uint256,address[])\":{\"details\":\"Returns the total number of ballots of bridge operators at the specific period `_period`.\"},\"handleVoteApproved(uint8,uint256)\":{\"details\":\"Handles the request once it is approved. Requirements: - The method caller is the bridge contract.\"},\"initialize(address,address,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"recordVote(uint8,uint256,address)\":{\"details\":\"Records vote for a receipt and a operator. Requirements: - The method caller is the bridge contract.\"},\"setBridgeContract(address)\":{\"details\":\"Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`.\"},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"totalBallots(uint256)\":{\"details\":\"Returns the total number of ballots at the specific period `_period`.\"},\"totalBallotsOf(uint256,address)\":{\"details\":\"Returns the total number of ballots of a bridge operator at the specific period `_period`.\"},\"totalVotes(uint256)\":{\"details\":\"Returns the total number of votes at the specific period `_period`.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"}},\"stateVariables\":{\"_receiptApprovedAt\":{\"details\":\"Mapping from vote kind => request id => the period that the receipt is approved\"},\"_receiptVoted\":{\"details\":\"Mapping from vote kind => request id => bridge operator address => flag indicating whether the operator voted or not\"},\"_receiptVoters\":{\"details\":\"Mapping from vote kind => request id => the voters\"},\"_totalBallots\":{\"details\":\"Mapping from period number => total number of all ballots\"},\"_totalBallotsOf\":{\"details\":\"Mapping from period number => bridge operator address => total number of ballots\"},\"_totalVotes\":{\"details\":\"Mapping from period number => total number of all votes\"},\"startedAtBlock\":{\"details\":\"The block that the contract allows incoming mutable calls.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/BridgeTracking.sol\":\"BridgeTracking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeContract.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\n\\ncontract HasBridgeContract is IHasBridgeContract, HasProxyAdmin {\\n  IBridge internal _bridgeContract;\\n\\n  modifier onlyBridgeContract() {\\n    require(bridgeContract() == msg.sender, \\\"HasBridgeContract: method caller must be bridge contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function bridgeContract() public view override returns (address) {\\n    return address(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external virtual override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasBridgeContract: set to non-contract\\\");\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function _setBridgeContract(address _addr) internal {\\n    _bridgeContract = IBridge(_addr);\\n    emit BridgeContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xf4dfa576336d50ab380c3310735575f8729cff0089813abb1a8506ad2cca0f00\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    require(validatorContract() == msg.sender, \\\"HasValidatorContract: method caller must be validator contract\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external override onlyAdmin {\\n    require(_addr.code.length > 0, \\\"HasValidatorContract: set to non-contract\\\");\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xfc2ef0f8358960702307626dc4ccbab066c5e0763e04e8a794f0dc4711789bdd\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVotes(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallots(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function bulkTotalBallotsOf(uint256 _period, address[] calldata _bridgeOperators)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd151b4f84727bed8751d2e750f632957c27d5d33b2d3ed21002de18dc40dc0b3\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasBridgeContract {\\n  /// @dev Emitted when the bridge contract is updated.\\n  event BridgeContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the bridge contract.\\n   */\\n  function bridgeContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function setBridgeContract(address) external;\\n}\\n\",\"keccak256\":\"0xb1c239a3987c93db20b65bb80f165861bc83a186fb8d5a1c17c5ad06cfb395a8\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasValidatorContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0xb6e39a02969091decbb50633286855c157502a7d15a988e436644b8d419e13d3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that the candidate to be revoked.\\n    uint256 revokedTimestamp;\\n    // Extra data\\n    bytes extraData;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoked timestamp of a candidate is updated.\\n  event CandidateRevokedTimestampUpdated(address indexed consensusAddr, uint256 revokedTimestamp);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function grantValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokedTimestampUpdated`.\\n   *\\n   */\\n  function requestRevokeCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfc2253c897b3e450bffc701885463492c0ab94542db3f1a4cfad25c4866dc9be\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 amount);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(uint256 amount, uint256 contractBalance);\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xd0aef1d05e99c82fd733c97a45f3a999898c4ded0cace2cb901864e2ddc3904a\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface IRoninValidatorSet is ICandidateManager, ICommonInfo, ISlashingExecution, ICoinbaseExecution {}\\n\",\"keccak256\":\"0x2475cf9c7007277ddfeade823196d0913a6d5c3e3fc9a1a10800734c0fdef062\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0xdeb929875d06c5dfb8562029ccc2922e1c5238f2dc67c8c61acad614f5fe1e28\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {}\\n\",\"keccak256\":\"0x3ce4ec5ccabb3abb8a27ac2134f3b51dffcc0742da89e23eee37d0263018b3bc\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function jailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function jailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function jailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function jailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function bulkJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during the current period.\\n   */\\n  function miningRewardDeprecated(address[] calldata _blockProducers) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producers are deprecated during a specific period.\\n   */\\n  function miningRewardDeprecatedAtPeriod(address[] calldata _blockProducers, uint256 _period)\\n    external\\n    view\\n    returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0xc29b2f9b1bed2442cc2de2f06e3b37faa0ce50ca1cb11826facd7e5fb7154bc2\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbaf184267f8a587b6c2a79868f7acde00d9372e8283baf5baab34ad19ab4abd2\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator or not.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xf7f30bacc63b2e4e9548c83e45eac727eeafa46e60312f936bf189480e413323\",\"license\":\"MIT\"},\"contracts/ronin/BridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../extensions/collections/HasBridgeContract.sol\\\";\\nimport \\\"../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../interfaces/IBridgeTracking.sol\\\";\\n\\ncontract BridgeTracking is HasBridgeContract, HasValidatorContract, Initializable, IBridgeTracking {\\n  /// @dev Mapping from period number => total number of all votes\\n  mapping(uint256 => uint256) internal _totalVotes;\\n  /// @dev Mapping from period number => total number of all ballots\\n  mapping(uint256 => uint256) internal _totalBallots;\\n  /// @dev Mapping from period number => bridge operator address => total number of ballots\\n  mapping(uint256 => mapping(address => uint256)) internal _totalBallotsOf;\\n\\n  /// @dev Mapping from vote kind => request id => the period that the receipt is approved\\n  mapping(VoteKind => mapping(uint256 => uint256)) internal _receiptApprovedAt;\\n  /// @dev Mapping from vote kind => request id => the voters\\n  mapping(VoteKind => mapping(uint256 => address[])) internal _receiptVoters;\\n  /// @dev Mapping from vote kind => request id => bridge operator address => flag indicating whether the operator voted or not\\n  mapping(VoteKind => mapping(uint256 => mapping(address => bool))) internal _receiptVoted;\\n\\n  /// @dev The block that the contract allows incoming mutable calls.\\n  uint256 public startedAtBlock;\\n\\n  modifier skipOnUnstarted() {\\n    if (block.number < startedAtBlock) {\\n      return;\\n    }\\n    _;\\n  }\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address _bridgeContract,\\n    address _validatorContract,\\n    uint256 _startedAtBlock\\n  ) external initializer {\\n    _setBridgeContract(_bridgeContract);\\n    _setValidatorContract(_validatorContract);\\n    startedAtBlock = _startedAtBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalVotes(uint256 _period) external view override returns (uint256) {\\n    return _totalVotes[_period];\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalBallots(uint256 _period) external view override returns (uint256) {\\n    return _totalBallots[_period];\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function bulkTotalBallotsOf(uint256 _period, address[] calldata _bridgeOperators)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory _res)\\n  {\\n    _res = new uint256[](_bridgeOperators.length);\\n    for (uint _i = 0; _i < _bridgeOperators.length; _i++) {\\n      _res[_i] = totalBallotsOf(_period, _bridgeOperators[_i]);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) public view override returns (uint256) {\\n    return _totalBallotsOf[_period][_bridgeOperator];\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external override onlyBridgeContract skipOnUnstarted {\\n    // Only records for the receipt which not approved\\n    if (_receiptApprovedAt[_kind][_requestId] == 0) {\\n      uint256 _period = _validatorContract.currentPeriod();\\n      _totalVotes[_period]++;\\n      _receiptApprovedAt[_kind][_requestId] = _period;\\n\\n      address[] storage _voters = _receiptVoters[_kind][_requestId];\\n      for (uint _i = 0; _i < _voters.length; _i++) {\\n        increaseBallot(_kind, _requestId, _voters[_i], _period);\\n      }\\n\\n      delete _receiptVoters[_kind][_requestId];\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external override onlyBridgeContract skipOnUnstarted {\\n    uint256 _approvedPeriod = _receiptApprovedAt[_kind][_requestId];\\n\\n    // Stores the ones vote for the (deposit/mainchain withdrawal) request which not approved yet\\n    if (_approvedPeriod == 0) {\\n      if (_kind != VoteKind.Withdrawal) {\\n        _receiptVoters[_kind][_requestId].push(_operator);\\n      }\\n      return;\\n    }\\n\\n    uint256 _period = _validatorContract.currentPeriod();\\n    // Only records within a period\\n    if (_approvedPeriod == _period) {\\n      increaseBallot(_kind, _requestId, _operator, _period);\\n    }\\n  }\\n\\n  /**\\n   * Increases the ballot for the operator at a period.\\n   */\\n  function increaseBallot(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator,\\n    uint256 _period\\n  ) internal {\\n    if (_receiptVoted[_kind][_requestId][_operator]) {\\n      return;\\n    }\\n\\n    _totalBallots[_period]++;\\n    _totalBallotsOf[_period][_operator]++;\\n    _receiptVoted[_kind][_requestId][_operator] = true;\\n  }\\n}\\n\",\"keccak256\":\"0x6ca5952a23bbc011d6af83be463c02f4f9f777af4353dbdbcfc1b495c5a62aff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100eb565b600154600160a81b900460ff161561008c5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60015460ff600160a01b909104811610156100e9576001805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610eed806100fa6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063889998ef11610071578063889998ef1461017d578063994390891461019d578063c7c4fea9146101c2578063cd596583146101d5578063cdf64a76146101e6578063f84bd121146101f957600080fd5b806304375dcf146100b95780630b26cf66146101025780631794bb3c1461011757806319e6e1581461012a578063229f88ea1461014a57806357daa1701461015d575b600080fd5b6100ef6100c7366004610bb9565b60009182526004602090815260408084206001600160a01b0393909316845291905290205490565b6040519081526020015b60405180910390f35b610115610110366004610be5565b610202565b005b610115610125366004610c07565b6102c9565b6100ef610138366004610c43565b60009081526002602052604090205490565b610115610158366004610c6b565b610403565b61017061016b366004610c95565b610673565b6040516100f99190610d14565b6100ef61018b366004610c43565b60009081526003602052604090205490565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100f9565b6101156101d0366004610d58565b610727565b6000546001600160a01b03166101aa565b6101156101f4366004610be5565b6108e7565b6100ef60085481565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146102545760405162461bcd60e51b815260040161024b90610d94565b60405180910390fd5b6000816001600160a01b03163b116102bd5760405162461bcd60e51b815260206004820152602660248201527f486173427269646765436f6e74726163743a2073657420746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161024b565b6102c6816109a5565b50565b600154600160a81b900460ff16158080156102ef575060018054600160a01b900460ff16105b8061030f5750303b15801561030f575060018054600160a01b900460ff16145b6103725760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161024b565b6001805460ff60a01b1916600160a01b179055801561039f576001805460ff60a81b1916600160a81b1790555b6103a8846109a5565b6103b1836109fa565b600882905580156103fd576001805460ff60a81b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b336104166000546001600160a01b031690565b6001600160a01b03161461043c5760405162461bcd60e51b815260040161024b90610dd6565b60085443101561044a575050565b6005600083600281111561046057610460610e33565b600281111561047157610471610e33565b81526020019081526020016000206000828152602001908152602001600020546000141561066f576001546040805162c080c360e31b815290516000926001600160a01b0316916306040618916004808301926020929190829003018186803b1580156104dd57600080fd5b505afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190610e49565b600081815260026020526040812080549293509061053283610e62565b9190505550806005600085600281111561054e5761054e610e33565b600281111561055f5761055f610e33565b815260200190815260200160002060008481526020019081526020016000208190555060006006600085600281111561059a5761059a610e33565b60028111156105ab576105ab610e33565b81526020019081526020016000206000848152602001908152602001600020905060005b815481101561061c5761060a85858484815481106105ef576105ef610e8b565b6000918252602090912001546001600160a01b031686610a48565b8061061481610e62565b9150506105cf565b506006600085600281111561063357610633610e33565b600281111561064457610644610e33565b8152602001908152602001600020600084815260200190815260200160002060006103fd9190610b6b565b5050565b60608167ffffffffffffffff81111561068e5761068e610ea1565b6040519080825280602002602001820160405280156106b7578160200160208202803683370190505b50905060005b8281101561071f576106f0858585848181106106db576106db610e8b565b90506020020160208101906100c79190610be5565b82828151811061070257610702610e8b565b60209081029190910101528061071781610e62565b9150506106bd565b509392505050565b3361073a6000546001600160a01b031690565b6001600160a01b0316146107605760405162461bcd60e51b815260040161024b90610dd6565b60085443101561076f57505050565b60006005600085600281111561078757610787610e33565b600281111561079857610798610e33565b81526020019081526020016000206000848152602001908152602001600020549050806000141561084e5760018460028111156107d7576107d7610e33565b146103fd57600660008560028111156107f2576107f2610e33565b600281111561080357610803610e33565b815260208082019290925260409081016000908120868252835290812080546001810182559082529190200180546001600160a01b0319166001600160a01b03841617905550505050565b6001546040805162c080c360e31b815290516000926001600160a01b0316916306040618916004808301926020929190829003018186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190610e49565b9050808214156108e0576108e085858584610a48565b5050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146109305760405162461bcd60e51b815260040161024b90610d94565b6000816001600160a01b03163b1161099c5760405162461bcd60e51b815260206004820152602960248201527f48617356616c696461746f72436f6e74726163743a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b606482015260840161024b565b6102c6816109fa565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b6836169906020016109ef565b60076000856002811115610a5e57610a5e610e33565b6002811115610a6f57610a6f610e33565b81526020808201929092526040908101600090812086825283528181206001600160a01b038616825290925290205460ff1615610aab576103fd565b6000818152600360205260408120805491610ac583610e62565b909155505060008181526004602090815260408083206001600160a01b03861684529091528120805491610af883610e62565b9190505550600160076000866002811115610b1557610b15610e33565b6002811115610b2657610b26610e33565b81526020808201929092526040908101600090812087825283528181206001600160a01b03871682529092529020805491151560ff1990921691909117905550505050565b50805460008255906000526020600020908101906102c691905b80821115610b995760008155600101610b85565b5090565b80356001600160a01b0381168114610bb457600080fd5b919050565b60008060408385031215610bcc57600080fd5b82359150610bdc60208401610b9d565b90509250929050565b600060208284031215610bf757600080fd5b610c0082610b9d565b9392505050565b600080600060608486031215610c1c57600080fd5b610c2584610b9d565b9250610c3360208501610b9d565b9150604084013590509250925092565b600060208284031215610c5557600080fd5b5035919050565b803560038110610bb457600080fd5b60008060408385031215610c7e57600080fd5b610c8783610c5c565b946020939093013593505050565b600080600060408486031215610caa57600080fd5b83359250602084013567ffffffffffffffff80821115610cc957600080fd5b818601915086601f830112610cdd57600080fd5b813581811115610cec57600080fd5b8760208260051b8501011115610d0157600080fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610d4c57835183529284019291840191600101610d30565b50909695505050505050565b600080600060608486031215610d6d57600080fd5b610d7684610c5c565b925060208401359150610d8b60408501610b9d565b90509250925092565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b60208082526038908201527f486173427269646765436f6e74726163743a206d6574686f642063616c6c657260408201527f206d7573742062652062726964676520636f6e74726163740000000000000000606082015260800190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215610e5b57600080fd5b5051919050565b6000600019821415610e8457634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122045115f874c9d7bd478154ec303dfa976aa5c4f9a0e911b1ef70780c92cbd4f3764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063889998ef11610071578063889998ef1461017d578063994390891461019d578063c7c4fea9146101c2578063cd596583146101d5578063cdf64a76146101e6578063f84bd121146101f957600080fd5b806304375dcf146100b95780630b26cf66146101025780631794bb3c1461011757806319e6e1581461012a578063229f88ea1461014a57806357daa1701461015d575b600080fd5b6100ef6100c7366004610bb9565b60009182526004602090815260408084206001600160a01b0393909316845291905290205490565b6040519081526020015b60405180910390f35b610115610110366004610be5565b610202565b005b610115610125366004610c07565b6102c9565b6100ef610138366004610c43565b60009081526002602052604090205490565b610115610158366004610c6b565b610403565b61017061016b366004610c95565b610673565b6040516100f99190610d14565b6100ef61018b366004610c43565b60009081526003602052604090205490565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100f9565b6101156101d0366004610d58565b610727565b6000546001600160a01b03166101aa565b6101156101f4366004610be5565b6108e7565b6100ef60085481565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146102545760405162461bcd60e51b815260040161024b90610d94565b60405180910390fd5b6000816001600160a01b03163b116102bd5760405162461bcd60e51b815260206004820152602660248201527f486173427269646765436f6e74726163743a2073657420746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161024b565b6102c6816109a5565b50565b600154600160a81b900460ff16158080156102ef575060018054600160a01b900460ff16105b8061030f5750303b15801561030f575060018054600160a01b900460ff16145b6103725760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161024b565b6001805460ff60a01b1916600160a01b179055801561039f576001805460ff60a81b1916600160a81b1790555b6103a8846109a5565b6103b1836109fa565b600882905580156103fd576001805460ff60a81b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b336104166000546001600160a01b031690565b6001600160a01b03161461043c5760405162461bcd60e51b815260040161024b90610dd6565b60085443101561044a575050565b6005600083600281111561046057610460610e33565b600281111561047157610471610e33565b81526020019081526020016000206000828152602001908152602001600020546000141561066f576001546040805162c080c360e31b815290516000926001600160a01b0316916306040618916004808301926020929190829003018186803b1580156104dd57600080fd5b505afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190610e49565b600081815260026020526040812080549293509061053283610e62565b9190505550806005600085600281111561054e5761054e610e33565b600281111561055f5761055f610e33565b815260200190815260200160002060008481526020019081526020016000208190555060006006600085600281111561059a5761059a610e33565b60028111156105ab576105ab610e33565b81526020019081526020016000206000848152602001908152602001600020905060005b815481101561061c5761060a85858484815481106105ef576105ef610e8b565b6000918252602090912001546001600160a01b031686610a48565b8061061481610e62565b9150506105cf565b506006600085600281111561063357610633610e33565b600281111561064457610644610e33565b8152602001908152602001600020600084815260200190815260200160002060006103fd9190610b6b565b5050565b60608167ffffffffffffffff81111561068e5761068e610ea1565b6040519080825280602002602001820160405280156106b7578160200160208202803683370190505b50905060005b8281101561071f576106f0858585848181106106db576106db610e8b565b90506020020160208101906100c79190610be5565b82828151811061070257610702610e8b565b60209081029190910101528061071781610e62565b9150506106bd565b509392505050565b3361073a6000546001600160a01b031690565b6001600160a01b0316146107605760405162461bcd60e51b815260040161024b90610dd6565b60085443101561076f57505050565b60006005600085600281111561078757610787610e33565b600281111561079857610798610e33565b81526020019081526020016000206000848152602001908152602001600020549050806000141561084e5760018460028111156107d7576107d7610e33565b146103fd57600660008560028111156107f2576107f2610e33565b600281111561080357610803610e33565b815260208082019290925260409081016000908120868252835290812080546001810182559082529190200180546001600160a01b0319166001600160a01b03841617905550505050565b6001546040805162c080c360e31b815290516000926001600160a01b0316916306040618916004808301926020929190829003018186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190610e49565b9050808214156108e0576108e085858584610a48565b5050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146109305760405162461bcd60e51b815260040161024b90610d94565b6000816001600160a01b03163b1161099c5760405162461bcd60e51b815260206004820152602960248201527f48617356616c696461746f72436f6e74726163743a2073657420746f206e6f6e6044820152680b58dbdb9d1c9858dd60ba1b606482015260840161024b565b6102c6816109fa565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae048906020015b60405180910390a150565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b6836169906020016109ef565b60076000856002811115610a5e57610a5e610e33565b6002811115610a6f57610a6f610e33565b81526020808201929092526040908101600090812086825283528181206001600160a01b038616825290925290205460ff1615610aab576103fd565b6000818152600360205260408120805491610ac583610e62565b909155505060008181526004602090815260408083206001600160a01b03861684529091528120805491610af883610e62565b9190505550600160076000866002811115610b1557610b15610e33565b6002811115610b2657610b26610e33565b81526020808201929092526040908101600090812087825283528181206001600160a01b03871682529092529020805491151560ff1990921691909117905550505050565b50805460008255906000526020600020908101906102c691905b80821115610b995760008155600101610b85565b5090565b80356001600160a01b0381168114610bb457600080fd5b919050565b60008060408385031215610bcc57600080fd5b82359150610bdc60208401610b9d565b90509250929050565b600060208284031215610bf757600080fd5b610c0082610b9d565b9392505050565b600080600060608486031215610c1c57600080fd5b610c2584610b9d565b9250610c3360208501610b9d565b9150604084013590509250925092565b600060208284031215610c5557600080fd5b5035919050565b803560038110610bb457600080fd5b60008060408385031215610c7e57600080fd5b610c8783610c5c565b946020939093013593505050565b600080600060408486031215610caa57600080fd5b83359250602084013567ffffffffffffffff80821115610cc957600080fd5b818601915086601f830112610cdd57600080fd5b813581811115610cec57600080fd5b8760208260051b8501011115610d0157600080fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610d4c57835183529284019291840191600101610d30565b50909695505050505050565b600080600060608486031215610d6d57600080fd5b610d7684610c5c565b925060208401359150610d8b60408501610b9d565b90509250925092565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b60208082526038908201527f486173427269646765436f6e74726163743a206d6574686f642063616c6c657260408201527f206d7573742062652062726964676520636f6e74726163740000000000000000606082015260800190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215610e5b57600080fd5b5051919050565b6000600019821415610e8457634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122045115f874c9d7bd478154ec303dfa976aa5c4f9a0e911b1ef70780c92cbd4f3764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bridgeContract()": {
        "details": "Returns the bridge contract."
      },
      "bulkTotalBallotsOf(uint256,address[])": {
        "details": "Returns the total number of ballots of bridge operators at the specific period `_period`."
      },
      "handleVoteApproved(uint8,uint256)": {
        "details": "Handles the request once it is approved. Requirements: - The method caller is the bridge contract."
      },
      "initialize(address,address,uint256)": {
        "details": "Initializes the contract storage."
      },
      "recordVote(uint8,uint256,address)": {
        "details": "Records vote for a receipt and a operator. Requirements: - The method caller is the bridge contract."
      },
      "setBridgeContract(address)": {
        "details": "Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`."
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "totalBallots(uint256)": {
        "details": "Returns the total number of ballots at the specific period `_period`."
      },
      "totalBallotsOf(uint256,address)": {
        "details": "Returns the total number of ballots of a bridge operator at the specific period `_period`."
      },
      "totalVotes(uint256)": {
        "details": "Returns the total number of votes at the specific period `_period`."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      }
    },
    "stateVariables": {
      "_receiptApprovedAt": {
        "details": "Mapping from vote kind => request id => the period that the receipt is approved"
      },
      "_receiptVoted": {
        "details": "Mapping from vote kind => request id => bridge operator address => flag indicating whether the operator voted or not"
      },
      "_receiptVoters": {
        "details": "Mapping from vote kind => request id => the voters"
      },
      "_totalBallots": {
        "details": "Mapping from period number => total number of all ballots"
      },
      "_totalBallotsOf": {
        "details": "Mapping from period number => bridge operator address => total number of ballots"
      },
      "_totalVotes": {
        "details": "Mapping from period number => total number of all votes"
      },
      "startedAtBlock": {
        "details": "The block that the contract allows incoming mutable calls."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5733,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_bridgeContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBridge)8661"
      },
      {
        "astId": 6398,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRoninValidatorSet)10851"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_initializing",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 18462,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_totalVotes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18467,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_totalBallots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18474,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_totalBallotsOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 18482,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_receiptApprovedAt",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_enum(VoteKind)8667,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 18491,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_receiptVoters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(VoteKind)8667,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 18501,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "_receiptVoted",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(VoteKind)8667,t_mapping(t_uint256,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 18504,
        "contract": "contracts/ronin/BridgeTracking.sol:BridgeTracking",
        "label": "startedAtBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBridge)8661": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninValidatorSet)10851": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_enum(VoteKind)8667": {
        "encoding": "inplace",
        "label": "enum IBridgeTracking.VoteKind",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(VoteKind)8667,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_enum(VoteKind)8667",
        "label": "mapping(enum IBridgeTracking.VoteKind => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_enum(VoteKind)8667,t_mapping(t_uint256,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_enum(VoteKind)8667",
        "label": "mapping(enum IBridgeTracking.VoteKind => mapping(uint256 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_enum(VoteKind)8667,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(VoteKind)8667",
        "label": "mapping(enum IBridgeTracking.VoteKind => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}