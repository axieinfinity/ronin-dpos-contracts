{
  "address": "0xFE9E7D097F4493182308AC2Ad7CF88f21193fF4A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "ErrContractTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum RoleAccess",
          "name": "expectedRole",
          "type": "uint8"
        }
      ],
      "name": "ErrUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "msgSig",
          "type": "bytes4"
        },
        {
          "internalType": "enum ContractType",
          "name": "expectedContractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "ErrUnexpectedInternalCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "getManyTotalBallots",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridgeTracking.VoteKind",
          "name": "_kind",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "handleVoteApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startedAtBlock",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridgeTracking.VoteKind",
          "name": "_kind",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "recordVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startedAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "totalBallots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalBallots",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperator",
          "type": "address"
        }
      ],
      "name": "totalBallotsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "totalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1d8a9cc768aeabccc3f95690daf71bed092385119f06d0897ef8f30b694bb7d",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xFE9E7D097F4493182308AC2Ad7CF88f21193fF4A",
    "transactionIndex": 0,
    "gasUsed": "1168253",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000080000000000000000000000000000400000000000000000000000000000000000000000000000000000000000040040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x72ba444bd8e3189b370302d701692ecc994340a38a4f75655e4326e4007f6c36",
    "transactionHash": "0xc1d8a9cc768aeabccc3f95690daf71bed092385119f06d0897ef8f30b694bb7d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18032149,
        "transactionHash": "0xc1d8a9cc768aeabccc3f95690daf71bed092385119f06d0897ef8f30b694bb7d",
        "address": "0xFE9E7D097F4493182308AC2Ad7CF88f21193fF4A",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x72ba444bd8e3189b370302d701692ecc994340a38a4f75655e4326e4007f6c36"
      }
    ],
    "blockNumber": 18032149,
    "cumulativeGasUsed": "1168253",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "6bc16cc8f779fe2f1f4f2733e87f867e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"getManyTotalBallots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridgeTracking.VoteKind\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"handleVoteApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startedAtBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridgeTracking.VoteKind\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"recordVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"totalBallots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBallots\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperator\",\"type\":\"address\"}],\"name\":\"totalBallotsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getManyTotalBallots(uint256,address[])\":{\"details\":\"Returns the total number of ballots of bridge operators at the specific period `_period`.\"},\"handleVoteApproved(uint8,uint256)\":{\"details\":\"Handles the request once it is approved. Requirements: - The method caller is the bridge contract.\"},\"initialize(address,address,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"recordVote(uint8,uint256,address)\":{\"details\":\"Records vote for a receipt and a operator. Requirements: - The method caller is the bridge contract.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"totalBallots(uint256)\":{\"details\":\"Returns the total number of ballots at the specific period `_period`.\"},\"totalBallotsOf(uint256,address)\":{\"details\":\"Returns the total number of ballots of a bridge operator at the specific period `_period`.\"},\"totalVotes(uint256)\":{\"details\":\"Returns the total number of votes at the specific period `_period`.\"}},\"stateVariables\":{\"_bufferMetric\":{\"details\":\"The temporary info of votes and ballots\"},\"_periodMetric\":{\"details\":\"Mapping from period number => vote stats based on period\"},\"_receiptTrackingInfo\":{\"details\":\"Mapping from vote kind => receipt id => receipt stats\"},\"startedAtBlock\":{\"details\":\"The block that the contract allows incoming mutable calls.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/gateway/BridgeTracking.sol\":\"BridgeTracking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ronin/contracts/=./contracts/\",\":bridge-operator-governance/=contracts/extensions/bridge-operator-governance/\",\":collections/=contracts/extensions/collections/\",\":consumers/=contracts/extensions/consumers/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":forwarder/=contracts/extensions/forwarder/\",\":sequential-governance/=contracts/extensions/sequential-governance/\",\":slash-indicator/=contracts/interfaces/slash-indicator/\",\":staking/=contracts/interfaces/staking/\",\":validator/=contracts/interfaces/validator/\",\":version-control/=contracts/extensions/version-control/\"]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0d5cda6bbab5672cc7983efd0cf1f9a4e4fb1a7a2c1cfb50d38aedd052230f91\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x06e5962713a77abf6d5ba646e1cc1cfb6f9c50e7d52520dd82a10bf309534187\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  struct Request {\\n    VoteKind kind;\\n    uint256 id;\\n  }\\n\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVotes(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallots(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(\\n    uint256 _period,\\n    address[] calldata _bridgeOperators\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(VoteKind _kind, uint256 _requestId, address _operator) external;\\n}\\n\",\"keccak256\":\"0x8916e7ff0580713f886b5e3aeb7a72bdc2be39ec76e59369a3821ced3c4039a7\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract(address addr);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x5947f7f706685ce9a692da732cc0f296fcf88d38a625708354180133b3451089\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address _consensusAddr, uint256 _effectiveTimestamp, uint256 _rate) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x01bb0823588c4e6df855ec9962d3bbc10e179f1668d006946005a0af3e73114e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n  /// @dev Emitted when the bridge tracking contract's response is incorrect\\n  event BridgeTrackingIncorrectlyResponded();\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x42ed0bff5f8233dc6de28bd3283f98a0c16df6abc26655fc777bdc07a83ff3f5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xc00b1bda0c6076c9aa0631dc0c01e849d8f42cc616fe4c036f73cda0a9afe9ef\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    address _addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    address _addr,\\n    uint256 _blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the latest wrapped up period.\\n   */\\n  function checkBridgeRewardDeprecatedAtLatestPeriod(address _consensusAddr) external view returns (bool _result);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the  `_period`.\\n   */\\n  function checkBridgeRewardDeprecatedAtPeriod(\\n    address _consensusAddr,\\n    uint256 _period\\n  ) external view returns (bool _result);\\n}\\n\",\"keccak256\":\"0xc854f6deb26db9cae49e1cfa85aa94d64828251fcca394fed0dd67d554da749b\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfo {\\n  /**\\n   * @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n   */\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators()\\n    external\\n    view\\n    returns (\\n      address[] memory _validatorList,\\n      address[] memory _bridgeOperators,\\n      EnumFlags.ValidatorFlag[] memory _flags\\n    );\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current on-working bridge operator list.\\n   * @param bridgeOperatorList The list of working bridge operators.\\n   * @param validatorList The list of corresponding validators.\\n   */\\n  function getBridgeOperators()\\n    external\\n    view\\n    returns (address[] memory bridgeOperatorList, address[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the bridge operator list corresponding to validator address list.\\n   */\\n  function getBridgeOperatorsOf(\\n    address[] memory _validatorAddrs\\n  ) external view returns (address[] memory bridgeOperatorList);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool isOperator);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x3915e301358a793f14f6ecf6bca330311a9684e5144cd20d133b1905f8918f03\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/ronin/gateway/BridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../interfaces/IBridgeTracking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport { HasBridgeDeprecated, HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\n\\ncontract BridgeTracking is HasBridgeDeprecated, HasValidatorDeprecated, HasContracts, Initializable, IBridgeTracking {\\n  struct PeriodVotingMetric {\\n    /// @dev Total requests that are tracked in the period. This value is 0 until the {_bufferMetric.requests[]} gets added into a period metric.\\n    uint256 totalRequests;\\n    uint256 totalBallots;\\n    mapping(address => uint256) totalBallotsOf;\\n    address[] voters;\\n  }\\n\\n  struct PeriodVotingMetricTimeWrapper {\\n    uint256 lastEpoch;\\n    Request[] requests;\\n    PeriodVotingMetric data;\\n  }\\n\\n  struct ReceiptTrackingInfo {\\n    /// @dev The period that the receipt is approved. Value 0 means the receipt is not approved yet.\\n    uint256 approvedPeriod;\\n    /// @dev The address list of voters\\n    address[] voters;\\n    /// @dev Mapping from voter => flag indicating the voter casts vote for this receipt\\n    mapping(address => bool) voted;\\n    /// @dev The period that the receipt is tracked, i.e. the metric is transferred from buffer to the period. Value 0 means the receipt is currently in buffer or not tracked yet.\\n    uint256 trackedPeriod;\\n  }\\n\\n  /// @dev The block that the contract allows incoming mutable calls.\\n  uint256 public startedAtBlock;\\n\\n  /// @dev The temporary info of votes and ballots\\n  PeriodVotingMetricTimeWrapper internal _bufferMetric;\\n  /// @dev Mapping from period number => vote stats based on period\\n  mapping(uint256 => PeriodVotingMetric) internal _periodMetric;\\n  /// @dev Mapping from vote kind => receipt id => receipt stats\\n  mapping(VoteKind => mapping(uint256 => ReceiptTrackingInfo)) internal _receiptTrackingInfo;\\n\\n  modifier skipOnUnstarted() {\\n    _skipOnUnstarted();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns the whole transaction in case the current block is less than start block.\\n   */\\n  function _skipOnUnstarted() private view {\\n    if (block.number < startedAtBlock) {\\n      assembly {\\n        return(0, 0)\\n      }\\n    }\\n  }\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address _bridgeContract,\\n    address _validatorContract,\\n    uint256 _startedAtBlock\\n  ) external initializer {\\n    _setContract(ContractType.BRIDGE, _bridgeContract);\\n    _setContract(ContractType.VALIDATOR, _validatorContract);\\n    startedAtBlock = _startedAtBlock;\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.BRIDGE, ______deprecatedBridge);\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n\\n    delete ______deprecatedBridge;\\n    delete ______deprecatedValidator;\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalVotes(uint256 _period) external view override returns (uint256 _totalVotes) {\\n    _totalVotes = _periodMetric[_period].totalRequests;\\n    if (_isBufferCountedForPeriod(_period)) {\\n      _totalVotes += _bufferMetric.requests.length;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalBallots(uint256 _period) external view override returns (uint256 _totalBallots) {\\n    _totalBallots = _periodMetric[_period].totalBallots;\\n    if (_isBufferCountedForPeriod(_period)) {\\n      _totalBallots += _bufferMetric.data.totalBallots;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function getManyTotalBallots(\\n    uint256 _period,\\n    address[] calldata _bridgeOperators\\n  ) external view override returns (uint256[] memory _res) {\\n    _res = new uint256[](_bridgeOperators.length);\\n    bool _isBufferCounted = _isBufferCountedForPeriod(_period);\\n    for (uint _i = 0; _i < _bridgeOperators.length; ) {\\n      _res[_i] = _totalBallotsOf(_period, _bridgeOperators[_i], _isBufferCounted);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) public view override returns (uint256) {\\n    return _totalBallotsOf(_period, _bridgeOperator, _isBufferCountedForPeriod(_period));\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function handleVoteApproved(\\n    VoteKind _kind,\\n    uint256 _requestId\\n  ) external override onlyContract(ContractType.BRIDGE) skipOnUnstarted {\\n    ReceiptTrackingInfo storage _receiptInfo = _receiptTrackingInfo[_kind][_requestId];\\n\\n    // Only records for the receipt which not approved\\n    if (_receiptInfo.approvedPeriod == 0) {\\n      _trySyncBuffer();\\n      uint256 _currentPeriod = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n      _receiptInfo.approvedPeriod = _currentPeriod;\\n\\n      Request storage _bufferRequest = _bufferMetric.requests.push();\\n      _bufferRequest.kind = _kind;\\n      _bufferRequest.id = _requestId;\\n\\n      address[] storage _voters = _receiptInfo.voters;\\n      for (uint _i = 0; _i < _voters.length; ) {\\n        _increaseBallot(_kind, _requestId, _voters[_i], _currentPeriod);\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n\\n      delete _receiptInfo.voters;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external override onlyContract(ContractType.BRIDGE) skipOnUnstarted {\\n    uint256 _period = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n    _trySyncBuffer();\\n    ReceiptTrackingInfo storage _receiptInfo = _receiptTrackingInfo[_kind][_requestId];\\n\\n    // When the vote is not approved yet, the voters are saved in the receipt info, and not increase ballot metric.\\n    // The ballot metric will be increased later in the {handleVoteApproved} method.\\n    if (_receiptInfo.approvedPeriod == 0) {\\n      _receiptInfo.voters.push(_operator);\\n      return;\\n    }\\n\\n    _increaseBallot(_kind, _requestId, _operator, _period);\\n  }\\n\\n  /**\\n   * @dev Increases the ballot for the operator at a period.\\n   */\\n  function _increaseBallot(VoteKind _kind, uint256 _requestId, address _operator, uint256 _currentPeriod) internal {\\n    ReceiptTrackingInfo storage _receiptInfo = _receiptTrackingInfo[_kind][_requestId];\\n    if (_receiptInfo.voted[_operator]) {\\n      return;\\n    }\\n\\n    _receiptInfo.voted[_operator] = true;\\n\\n    uint256 _trackedPeriod = _receiptInfo.trackedPeriod;\\n\\n    // Do not increase ballot for receipt that is neither in the buffer, nor in the most current tracked period.\\n    // If the receipt is not tracked in a period, increase metric in buffer.\\n    unchecked {\\n      if (_trackedPeriod == 0) {\\n        if (_bufferMetric.data.totalBallotsOf[_operator] == 0) {\\n          _bufferMetric.data.voters.push(_operator);\\n        }\\n        _bufferMetric.data.totalBallots++;\\n        _bufferMetric.data.totalBallotsOf[_operator]++;\\n      }\\n      // If the receipt is tracked in the most current tracked period, increase metric in the period.\\n      else if (_trackedPeriod == _currentPeriod) {\\n        PeriodVotingMetric storage _metric = _periodMetric[_trackedPeriod];\\n        _metric.totalBallots++;\\n        _metric.totalBallotsOf[_operator]++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev See `totalBallotsOf`.\\n   */\\n  function _totalBallotsOf(\\n    uint256 _period,\\n    address _bridgeOperator,\\n    bool _mustCountLastStats\\n  ) internal view returns (uint256 _totalBallots) {\\n    _totalBallots = _periodMetric[_period].totalBallotsOf[_bridgeOperator];\\n    if (_mustCountLastStats) {\\n      _totalBallots += _bufferMetric.data.totalBallotsOf[_bridgeOperator];\\n    }\\n  }\\n\\n  /**\\n   * @dev Syncs period stats. Move all data from the buffer metric to the period metric.\\n   *\\n   * Requirements:\\n   * - The epoch after the buffer epoch is wrapped up.\\n   */\\n  function _trySyncBuffer() internal {\\n    IRoninValidatorSet _validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    uint256 _currentEpoch = _validatorContract.epochOf(block.number);\\n    if (_bufferMetric.lastEpoch < _currentEpoch) {\\n      (, uint256 _trackedPeriod) = _validatorContract.tryGetPeriodOfEpoch(_bufferMetric.lastEpoch + 1);\\n      _bufferMetric.lastEpoch = _currentEpoch;\\n\\n      // Copy numbers of totals\\n      PeriodVotingMetric storage _metric = _periodMetric[_trackedPeriod];\\n      _metric.totalRequests += _bufferMetric.requests.length;\\n      _metric.totalBallots += _bufferMetric.data.totalBallots;\\n\\n      // Copy voters info and voters' ballot\\n      for (uint _i = 0; _i < _bufferMetric.data.voters.length; ) {\\n        address _voter = _bufferMetric.data.voters[_i];\\n        _metric.totalBallotsOf[_voter] += _bufferMetric.data.totalBallotsOf[_voter];\\n        delete _bufferMetric.data.totalBallotsOf[_voter]; // need to manually delete each element, due to mapping\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n\\n      // Mark all receipts in the buffer as tracked. Keep total number of receipts and delete receipt details.\\n      for (uint _i = 0; _i < _bufferMetric.requests.length; ) {\\n        Request storage _bufferRequest = _bufferMetric.requests[_i];\\n        ReceiptTrackingInfo storage _receiptInfo = _receiptTrackingInfo[_bufferRequest.kind][_bufferRequest.id];\\n        _receiptInfo.trackedPeriod = _trackedPeriod;\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n\\n      delete _bufferMetric.requests;\\n      delete _bufferMetric.data;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the buffer stats must be counted or not.\\n   */\\n  function _isBufferCountedForPeriod(uint256 _queriedPeriod) internal view returns (bool) {\\n    IRoninValidatorSet _validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    uint256 _currentEpoch = _validatorContract.epochOf(block.number);\\n    (bool _filled, uint256 _periodOfNextTemporaryEpoch) = _validatorContract.tryGetPeriodOfEpoch(\\n      _bufferMetric.lastEpoch + 1\\n    );\\n    return _filled && _queriedPeriod == _periodOfNextTemporaryEpoch && _bufferMetric.lastEpoch < _currentEpoch;\\n  }\\n}\\n\",\"keccak256\":\"0xbb81d5cf8050b4149c5afc302f3b6951bd56363acd4614c5249774325aa3579c\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\",\"keccak256\":\"0xe0c75a4a82f3dc7dcf89dd5cab9ae1ec93c136b7d8210b3f9e18f3215aa69ffb\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION\\n}\\n\",\"keccak256\":\"0x65a0b062c8f963b4679a128abb3840167de1b10b32a8528787f47915a7d9ccc3\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE\\n}\\n\",\"keccak256\":\"0xb3e242a9cb967a64e0ef6419a6b260b647b40082102ce3ab899ab690c84957fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100eb565b600154600160a81b900460ff161561008c5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60015460ff600160a01b909104811610156100e9576001805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6113b0806100fa6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063865e6fd311610071578063865e6fd314610117578063889998ef1461012a578063c7c4fea91461013d578063de981f1b14610150578063f67e81521461017b578063f84bd1211461019b57600080fd5b806304375dcf146100ae5780631794bb3c146100d457806319e6e158146100e9578063229f88ea146100fc5780635cd8a76b1461010f575b600080fd5b6100c16100bc366004610ff7565b6101a4565b6040519081526020015b60405180910390f35b6100e76100e2366004611023565b6101c2565b005b6100c16100f736600461105f565b6102c2565b6100e761010a366004611087565b6102f4565b6100e761049c565b6100e76101253660046110c0565b610595565b6100c161013836600461105f565b6105b4565b6100e761014b3660046110ea565b6105e1565b61016361015e366004611126565b61070a565b6040516001600160a01b0390911681526020016100cb565b61018e610189366004611141565b610780565b6040516100cb91906111c0565b6100c160025481565b60006101b983836101b48661083e565b610964565b90505b92915050565b600154600160a81b900460ff16158080156101e8575060018054600160a01b900460ff16105b806102085750303b158015610208575060018054600160a01b900460ff16145b61022d5760405162461bcd60e51b815260040161022490611204565b60405180910390fd5b6001805460ff60a01b1916600160a01b179055801561025a576001805460ff60a81b1916600160a81b1790555b6102656002856109bd565b6102706008846109bd565b600282905580156102bc576001805460ff60a81b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000818152600960205260409020546102da8261083e565b156102ef576004546102ec9082611252565b90505b919050565b60026102ff81610a61565b610307610ab0565b6000600a600085600281111561031f5761031f611273565b600281111561033057610330611273565b81526020019081526020016000206000848152602001908152602001600020905080600001546000036102bc57610365610abe565b6000610371600861070a565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190611289565b808355600480546001818101835560009290925260029081027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054939450928892849260ff1990921691849081111561042f5761042f611273565b02179055506001808201869055830160005b81548110156104845761047c8888848481548110610461576104616112a2565b6000918252602090912001546001600160a01b031687610d58565b600101610441565b50610493600185016000610f68565b50505050505050565b600154600290600160a81b900460ff161580156104c7575060015460ff808316600160a01b90920416105b6104e35760405162461bcd60e51b815260040161022490611204565b6001805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b179055600054610523906002906001600160a01b03166109bd565b60015461053b906008906001600160a01b03166109bd565b600080546001600160a01b031916905560018054600161ff0160a01b031916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b61059d610ed8565b6105a681610f32565b6105b082826109bd565b5050565b6000818152600960205260409020600101546105cf8261083e565b156102ef576006546102ec9082611252565b60026105ec81610a61565b6105f4610ab0565b6000610600600861070a565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190611289565b905061066b610abe565b6000600a600087600281111561068357610683611273565b600281111561069457610694611273565b81526020019081526020016000206000868152602001908152602001600020905080600001546000036106f6576001908101805491820181556000908152602090200180546001600160a01b0319166001600160a01b038516179055506102bc565b61070286868685610d58565b505050505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600a81111561074157610741611273565b60ff1681526020810191909152604001600020546001600160a01b03169050806102ef578160405163409140df60e11b815260040161022491906112cc565b60608167ffffffffffffffff81111561079b5761079b6112da565b6040519080825280602002602001820160405280156107c4578160200160208202803683370190505b50905060006107d28561083e565b905060005b8381101561083557610810868686848181106107f5576107f56112a2565b905060200201602081019061080a91906112f0565b84610964565b838281518110610822576108226112a2565b60209081029190910101526001016107d7565b50509392505050565b60008061084b600861070a565b60405163a3d545f560e01b81524360048201529091506000906001600160a01b0383169063a3d545f590602401602060405180830381865afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611289565b9050600080836001600160a01b031663468c96ae60036000015460016108df9190611252565b6040518263ffffffff1660e01b81526004016108fd91815260200190565b6040805180830381865afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d919061130b565b9150915081801561094d57508086145b801561095a575060035483115b9695505050505050565b60008381526009602090815260408083206001600160a01b038616845260020190915290205481156109b6576001600160a01b0383166000908152600760205260409020546109b39082611252565b90505b9392505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a8111156109f3576109f3611273565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a811115610a3457610a34611273565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b610a6a8161070a565b6001600160a01b0316336001600160a01b031614610aad576000356001600160e01b03191681336040516320e0f98d60e21b81526004016102249392919061133e565b50565b600254431015610abc57005b565b6000610aca600861070a565b60405163a3d545f560e01b81524360048201529091506000906001600160a01b0383169063a3d545f590602401602060405180830381865afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190611289565b90508060036000015410156105b0576000826001600160a01b031663468c96ae6003600001546001610b6a9190611252565b6040518263ffffffff1660e01b8152600401610b8891815260200190565b6040805180830381865afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc8919061130b565b60038490556000818152600960205260408120600454815493955090935091839190610bf5908490611252565b9091555050600654600182018054600090610c11908490611252565b90915550600090505b600854811015610ca157600880546000919083908110610c3c57610c3c6112a2565b60009182526020808320909101546001600160a01b0316808352600782526040808420546002880190935283208054919450919290610c7c908490611252565b90915550506001600160a01b0316600090815260076020526040812055600101610c1a565b5060005b600454811015610d3357600060036001018281548110610cc757610cc76112a2565b6000918252602082206002918202018054909350600a91839160ff1690811115610cf357610cf3611273565b6002811115610d0457610d04611273565b815260208082019290925260409081016000908120600195860154825290925290206003018590555001610ca5565b50610d4060046000610f86565b60006005818155600682905590610702600882610f68565b6000600a6000866002811115610d7057610d70611273565b6002811115610d8157610d81611273565b81526020808201929092526040908101600090812087825283528181206001600160a01b038716825260028101909352205490915060ff1615610dc457506102bc565b6001600160a01b03831660009081526002820160205260408120805460ff19166001179055600382015490819003610e91576001600160a01b0384166000908152600760205260408120549003610e6157600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0386161790555b6006805460019081019091556001600160a01b038516600090815260076020526040902080549091019055610702565b82810361070257600090815260096020908152604080832060018082018054820190556001600160a01b039790971684526002019091529020805490930190925550505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610abc576000356001600160e01b0319166001604051620f948f60ea1b8152600401610224929190611375565b806001600160a01b03163b600003610aad57604051630bfc64a360e21b81526001600160a01b0382166004820152602401610224565b5080546000825590600052602060002090810190610aad9190610fa7565b5080546000825560020290600052602060002090810190610aad9190610fc0565b5b80821115610fbc5760008155600101610fa8565b5090565b5b80821115610fbc57805460ff1916815560006001820155600201610fc1565b80356001600160a01b03811681146102ef57600080fd5b6000806040838503121561100a57600080fd5b8235915061101a60208401610fe0565b90509250929050565b60008060006060848603121561103857600080fd5b61104184610fe0565b925061104f60208501610fe0565b9150604084013590509250925092565b60006020828403121561107157600080fd5b5035919050565b8035600381106102ef57600080fd5b6000806040838503121561109a57600080fd5b6110a383611078565b946020939093013593505050565b8035600b81106102ef57600080fd5b600080604083850312156110d357600080fd5b6110dc836110b1565b915061101a60208401610fe0565b6000806000606084860312156110ff57600080fd5b61110884611078565b92506020840135915061111d60408501610fe0565b90509250925092565b60006020828403121561113857600080fd5b6101b9826110b1565b60008060006040848603121561115657600080fd5b83359250602084013567ffffffffffffffff8082111561117557600080fd5b818601915086601f83011261118957600080fd5b81358181111561119857600080fd5b8760208260051b85010111156111ad57600080fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b818110156111f8578351835292840192918401916001016111dc565b50909695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b808201808211156101bc57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60006020828403121561129b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600b81106112c8576112c8611273565b9052565b602081016101bc82846112b8565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561130257600080fd5b6101b982610fe0565b6000806040838503121561131e57600080fd5b8251801515811461132e57600080fd5b6020939093015192949293505050565b6001600160e01b0319841681526060810161135c60208301856112b8565b6001600160a01b03929092166040919091015292915050565b6001600160e01b031983168152604081016009831061139657611396611273565b826020830152939250505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063865e6fd311610071578063865e6fd314610117578063889998ef1461012a578063c7c4fea91461013d578063de981f1b14610150578063f67e81521461017b578063f84bd1211461019b57600080fd5b806304375dcf146100ae5780631794bb3c146100d457806319e6e158146100e9578063229f88ea146100fc5780635cd8a76b1461010f575b600080fd5b6100c16100bc366004610ff7565b6101a4565b6040519081526020015b60405180910390f35b6100e76100e2366004611023565b6101c2565b005b6100c16100f736600461105f565b6102c2565b6100e761010a366004611087565b6102f4565b6100e761049c565b6100e76101253660046110c0565b610595565b6100c161013836600461105f565b6105b4565b6100e761014b3660046110ea565b6105e1565b61016361015e366004611126565b61070a565b6040516001600160a01b0390911681526020016100cb565b61018e610189366004611141565b610780565b6040516100cb91906111c0565b6100c160025481565b60006101b983836101b48661083e565b610964565b90505b92915050565b600154600160a81b900460ff16158080156101e8575060018054600160a01b900460ff16105b806102085750303b158015610208575060018054600160a01b900460ff16145b61022d5760405162461bcd60e51b815260040161022490611204565b60405180910390fd5b6001805460ff60a01b1916600160a01b179055801561025a576001805460ff60a81b1916600160a81b1790555b6102656002856109bd565b6102706008846109bd565b600282905580156102bc576001805460ff60a81b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000818152600960205260409020546102da8261083e565b156102ef576004546102ec9082611252565b90505b919050565b60026102ff81610a61565b610307610ab0565b6000600a600085600281111561031f5761031f611273565b600281111561033057610330611273565b81526020019081526020016000206000848152602001908152602001600020905080600001546000036102bc57610365610abe565b6000610371600861070a565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190611289565b808355600480546001818101835560009290925260029081027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054939450928892849260ff1990921691849081111561042f5761042f611273565b02179055506001808201869055830160005b81548110156104845761047c8888848481548110610461576104616112a2565b6000918252602090912001546001600160a01b031687610d58565b600101610441565b50610493600185016000610f68565b50505050505050565b600154600290600160a81b900460ff161580156104c7575060015460ff808316600160a01b90920416105b6104e35760405162461bcd60e51b815260040161022490611204565b6001805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b179055600054610523906002906001600160a01b03166109bd565b60015461053b906008906001600160a01b03166109bd565b600080546001600160a01b031916905560018054600161ff0160a01b031916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b61059d610ed8565b6105a681610f32565b6105b082826109bd565b5050565b6000818152600960205260409020600101546105cf8261083e565b156102ef576006546102ec9082611252565b60026105ec81610a61565b6105f4610ab0565b6000610600600861070a565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190611289565b905061066b610abe565b6000600a600087600281111561068357610683611273565b600281111561069457610694611273565b81526020019081526020016000206000868152602001908152602001600020905080600001546000036106f6576001908101805491820181556000908152602090200180546001600160a01b0319166001600160a01b038516179055506102bc565b61070286868685610d58565b505050505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600a81111561074157610741611273565b60ff1681526020810191909152604001600020546001600160a01b03169050806102ef578160405163409140df60e11b815260040161022491906112cc565b60608167ffffffffffffffff81111561079b5761079b6112da565b6040519080825280602002602001820160405280156107c4578160200160208202803683370190505b50905060006107d28561083e565b905060005b8381101561083557610810868686848181106107f5576107f56112a2565b905060200201602081019061080a91906112f0565b84610964565b838281518110610822576108226112a2565b60209081029190910101526001016107d7565b50509392505050565b60008061084b600861070a565b60405163a3d545f560e01b81524360048201529091506000906001600160a01b0383169063a3d545f590602401602060405180830381865afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611289565b9050600080836001600160a01b031663468c96ae60036000015460016108df9190611252565b6040518263ffffffff1660e01b81526004016108fd91815260200190565b6040805180830381865afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d919061130b565b9150915081801561094d57508086145b801561095a575060035483115b9695505050505050565b60008381526009602090815260408083206001600160a01b038616845260020190915290205481156109b6576001600160a01b0383166000908152600760205260409020546109b39082611252565b90505b9392505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600a8111156109f3576109f3611273565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600a811115610a3457610a34611273565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b610a6a8161070a565b6001600160a01b0316336001600160a01b031614610aad576000356001600160e01b03191681336040516320e0f98d60e21b81526004016102249392919061133e565b50565b600254431015610abc57005b565b6000610aca600861070a565b60405163a3d545f560e01b81524360048201529091506000906001600160a01b0383169063a3d545f590602401602060405180830381865afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190611289565b90508060036000015410156105b0576000826001600160a01b031663468c96ae6003600001546001610b6a9190611252565b6040518263ffffffff1660e01b8152600401610b8891815260200190565b6040805180830381865afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc8919061130b565b60038490556000818152600960205260408120600454815493955090935091839190610bf5908490611252565b9091555050600654600182018054600090610c11908490611252565b90915550600090505b600854811015610ca157600880546000919083908110610c3c57610c3c6112a2565b60009182526020808320909101546001600160a01b0316808352600782526040808420546002880190935283208054919450919290610c7c908490611252565b90915550506001600160a01b0316600090815260076020526040812055600101610c1a565b5060005b600454811015610d3357600060036001018281548110610cc757610cc76112a2565b6000918252602082206002918202018054909350600a91839160ff1690811115610cf357610cf3611273565b6002811115610d0457610d04611273565b815260208082019290925260409081016000908120600195860154825290925290206003018590555001610ca5565b50610d4060046000610f86565b60006005818155600682905590610702600882610f68565b6000600a6000866002811115610d7057610d70611273565b6002811115610d8157610d81611273565b81526020808201929092526040908101600090812087825283528181206001600160a01b038716825260028101909352205490915060ff1615610dc457506102bc565b6001600160a01b03831660009081526002820160205260408120805460ff19166001179055600382015490819003610e91576001600160a01b0384166000908152600760205260408120549003610e6157600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0386161790555b6006805460019081019091556001600160a01b038516600090815260076020526040902080549091019055610702565b82810361070257600090815260096020908152604080832060018082018054820190556001600160a01b039790971684526002019091529020805490930190925550505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610abc576000356001600160e01b0319166001604051620f948f60ea1b8152600401610224929190611375565b806001600160a01b03163b600003610aad57604051630bfc64a360e21b81526001600160a01b0382166004820152602401610224565b5080546000825590600052602060002090810190610aad9190610fa7565b5080546000825560020290600052602060002090810190610aad9190610fc0565b5b80821115610fbc5760008155600101610fa8565b5090565b5b80821115610fbc57805460ff1916815560006001820155600201610fc1565b80356001600160a01b03811681146102ef57600080fd5b6000806040838503121561100a57600080fd5b8235915061101a60208401610fe0565b90509250929050565b60008060006060848603121561103857600080fd5b61104184610fe0565b925061104f60208501610fe0565b9150604084013590509250925092565b60006020828403121561107157600080fd5b5035919050565b8035600381106102ef57600080fd5b6000806040838503121561109a57600080fd5b6110a383611078565b946020939093013593505050565b8035600b81106102ef57600080fd5b600080604083850312156110d357600080fd5b6110dc836110b1565b915061101a60208401610fe0565b6000806000606084860312156110ff57600080fd5b61110884611078565b92506020840135915061111d60408501610fe0565b90509250925092565b60006020828403121561113857600080fd5b6101b9826110b1565b60008060006040848603121561115657600080fd5b83359250602084013567ffffffffffffffff8082111561117557600080fd5b818601915086601f83011261118957600080fd5b81358181111561119857600080fd5b8760208260051b85010111156111ad57600080fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b818110156111f8578351835292840192918401916001016111dc565b50909695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b808201808211156101bc57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60006020828403121561129b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600b81106112c8576112c8611273565b9052565b602081016101bc82846112b8565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561130257600080fd5b6101b982610fe0565b6000806040838503121561131e57600080fd5b8251801515811461132e57600080fd5b6020939093015192949293505050565b6001600160e01b0319841681526060810161135c60208301856112b8565b6001600160a01b03929092166040919091015292915050565b6001600160e01b031983168152604081016009831061139657611396611273565b826020830152939250505056fea164736f6c6343000811000a",
  "devdoc": {
    "errors": {
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getManyTotalBallots(uint256,address[])": {
        "details": "Returns the total number of ballots of bridge operators at the specific period `_period`."
      },
      "handleVoteApproved(uint8,uint256)": {
        "details": "Handles the request once it is approved. Requirements: - The method caller is the bridge contract."
      },
      "initialize(address,address,uint256)": {
        "details": "Initializes the contract storage."
      },
      "recordVote(uint8,uint256,address)": {
        "details": "Records vote for a receipt and a operator. Requirements: - The method caller is the bridge contract."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "totalBallots(uint256)": {
        "details": "Returns the total number of ballots at the specific period `_period`."
      },
      "totalBallotsOf(uint256,address)": {
        "details": "Returns the total number of ballots of a bridge operator at the specific period `_period`."
      },
      "totalVotes(uint256)": {
        "details": "Returns the total number of votes at the specific period `_period`."
      }
    },
    "stateVariables": {
      "_bufferMetric": {
        "details": "The temporary info of votes and ballots"
      },
      "_periodMetric": {
        "details": "Mapping from period number => vote stats based on period"
      },
      "_receiptTrackingInfo": {
        "details": "Mapping from vote kind => receipt id => receipt stats"
      },
      "startedAtBlock": {
        "details": "The block that the contract allows incoming mutable calls."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35460,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "______deprecatedBridge",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 35464,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_initializing",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 23304,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "startedAtBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23308,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_bufferMetric",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PeriodVotingMetricTimeWrapper)23285_storage"
      },
      {
        "astId": 23314,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_periodMetric",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(PeriodVotingMetric)23275_storage)"
      },
      {
        "astId": 23323,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_receiptTrackingInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_enum(VoteKind)9099,t_mapping(t_uint256,t_struct(ReceiptTrackingInfo)23301_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Request)9095_storage)dyn_storage": {
        "base": "t_struct(Request)9095_storage",
        "encoding": "dynamic_array",
        "label": "struct IBridgeTracking.Request[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(VoteKind)9099": {
        "encoding": "inplace",
        "label": "enum IBridgeTracking.VoteKind",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(VoteKind)9099,t_mapping(t_uint256,t_struct(ReceiptTrackingInfo)23301_storage))": {
        "encoding": "mapping",
        "key": "t_enum(VoteKind)9099",
        "label": "mapping(enum IBridgeTracking.VoteKind => mapping(uint256 => struct BridgeTracking.ReceiptTrackingInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ReceiptTrackingInfo)23301_storage)"
      },
      "t_mapping(t_uint256,t_struct(PeriodVotingMetric)23275_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BridgeTracking.PeriodVotingMetric)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodVotingMetric)23275_storage"
      },
      "t_mapping(t_uint256,t_struct(ReceiptTrackingInfo)23301_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BridgeTracking.ReceiptTrackingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ReceiptTrackingInfo)23301_storage"
      },
      "t_struct(PeriodVotingMetric)23275_storage": {
        "encoding": "inplace",
        "label": "struct BridgeTracking.PeriodVotingMetric",
        "members": [
          {
            "astId": 23265,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "totalRequests",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23267,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "totalBallots",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23271,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "totalBallotsOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 23274,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "voters",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PeriodVotingMetricTimeWrapper)23285_storage": {
        "encoding": "inplace",
        "label": "struct BridgeTracking.PeriodVotingMetricTimeWrapper",
        "members": [
          {
            "astId": 23277,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "lastEpoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23281,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "requests",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Request)9095_storage)dyn_storage"
          },
          {
            "astId": 23284,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(PeriodVotingMetric)23275_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ReceiptTrackingInfo)23301_storage": {
        "encoding": "inplace",
        "label": "struct BridgeTracking.ReceiptTrackingInfo",
        "members": [
          {
            "astId": 23288,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "approvedPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23292,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "voters",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 23297,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "voted",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 23300,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "trackedPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Request)9095_storage": {
        "encoding": "inplace",
        "label": "struct IBridgeTracking.Request",
        "members": [
          {
            "astId": 9092,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteKind)9099"
          },
          {
            "astId": 9094,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}