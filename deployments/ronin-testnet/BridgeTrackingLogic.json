{
  "address": "0xCb47Efa4212d95AE8Fb7942bbEd4AA47083886eA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeBridgeContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerMustBeValidatorContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroCodeContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "BridgeContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ValidatorContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridgeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeOperators",
          "type": "address[]"
        }
      ],
      "name": "getManyTotalBallots",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridgeTracking.VoteKind",
          "name": "_kind",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "handleVoteApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridgeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validatorContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startedAtBlock",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBridgeTracking.VoteKind",
          "name": "_kind",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "recordVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setValidatorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startedAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "totalBallots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalBallots",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bridgeOperator",
          "type": "address"
        }
      ],
      "name": "totalBallotsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "totalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x235ce818ec5ed92c843da1126c2c58c288734a09dce3645c4cea72a48fcbcb80",
  "receipt": {
    "to": null,
    "from": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
    "contractAddress": "0xCb47Efa4212d95AE8Fb7942bbEd4AA47083886eA",
    "transactionIndex": 0,
    "gasUsed": "1106178",
    "logsBloom": "0x
    "blockHash": "0x4ef0be79da38220157d3956be2de0ab9df1d23b5dc74f9cdc3877fecb00d2d94",
    "transactionHash": "0x235ce818ec5ed92c843da1126c2c58c288734a09dce3645c4cea72a48fcbcb80",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16817327,
        "transactionHash": "0x235ce818ec5ed92c843da1126c2c58c288734a09dce3645c4cea72a48fcbcb80",
        "address": "0xCb47Efa4212d95AE8Fb7942bbEd4AA47083886eA",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x4ef0be79da38220157d3956be2de0ab9df1d23b5dc74f9cdc3877fecb00d2d94"
      }
    ],
    "blockNumber": 16817327,
    "cumulativeGasUsed": "1106178",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "2a8db5de0d3bfe0cb40ba15ae8460f16",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeBridgeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeValidatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BridgeContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ValidatorContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"getManyTotalBallots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridgeTracking.VoteKind\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"handleVoteApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startedAtBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBridgeTracking.VoteKind\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"recordVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setValidatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"totalBallots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBallots\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeOperator\",\"type\":\"address\"}],\"name\":\"totalBallotsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallerMustBeBridgeContract()\":[{\"details\":\"Error of method caller must be bridge contract.\"}],\"ErrCallerMustBeValidatorContract()\":[{\"details\":\"Error of method caller must be validator contract.\"}],\"ErrZeroCodeContract()\":[{\"details\":\"Error of set to non-contract.\"}]},\"kind\":\"dev\",\"methods\":{\"bridgeContract()\":{\"details\":\"Returns the bridge contract.\"},\"getManyTotalBallots(uint256,address[])\":{\"details\":\"Returns the total number of ballots of bridge operators at the specific period `_period`.\"},\"handleVoteApproved(uint8,uint256)\":{\"details\":\"Handles the request once it is approved. Requirements: - The method caller is the bridge contract.\"},\"initialize(address,address,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"recordVote(uint8,uint256,address)\":{\"details\":\"Records vote for a receipt and a operator. Requirements: - The method caller is the bridge contract.\"},\"setBridgeContract(address)\":{\"details\":\"Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`.\"},\"setValidatorContract(address)\":{\"details\":\"Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`.\"},\"totalBallots(uint256)\":{\"details\":\"Returns the total number of ballots at the specific period `_period`.\"},\"totalBallotsOf(uint256,address)\":{\"details\":\"Returns the total number of ballots of a bridge operator at the specific period `_period`.\"},\"totalVotes(uint256)\":{\"details\":\"Returns the total number of votes at the specific period `_period`.\"},\"validatorContract()\":{\"details\":\"Returns the validator contract.\"}},\"stateVariables\":{\"_bufferMetric\":{\"details\":\"The temporary info of votes and ballots\"},\"_periodMetric\":{\"details\":\"Mapping from period number => vote stats based on period\"},\"_receiptTrackingInfo\":{\"details\":\"Mapping from vote kind => receipt id => receipt stats\"},\"startedAtBlock\":{\"details\":\"The block that the contract allows incoming mutable calls.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/gateway/BridgeTracking.sol\":\"BridgeTracking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasBridgeContract.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\n\\ncontract HasBridgeContract is IHasBridgeContract, HasProxyAdmin {\\n  IBridge internal _bridgeContract;\\n\\n  modifier onlyBridgeContract() {\\n    if (bridgeContract() != msg.sender) revert ErrCallerMustBeBridgeContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function bridgeContract() public view override returns (address) {\\n    return address(_bridgeContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasBridgeContract\\n   */\\n  function setBridgeContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length <= 0) revert ErrZeroCodeContract();\\n    _setBridgeContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function _setBridgeContract(address _addr) internal {\\n    _bridgeContract = IBridge(_addr);\\n    emit BridgeContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0x6fabd1a69eb4391793a28f0d5449f4662b7e7eaf3d9ca87554ccbc77e2b099f9\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == _getAdmin(), \\\"HasProxyAdmin: unauthorized sender\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x0c2fcf25290180e8cd733691b113464cdde671dc019e6c343e9eb3e16c6ca24a\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\n\\ncontract HasValidatorContract is IHasValidatorContract, HasProxyAdmin {\\n  IRoninValidatorSet internal _validatorContract;\\n\\n  modifier onlyValidatorContract() {\\n    if (validatorContract() != msg.sender) revert ErrCallerMustBeValidatorContract();\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function validatorContract() public view override returns (address) {\\n    return address(_validatorContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasValidatorContract\\n   */\\n  function setValidatorContract(address _addr) external virtual override onlyAdmin {\\n    if (_addr.code.length == 0) revert ErrZeroCodeContract();\\n    _setValidatorContract(_addr);\\n  }\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function _setValidatorContract(address _addr) internal {\\n    _validatorContract = IRoninValidatorSet(_addr);\\n    emit ValidatorContractUpdated(_addr);\\n  }\\n}\\n\",\"keccak256\":\"0xf0a7c4c2165ede118c6ba219ee1a20d293d94049b18aa6fc86a2c48661eb654d\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  /**\\n   * @dev Replaces the old bridge operator list by the new one.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emitted the event `BridgeOperatorsReplaced`.\\n   *\\n   */\\n  function replaceBridgeOperators(address[] calldata) external;\\n\\n  /**\\n   * @dev Returns the bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x614db701e54383b7d0a749bc9b0d2da95d42652cd673499bf71e25096548b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeTracking {\\n  struct Request {\\n    VoteKind kind;\\n    uint256 id;\\n  }\\n\\n  enum VoteKind {\\n    Deposit,\\n    Withdrawal,\\n    MainchainWithdrawal\\n  }\\n\\n  /**\\n   * @dev Returns the total number of votes at the specific period `_period`.\\n   */\\n  function totalVotes(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots at the specific period `_period`.\\n   */\\n  function totalBallots(uint256 _period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total number of ballots of bridge operators at the specific period `_period`.\\n   */\\n  function getManyTotalBallots(uint256 _period, address[] calldata _bridgeOperators)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total number of ballots of a bridge operator at the specific period `_period`.\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) external view returns (uint256);\\n\\n  /**\\n   * @dev Handles the request once it is approved.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external;\\n\\n  /**\\n   * @dev Records vote for a receipt and a operator.\\n   *\\n   * Requirements:\\n   * - The method caller is the bridge contract.\\n   *\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6066ff36c2ad0494a676dfeb4289c3cbe48d0d70266e8ec0930014a41f2a39a3\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasBridgeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasBridgeContract is IHasContract {\\n  /// @dev Emitted when the bridge contract is updated.\\n  event BridgeContractUpdated(address);\\n\\n  /// @dev Error of method caller must be bridge contract.\\n  error ErrCallerMustBeBridgeContract();\\n\\n  /**\\n   * @dev Returns the bridge contract.\\n   */\\n  function bridgeContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the bridge contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `BridgeContractUpdated`.\\n   *\\n   */\\n  function setBridgeContract(address) external;\\n}\\n\",\"keccak256\":\"0xf3ab1830ba7797cb3b8011512af3a5e38a316549f62140b0c10e0b4dcb67f773\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IHasContract {\\n  /// @dev Error of set to non-contract.\\n  error ErrZeroCodeContract();\\n}\\n\",\"keccak256\":\"0x8a17785d841137fcae5b5d542f1714de0492c85b54ca074f0b9c1c490ad3f342\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasValidatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IHasContract.sol\\\";\\n\\ninterface IHasValidatorContract is IHasContract {\\n  /// @dev Emitted when the validator contract is updated.\\n  event ValidatorContractUpdated(address);\\n\\n  /// @dev Error of method caller must be validator contract.\\n  error ErrCallerMustBeValidatorContract();\\n\\n  /**\\n   * @dev Returns the validator contract.\\n   */\\n  function validatorContract() external view returns (address);\\n\\n  /**\\n   * @dev Sets the validator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The new address is a contract.\\n   *\\n   * Emits the event `ValidatorContractUpdated`.\\n   *\\n   */\\n  function setValidatorContract(address) external;\\n}\\n\",\"keccak256\":\"0x35a715f123b0c5dc296d13583f946bef4e485201e122b5170988a7535f114559\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    // Admin of the candidate\\n    address admin;\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    address consensusAddr;\\n    // Address that receives mining reward of the validator\\n    address payable treasuryAddr;\\n    // Address of the bridge operator corresponding to the candidate\\n    address bridgeOperatorAddr;\\n    // The percentage of reward that validators can be received, the rest goes to the delegators.\\n    // Values in range [0; 100_00] stands for 0-100%\\n    uint256 commissionRate;\\n    // The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    // The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    // The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    // The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(\\n    address indexed consensusAddr,\\n    address indexed treasuryAddr,\\n    address indexed admin,\\n    address bridgeOperator\\n  );\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed consensusAddr, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed consensusAddr, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] consensusAddrs);\\n\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed consensusAddr, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed consensusAddr, uint256 rate);\\n\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address _candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address _treasuryAddr);\\n  /// @dev Error of bridge operator already exists.\\n  error ErrExistentBridgeOperator(address _bridgeOperatorAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnwards() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address _admin,\\n    address _consensusAddr,\\n    address payable _treasuryAddr,\\n    address _bridgeOperatorAddr,\\n    uint256 _commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `_secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address, uint256 _secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `_effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address _consensusAddr,\\n    uint256 _effectiveTimestamp,\\n    uint256 _rate\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the validator candidate.\\n   */\\n  function getValidatorCandidates() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(address _candidate) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(address _candidate, address _admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(address _candidate) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xc382bd50ca507308ec23826308bc9ff0a22cfb9b3fcd09c7ac7a63c37729d33e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] consensusAddrs);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed coinbaseAddr,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed coinbaseAddr, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed consensusAddr, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed consensusAddr,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] consensusAddrs, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] consensusAddrs,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n  /// @dev Emitted when the bridge tracking contract's response is incorrect\\n  event BridgeTrackingIncorrectlyResponded();\\n\\n  /// @dev Error of method caller must be coinbase\\n  error ErrCallerMustBeCoinbase();\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x42ed0bff5f8233dc6de28bd3283f98a0c16df6abc26655fc777bdc07a83ff3f5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed consensusAddr, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed consensusAddr,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address _consensusAddr, address payable _recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execEmergencyExit(address _consensusAddr, uint256 _secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x45161abd1e3db83052a06889a0e3a7a5e7ee3306478601d58ac4ed32ccaa75ad\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0x813f34747aea4dfb53bbc147abf8dbe5999ce73111c2db99bcb3efb4cf75bb3d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed consensusAddr,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed validator, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(\\n    address _validatorAddr,\\n    uint256 _newJailedUntil,\\n    uint256 _slashAmount,\\n    bool _cannotBailout\\n  ) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address _validatorAddr, uint256 _period) external;\\n}\\n\",\"keccak256\":\"0x80362c42fdc0ee06543a2abbffee961fe51c15a7c5e18933a9c34897e50d07fe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfo.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfo {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(address _consensusAddr) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xc00b1bda0c6076c9aa0631dc0c01e849d8f42cc616fe4c036f73cda0a9afe9ef\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(address) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(address _addr)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(address _addr, uint256 _blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(address _addr, uint256 _blockNum)\\n    external\\n    view\\n    returns (\\n      bool isJailed_,\\n      uint256 blockLeft_,\\n      uint256 epochLeft_\\n    );\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(address[] calldata) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(address _blockProducer) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(address _blockProducer, uint256 _period) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the latest wrapped up period.\\n   */\\n  function checkBridgeRewardDeprecatedAtLatestPeriod(address _consensusAddr) external view returns (bool _result);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the validator with `_consensusAddr` is deprecated in the  `_period`.\\n   */\\n  function checkBridgeRewardDeprecatedAtPeriod(address _consensusAddr, uint256 _period)\\n    external\\n    view\\n    returns (bool _result);\\n}\\n\",\"keccak256\":\"0x19b85ce95caf9deb4aff9614d1ca2d89712b89e8609dc6ab772e989164a51139\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\n\\ninterface IValidatorInfo {\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /// @dev Error of number of prioritized greater than number of max validators.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators()\\n    external\\n    view\\n    returns (\\n      address[] memory _validatorList,\\n      address[] memory _bridgeOperators,\\n      EnumFlags.ValidatorFlag[] memory _flags\\n    );\\n\\n  /**\\n   * @dev Returns whether the address is either a bridge operator or a block producer.\\n   */\\n  function isValidator(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(address _addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducers() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current bridge operator list.\\n   */\\n  function getBridgeOperators() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the bridge operator list corresponding to validator address list.\\n   */\\n  function getBridgeOperatorsOf(address[] memory _validatorAddrs) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether the address is bridge operator.\\n   */\\n  function isBridgeOperator(address _addr) external view returns (bool isOperator);\\n\\n  /**\\n   * @dev Returns whether the consensus address is operating the bridge or not.\\n   */\\n  function isOperatingBridge(address _consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the bridge operators.\\n   */\\n  function totalBridgeOperators() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0x86189a2fee2e5dccba27728db15e1bd19f647cdb97c02b52d9ab07c5d98a2a75\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    BridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa6c77f9d704c57854a30e57e16467a1b70b76be5331d9e53a3f9ec5e57542533\",\"license\":\"UNLICENSED\"},\"contracts/ronin/gateway/BridgeTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../extensions/collections/HasBridgeContract.sol\\\";\\nimport \\\"../../extensions/collections/HasValidatorContract.sol\\\";\\nimport \\\"../../interfaces/IBridgeTracking.sol\\\";\\n\\ncontract BridgeTracking is HasBridgeContract, HasValidatorContract, Initializable, IBridgeTracking {\\n  struct PeriodVotingMetric {\\n    /// @dev Total requests that are tracked in the period. This value is 0 until the {_bufferMetric.requests[]} gets added into a period metric.\\n    uint256 totalRequests;\\n    uint256 totalBallots;\\n    mapping(address => uint256) totalBallotsOf;\\n    address[] voters;\\n  }\\n\\n  struct PeriodVotingMetricTimeWrapper {\\n    uint256 lastEpoch;\\n    Request[] requests;\\n    PeriodVotingMetric data;\\n  }\\n\\n  struct ReceiptTrackingInfo {\\n    /// @dev The period that the receipt is approved. Value 0 means the receipt is not approved yet.\\n    uint256 approvedPeriod;\\n    /// @dev The address list of voters\\n    address[] voters;\\n    /// @dev Mapping from voter => flag indicating the voter casts vote for this receipt\\n    mapping(address => bool) voted;\\n    /// @dev The period that the receipt is tracked, i.e. the metric is transferred from buffer to the period. Value 0 means the receipt is currently in buffer or not tracked yet.\\n    uint256 trackedPeriod;\\n  }\\n\\n  /// @dev The block that the contract allows incoming mutable calls.\\n  uint256 public startedAtBlock;\\n\\n  /// @dev The temporary info of votes and ballots\\n  PeriodVotingMetricTimeWrapper internal _bufferMetric;\\n  /// @dev Mapping from period number => vote stats based on period\\n  mapping(uint256 => PeriodVotingMetric) internal _periodMetric;\\n  /// @dev Mapping from vote kind => receipt id => receipt stats\\n  mapping(VoteKind => mapping(uint256 => ReceiptTrackingInfo)) internal _receiptTrackingInfo;\\n\\n  modifier skipOnUnstarted() {\\n    if (block.number < startedAtBlock) {\\n      return;\\n    }\\n    _;\\n  }\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address _bridgeContract,\\n    address _validatorContract,\\n    uint256 _startedAtBlock\\n  ) external initializer {\\n    _setBridgeContract(_bridgeContract);\\n    _setValidatorContract(_validatorContract);\\n    startedAtBlock = _startedAtBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalVotes(uint256 _period) external view override returns (uint256 _totalVotes) {\\n    _totalVotes = _periodMetric[_period].totalRequests;\\n    if (_isBufferCountedForPeriod(_period)) {\\n      _totalVotes += _bufferMetric.requests.length;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalBallots(uint256 _period) external view override returns (uint256 _totalBallots) {\\n    _totalBallots = _periodMetric[_period].totalBallots;\\n    if (_isBufferCountedForPeriod(_period)) {\\n      _totalBallots += _bufferMetric.data.totalBallots;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function getManyTotalBallots(uint256 _period, address[] calldata _bridgeOperators)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory _res)\\n  {\\n    _res = new uint256[](_bridgeOperators.length);\\n    bool _isBufferCounted = _isBufferCountedForPeriod(_period);\\n    for (uint _i = 0; _i < _bridgeOperators.length; _i++) {\\n      _res[_i] = _totalBallotsOf(_period, _bridgeOperators[_i], _isBufferCounted);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function totalBallotsOf(uint256 _period, address _bridgeOperator) public view override returns (uint256) {\\n    return _totalBallotsOf(_period, _bridgeOperator, _isBufferCountedForPeriod(_period));\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function handleVoteApproved(VoteKind _kind, uint256 _requestId) external override onlyBridgeContract skipOnUnstarted {\\n    ReceiptTrackingInfo storage _receiptInfo = _receiptTrackingInfo[_kind][_requestId];\\n\\n    // Only records for the receipt which not approved\\n    if (_receiptInfo.approvedPeriod == 0) {\\n      _trySyncBuffer();\\n      uint256 _currentPeriod = _validatorContract.currentPeriod();\\n      _receiptInfo.approvedPeriod = _currentPeriod;\\n\\n      Request storage _bufferRequest = _bufferMetric.requests.push();\\n      _bufferRequest.kind = _kind;\\n      _bufferRequest.id = _requestId;\\n\\n      address[] storage _voters = _receiptInfo.voters;\\n      for (uint _i = 0; _i < _voters.length; _i++) {\\n        _increaseBallot(_kind, _requestId, _voters[_i], _currentPeriod);\\n      }\\n\\n      delete _receiptInfo.voters;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IBridgeTracking\\n   */\\n  function recordVote(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator\\n  ) external override onlyBridgeContract skipOnUnstarted {\\n    uint256 _period = _validatorContract.currentPeriod();\\n    _trySyncBuffer();\\n    ReceiptTrackingInfo storage _receiptInfo = _receiptTrackingInfo[_kind][_requestId];\\n\\n    // When the vote is not approved yet, the voters are saved in the receipt info, and not increase ballot metric.\\n    // The ballot metric will be increased later in the {handleVoteApproved} method.\\n    if (_receiptInfo.approvedPeriod == 0) {\\n      _receiptInfo.voters.push(_operator);\\n      return;\\n    }\\n\\n    _increaseBallot(_kind, _requestId, _operator, _period);\\n  }\\n\\n  /**\\n   * @dev Increases the ballot for the operator at a period.\\n   */\\n  function _increaseBallot(\\n    VoteKind _kind,\\n    uint256 _requestId,\\n    address _operator,\\n    uint256 _currentPeriod\\n  ) internal {\\n    ReceiptTrackingInfo storage _receiptInfo = _receiptTrackingInfo[_kind][_requestId];\\n    if (_receiptInfo.voted[_operator]) {\\n      return;\\n    }\\n\\n    _receiptInfo.voted[_operator] = true;\\n\\n    uint256 _trackedPeriod = _receiptInfo.trackedPeriod;\\n\\n    // Do not increase ballot for receipt that is neither in the buffer, nor in the most current tracked period.\\n    // If the receipt is not tracked in a period, increase metric in buffer.\\n    if (_trackedPeriod == 0) {\\n      if (_bufferMetric.data.totalBallotsOf[_operator] == 0) {\\n        _bufferMetric.data.voters.push(_operator);\\n      }\\n      _bufferMetric.data.totalBallots++;\\n      _bufferMetric.data.totalBallotsOf[_operator]++;\\n    }\\n    // If the receipt is tracked in the most current tracked period, increase metric in the period.\\n    else if (_trackedPeriod == _currentPeriod) {\\n      PeriodVotingMetric storage _metric = _periodMetric[_trackedPeriod];\\n      _metric.totalBallots++;\\n      _metric.totalBallotsOf[_operator]++;\\n    }\\n  }\\n\\n  /**\\n   * @dev See `totalBallotsOf`.\\n   */\\n  function _totalBallotsOf(\\n    uint256 _period,\\n    address _bridgeOperator,\\n    bool _mustCountLastStats\\n  ) internal view returns (uint256 _totalBallots) {\\n    _totalBallots = _periodMetric[_period].totalBallotsOf[_bridgeOperator];\\n    if (_mustCountLastStats) {\\n      _totalBallots += _bufferMetric.data.totalBallotsOf[_bridgeOperator];\\n    }\\n  }\\n\\n  /**\\n   * @dev Syncs period stats. Move all data from the buffer metric to the period metric.\\n   *\\n   * Requirements:\\n   * - The epoch after the buffer epoch is wrapped up.\\n   */\\n  function _trySyncBuffer() internal {\\n    uint256 _currentEpoch = _validatorContract.epochOf(block.number);\\n    if (_bufferMetric.lastEpoch < _currentEpoch) {\\n      (, uint256 _trackedPeriod) = _validatorContract.tryGetPeriodOfEpoch(_bufferMetric.lastEpoch + 1);\\n      _bufferMetric.lastEpoch = _currentEpoch;\\n\\n      // Copy numbers of totals\\n      PeriodVotingMetric storage _metric = _periodMetric[_trackedPeriod];\\n      _metric.totalRequests += _bufferMetric.requests.length;\\n      _metric.totalBallots += _bufferMetric.data.totalBallots;\\n\\n      // Copy voters info and voters' ballot\\n      for (uint _i = 0; _i < _bufferMetric.data.voters.length; _i++) {\\n        address _voter = _bufferMetric.data.voters[_i];\\n        _metric.totalBallotsOf[_voter] += _bufferMetric.data.totalBallotsOf[_voter];\\n        delete _bufferMetric.data.totalBallotsOf[_voter]; // need to manually delete each element, due to mapping\\n      }\\n\\n      // Mark all receipts in the buffer as tracked. Keep total number of receipts and delete receipt details.\\n      for (uint _i = 0; _i < _bufferMetric.requests.length; _i++) {\\n        Request storage _bufferRequest = _bufferMetric.requests[_i];\\n        ReceiptTrackingInfo storage _receiptInfo = _receiptTrackingInfo[_bufferRequest.kind][_bufferRequest.id];\\n        _receiptInfo.trackedPeriod = _trackedPeriod;\\n      }\\n\\n      delete _bufferMetric.requests;\\n      delete _bufferMetric.data;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the buffer stats must be counted or not.\\n   */\\n  function _isBufferCountedForPeriod(uint256 _queriedPeriod) internal view returns (bool) {\\n    uint256 _currentEpoch = _validatorContract.epochOf(block.number);\\n    (bool _filled, uint256 _periodOfNextTemporaryEpoch) = _validatorContract.tryGetPeriodOfEpoch(\\n      _bufferMetric.lastEpoch + 1\\n    );\\n    return _filled && _queriedPeriod == _periodOfNextTemporaryEpoch && _bufferMetric.lastEpoch < _currentEpoch;\\n  }\\n}\\n\",\"keccak256\":\"0xc739580bbdc7a2adc1bb9e3c952c0b858fd25a7d92be1d774f57c76183de5581\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100eb565b600154600160a81b900460ff161561008c5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60015460ff600160a01b909104811610156100e9576001805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611290806100fa6000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c806304375dcf146100a95780630b26cf66146100cf5780631794bb3c146100e457806319e6e158146100f7578063229f88ea1461010a578063889998ef1461011d5780639943908914610130578063c7c4fea91461014a578063cd5965831461015d578063cdf64a7614610165578063f67e815214610178578063f84bd12114610198575b600080fd5b6100bc6100b7366004610f61565b6101a1565b6040519081526020015b60405180910390f35b6100e26100dd366004610f8d565b6101bf565b005b6100e26100f2366004610fa8565b610237565b6100bc610105366004610fe4565b610371565b6100e261011836600461100c565b6103a3565b6100bc61012b366004610fe4565b61057c565b6001546001600160a01b03165b6040516100c69190611036565b6100e261015836600461104a565b6105a9565b61013d6106f7565b6100e2610173366004610f8d565b610706565b61018b610186366004611086565b610772565b6040516100c69190611104565b6100bc60025481565b60006101b683836101b186610839565b610958565b90505b92915050565b6101c76109b1565b6001600160a01b0316336001600160a01b0316146102005760405162461bcd60e51b81526004016101f790611148565b60405180910390fd5b6000816001600160a01b03163b1161022b57604051637bcd509160e01b815260040160405180910390fd5b610234816109df565b50565b600154600160a81b900460ff161580801561025d575060018054600160a01b900460ff16105b8061027d5750303b15801561027d575060018054600160a01b900460ff16145b6102e05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101f7565b6001805460ff60a01b1916600160a01b179055801561030d576001805460ff60a81b1916600160a81b1790555b610316846109df565b61031f83610a35565b6002829055801561036b576001805460ff60a81b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60008181526009602052604090205461038982610839565b1561039e5760045461039b90826111a0565b90505b919050565b336103ac6106f7565b6001600160a01b0316146103d357604051631812f26f60e11b815260040160405180910390fd5b6002544310610578576000600a60008460028111156103f4576103f46111b3565b6002811115610405576104056111b3565b81526020019081526020016000206000838152602001908152602001600020905080600001546000036105765761043a610a80565b6001546040805162c080c360e31b815290516000926001600160a01b03169163060406189160048083019260209291908290030181865afa158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a791906111c9565b808355600480546001818101835560009290925260029081027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054939450928792849260ff19909216918490811115610504576105046111b3565b02179055506001808201859055830160005b8154811015610563576105518787848481548110610536576105366111e2565b6000918252602090912001546001600160a01b031687610d27565b8061055b816111f8565b915050610516565b50610572600185016000610ed2565b5050505b505b5050565b60008181526009602052604090206001015461059782610839565b1561039e5760065461039b90826111a0565b336105b26106f7565b6001600160a01b0316146105d957604051631812f26f60e11b815260040160405180910390fd5b6002544310610576576001546040805162c080c360e31b815290516000926001600160a01b03169163060406189160048083019260209291908290030181865afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f91906111c9565b9050610659610a80565b6000600a6000866002811115610671576106716111b3565b6002811115610682576106826111b3565b81526020019081526020016000206000858152602001908152602001600020905080600001546000036106e4576001908101805491820181556000908152602090200180546001600160a01b0319166001600160a01b03841617905550610576565b6106f085858585610d27565b5050505050565b6000546001600160a01b031690565b61070e6109b1565b6001600160a01b0316336001600160a01b03161461073e5760405162461bcd60e51b81526004016101f790611148565b806001600160a01b03163b60000361076957604051637bcd509160e01b815260040160405180910390fd5b61023481610a35565b6060816001600160401b0381111561078c5761078c611211565b6040519080825280602002602001820160405280156107b5578160200160208202803683370190505b50905060006107c385610839565b905060005b8381101561083057610801868686848181106107e6576107e66111e2565b90506020020160208101906107fb9190610f8d565b84610958565b838281518110610813576108136111e2565b602090810291909101015280610828816111f8565b9150506107c8565b50509392505050565b60015460405163a3d545f560e01b815243600482015260009182916001600160a01b039091169063a3d545f590602401602060405180830381865afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa91906111c9565b6001805460035492935060009283926001600160a01b039092169163468c96ae916108d4916111a0565b6040518263ffffffff1660e01b81526004016108f291815260200190565b6040805180830381865afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190611227565b9150915081801561094257508085145b801561094f575060035483115b95945050505050565b60008381526009602090815260408083206001600160a01b038616845260020190915290205481156109aa576001600160a01b0383166000908152600760205260409020546109a790826111a0565b90505b9392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b600080546001600160a01b0319166001600160a01b0383161790556040517f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae04890610a2a908390611036565b60405180910390a150565b600180546001600160a01b0319166001600160a01b0383161790556040517fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b683616990610a2a908390611036565b60015460405163a3d545f560e01b81524360048201526000916001600160a01b03169063a3d545f590602401602060405180830381865afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906111c9565b905080600360000154101561023457600180546003546000926001600160a01b039092169163468c96ae91610b21916111a0565b6040518263ffffffff1660e01b8152600401610b3f91815260200190565b6040805180830381865afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190611227565b60038490556000818152600960205260408120600454815493955090935091839190610bac9084906111a0565b9091555050600654600182018054600090610bc89084906111a0565b90915550600090505b600854811015610c6257600880546000919083908110610bf357610bf36111e2565b60009182526020808320909101546001600160a01b0316808352600782526040808420546002880190935283208054919450919290610c339084906111a0565b90915550506001600160a01b031660009081526007602052604081205580610c5a816111f8565b915050610bd1565b5060005b600454811015610d0257600060036001018281548110610c8857610c886111e2565b6000918252602082206002918202018054909350600a91839160ff1690811115610cb457610cb46111b3565b6002811115610cc557610cc56111b3565b8152602080820192909252604090810160009081206001909501548152939091529091206003018490555080610cfa816111f8565b915050610c66565b50610d0f60046000610ef0565b600060058181556006829055906106f0600882610ed2565b6000600a6000866002811115610d3f57610d3f6111b3565b6002811115610d5057610d506111b3565b81526020808201929092526040908101600090812087825283528181206001600160a01b038716825260028101909352205490915060ff1615610d93575061036b565b6001600160a01b03831660009081526002820160205260408120805460ff19166001179055600382015490819003610e73576001600160a01b0384166000908152600760205260408120549003610e3057600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0386161790555b60068054906000610e40836111f8565b90915550506001600160a01b0384166000908152600760205260408120805491610e69836111f8565b9190505550610572565b8281036105725760008181526009602052604081206001810180549192610e99836111f8565b90915550506001600160a01b03851660009081526002820160205260408120805491610ec4836111f8565b919050555050505050505050565b50805460008255906000526020600020908101906102349190610f11565b50805460008255600202906000526020600020908101906102349190610f2a565b5b80821115610f265760008155600101610f12565b5090565b5b80821115610f2657805460ff1916815560006001820155600201610f2b565b80356001600160a01b038116811461039e57600080fd5b60008060408385031215610f7457600080fd5b82359150610f8460208401610f4a565b90509250929050565b600060208284031215610f9f57600080fd5b6101b682610f4a565b600080600060608486031215610fbd57600080fd5b610fc684610f4a565b9250610fd460208501610f4a565b9150604084013590509250925092565b600060208284031215610ff657600080fd5b5035919050565b80356003811061039e57600080fd5b6000806040838503121561101f57600080fd5b61102883610ffd565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561105f57600080fd5b61106884610ffd565b92506020840135915061107d60408501610f4a565b90509250925092565b60008060006040848603121561109b57600080fd5b8335925060208401356001600160401b03808211156110b957600080fd5b818601915086601f8301126110cd57600080fd5b8135818111156110dc57600080fd5b8760208260051b85010111156110f157600080fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561113c57835183529284019291840191600101611120565b50909695505050505050565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156101b9576101b961118a565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156111db57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161120a5761120a61118a565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561123a57600080fd5b8251801515811461124a57600080fd5b602093909301519294929350505056fea264697066735822122022921d73a729b636012f19e59da68f098ee3e90169fe2832ab2bf0d9444f1df364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a45760003560e01c806304375dcf146100a95780630b26cf66146100cf5780631794bb3c146100e457806319e6e158146100f7578063229f88ea1461010a578063889998ef1461011d5780639943908914610130578063c7c4fea91461014a578063cd5965831461015d578063cdf64a7614610165578063f67e815214610178578063f84bd12114610198575b600080fd5b6100bc6100b7366004610f61565b6101a1565b6040519081526020015b60405180910390f35b6100e26100dd366004610f8d565b6101bf565b005b6100e26100f2366004610fa8565b610237565b6100bc610105366004610fe4565b610371565b6100e261011836600461100c565b6103a3565b6100bc61012b366004610fe4565b61057c565b6001546001600160a01b03165b6040516100c69190611036565b6100e261015836600461104a565b6105a9565b61013d6106f7565b6100e2610173366004610f8d565b610706565b61018b610186366004611086565b610772565b6040516100c69190611104565b6100bc60025481565b60006101b683836101b186610839565b610958565b90505b92915050565b6101c76109b1565b6001600160a01b0316336001600160a01b0316146102005760405162461bcd60e51b81526004016101f790611148565b60405180910390fd5b6000816001600160a01b03163b1161022b57604051637bcd509160e01b815260040160405180910390fd5b610234816109df565b50565b600154600160a81b900460ff161580801561025d575060018054600160a01b900460ff16105b8061027d5750303b15801561027d575060018054600160a01b900460ff16145b6102e05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101f7565b6001805460ff60a01b1916600160a01b179055801561030d576001805460ff60a81b1916600160a81b1790555b610316846109df565b61031f83610a35565b6002829055801561036b576001805460ff60a81b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60008181526009602052604090205461038982610839565b1561039e5760045461039b90826111a0565b90505b919050565b336103ac6106f7565b6001600160a01b0316146103d357604051631812f26f60e11b815260040160405180910390fd5b6002544310610578576000600a60008460028111156103f4576103f46111b3565b6002811115610405576104056111b3565b81526020019081526020016000206000838152602001908152602001600020905080600001546000036105765761043a610a80565b6001546040805162c080c360e31b815290516000926001600160a01b03169163060406189160048083019260209291908290030181865afa158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a791906111c9565b808355600480546001818101835560009290925260029081027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054939450928792849260ff19909216918490811115610504576105046111b3565b02179055506001808201859055830160005b8154811015610563576105518787848481548110610536576105366111e2565b6000918252602090912001546001600160a01b031687610d27565b8061055b816111f8565b915050610516565b50610572600185016000610ed2565b5050505b505b5050565b60008181526009602052604090206001015461059782610839565b1561039e5760065461039b90826111a0565b336105b26106f7565b6001600160a01b0316146105d957604051631812f26f60e11b815260040160405180910390fd5b6002544310610576576001546040805162c080c360e31b815290516000926001600160a01b03169163060406189160048083019260209291908290030181865afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f91906111c9565b9050610659610a80565b6000600a6000866002811115610671576106716111b3565b6002811115610682576106826111b3565b81526020019081526020016000206000858152602001908152602001600020905080600001546000036106e4576001908101805491820181556000908152602090200180546001600160a01b0319166001600160a01b03841617905550610576565b6106f085858585610d27565b5050505050565b6000546001600160a01b031690565b61070e6109b1565b6001600160a01b0316336001600160a01b03161461073e5760405162461bcd60e51b81526004016101f790611148565b806001600160a01b03163b60000361076957604051637bcd509160e01b815260040160405180910390fd5b61023481610a35565b6060816001600160401b0381111561078c5761078c611211565b6040519080825280602002602001820160405280156107b5578160200160208202803683370190505b50905060006107c385610839565b905060005b8381101561083057610801868686848181106107e6576107e66111e2565b90506020020160208101906107fb9190610f8d565b84610958565b838281518110610813576108136111e2565b602090810291909101015280610828816111f8565b9150506107c8565b50509392505050565b60015460405163a3d545f560e01b815243600482015260009182916001600160a01b039091169063a3d545f590602401602060405180830381865afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa91906111c9565b6001805460035492935060009283926001600160a01b039092169163468c96ae916108d4916111a0565b6040518263ffffffff1660e01b81526004016108f291815260200190565b6040805180830381865afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190611227565b9150915081801561094257508085145b801561094f575060035483115b95945050505050565b60008381526009602090815260408083206001600160a01b038616845260020190915290205481156109aa576001600160a01b0383166000908152600760205260409020546109a790826111a0565b90505b9392505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b600080546001600160a01b0319166001600160a01b0383161790556040517f5cbd8a0bb00196365d5eb3457c6734e7f06666c3c78e5469b4c9deec7edae04890610a2a908390611036565b60405180910390a150565b600180546001600160a01b0319166001600160a01b0383161790556040517fef40dc07567635f84f5edbd2f8dbc16b40d9d282dd8e7e6f4ff58236b683616990610a2a908390611036565b60015460405163a3d545f560e01b81524360048201526000916001600160a01b03169063a3d545f590602401602060405180830381865afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906111c9565b905080600360000154101561023457600180546003546000926001600160a01b039092169163468c96ae91610b21916111a0565b6040518263ffffffff1660e01b8152600401610b3f91815260200190565b6040805180830381865afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190611227565b60038490556000818152600960205260408120600454815493955090935091839190610bac9084906111a0565b9091555050600654600182018054600090610bc89084906111a0565b90915550600090505b600854811015610c6257600880546000919083908110610bf357610bf36111e2565b60009182526020808320909101546001600160a01b0316808352600782526040808420546002880190935283208054919450919290610c339084906111a0565b90915550506001600160a01b031660009081526007602052604081205580610c5a816111f8565b915050610bd1565b5060005b600454811015610d0257600060036001018281548110610c8857610c886111e2565b6000918252602082206002918202018054909350600a91839160ff1690811115610cb457610cb46111b3565b6002811115610cc557610cc56111b3565b8152602080820192909252604090810160009081206001909501548152939091529091206003018490555080610cfa816111f8565b915050610c66565b50610d0f60046000610ef0565b600060058181556006829055906106f0600882610ed2565b6000600a6000866002811115610d3f57610d3f6111b3565b6002811115610d5057610d506111b3565b81526020808201929092526040908101600090812087825283528181206001600160a01b038716825260028101909352205490915060ff1615610d93575061036b565b6001600160a01b03831660009081526002820160205260408120805460ff19166001179055600382015490819003610e73576001600160a01b0384166000908152600760205260408120549003610e3057600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0386161790555b60068054906000610e40836111f8565b90915550506001600160a01b0384166000908152600760205260408120805491610e69836111f8565b9190505550610572565b8281036105725760008181526009602052604081206001810180549192610e99836111f8565b90915550506001600160a01b03851660009081526002820160205260408120805491610ec4836111f8565b919050555050505050505050565b50805460008255906000526020600020908101906102349190610f11565b50805460008255600202906000526020600020908101906102349190610f2a565b5b80821115610f265760008155600101610f12565b5090565b5b80821115610f2657805460ff1916815560006001820155600201610f2b565b80356001600160a01b038116811461039e57600080fd5b60008060408385031215610f7457600080fd5b82359150610f8460208401610f4a565b90509250929050565b600060208284031215610f9f57600080fd5b6101b682610f4a565b600080600060608486031215610fbd57600080fd5b610fc684610f4a565b9250610fd460208501610f4a565b9150604084013590509250925092565b600060208284031215610ff657600080fd5b5035919050565b80356003811061039e57600080fd5b6000806040838503121561101f57600080fd5b61102883610ffd565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561105f57600080fd5b61106884610ffd565b92506020840135915061107d60408501610f4a565b90509250925092565b60008060006040848603121561109b57600080fd5b8335925060208401356001600160401b03808211156110b957600080fd5b818601915086601f8301126110cd57600080fd5b8135818111156110dc57600080fd5b8760208260051b85010111156110f157600080fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561113c57835183529284019291840191600101611120565b50909695505050505050565b60208082526022908201527f48617350726f787941646d696e3a20756e617574686f72697a65642073656e6460408201526132b960f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156101b9576101b961118a565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156111db57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161120a5761120a61118a565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561123a57600080fd5b8251801515811461124a57600080fd5b602093909301519294929350505056fea264697066735822122022921d73a729b636012f19e59da68f098ee3e90169fe2832ab2bf0d9444f1df364736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ErrCallerMustBeBridgeContract()": [
        {
          "details": "Error of method caller must be bridge contract."
        }
      ],
      "ErrCallerMustBeValidatorContract()": [
        {
          "details": "Error of method caller must be validator contract."
        }
      ],
      "ErrZeroCodeContract()": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bridgeContract()": {
        "details": "Returns the bridge contract."
      },
      "getManyTotalBallots(uint256,address[])": {
        "details": "Returns the total number of ballots of bridge operators at the specific period `_period`."
      },
      "handleVoteApproved(uint8,uint256)": {
        "details": "Handles the request once it is approved. Requirements: - The method caller is the bridge contract."
      },
      "initialize(address,address,uint256)": {
        "details": "Initializes the contract storage."
      },
      "recordVote(uint8,uint256,address)": {
        "details": "Records vote for a receipt and a operator. Requirements: - The method caller is the bridge contract."
      },
      "setBridgeContract(address)": {
        "details": "Sets the bridge contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `BridgeContractUpdated`."
      },
      "setValidatorContract(address)": {
        "details": "Sets the validator contract. Requirements: - The method caller is admin. - The new address is a contract. Emits the event `ValidatorContractUpdated`."
      },
      "totalBallots(uint256)": {
        "details": "Returns the total number of ballots at the specific period `_period`."
      },
      "totalBallotsOf(uint256,address)": {
        "details": "Returns the total number of ballots of a bridge operator at the specific period `_period`."
      },
      "totalVotes(uint256)": {
        "details": "Returns the total number of votes at the specific period `_period`."
      },
      "validatorContract()": {
        "details": "Returns the validator contract."
      }
    },
    "stateVariables": {
      "_bufferMetric": {
        "details": "The temporary info of votes and ballots"
      },
      "_periodMetric": {
        "details": "Mapping from period number => vote stats based on period"
      },
      "_receiptTrackingInfo": {
        "details": "Mapping from vote kind => receipt id => receipt stats"
      },
      "startedAtBlock": {
        "details": "The block that the contract allows incoming mutable calls."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6386,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_bridgeContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBridge)9212"
      },
      {
        "astId": 7051,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_validatorContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRoninValidatorSet)11973"
      },
      {
        "astId": 1373,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 1376,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_initializing",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 23106,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "startedAtBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23110,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_bufferMetric",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PeriodVotingMetricTimeWrapper)23087_storage"
      },
      {
        "astId": 23116,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_periodMetric",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(PeriodVotingMetric)23077_storage)"
      },
      {
        "astId": 23125,
        "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
        "label": "_receiptTrackingInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_enum(VoteKind)9224,t_mapping(t_uint256,t_struct(ReceiptTrackingInfo)23103_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Request)9220_storage)dyn_storage": {
        "base": "t_struct(Request)9220_storage",
        "encoding": "dynamic_array",
        "label": "struct IBridgeTracking.Request[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBridge)9212": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IRoninValidatorSet)11973": {
        "encoding": "inplace",
        "label": "contract IRoninValidatorSet",
        "numberOfBytes": "20"
      },
      "t_enum(VoteKind)9224": {
        "encoding": "inplace",
        "label": "enum IBridgeTracking.VoteKind",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(VoteKind)9224,t_mapping(t_uint256,t_struct(ReceiptTrackingInfo)23103_storage))": {
        "encoding": "mapping",
        "key": "t_enum(VoteKind)9224",
        "label": "mapping(enum IBridgeTracking.VoteKind => mapping(uint256 => struct BridgeTracking.ReceiptTrackingInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ReceiptTrackingInfo)23103_storage)"
      },
      "t_mapping(t_uint256,t_struct(PeriodVotingMetric)23077_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BridgeTracking.PeriodVotingMetric)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodVotingMetric)23077_storage"
      },
      "t_mapping(t_uint256,t_struct(ReceiptTrackingInfo)23103_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BridgeTracking.ReceiptTrackingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ReceiptTrackingInfo)23103_storage"
      },
      "t_struct(PeriodVotingMetric)23077_storage": {
        "encoding": "inplace",
        "label": "struct BridgeTracking.PeriodVotingMetric",
        "members": [
          {
            "astId": 23067,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "totalRequests",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23069,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "totalBallots",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23073,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "totalBallotsOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 23076,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "voters",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PeriodVotingMetricTimeWrapper)23087_storage": {
        "encoding": "inplace",
        "label": "struct BridgeTracking.PeriodVotingMetricTimeWrapper",
        "members": [
          {
            "astId": 23079,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "lastEpoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23083,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "requests",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Request)9220_storage)dyn_storage"
          },
          {
            "astId": 23086,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(PeriodVotingMetric)23077_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ReceiptTrackingInfo)23103_storage": {
        "encoding": "inplace",
        "label": "struct BridgeTracking.ReceiptTrackingInfo",
        "members": [
          {
            "astId": 23090,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "approvedPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23094,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "voters",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 23099,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "voted",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 23102,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "trackedPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Request)9220_storage": {
        "encoding": "inplace",
        "label": "struct IBridgeTracking.Request",
        "members": [
          {
            "astId": 9217,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteKind)9224"
          },
          {
            "astId": 9219,
            "contract": "contracts/ronin/gateway/BridgeTracking.sol:BridgeTracking",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}